<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SimpleLifee</title>
  <subtitle>code, mylife</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nijun.me/"/>
  <updated>2017-05-11T01:17:55.000Z</updated>
  <id>http://nijun.me/</id>
  
  <author>
    <name>Nimon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>maven</title>
    <link href="http://nijun.me/2017/05/10/00001-2017-05-10-maven/"/>
    <id>http://nijun.me/2017/05/10/00001-2017-05-10-maven/</id>
    <published>2017-05-10T12:37:08.000Z</published>
    <updated>2017-05-11T01:17:55.000Z</updated>
    
    <content type="html"><![CDATA[ <div align="center"><br>  想学习Maven吗？<br><br></div>

<a id="more"></a>
<h1 id="常用的构建命令"><a href="#常用的构建命令" class="headerlink" title="常用的构建命令"></a>常用的构建命令</h1><p>mvn </p>
<ul>
<li>v 查看版本</li>
</ul>
<ul>
<li>compile 编译</li>
</ul>
<ul>
<li>test 测试</li>
</ul>
<ul>
<li>package  打包<ul>
<li>会依次执行  clean 、</li>
</ul>
</li>
<li>clean 删除target文件夹</li>
<li>Install 安装jar包到本地仓库中</li>
</ul>
<h1 id="自动创建目录骨架"><a href="#自动创建目录骨架" class="headerlink" title="自动创建目录骨架"></a>自动创建目录骨架</h1><p>创建目录的两种方式：</p>
<ol>
<li>mvn archetype:generate 按照提示进行选择</li>
</ol>
<ol>
<li><p>mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名</p>
<p>​                        -DartifactId=项目名-模块名</p>
<p>​                        -Dversion=版本号</p>
<p>​                        -Dpackage=代码所在的包名</p>
</li>
</ol>
<p>src/main/java:存放java源文件</p>
<p>src/main/resources:存放项目配置文件，如spring.xml,hibernate.cfg.xml。。。</p>
<p>src/test/java:存放test的java文件</p>
<p>src/test/resources:存放test时候所需的配置文件</p>
<h1 id="maven中的坐标和仓库"><a href="#maven中的坐标和仓库" class="headerlink" title="maven中的坐标和仓库"></a>maven中的坐标和仓库</h1><h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><p>在<code>&lt;dependency&gt;</code>中的就是坐标</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nimon.maven01<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven01-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>项目的包名，建议和groupId和artifactId相吻合，这样看起来，就更加清晰，符合逻辑，也更方便搜索。</p>
</blockquote>
<h2 id="构件"><a href="#构件" class="headerlink" title="构件"></a>构件</h2><p>在maven世界中，任何一个依赖、插件、项目构建的输出，都可以被称作为<strong>构件</strong>。</p>
<p><strong>构件</strong>通过坐标作为其唯一的标识，就好像我们的工作单位和家庭地址。</p>
<blockquote>
<p>收宝贝的时候，不是收到的那一刻，而是中间等待的过程。</p>
</blockquote>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>​    本地仓库和远程仓库</p>
<p>​    <a href="http://search.maven.org/" target="_blank" rel="external">查看仓库</a></p>
<p>​    <a href="https://repo.maven.apache.org/maven2/" target="_blank" rel="external">全球中央仓库</a></p>
<p>​    <a href="http://mvnrepository.com/" target="_blank" rel="external">MVN Repository</a></p>
<h2 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h2><blockquote>
<p>一旦配置了镜像，那么所有访问都会到镜像仓库中，原仓库将不能直接访问。</p>
<p>maven主目录 &gt; conf &gt; settings.xml &gt; 146行</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven.net.cn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central mirror in china<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.net.cn/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="更改仓库位置"><a href="#更改仓库位置" class="headerlink" title="更改仓库位置"></a>更改仓库位置</h2><blockquote>
<p>maven从远程中央仓库下载默认是存放在当前用户目录中</p>
<p>​    即 ~/.m2/repository</p>
</blockquote>
<p>修改 <code>settings.xml</code>文件，复制第 53 行的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;localRepository&gt;/Users/nimon/nj/proj/maven/repo&lt;/localRepository&gt;</div></pre></td></tr></table></figure>
<p>其中路径表示新仓库的位置。然后复制一份 <code>settings.xml</code>  到 <code>repo</code> 目录下，这样我们以后更新maven版本就不用再修改原始的 <code>settings.xml</code></p>
<h1 id="maven的生命周期和插件"><a href="#maven的生命周期和插件" class="headerlink" title="maven的生命周期和插件"></a>maven的生命周期和插件</h1><h2 id="完整的项目构建过程包括"><a href="#完整的项目构建过程包括" class="headerlink" title="完整的项目构建过程包括"></a>完整的项目构建过程包括</h2><p>清理、编译、测试、打包、集成测试、验证、部署</p>
<p>maven将其进行抽象。实际上，maven和插件是密不可分的，maven抽象出一套项目构建的生命周期，而插件是对maven抽象的具体实现。</p>
<p>比如，我们对项目进行编译，</p>
<h2 id="maven中定义了三套独立的生命周期"><a href="#maven中定义了三套独立的生命周期" class="headerlink" title="maven中定义了三套独立的生命周期"></a>maven中定义了三套独立的生命周期</h2><ol>
<li>clean    清理项目</li>
<li>default  构建项目</li>
<li>site   生成项目站点</li>
</ol>
<p>这三套生命周期是相互独立的，每个生命周期又包含一些阶段，这些阶段是有顺序的，后面的阶段依赖于前面的阶段。在执行的时候，前面的阶段会顺序执行，并不会触发另外两个生命周期中的阶段。</p>
<h3 id="clean-清理项目阶段"><a href="#clean-清理项目阶段" class="headerlink" title="clean 清理项目阶段"></a>clean 清理项目阶段</h3><p>pre-clean 执行清理前的工作</p>
<p>clean 清理上一次构建的文件</p>
<p>post-clean 执行清理后的文件</p>
<h3 id="default-构建项目（最核心）"><a href="#default-构建项目（最核心）" class="headerlink" title="default 构建项目（最核心）"></a>default 构建项目（最核心）</h3><p>compile test package install</p>
<h3 id="site-生成项目站点"><a href="#site-生成项目站点" class="headerlink" title="site 生成项目站点"></a>site 生成项目站点</h3><p>pre-site 在生成项目站点前要完成工作</p>
<p>site  生成项目的站点文档</p>
<p>post-site  在生成项目站点后要完成的工作</p>
<p>site-deploy  发布生成的站点到服务器</p>
<p>可以去 <strong><a href="https://maven.apache.org/plugins" target="_blank" rel="external">官方插件</a></strong> ，查找使用插件</p>
<h1 id="pom-xml常用元素"><a href="#pom-xml常用元素" class="headerlink" title="pom.xml常用元素"></a>pom.xml常用元素</h1><p>pom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构建信息的管理。 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>   </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>组织名，公司网址的反写+项目名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目名-模块名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  	<span class="comment">&lt;!--打包类型，默认是jar</span></div><div class="line">		war zip pom	</div><div class="line">	--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">  	<span class="comment">&lt;!--第一个0表示大版本号</span></div><div class="line">	第二个0 表示分支版本号</div><div class="line">	第三个0 表示小版本号</div><div class="line">	SNAPSHOT ：不稳定，尚处于开发中，快照版本</div><div class="line">	ALPHA ：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。</div><div class="line">	Beta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。</div><div class="line">	RELEASE ：稳定版</div><div class="line">	GA ：正式发布</div><div class="line">	--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--项目描述名--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven05-demo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  	<span class="comment">&lt;!--项目地址--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--项目描述--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">developers</span>&gt;</span><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">licenses</span>&gt;</span><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">organization</span>&gt;</span><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">          	<span class="comment">&lt;!--只存在于测试的 classpath 中--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">          	<span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">          	<span class="comment">&lt;!--设置依赖是否可选--&gt;</span></div><div class="line">          	<span class="tag">&lt;<span class="name">optional</span>&gt;</span><span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">          	<span class="comment">&lt;!--排除依赖传递列表--&gt;</span></div><div class="line">          	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">          		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">              		</div><div class="line">              	<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">          	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">  </div><div class="line">  	<span class="comment">&lt;!--依赖的管理，不会被运行和引入到实际的依赖中--&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">dependencyManagerment</span>&gt;</span></div><div class="line">      	<span class="comment">&lt;!--主要定义在父模块中，供子模块集成用的--&gt;</span></div><div class="line">  		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      		</div><div class="line">      	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;/<span class="name">dependencyManagerment</span>&gt;</span></div><div class="line">  </div><div class="line">  	<span class="comment">&lt;!--插件列表--&gt;</span></div><div class="line">  	 <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">              	<span class="comment">&lt;!--上面三项是坐标--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--子模块对父模块的继承--&gt;</span></div><div class="line">       	<span class="tag">&lt;<span class="name">parent</span>&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--聚合多个maven运行项--&gt;</span></div><div class="line">       	<span class="tag">&lt;<span class="name">modules</span>&gt;</span><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line">       </div><div class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven05-demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h1><p>我们平时在开发时，如果要使用某一个框架，就需要把框架的jar包引入项目的 classpath 中，这样我们的项目就可以使用 框架为我们封装好的一些方法。maven给我们提供了三种classpath：</p>
<ol>
<li>编译</li>
<li>测试 test</li>
<li>运行  </li>
</ol>
<p>所以依赖的范围就是控制依赖于三种 classpath 的关系的。</p>
<p>有六中依赖范围的值可以选择：</p>
<ul>
<li>compile 默认的范围，如果没有明确指定，编译依赖将在所有的 classpath 中都有效，而且会传递到依赖项目中。</li>
<li>provided  在编译和测试的时候有效</li>
<li>runtime 在测试和运行时有效</li>
<li>test 只在测试的时候有效</li>
<li>system 于本机系统相关联，可移植性差</li>
<li>import 导入的范围，它只使用在 dependencyManagerment ，表示从其他 pom 中导入的 dependency 的配置。</li>
</ul>
<p>例如</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>B<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>B<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>A<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">      .....</div></pre></td></tr></table></figure>
<h1 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h1><p>一个小案例</p>
<p>shanji 依赖于 nage</p>
<p>nage 依赖于 bge</p>
<p>bge的依赖关系</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>nage的依赖关系</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hongxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hongxing-bge<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>shanji的依赖关系</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hongxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hongxing-nage<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hongxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hongxing-bge<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这时候nage下就有bge的依赖jar包，shanji下有bge和nage的依赖jar包。</p>
<p>但是由于依赖的传递性，shanji 只依赖于nage ，shanji 项目中会出现 bge 的jar包。有时候，这不是我们想要的。</p>
<p>这时可以在 nage 依赖下使用 <exclusions>  把 bge 排除在外。</exclusions></p>
<h1 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h1><blockquote>
<p>eg 对不同版本的同一个构建。</p>
</blockquote>
<ol>
<li><p>短路优先</p>
<p>A -&gt; B -&gt; C -&gt; X（JAR)</p>
<p>A -&gt; D -&gt; X（JAR)    <strong>优先</strong></p>
</li>
</ol>
<p>举例：</p>
<p>在 bge 中添加commons-io 2.5的版本依赖</p>
<p>在 nage 中添加commons-io 2.0的版本依赖</p>
<p>这时候在 shanji 项目中就会出现 2.0 的版本，因为shanji 离 nage 比较近。</p>
<ol>
<li>先声明先优先</li>
</ol>
<p>如果路径长度相同，谁先声明，先解析谁。</p>
<p>举例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hongxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hongxing-bge<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hongxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hongxing-nage<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--&lt;exclusions&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;exclusion&gt;--&gt;</span></div><div class="line">          <span class="comment">&lt;!--&lt;groupId&gt;com.hongxing&lt;/groupId&gt;--&gt;</span></div><div class="line">          <span class="comment">&lt;!--&lt;artifactId&gt;hongxing-bge&lt;/artifactId&gt;--&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;/exclusion&gt;--&gt;</span></div><div class="line">      <span class="comment">&lt;!--&lt;/exclusions&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这时候，项目中 commons-io 的版本就变成了 2.5，因为是先声明 bge ，后声明 nage 。</p>
<h1 id="聚合和继承"><a href="#聚合和继承" class="headerlink" title="聚合和继承"></a>聚合和继承</h1><p>如果在maven中有多个项目，我们想要 install 将其放到本地仓库中， 必须对其依次执行 install 命令</p>
<p>maven 给我提供了一个解决办法，就是使用 <strong>聚合</strong> </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../hongxing-bge<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../hongxing-nage<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>../hongxing-shanji<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后执行 install 命令，就会自动把三个module都安装到本地仓库中了。</p>
<p>定义父容器</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span></div><div class="line">         3.8.1</div><div class="line">     <span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在子类中使用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hongxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hongxing-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意修改  <strong><packaging></packaging></strong> 为pom</p>
</blockquote>
<h1 id="使用maven构建web项目"><a href="#使用maven构建web项目" class="headerlink" title="使用maven构建web项目"></a>使用maven构建web项目</h1><p>Next，这里在Properties中添加一个参数<code>archetypeCatalog=internal</code>，不加这个参数，在maven生成骨架的时候将会非常慢，有时候会直接卡住。</p>
<p>来自网上的解释：</p>
<blockquote>
<p>archetypeCatalog表示插件使用的archetype元数据，不加这个参数时默认为remote，local，即中央仓库archetype元数据，由于中央仓库的archetype太多了，所以导致很慢，指定internal来表示仅使用内部元数据。</p>
</blockquote>
<p><img src="/2017/05/10/00001-2017-05-10-maven/maven.png" alt=""></p>
<p>使用 jetty 发布</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.4.v20170414<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--在打包成功后使用jetty:run来运行jetty服务--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>  <span class="comment">&lt;!--指定在package阶段的时候--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;  想学习Maven吗？&lt;br&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="maven" scheme="http://nijun.me/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>断言详解</title>
    <link href="http://nijun.me/2017/05/08/00001-2017-05-08-%E6%96%AD%E8%A8%80%E8%AF%A6%E8%A7%A3/"/>
    <id>http://nijun.me/2017/05/08/00001-2017-05-08-断言详解/</id>
    <published>2017-05-08T07:10:49.000Z</published>
    <updated>2017-05-08T07:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><br>想了解更多JAVA中的断言？<br><br></div>

<a id="more"></a>
<h1 id="Spring中的断言"><a href="#Spring中的断言" class="headerlink" title="Spring中的断言"></a>Spring中的断言</h1><p>Web 应用在接受表单提交的数据后都需要对其进行合法性检查，如果表单数据不合法，请求将被驳回。类似的，当我们在编写类的方法时，也常常需要对方法入参进行合 法性检查，如果入参不符合要求，方法将通过抛出异常的方式拒绝后续处理。举一个例子：有一个根据文件名获取输入流的方法：InputStream getData(String file)，为了使方法能够成功执行，必须保证 file 入参不能为 null 或空白字符，否则根本无须进行后继的处理。这时方法的编写者通常会在方法体的最前面编写一段对入参进行检测的代码，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getData</span><span class="params">(String file)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span> || file.length() == <span class="number">0</span>|| file.replaceAll(<span class="string">"\\s"</span>, <span class="string">""</span>).length() == <span class="number">0</span>) &#123; </div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"file入参不是有效的文件地址"</span>); </div><div class="line">    &#125; </div><div class="line">… </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Spring中，给我们提供了 org.springframework.util.Assert 通用类完成这一任务。</p>
<p>Assert 翻译为中文为“断言”，使用过 JUnit 的读者都熟知这个概念，它断定某一个实际的运行值和预期想一样，否则就抛出异常。Spring 对方法入参的检测借用了这个概念，其提供的 Assert 类拥有众多按规则对方法入参进行断言的方法，可以满足大部分方法入参检测的要求。这些断言方法在入参不满足要求时就会抛出 IllegalArgumentException。下面，我们来认识一下 Assert 类中的常用断言方法：<br>Spring Assert的所有方法：</p>
<p><img src="/2017/05/08/00001-2017-05-08-断言详解/assert.png" alt=""></p>
<p>断言方法 说明 </p>
<ol>
<li>notNull(Object object)  </li>
</ol>
<p>当 object 不为 null 时抛出异常，notNull(Object object, String message) 方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null； </p>
<ol>
<li>isTrue(boolean expression) / isTrue(boolean expression, String message)  </li>
</ol>
<p>当 expression 不为 true 抛出异常； </p>
<ol>
<li>notEmpty(Collection collection) / notEmpty(Collection collection, String message)  </li>
</ol>
<p>当集合未包含元素时抛出异常。<br>notEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断； </p>
<ol>
<li>hasLength(String text) / hasLength(String text, String message) </li>
</ol>
<p>当 text 为 null 或长度为 0 时抛出异常； </p>
<ol>
<li>hasText(String text) / hasText(String text, String message) </li>
</ol>
<p>text 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常； </p>
<ol>
<li>isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message) </li>
</ol>
<p>如果 obj 不能被正确造型为 clazz 指定的类将抛出异常； </p>
<ol>
<li>isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message) </li>
</ol>
<p>subType 必须可以按类型匹配于 superType，否则将抛出异常； </p>
<p>使用 Assert 断言类可以简化方法入参检测的代码，如 InputStream getData(String file) 在应用 Assert 断言类后，其代码可以简化为以下的形式： </p>
<p>public InputStream getData(String file){<br>​    Assert.hasText(file,”file入参不是有效的文件地址”);<br>​    ① 使用 <a href="http://lib.csdn.net/base/javaee" target="_blank" rel="external">spring</a> 断言类进行方法入参检测<br>…<br>}</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;想了解更多JAVA中的断言？&lt;br&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://nijun.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring中jdbcTemplate的用法实例（一）</title>
    <link href="http://nijun.me/2017/05/08/00001-2017-05-08-Spring%E4%B8%ADjdbcTemplate%E5%92%8CHibernateTemplate/"/>
    <id>http://nijun.me/2017/05/08/00001-2017-05-08-Spring中jdbcTemplate和HibernateTemplate/</id>
    <published>2017-05-08T05:56:19.000Z</published>
    <updated>2017-05-08T08:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><br>JdbcTemplate详解<br><br></div>

<a id="more"></a>
<h1 id="注入JdbcTemplate的三种方式"><a href="#注入JdbcTemplate的三种方式" class="headerlink" title="注入JdbcTemplate的三种方式"></a>注入JdbcTemplate的三种方式</h1><p>​      第一种方式： 在 Spring 的 IoC 容器中配置一个 JdbcTemplate 的 bean，将 DataSource 注入进来，然后再把JdbcTemplate 注入到自定义DAO 中。 </p>
<p>​      第二种方式：我们可以在自己定义的DAO 实现类中注入一个DataSource 引用来完 成JdbcTemplate 的实例化。也就是它是从外部“注入” DataSource 到DAO 中，然后 自己实例化JdbcTemplate，然后将DataSource 设置到JdbcTemplate 对象中。 </p>
<p>​<br>​      第三种方式: Spring 提供了 org.springframework.jdbc.core.support.JdbcDaoSupport 类 ， 这 个 类 中 定 义 了 JdbcTemplate 属性，也定义了DataSource 属性，当设置DataSource 属性的时候，会创 建jdbcTemplate 的实例，所以我们自己编写的DAO 只需要继承JdbcDaoSupport 类， 然后注入DataSource 即可。<strong>提倡采用第三种方法</strong>。</p>
<p>第一种方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> jdbcTemplate;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//注入方法1     </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">//其它方法这里省略……  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.nini.account.jdbcTemplate.UserServiceImpl"</span>&gt;</span>  </div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第二种方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="keyword">private</span> JdbcTemplate jdbcTemplate;  </div><div class="line">          </div><div class="line">        <span class="comment">//注入方法2  </span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;  </div><div class="line">                   <span class="keyword">this</span>.jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);  </div><div class="line">        &#125;  </div><div class="line">       </div><div class="line">       <span class="comment">//其它方法省略……  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.nini.account.jdbcTemplate.UserServiceImpl"</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第三种方法</p>
<p>继承JdbcDaoSupport，其内部有个JdbcTemplate ，需要注入DataSource 属性来实例化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;  </div><div class="line">        String sql = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">this</span>.getJdbcTemplate().update(sql);  </div><div class="line">    &#125;  </div><div class="line">        <span class="comment">//其它方法省略……  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.nini.account.jdbcTemplate.UserDaoImpl"</span>&gt;</span>  </div><div class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><blockquote>
<p>jdbcTemplate 中的sql均是用“?”做占位符的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  </div><div class="line">    <span class="keyword">private</span> String username;  </div><div class="line">    <span class="keyword">private</span> String password;  </div><div class="line">    <span class="keyword">private</span> String sex;  </div><div class="line">              </div><div class="line">               <span class="comment">//setter和getter方法省略……  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>jdbcTemplate.update 适合于 insert 、update 和 delete操作；  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**   </span></div><div class="line">    * 第一个参数为执行sql   </div><div class="line">    * 第二个参数为参数数据   </div><div class="line">    */   </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save3</span><span class="params">(User user)</span> </span>&#123;  </div><div class="line">       Assert.isNull(user, <span class="string">"user is not null"</span>);  </div><div class="line">       jdbcTemplate.update(<span class="string">"insert into tb_test1(name,password) values(?,?)"</span>,   </div><div class="line">               <span class="keyword">new</span> Object[]&#123;user.getUsername(),user.getPassword()&#125;);  </div><div class="line">   &#125;  </div><div class="line">     </div><div class="line">   <span class="comment">/**   </span></div><div class="line">    * 第一个参数为执行sql   </div><div class="line">    * 第二个参数为参数数据   </div><div class="line">    * 第三个参数为参数类型   </div><div class="line">    */   </div><div class="line">   <span class="meta">@Override</span>  </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;  </div><div class="line">       Assert.isNull(user, <span class="string">"user is not null"</span>);  </div><div class="line">       jdbcTemplate.update(  </div><div class="line">               <span class="string">"insert into tb_test1(name,password) values(?,?)"</span>,   </div><div class="line">               <span class="keyword">new</span> Object[]&#123;user.getUsername(),user.getPassword()&#125;,   </div><div class="line">               <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;java.sql.Types.VARCHAR,java.sql.Types.VARCHAR&#125;  </div><div class="line">               );  </div><div class="line">   &#125;  </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//避免sql注入  </span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2</span><span class="params">(<span class="keyword">final</span> User user)</span> </span>&#123;  </div><div class="line">       Assert.isNull(user, <span class="string">"user is not null"</span>);  </div><div class="line">         </div><div class="line">       jdbcTemplate.update(<span class="string">"insert into tb_test1(name,password) values(?,?)"</span>,   </div><div class="line">               <span class="keyword">new</span> PreparedStatementSetter()&#123;  </div><div class="line">             </div><div class="line">                   <span class="meta">@Override</span>  </div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException </span>&#123;  </div><div class="line">                       ps.setString(<span class="number">1</span>, user.getUsername());  </div><div class="line">                       ps.setString(<span class="number">2</span>, user.getPassword());  </div><div class="line">                   &#125;  </div><div class="line">       &#125;);  </div><div class="line">         </div><div class="line">   &#125;  </div><div class="line"></div><div class="line"><span class="comment">//返回插入的主键  </span></div><div class="line">   <span class="function"><span class="keyword">public</span> List <span class="title">save5</span><span class="params">(<span class="keyword">final</span> User user)</span> </span>&#123;  </div><div class="line">         </div><div class="line">       KeyHolder keyHolder = <span class="keyword">new</span> GeneratedKeyHolder();  </div><div class="line"> </div><div class="line">       jdbcTemplate.update(<span class="keyword">new</span> PreparedStatementCreator() &#123;  </div><div class="line">                     </div><div class="line">                               <span class="meta">@Override</span>  </div><div class="line">                               <span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">createPreparedStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;  </div><div class="line">                                   PreparedStatement ps = connection.prepareStatement(<span class="string">"insert into tb_test1(name,password) values(?,?)"</span>, <span class="keyword">new</span> String[] &#123;<span class="string">"id"</span>&#125;);  </div><div class="line">                                   ps.setString(<span class="number">1</span>, user.getUsername());  </div><div class="line">                                   ps.setString(<span class="number">2</span>, user.getPassword());  </div><div class="line">                                   <span class="keyword">return</span> ps;  </div><div class="line">                               &#125;  </div><div class="line">                           &#125;,  </div><div class="line">               keyHolder);  </div><div class="line">         </div><div class="line">       <span class="keyword">return</span> keyHolder.getKeyList();  </div><div class="line">   &#125; </div><div class="line"></div><div class="line">   <span class="meta">@Override</span>  </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(User user)</span> </span>&#123;  </div><div class="line">       Assert.isNull(user, <span class="string">"user is not null"</span>);  </div><div class="line">       jdbcTemplate.update(  </div><div class="line">               <span class="string">"delete from tb_test1 where id = ?"</span>,   </div><div class="line">               <span class="keyword">new</span> Object[]&#123;user.getId()&#125;,   </div><div class="line">               <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;java.sql.Types.INTEGER&#125;);  </div><div class="line">   &#125;  </div><div class="line"></div><div class="line">   <span class="comment">//最全的参数3个  </span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">queryForInt3</span><span class="params">(User user)</span></span>&#123;  </div><div class="line">       <span class="keyword">return</span> jdbcTemplate.queryForInt(<span class="string">"select count(0) from tb_test1 where username = ?"</span> ,  </div><div class="line">               <span class="keyword">new</span> Object[]&#123;user.getUsername()&#125;,  </div><div class="line">               <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;java.sql.Types.VARCHAR&#125;);  </div><div class="line">   &#125;  </div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">queryForObject5</span><span class="params">(User user)</span> </span>&#123;  </div><div class="line">       <span class="keyword">return</span> (User) jdbcTemplate.queryForObject(  </div><div class="line">               <span class="string">"select * from tb_test1 where id = ?"</span>,   </div><div class="line">               <span class="keyword">new</span> Object[]&#123;user.getId()&#125;,  </div><div class="line">               <span class="keyword">new</span> RowMapper()&#123;  </div><div class="line"> </div><div class="line">                   <span class="meta">@Override</span>  </div><div class="line">                   <span class="function"><span class="keyword">public</span> Object <span class="title">mapRow</span><span class="params">(ResultSet rs,<span class="keyword">int</span> rowNum)</span><span class="keyword">throws</span> SQLException </span>&#123;  </div><div class="line">                       User user  = <span class="keyword">new</span> User();  </div><div class="line">                       user.setId(rs.getInt(<span class="string">"id"</span>));  </div><div class="line">                       user.setUsername(rs.getString(<span class="string">"username"</span>));  </div><div class="line">                       user.setPassword(rs.getString(<span class="string">"password"</span>));  </div><div class="line">                       <span class="keyword">return</span> user;  </div><div class="line">                   &#125;  </div><div class="line">             </div><div class="line">       &#125;); <span class="comment">//class是结果数据的java类型  </span></div><div class="line">   &#125;  </div><div class="line"></div><div class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </div><div class="line">   <span class="comment">//最全的参数查询  </span></div><div class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryForList3</span><span class="params">(User user)</span> </span>&#123;  </div><div class="line">       <span class="keyword">return</span> (List&lt;User&gt;) jdbcTemplate.queryForList(<span class="string">"select * from tb_test1 where username = ?"</span>,  </div><div class="line">                           <span class="keyword">new</span> Object[]&#123;user.getUsername()&#125;,  </div><div class="line">                           <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;java.sql.Types.VARCHAR&#125;,  </div><div class="line">                           User.class);  </div><div class="line">   &#125;  </div><div class="line"></div><div class="line"></div><div class="line">   <span class="comment">//批量操作    适合于增、删、改操作  </span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(<span class="keyword">final</span> List users) &#123;  </div><div class="line">         </div><div class="line">       <span class="keyword">int</span>[] updateCounts = jdbcTemplate.batchUpdate(  </div><div class="line">               <span class="string">"update tb_test1 set username = ?, password = ? where id = ?"</span>,  </div><div class="line">               <span class="keyword">new</span> BatchPreparedStatementSetter() &#123;  </div><div class="line">                     </div><div class="line">                       <span class="meta">@Override</span>  </div><div class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;  </div><div class="line">                           ps.setString(<span class="number">1</span>, ((User)users.get(i)).getUsername());  </div><div class="line">                           ps.setString(<span class="number">2</span>, ((User)users.get(i)).getPassword());  </div><div class="line">                           ps.setLong(<span class="number">3</span>, ((User)users.get(i)).getId());  </div><div class="line">                       &#125;  </div><div class="line">                         </div><div class="line">                       <span class="meta">@Override</span>  </div><div class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;  </div><div class="line">                           <span class="keyword">return</span> users.size();  </div><div class="line">                       &#125;  </div><div class="line">               &#125;   </div><div class="line">       );  </div><div class="line">         </div><div class="line">       <span class="keyword">return</span> updateCounts;  </div><div class="line">   &#125;  </div><div class="line"></div><div class="line"><span class="comment">//调用存储过程  </span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callProcedure</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;  </div><div class="line">       <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"call SUPPORT.REFRESH_USERS_SUMMARY(?)"</span>, <span class="keyword">new</span> Object[]&#123;Long.valueOf(id)&#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，batchUpdate适合于批量增、删、改操作；</p>
<p>​         update(…)：使用于增、删、改操作；</p>
<p>​         execute（）：执行一个独立的sql语句，包括ddl语句；</p>
<p>​         queryForInt ：查询出一个整数值</p>
<h1 id="HibernateTemplate"><a href="#HibernateTemplate" class="headerlink" title="HibernateTemplate"></a>HibernateTemplate</h1><p>下面是 HibernateTemplate的常用方法。</p>
<p>delete(Object entity): 删除指定持久化实例。    </p>
<p>deleteAll(Collection entities): 删除集合内全部持久化类实例。  </p>
<p>find(String queryString): 根据 HQL 查询字符串来返回实例集合。 </p>
<p>findByNamedQuery(String queryName): 根据命名查询返回实例集合。    </p>
<p>get(Classentity Class,Serializable id): 根据主键加载特定持久化类的实例。    </p>
<p>save(Object entity): 保存新的实例。    </p>
<p>saveOrUpdate(Object entity): 根据实例状态，选择保存或者更新。    </p>
<p>update(Object entity): 更新实例的状态，要求entity 是持久状态。   </p>
<p>setMaxResults(intmax Results): 设置分页的大小。</p>
<p>hql语句</p>
<p>Select/update/delete…… from …… where …… group by …… having …… orderby …… asc/desc</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;JdbcTemplate详解&lt;br&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://nijun.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring使用容器管理beans</title>
    <link href="http://nijun.me/2017/05/08/00001-2017-05-08-Spring%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86beans/"/>
    <id>http://nijun.me/2017/05/08/00001-2017-05-08-Spring使用容器管理beans/</id>
    <published>2017-05-08T05:14:00.000Z</published>
    <updated>2017-05-08T22:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><br>使用容器管理beans<br><br></div>

<a id="more"></a>
<h1 id="使用容器管理beans"><a href="#使用容器管理beans" class="headerlink" title="使用容器管理beans"></a>使用容器管理beans</h1><p>基于Spring框架构建的应用中的对象，都由Spring容器（container）管理，如下图所示。Spring容器负责创建对象、编织对象和配置对象，负责对象的整个生命周期。</p>
<p><img src="/2017/05/08/00001-2017-05-08-Spring使用容器管理beans/beans.png" alt=""></p>
<p>容器是Spring框架的核心，通过依赖注入（DI）管理构成Spring应用的组件。正是因为有容器管理各个组件之间的协作关系，使得每个Spring组件都很好理解、便于复用和单元测试。</p>
<p>Spring容器有多种实现，可以分为两类：</p>
<ul>
<li><em>Bean factories</em>（由<em>org.springframework.beans.factory.BeanFactory</em>接口定义）是最简单的容器，只提供基本的依赖注入功能；</li>
<li><em>Application context</em>（由<em>org.springframework.context.ApplicationContext</em>接口定义）在bean factory的基础上提供application-framework框架服务，例如可以从properties文件中解析配置信息、可以对外公布application events。</li>
</ul>
<h2 id="应用上下文（application-context）"><a href="#应用上下文（application-context）" class="headerlink" title="应用上下文（application context）"></a>应用上下文（application context）</h2><p>Spring提供了多种application context，可列举如下：</p>
<ul>
<li><em>AnnotationConfigApplicationContext</em>——从Java配置文件中加载应用上下文；</li>
<li><em>AnnotationConfigWebApplicationContext</em>——从Java配置文件中加载Spring web应用上下文；</li>
<li><em>ClassPathXmlApplicationContext</em>——从classpath（resources目录）下加载XML格式的应用上下文定义文件；</li>
<li><em>FileSystemXmlApplicationContext</em>——从指定文件系统目录下加载XML格式的应用上下文定义文件；</li>
<li><em>XmlWebApplicationContext</em>——从classpath（resources目录）下加载XML格式的Spring web应用上下文。</li>
</ul>
<p><strong>通过应用上下文实例，可以通过<em>getBean()</em>方法获得对应的bean。</strong></p>
<h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><p>在传统的Java应用中，一个对象的生命周期非常简单：通过new创建一个对象，然后该对象就可以使用，当这个对象不再使用时，由Java垃圾回收机制进行处理和回收。</p>
<p>在Spring应用中，bean的生命周期的控制更加精细。Spring提供了很多节点供开发人员定制某个bean的创建过程，掌握这些节点如何使用非常重要。Spring中bean的生命周期如下图所示：</p>
<p><img src="/2017/05/08/00001-2017-05-08-Spring使用容器管理beans/bean_life_circle.png" alt=""></p>
<p>可以看出，bean factory负责bean创建的最初四步，然后移交给应用上下文做后续创建过程：</p>
<ol>
<li>Spring初始化bean</li>
<li>Spring将值和其他bean的引用注入（inject）到当前bean的对应属性中；</li>
<li>如果Bean实现了<em>BeanNameAware</em>接口，Spring会传入bean的ID来调用<em>setBeanName</em>方法；</li>
<li>如果Bean实现了<em>BeanFactoryAware</em>接口，Spring传入bean factory的引用来调用<em>setBeanFactory</em>方法；</li>
<li>如果Bean实现了<em>ApplicationContextAware</em>接口，Spring将传入应用上下文的引用来调用<em>setApplicationContext</em>方法；</li>
<li>如果Bean实现了<em>BeanPostProcessor</em>接口，则Spring调用<em>postProcessBeforeInitialization</em>方法，这个方法在初始化和属性注入之后调用，在任何初始化代码之前调用；</li>
<li>如果Bean实现了<em>InitializingBean</em>接口，则需要调用该接口的<em>afterPropertiesSet</em>方法；如果在bean定义的时候设置了<em>init-method</em>属性，则需要调用该属性指定的初始化方法；</li>
<li>如果Bean实现了<em>BeanPostProcessor</em>接口，则Spring调用<em>postProcessAfterInitialization</em>方法</li>
<li>在这个时候bean就可以用于在应用上下文中使用了，当上下文退出时bean也会被销毁；</li>
<li>如果Bean实现了<em>DisposableBean</em>接口，Spring会调用<em>destroy()</em>方法;如果在bean定义的时候设置了<em>destroy-method</em>， 则此时需要调用指定的方法。</li>
</ol>
<p>本节主要总结了如何启动Spring容器，以及Spring应用中bean的生命周期。</p>
<h2 id="Spring整体架构"><a href="#Spring整体架构" class="headerlink" title="Spring整体架构"></a>Spring整体架构</h2><p>除了Spring的核心模块，Spring还提供了其他的工具组件，这些组件扩展了Spring的功能，例如webservice、REST、mobile和NOSQL，形成了丰富的开发生态。</p>
<h3 id="1-3-1-Spring模块"><a href="#1-3-1-Spring模块" class="headerlink" title="1.3.1 Spring模块"></a>1.3.1 Spring模块</h3><p>Spring 4.0you 20个独立的模块，每个包含三个文件：二进制库、源文件和文档，完整的库列表如下图所示：</p>
<p><img src="/2017/05/08/00001-2017-05-08-Spring使用容器管理beans/spring_jar.png" alt=""></p>
<p>按照功能划分，这些模块可以分成六组，如下图所示：</p>
<p><img src="/2017/05/08/00001-2017-05-08-Spring使用容器管理beans/modules.png" alt=""></p>
<p>这些模块几乎可以满足所有企业级应用开发的需求，但是开发人员并不需要完全使用Spring的这些模块，可以自由选择符合项目需求的第三方模块——Spring为一些第三方模块提供了交互接口。</p>
<h4 id="CORE-SPRING-CONTAINER"><a href="#CORE-SPRING-CONTAINER" class="headerlink" title="CORE SPRING CONTAINER"></a>CORE SPRING CONTAINER</h4><p>Spring框架的核心模块，其他所有模块都基于该模块构建。Spring容器负责管理Spring应用中bean的创建、配置和管理。在这模块中有Spring bean factory，该接口提供了最基本的依赖注入（DI）功能；基于bean factory，该模块提供了集中Spring应用上下文的实现，可以供开发人员选择。</p>
<p>除了bean factory和application context，该模块还支持其他企业级服务，例如email、JNDI access、EJB integration和scheduling。</p>
<h4 id="SPRING’s-AOP-MODULE"><a href="#SPRING’s-AOP-MODULE" class="headerlink" title="SPRING’s AOP MODULE"></a>SPRING’s AOP MODULE</h4><p>Spring框架通过AOP模块提供面向切面编程的能力。通过AOP模块，一些系统层面的需求（事务、安全）可以与它们真正要作用到的模块相互解耦合。</p>
<h4 id="DATA-ACCESS-AND-INTEGRATION"><a href="#DATA-ACCESS-AND-INTEGRATION" class="headerlink" title="DATA ACCESS AND INTEGRATION"></a>DATA ACCESS AND INTEGRATION</h4><p>Spring的JDBC和<em>data-access object</em>模块将数据库操作的一些样板式代码封装起来，免去了开发人员的很多工作量。这个模块还对数据库层的异常进行了封装，并向上提供含义更丰富的异常信息。</p>
<p>Spring并未实现自己的ORM框架，但是它提供了跟其他几个ORM框架整合的能力，例如Hibernate、Mybatis、Java Persistence AP等等，而且这些ORM框架都支持使用Spring提供的事务管理模块。</p>
<h4 id="WEB-AND-REMOTING"><a href="#WEB-AND-REMOTING" class="headerlink" title="WEB AND REMOTING"></a>WEB AND REMOTING</h4><p>Spring提供了自己的 WEB开发框架——Spring MVC，除此之外，这个模块还提供远程调用支持：Remote Method Invocation(RMI)、Hessian、Burlap和JAX-WS。</p>
<h4 id="INSTRUMENTATION"><a href="#INSTRUMENTATION" class="headerlink" title="INSTRUMENTATION"></a>INSTRUMENTATION</h4><p>不常使用</p>
<h4 id="TESTING"><a href="#TESTING" class="headerlink" title="TESTING"></a>TESTING</h4><p>可以与常用的JUNIT、Mockito、Spock等测试框架整合使用。</p>
<h3 id="1-3-2-Spring-portfolio"><a href="#1-3-2-Spring-portfolio" class="headerlink" title="1.3.2 Spring portfolio"></a>1.3.2 Spring portfolio</h3><p>如果只是学习Spring的核心模块，将会错过不少Spring社区提供的经典项目，下面介绍的这些项目使得Spring几乎可以覆盖整个Java开发（PS：带*的项目值得每位Spring用户仔细学习）。</p>
<h4 id="SPRING-WEB-FLOW"><a href="#SPRING-WEB-FLOW" class="headerlink" title="SPRING WEB FLOW"></a>SPRING WEB FLOW</h4><p>基于Spring MVC框架拓展，利用该框架可以构建流式web应用。</p>
<h4 id="SPRING-WEB-SERVICE"><a href="#SPRING-WEB-SERVICE" class="headerlink" title="SPRING WEB SERVICE"></a>SPRING WEB SERVICE</h4><p>虽然核心的Spring 框架提供了将Spring Bean 以声明的方式发布为Web Service，但是这些服务基于一个具有争议性的架构（拙劣的契约置后模型）之上而构建的。这些服务的契约由Bean 的接口来决定。 Spring Web Service 提供了契约优先的Web Service模型，服务的实现都是为了满足服务的契约而编写的。</p>
<h4 id="SPRING-SECURITY（-）"><a href="#SPRING-SECURITY（-）" class="headerlink" title="SPRING SECURITY（*）"></a>SPRING SECURITY（*）</h4><p>安全对于许多应用都是一个非常关键的切面。利用Spring AOP，Spring Security为Spring 应用提供了声明式的安全机制。我们将在第9 章讲解如何为应用添加SpringSecurity。你可以在主页<a href="http://static.springsource.org/spring-security/site" target="_blank" rel="external">http://static.springsource.org/spring-security/site</a> 获得关于SpringSecurity 更多的信息。</p>
<h4 id="SPRING-INTEGRATION"><a href="#SPRING-INTEGRATION" class="headerlink" title="SPRING INTEGRATION"></a>SPRING INTEGRATION</h4><p>许多企业级应用都需要与其他应用进行交互。Spring Integration 提供了几种通用的应用集成模式的Spring 声明式风格的实现。</p>
<p>我们不会在本书覆盖Spring Integration 内容，但是如果你想了解更多关于SpringIntegration 的信息， 我推荐Mark Fisher、Jonas Partner、Marius Bogoevici 和IweinFuld 编写的《Spring Integration in Action》；或者还可以访问Spring Integration 的主页<a href="http://www.springsource.org/spring-integration" target="_blank" rel="external">http://www.springsource.org/spring-integration</a>。</p>
<h4 id="SPRING-BATCH"><a href="#SPRING-BATCH" class="headerlink" title="SPRING BATCH"></a>SPRING BATCH</h4><p>当我们需要对数据进行大量操作时，没有任何技术可以比批处理更能胜任此场景的。如果需要开发一个批处理应用，你可以借助于Spring 强大的面向POJO 的编程模型来使用Spring Batch 来实现。</p>
<p>Spring Batch 超出了本书的范畴，但是你可以阅读Thierry Templier 和Arnaud Cogoluègnes编写的《Spring Batch in Action》，或者访问Spring Batch 的主页<a href="http://static.springsource.org/spring-batch" target="_blank" rel="external">http://static.springsource.org/spring-batch</a>。</p>
<h4 id="SPRING-DATA（-）"><a href="#SPRING-DATA（-）" class="headerlink" title="SPRING DATA（*）"></a>SPRING DATA（*）</h4><p>Spring Data用于简化数据库相关的开发工作。尽管多年以来关系型数据库都是企业级应用开发的主流，但是随着移动互联网的发展，对NoSQL这类菲关系型数据库的需求也越来越强。</p>
<p>无论你选择NoSQL还是关系型数据库，Spring Datat都能提供简洁的编程模型，例如非常方便的repository机制，可以为开发人员自动创建具体的SQL实现。</p>
<h4 id="SPRING-SOCIAL"><a href="#SPRING-SOCIAL" class="headerlink" title="SPRING SOCIAL"></a>SPRING SOCIAL</h4><p>社交网络是互联网冉冉升起的一颗新星，越来越多的应用正在融入社交网络网站，例如Facebook 或者Twitter。如果对此感兴趣，你可以了解下Spring Social，Spring 的一个社交网络扩展模块。</p>
<p>Spring Social 相对还比较新颖，我并没有计划将它放入本书，但是你可以访问<a href="http://www.springsource.org/spring-social" target="_blank" rel="external">http://www.springsource.org/spring-social</a> 了解Spring Social 更多的相关信息。</p>
<h4 id="SPRING-MOBILE"><a href="#SPRING-MOBILE" class="headerlink" title="SPRING MOBILE"></a>SPRING MOBILE</h4><p>移动应用是另一个引人瞩目的软件开发领域。智能手机和平板设备已成为许多用户首选的客户端。Spring Mobile 是Spring 新的扩展模块用于支持移动Web 应用开发。<br>与Spring Mobile 相关的是Spring Android 项目。这个新项目旨在通过Spring 框架为开发基于Android 设备的本地应用提供某些简单的支持。最初，这个项目提供了Spring 的RestTemplate 版本（请查看第11 章了解RestTemplete）可以用于Android 应用。<br>再次声明，这两个项目已超出了本书的范围，但是如果你对这两个项目感兴趣，可以访问<a href="http://www.springsource.org/spring-mobile" target="_blank" rel="external">http://www.springsource.org/spring-mobile</a> 和<a href="http://www.springsource.org/spring-android" target="_blank" rel="external">http://www.springsource.org/spring-android</a> 了解更多相关的信息。</p>
<h4 id="SPRING-BOOT（-）"><a href="#SPRING-BOOT（-）" class="headerlink" title="SPRING BOOT（*）"></a>SPRING BOOT（*）</h4><p>Spring Boot是Spring社区中发展速度最快的框架之一，它旨在简化Spring的使用，解决Spring开发时遇到的“配置地狱”问题。</p>
<p>Spring Boot通过大量使用自动配置技术，可以取消大量的XML配置文件，同时该框架提出了starter的概念，用于简化pom文件。可以参考我的一系列博文：<a href="http://www.jianshu.com/p/5ac18abc91f0" target="_blank" rel="external">《Spring Boot Cookbook》阅读笔记</a></p>
<p>主要总结下Spring社区的趋势：</p>
<ol>
<li>注重注解，能用注解解决的尽量用注解，尽量少写XML配置文件；</li>
<li>Spring Boot已经是Spring社区中增长最迅速的框架，前三名是：Spring Framework，Spring Boot和Spring Security</li>
<li>支持Java 8，通过Java8的lambda表达式，使得一些回调接口更易使用和阅读。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;使用容器管理beans&lt;br&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://nijun.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解原理总结（二）</title>
    <link href="http://nijun.me/2017/05/08/00001-2017-05-08-Spring%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://nijun.me/2017/05/08/00001-2017-05-08-Spring注解原理总结（二）/</id>
    <published>2017-05-08T01:26:13.000Z</published>
    <updated>2017-05-08T22:42:46.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><br>Java中如何自定义注解？<br><br></div>

<a id="more"></a>
<h2 id="之-Java中如何自定义注解"><a href="#之-Java中如何自定义注解" class="headerlink" title="之 Java中如何自定义注解"></a>之 Java中如何自定义注解</h2><h6 id="1-先看注解定义示例"><a href="#1-先看注解定义示例" class="headerlink" title="1.先看注解定义示例"></a>1.先看注解定义示例</h6><p>@Override 源码定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Target(ElementType.METHOD)</div><div class="line">@Retention(RetentionPolicy.SOURCE)</div><div class="line">public @interface Override &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用 @interface 表示这是一个注解类。自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。<br>标注 @Target 元注解，声明@Override 的作用地方为METHOD。<br>标注 @Retention 元注解，指明@Override 被保留的级别-源码级别，编译的时候就被忽略。</p>
</blockquote>
<p><strong>引申1：注解定义格式：public @interface 注解名 {定义体} </strong><br><strong>引申2：定义注解时，不得继承其他的注解或者接口。</strong></p>
<p>SpringMVC 的 @RequestMapping 源码示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  <span class="comment">// 注解一直保持到VM运行期，被反射读取。</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Mapping</span>    <span class="comment">// SpringMVC定义的元注解，暂忽略此。</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">    <span class="meta">@AliasFor</span>(<span class="string">"path"</span>)    <span class="comment">// SpringMVC中定义的别名注解。</span></div><div class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</div><div class="line">    String[] path() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    String[] params() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    String[] headers() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    String[] consumes() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">    String[] produces() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>用法示例：<br>@RequestMapping(value=”/user”, methods=RequestMethod.GET)，<br>@RequestMapping可供选择的参数有：<br>name, value, path, method, params, headers, consumes, produces。</p>
<ul>
<li>注解的每个参数对应着 @RequestMapping 类中的方法名。</li>
<li>每个参数指定一个默认值（default）。</li>
</ul>
</blockquote>
<p><strong>引申3：注解类体中，每一个方法实际上声明了一个注解参数。方法名就是参数名，返回值类型就是参数类型。</strong></p>
<p><strong>引申4：注解参数支持的类型：8种基本类型（byte，short，int，long，float，double，char，boolean），String类型，Class类型，enum类型，Annotation类型，以上所有类型的数组。</strong></p>
<p><strong>引申5：访问修饰权限：public或者默认default。</strong></p>
<p><strong>引申6：注解元素必须要有默认值。在定义注解的默认值中指定，或者在使用注解的时候指定。非基本类型不能默认null。</strong></p>
<blockquote>
<p>当自定义注解类之后，便可以在类（ElementType.TYPE）、方法（ElementType.METHOD）上标注 @RequestMapping。</p>
</blockquote>
<p>那怎样做才能让注解被Java程序所运行？</p>
<p>请参考：</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;Java中如何自定义注解？&lt;br&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Spring Annotation" scheme="http://nijun.me/tags/Spring-Annotation/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解原理总结</title>
    <link href="http://nijun.me/2017/05/08/00001-2017-05-08-Spring%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://nijun.me/2017/05/08/00001-2017-05-08-Spring注解原理总结（一）/</id>
    <published>2017-05-08T00:35:40.000Z</published>
    <updated>2017-05-08T22:43:17.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><br>Java元注解释义<br><br></div>

<a id="more"></a>
<p>转载自<a href="http://www.jianshu.com/p/5cb8b4c186be" target="_blank" rel="external">ibyr</a></p>
<h2 id="之-Java元注解释义"><a href="#之-Java元注解释义" class="headerlink" title="之 Java元注解释义"></a>之 Java元注解释义</h2><h5 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h5><ul>
<li>注解在Java中如何起作用？</li>
<li>Spring是如何识别注解？</li>
<li>如何自定义注解为我所用？</li>
</ul>
<blockquote>
<ul>
<li>Spring注解：<br>@Aotuwired @Required @Qualifier @Provider @Scope …</li>
<li>Spring MVC 注解：<br>@Controller @Service @Repository @Component @RequestMapping @RequetBody @ResponseBody …</li>
</ul>
</blockquote>
<h5 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h5><h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><p>Java注解起源：JDK1.5<br>常见Java注解 ：</p>
<ul>
<li>@Override</li>
<li>@Deprecated</li>
<li>@SupressWarnings</li>
</ul>
<ol>
<li>从@Override说起，引出Java注解和元注解。</li>
</ol>
<p>@Override 源码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*If a method is annotated with this annotation type </div><div class="line"> * compilers are required to generate an error message </div><div class="line"> * unless at least one of the following conditions hold:</div><div class="line"> *</div><div class="line"> * The method does override or implement a method declared in a</div><div class="line"> * supertype.</div><div class="line"> * The method has a signature that is override-equivalent to that of</div><div class="line"> * any public method declared in &#123;@linkplain Object&#125;.</div><div class="line"> */</div><div class="line">@Target(ElementType.METHOD)</div><div class="line">@Retention(RetentionPolicy.SOURCE)</div><div class="line">public @interface Override &#123;    // @interface 修饰注解类</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意@Override 源码中有3个要点：</p>
<blockquote>
<ul>
<li>@interface：修饰注解类使用@interface，而不是interface。这就定义了一个注解 @Override。</li>
<li>Java元注解：@Target, @Retention。Java元注解即：定义注解的注解（To annotate the annotation）。</li>
<li>元注解参数：ElementType.METHOD, RetentionPolicy.SOURCE</li>
</ul>
</blockquote>
<ol>
<li><p>@Retention源码（保留：保留，滞留之意。）</p>
<p>指明这个注解将保留多长时间，如果没有指定，那么默认的保留策略是 <code>RetentionPolicy.CLASS</code></p>
<p>元注释类型只有直接用于注释，保留元注释才会起作用。如果元注释类型用作另一种注释类型中的成员类型，则没有效果。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Indicates how long annotations with the annotated type are to</span></div><div class="line"> * be retained.  If no Retention annotation is present on</div><div class="line"> * an annotation type declaration, the retention policy defaults to</div><div class="line"> * &#123;@code RetentionPolicy.CLASS&#125;.</div><div class="line"> *</div><div class="line"> * A Retention meta-annotation has effect only if the</div><div class="line"> * meta-annotated type is used directly for annotation.  It has no</div><div class="line"> * effect if the meta-annotated type is used as a member type in</div><div class="line"> * another annotation type.</div><div class="line">*/</div><div class="line"><span class="meta">@Documented</span>     <span class="comment">// 表明 注解会被包含在Java API文档中。</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the retention policy.</div><div class="line">     * <span class="doctag">@return</span> the retention policy.</div><div class="line">     */</div><div class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Annotations are to be discarded by the compiler.</div><div class="line">     */</div><div class="line">    SOURCE,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Annotations are to be recorded in the class file by the compiler</div><div class="line">     * but need not be retained by the VM at run time.  This is the default</div><div class="line">     * behavior.</div><div class="line">     */</div><div class="line">    CLASS,</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Annotations are to be recorded in the class file by the compiler and</div><div class="line">     * retained by the VM at run time, so they may be read reflectively.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</div><div class="line">     */</div><div class="line">    RUNTIME</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>RetentionPolicy.SOURCE：只保留在源码中，在编译的时候会丢失，如上面的Override</p>
<p>RetentionPolicy.CLASS：注解将保留到 class 文件，但是在运行时将会丢失。</p>
<p>RetentionPolicy.RUNTIME：注解将一直保留到运行时期。<strong>可以被反射读取</strong>。如 @Retention 元注解本身。</p>
</blockquote>
<p><strong>引申1：如果定义一个注解需要被反射读取，则在定义这个注解的时候将添加@Retention(RetentionPolicy.RUNTIME) 元注解。</strong></p>
<ol>
<li>@Target 元注解，<strong>定义了注解应该起作用的地方</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)   <span class="comment">// 保留到运行时</span></div><div class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns an array of the kinds of elements an annotation type</div><div class="line">     * can be applied to.</div><div class="line">     * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</div><div class="line">     * can be applied to.</div><div class="line">     */</div><div class="line">    ElementType[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注解作用位置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</div><div class="line">    TYPE,                             <span class="comment">// 类，接口（包括注解），enum;</span></div><div class="line">    FIELD,                            <span class="comment">// 属性域</span></div><div class="line">    METHOD,                           <span class="comment">// 方法</span></div><div class="line">    PARAMETER,                        <span class="comment">// 参数</span></div><div class="line">    CONSTRUCTOR,                      <span class="comment">// 构造函数</span></div><div class="line">    LOCAL_VARIABLE,                   <span class="comment">// 局部变量</span></div><div class="line">    ANNOTATION_TYPE,                  <span class="comment">// 注解类型</span></div><div class="line">    PACKAGE,                          <span class="comment">// 包</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Type parameter declaration</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    TYPE_PARAMETER,                   <span class="comment">// 表明可以标注 类型参数</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Use of a type</div><div class="line">     * <span class="doctag">@since</span> 1.8</div><div class="line">     */</div><div class="line">    TYPE_USE                          <span class="comment">// 可以注解 任何类型名称</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>引申2：如果想要自定义一个注解，就必须指定注解作用的位置。作用在 类，方法，属性域，构造函数等。</strong></p>
<p><em>举例 SpringMVC 中的 @RequestMapping。</em><br>其源码定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Mapping</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</div><div class="line">    <span class="comment">// skip its class code.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>@RequestMapping 的@Target元注解 表明它可以被使用在方法和类（或接口，注解，enum）上。@RequestMapping 的@Retention元注解表明它可以保留到运行时(RUNTIME)，被反射读取。</p>
</blockquote>
<p><strong>引申3：如果想要自定义注解，除了添加@interface 修饰类名，必须满足上述引申1和引申2。 </strong></p>
<p>那么如何自定义注解？</p>
<p>请参考：</p>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;Java元注解释义&lt;br&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Spring 注解" scheme="http://nijun.me/tags/Spring-%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合Hibernate</title>
    <link href="http://nijun.me/2017/05/08/00001-2017-05-08-Spring%E6%95%B4%E5%90%88Hibernate/"/>
    <id>http://nijun.me/2017/05/08/00001-2017-05-08-Spring整合Hibernate/</id>
    <published>2017-05-07T23:55:47.000Z</published>
    <updated>2017-05-08T22:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><br>Spring整合Hibernate<br><br></div>

<a id="more"></a>
<p>hibernate.cfg.xml   Hibernate配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 第一部分： 配置数据库信息 必须的 --&gt;</span></div><div class="line">	 	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///spring_day04<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span>   </div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 第二部分： 配置hibernate信息  可选的--&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 输出底层sql语句 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 输出底层sql语句格式 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- hibernate帮创建表，需要配置之后 </span></div><div class="line">			update: 如果已经有表，更新，如果没有，创建</div><div class="line">		--&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 配置数据库方言</span></div><div class="line">			在mysql里面实现分页 关键字 limit，只能使用mysql里面</div><div class="line">			在oracle数据库，实现分页rownum</div><div class="line">			让hibernate框架识别不同数据库的自己特有的语句</div><div class="line">		 --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="comment">&lt;!-- 第三部分： 把映射文件放到核心配置文件中 必须的--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/nini/entity/User.hbm.xml"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ApplicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!--把数据源 bean 注入到sessionFactory的dataSource属性--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 引入hibernate配置文件 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/hibernate.cfg.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 1 --&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 引入映射文件，如果有多个可以继续添加 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span>     <span class="comment">&lt;!-- 2 --&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn/nini/entity/User.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 映射文件 --&gt;</span></div><div class="line">	 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:org/hhx/ssh/entities/*.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </div><div class="line">	<span class="comment">&lt;!-- 使用注解 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"org.nan.entities"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>优化：</p>
<p>可以去掉这句<!-- 1 --></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/hibernate.cfg.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在spring的配置文件中直接添加以下配置语句</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果用到映射文件</p>
<p>可以这样写</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingResources"</span>&gt;</span>     <span class="comment">&lt;!-- 2 --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn/nini/entity/User.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p>也可以这样写</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 映射文件 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:org/hhx/ssh/entities/*.hbm.xml"</span>&gt;</span>			<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果是用注解</p>
<p>只要在sessionFactory中添加如下代码</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"org.nan.entities"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;Spring整合Hibernate&lt;br&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://nijun.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>自己动手搭建个人博客到优化</title>
    <link href="http://nijun.me/2017/05/05/00001-2017-05-05-%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%88%B0%E4%BC%98%E5%8C%96/"/>
    <id>http://nijun.me/2017/05/05/00001-2017-05-05-自己动手搭建个人博客到优化/</id>
    <published>2017-05-05T14:07:56.000Z</published>
    <updated>2017-05-13T23:51:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/05/05/00001-2017-05-05-自己动手搭建个人博客到优化/avatar.jpg" alt=""></p>
 <div align="center"><br>  今天，是你未来所有剩余的日子中，最早的一天<br><br></div>

<div align="right">——<strong>stormzhang</strong>      </div>



<p>[TOC]</p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><br></p>
<p>我为什么要写这篇文章？是因为大学三年了，感觉学了这么多知识，但是并没有真正地去消化和总结过，最近又看到了<a href="http://www.baidu.com" title="stormzhang" target="_blank" rel="external">stormzhang</a>大神写的这篇<a href="http://stormzhang.com/android/2016/03/04/why-i-keep-writing-blog/" title="stormzhang" target="_blank" rel="external">我为什么坚持写博客？</a>。我真的感触很深，以前花了很多时间学的东西，不久之后便会印象模糊，想要回忆的时候，又不能快速找到。所以我决定从今天开始写博客，总结和梳理自己的知识。</p>
<a id="more"></a>
<p>stormzhang在他的文章里推荐了hexo，基于Node框架，可以和Github Pages结合起来搭建个人博客。而且主题样式非常多，可以自己选择搭配的东西很多。当我第一次把博客跑起来的时候，真的惊呆了，没想到个人博客也可以这么轻松的搭建。我用了五一这个假期，自己动手搭建了现在您正看到的这个博客，虽然现在很粗糙，但是我会不断的学习和优化它的。</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h3><p>Hexo是一个快速，简单和强大的博客框架。可以使用Markdown进行写作，Hexo会在几秒钟内生成具有美丽主题的静态文件。</p>
<h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><p>这里具体的操作步骤可以到<a href="https://hexo.io/" target="_blank" rel="external">hexo官网</a>。</p>
<ul>
<li><a href="https://nodejs.org" target="_blank" rel="external">Node.js</a></li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<p>如果已经装好了这些，那么我们现在就开始吧！</p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>一旦安装了所有要求，可以用npm安装Hexo。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> npm install hexo-cli -g  //在本地安装hexo的环境</div></pre></td></tr></table></figure></p>
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>首先选择一个目录作为hexo博客的根目录，使用git bash cd到这个目录，然后输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo init &lt;folder&gt;   //推荐 ，这里的folder参数如果指定，便会在终端当前的资料夹建立一个名为 folder 的新资料夹；</div><div class="line"><span class="meta">$</span> hexo init  //直接使用当前目录初始化</div></pre></td></tr></table></figure></p>
<p>完成后<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd folder</div><div class="line"><span class="meta">$</span> npm install  //在当前目录下安装hexo核心文件</div></pre></td></tr></table></figure></p>
<p>这样就安装完成了。这时候可以看到<code>floder</code>文件夹下具有这些子目录<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">.</span></div><div class="line"><span class="string">├──</span> <span class="string">_config.yml</span>   <span class="string">站点配置文件</span></div><div class="line"><span class="string">├──</span> <span class="string">package.json</span></div><div class="line"><span class="string">├──</span> <span class="string">scaffolds</span>    <span class="string">存放模板的地方</span></div><div class="line"><span class="string">├──</span> <span class="string">source</span>       <span class="string">原文件夹，存放网站内容</span></div><div class="line"><span class="string">|   ├── _drafts  存放临时草稿文件的地方</span></div><div class="line">|   └── _posts   已经发布的文章</div><div class="line">└── themes       主题文件夹</div></pre></td></tr></table></figure></p>
<p><code>source</code>中带有前缀_(下划线)的文件夹，在<code>generate</code>的时候会渲染到<code>public</code>目录中，其他的文件夹和文件仅仅被简单地复制到<code>public</code>中。</p>
<p>在<code>floder</code>目录下，有一个<code>_config.yml</code>，这个文件是整个网站的核心配置文件，由于后面主题文件夹中也有一个同名的配置文件，为了区分，网站的核心配置文件就叫做<code>站点配置文件</code>，主题中的叫做<code>主题配置文件</code>。</p>
<p>打开<code>站点配置文件</code>,可以看到<code>Site</code>标签，这是我的配置。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span> <span class="string">SimpleLifee</span>  <span class="comment">#网站标题</span></div><div class="line"><span class="attr">subtitle:</span> <span class="string">code,</span> <span class="string">mylife</span>   <span class="comment">#网站副标题</span></div><div class="line"><span class="attr">description:</span> <span class="string">start</span> <span class="string">from</span> <span class="string">zero</span>     <span class="comment">#网站描述</span></div><div class="line"><span class="attr">author:</span> <span class="string">Nimon</span>        <span class="comment">#你的名字</span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span>    <span class="comment">#语言，</span></div><div class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span>  <span class="comment">#时区</span></div></pre></td></tr></table></figure></p>
<p>还有<code>Deployment</code>标签，与Github Pages进行关联<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line"><span class="attr">deploy:</span></div><div class="line">	 <span class="attr">type:</span> <span class="string">git</span></div><div class="line">	 <span class="attr">repo:</span> <span class="string">git@github.com:SimpleLifee/SimpleLifee.github.io.git</span> </div><div class="line">	 <span class="attr">branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure></p>
<p>其中<code>type</code>必须填git，<code>repo</code>填写你在git上创建的库的<code>ssh</code>地址，或者<code>https</code>地址。<code>注意</code>如果是https的那么以后每次<code>deploy</code>的时候都要求你输入用户名和密码,如果改成<code>ssh</code>并且你没有给你的id_rsa设置密码（空密码也一样）的话，就不用每次都输入密码了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ssh-keygen -p -f /root/.ssh/id_dsa -N ''</div></pre></td></tr></table></figure></p>
<p>如果你之前设置了密码，那么使用这条命令就可以更改你的私钥的密码了。参考<a href="https://superuser.com/questions/508408/public-key-always-asking-for-password-and-keyphrase" target="_blank" rel="external">superuser</a></p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<p>创建一个新文章，<code>layout</code>可以有三个参数<code>post</code>、<code>page</code>、<code>draft</code>, hexo 会在 <code>Scaffold</code> 文件夹下寻找你写的 <code>layout.md</code> 文件模板来建立文件。如果 <code>title</code> 包含空格，请用引号括起来。</p>
<h4 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h4><p>在站点配置文件中<code>Writing</code> 标签下添加<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span></div></pre></td></tr></table></figure></p>
<p>其中 <code>:month</code> 和 <code>:i_month</code> 的区别在于 前者有前导零 （比如 <code>04</code> ）</p>
<h4 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h4><p>如果创建新文章的时候，指定了 <code>draft</code> 参数，那么就是保存到 <code>source/_drafts</code> 文件夹中，可以使用下面的语句，将草稿移动到 <code>source/_posts</code>文件中。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure></p>
<p>发布草稿变成正式文章。一般<code>filename</code>写你的草稿文件的名字，<code>layout</code>写<code>post</code></p>
<h4 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h4><p>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo new photo "My Gallery"</div></pre></td></tr></table></figure></p>
<p>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>layout</code></td>
<td>布局</td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
</tr>
<tr>
<td><code>date</code></td>
<td>文件建立日期</td>
</tr>
</tbody>
</table>
<h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code>、<code>draft</code>，它们分别对应不同的路径，自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>
<table>
<thead>
<tr>
<th style="text-align:left">布局</th>
<th style="text-align:left">路径</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">post</td>
<td style="text-align:left">source/_posts</td>
</tr>
<tr>
<td style="text-align:left">page</td>
<td style="text-align:left">source</td>
</tr>
<tr>
<td style="text-align:left">draft</td>
<td style="text-align:left">source/_drafts</td>
</tr>
</tbody>
</table>
<blockquote>
<p>不要处理我的文章<br>可以在Front-Matter 中的layout: 设为 false。</p>
</blockquote>
<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: Hello World</div><div class="line">date: 2017/5/1 20:46:25</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>也可以使用JSON 格式，只需要把 — 换成 ;;;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;title&quot;: &quot;Hello World&quot;,</div><div class="line">&quot;date&quot;: &quot;2017/5/1 20:46:25&quot;</div><div class="line">;;;</div></pre></td></tr></table></figure></p>
<p>Front-matter的参数列表</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>layout</code></td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
<td></td>
</tr>
<tr>
<td><code>date</code></td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td><code>updated</code></td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td><code>comments</code></td>
<td>开启文章的评论功能</td>
<td>true</td>
</tr>
<tr>
<td><code>description</code></td>
<td>文章的描述</td>
<td></td>
</tr>
<tr>
<td><code>tags</code></td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>categories</code></td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>覆盖文章网址</td>
</tr>
</tbody>
</table>
<h4 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">List</span></div><div class="line"><span class="bullet">  -</span> <span class="string">Dictionary</span></div><div class="line"><span class="bullet">  -</span> <span class="string">ArraryList</span></div><div class="line"><span class="bullet">  -</span> <span class="string">hashtable</span></div><div class="line"><span class="bullet">  -</span> <span class="string">Stack</span></div><div class="line"><span class="bullet">  -</span> <span class="string">Queue</span></div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="string">[Python,</span> <span class="string">Javascript,</span> <span class="string">Hexo]</span></div></pre></td></tr></table></figure></p>
<h4 id="引用块（Block-Quote）"><a href="#引用块（Block-Quote）" class="headerlink" title="引用块（Block Quote）"></a>引用块（Block Quote）</h4><p>模板如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class="line">content</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure></p>
<p>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote stormzhang %&#125;</div><div class="line">今天，是你未来所有剩余的日子中，最早的一天</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure></p>
<blockquote><p>今天，是你未来所有剩余的日子中，最早的一天</p>
<footer><strong>stormzhang</strong></footer></blockquote>
<h4 id="代码块（Code-Block）"><a href="#代码块（Code-Block）" class="headerlink" title="代码块（Code Block）"></a>代码块（Code Block）</h4><p>模板如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [title] [lang:language] [url] [link text]%&#125;</div><div class="line">code snippet</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure></p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock  main.java lang:java  http://www.runoob.com/java/java-tutorial.html Java%&#125;</div><div class="line">public static void main(String []args)&#123;</div><div class="line">&#125;</div><div class="line">&#123;% endcodeblock  %&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>main.java</span><a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="external">Java</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="醒目引文（Pull-Quote）"><a href="#醒目引文（Pull-Quote）" class="headerlink" title="醒目引文（Pull Quote）"></a>醒目引文（Pull Quote）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% pullquote [class] %&#125;</div><div class="line">something important</div><div class="line">&#123;% endpullquote %&#125;</div></pre></td></tr></table></figure>
<p>如下</p>
<blockquote class="pullquote [class]"><p>something important</p>
</blockquote>
<h4 id="图片（Image）"><a href="#图片（Image）" class="headerlink" title="图片（Image）"></a>图片（Image）</h4><p>有两种方式，一种是markdown格式的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](/images/avatar.jpg)</div></pre></td></tr></table></figure></p>
<p>另一种是hexo支持的格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% img [class names] /path/to/image [width] [height][title text [alt text]] %&#125;</div></pre></td></tr></table></figure>
<h4 id="链接（Link）"><a href="#链接（Link）" class="headerlink" title="链接（Link）"></a>链接（Link）</h4><p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。</p>
<pre><code>{% link text url [external] [title] %}

{% link 谷歌 http://www.google.com google %}
</code></pre><p>如<a href="http://www.google.com" title="google" target="_blank" rel="external">谷歌</a></p>
<h4 id="外部引用（Include-Code）"><a href="#外部引用（Include-Code）" class="headerlink" title="外部引用（Include Code）"></a>外部引用（Include Code）</h4><p>可以引入其他文件中的代码，例如下面语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include_code [title][lang:language] path/to/file %&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>hexo支持的语法还有很多，如<br><strong>jsFiddle</strong>、<strong>Gist</strong>、<strong>iframe</strong>、<strong>Youtube</strong>、<strong>Vimeo</strong>等等，有需要的建议自行查阅<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external">官方文档</a></p>
</blockquote>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><h4 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h4><p>要使用hexo的服务器，首先要安装</p>
<blockquote><p>npm install hexo-server –save</p>
</blockquote>
<p>安装完成后，默认在 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。</p>
<blockquote>
<p> $ hexo server -p 5000 //启动服务器， 可以简写 hexo s</p>
</blockquote>
<p>参数 <code>-p</code> 覆盖默认端口，参数 <code>-w</code> 查看文件改动<br>看到下面的信息，说明已经成功，可以查看你的博客了。<br><img src="http://i.imgur.com/qqg116z.png" alt=""></p>
<h4 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h4><p>在静态模式下，服务器只处理 public 文件夹内的文件，而不会处理文件变动，一般性用于你正在写博客的情况下。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo server -s</div></pre></td></tr></table></figure>
<h3 id="生成文件-Generating"><a href="#生成文件-Generating" class="headerlink" title="生成文件(Generating)"></a>生成文件(Generating)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo generate</div></pre></td></tr></table></figure>
<p>生成静态文件，参数 <code>-d</code> 生成完成后部署，参数 <code>-w</code> 查看文件改动，下面两种写法都一样</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo g -d</div><div class="line"><span class="meta">$</span> hexo d -g</div></pre></td></tr></table></figure>
<h4 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo generate --watch</div></pre></td></tr></table></figure>
<p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p>
<h3 id="部署（Deployment）"><a href="#部署（Deployment）" class="headerlink" title="部署（Deployment）"></a>部署（Deployment）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo deploy</div></pre></td></tr></table></figure>
<p>部署你的网站，在使用之前，需要在<code>站点配置文件</code> 进行配置。可以有多个deployer</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">- type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span></div><div class="line"><span class="attr">- type:</span> <span class="string">heroku</span>    </div><div class="line"><span class="attr">  repo:</span></div></pre></td></tr></table></figure>
<blockquote>
<p>缩进</p>
<p>YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</p>
</blockquote>
<h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>部署提示找不到Git , 直接使用这个命令从 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a> 上安装git的部署插件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>修改配置。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">type:</span> <span class="string">git</span></div><div class="line"><span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span>  </div><div class="line"><span class="attr">branch:</span> <span class="string">[branch]</span>  </div><div class="line"><span class="attr">message:</span> <span class="string">[message]</span></div></pre></td></tr></table></figure><br>​    </p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>repo</code></td>
<td>库（Repository）地址</td>
</tr>
<tr>
<td><code>branch</code></td>
<td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。                    最好填ssh，这样就每次deploy的时候都要输入密码了。</td>
</tr>
<tr>
<td><code>message</code></td>
<td>自定义提交信息 (默认为 <code>Site updated: { { now(&#39;YYYY-MM-DD HH:mm:ss&#39;) }}</code>)</td>
</tr>
</tbody>
</table>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>其他部署方案，可以参见<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external">官方文档</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo clean</div></pre></td></tr></table></figure></p>
<p>清除缓存文件（db.json）和生成的文件（public）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo list &lt;type&gt;</div></pre></td></tr></table></figure></p>
<p><code>type</code> 可以是<code>page</code>, <code>post</code>,<code>route</code>, <code>tag</code>, <code>category</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo version</div></pre></td></tr></table></figure></p>
<p>显示版本信息<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo --config custom.yml</div><div class="line"><span class="meta">$</span> hexo --config custom.yml，custom2.json</div></pre></td></tr></table></figure></p>
<p>使用自定义配置文件（而不是_config.yml），还可以接受将文件合并为一个的JSON或YAML配置文件的逗号分隔列表（无空格）</p>
<p>自动更新文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo g     //也可以这样写hexo generate</div></pre></td></tr></table></figure></p>
<p>部署到git<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo d</div></pre></td></tr></table></figure></p>
<p>一般可以这样简写，就是说在部署到git之前，先进行更新<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hexo d -g</div></pre></td></tr></table></figure></p>
<p>可以查看hexo的版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure></p>
<p>这时候万一遇到这个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR Deployer not found: git</div></pre></td></tr></table></figure></p>
<p>试试</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</div><div class="line"><span class="meta">$</span> npm install hexo --save</div></pre></td></tr></table></figure>
<p>#NexT</p>
<p>如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。</p>
<ol>
<li>下载主题</li>
</ol>
<p>​<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd your-hexo-site</div><div class="line"><span class="meta">$</span> git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<ol>
<li><p>启用主题<br>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <code>站点配置文件</code>， 找到<code>theme</code>字段，并将其值更改为<code>next</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>$ hexo clean</code> 来清除 Hexo 的缓存。</p>
</li>
</ol>
<h3 id="一些好用的插件"><a href="#一些好用的插件" class="headerlink" title="一些好用的插件"></a>一些好用的插件</h3><blockquote><p>hexo可视化后台管理，很方便 - <a href="https://github.com/nihgwu/hexo-hey" target="_blank" rel="external">hexo-hey</a><br>在 hexo 中无痛使用本地图片 - <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">hexo-asset-image</a><br>备份整个博客包括主题 - <a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="external">hexo-git-backup</a></p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p>网易云音乐 - <a href="http://weqeo.com/2016/10/11/Hexo中播放网易云音乐的实践" target="_blank" rel="external">Hexo中播放网易云音乐的实践</a><br>网易云音乐 - <a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="external">GitHub Ribbons</a><br>字数统计WordCount 、阅读时长预计Min2Read、总字数统计TotalCount - <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="external">hexo-wordcount</a>  </p>
</blockquote>
<p>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/05/05/00001-2017-05-05-自己动手搭建个人博客到优化/avatar.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
 &lt;div align=&quot;center&quot;&gt;&lt;br&gt;  今天，是你未来所有剩余的日子中，最早的一天&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;div align=&quot;right&quot;&gt;——&lt;strong&gt;stormzhang&lt;/strong&gt;      &lt;/div&gt;



&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;我为什么要写这篇文章？是因为大学三年了，感觉学了这么多知识，但是并没有真正地去消化和总结过，最近又看到了&lt;a href=&quot;http://www.baidu.com&quot; title=&quot;stormzhang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stormzhang&lt;/a&gt;大神写的这篇&lt;a href=&quot;http://stormzhang.com/android/2016/03/04/why-i-keep-writing-blog/&quot; title=&quot;stormzhang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我为什么坚持写博客？&lt;/a&gt;。我真的感触很深，以前花了很多时间学的东西，不久之后便会印象模糊，想要回忆的时候，又不能快速找到。所以我决定从今天开始写博客，总结和梳理自己的知识。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://nijun.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://nijun.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>GitHub</title>
    <link href="http://nijun.me/2017/05/05/00001-2017-05-05-GitHub/"/>
    <id>http://nijun.me/2017/05/05/00001-2017-05-05-GitHub/</id>
    <published>2017-05-05T13:55:29.000Z</published>
    <updated>2017-05-21T23:41:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/05/05/00001-2017-05-05-GitHub/github.png" alt=""></p>
<div align="center"><br><br>GitHub基本操作<br><br></div>

<a id="more"></a>
<h1 id="如何删除某个分支？"><a href="#如何删除某个分支？" class="headerlink" title="如何删除某个分支？"></a>如何删除某个分支？</h1><p>下载安装git管理工具<br>进入项目根目录（含.git文件夹）使用bash运行git命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout the_local_branch // 切换到本地分支</div><div class="line"><span class="meta"></span></div><div class="line">$ git branch -d the_local_branch // 删除本地分支的所用记录</div><div class="line"><span class="meta"></span></div><div class="line">$ git branch -D the_local_branch // 上面执行有问题，需要-D强制删除</div><div class="line"><span class="meta"></span></div><div class="line">$ git push origin :the_remote_branch // 删除远程分支</div><div class="line"></div><div class="line">至此该分支的所有记录都被完全删除了</div></pre></td></tr></table></figure>
<h1 id="Git配置多个SSH"><a href="#Git配置多个SSH" class="headerlink" title="Git配置多个SSH"></a>Git配置多个SSH</h1><h3 id="生成并添加第一个SSH"><a href="#生成并添加第一个SSH" class="headerlink" title="生成并添加第一个SSH"></a>生成并添加第一个SSH</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "youremail@xxx.com"</div></pre></td></tr></table></figure>
<p>在Git Bash中执行命令一路回车，会在~/.ssh/目录下生成id_rsa和id_rsa.pub两个文件用文本编辑器打开id_rsa.pub里的内容，在Github中添加SSH Keys</p>
<h3 id="生成并添加第二个SSH"><a href="#生成并添加第二个SSH" class="headerlink" title="生成并添加第二个SSH"></a>生成并添加第二个SSH</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "youremail@xxx.com"</div></pre></td></tr></table></figure>
<p>这次不要一路回车，请输入这个文件的名字，见下面的第三行。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "824291045@qq.com"</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/Users/nimon/.ssh/id_rsa): other</div><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved in other.</div><div class="line">Your public key has been saved in other.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:tlHc9GiN8cLngDw8QmomMlxmc+2odsRciMjIu6ljjzQ 824291045@qq.com</div><div class="line">The key's randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">|.o .=..o.   o    |</div><div class="line">|.oo+.o.oo+ = B   |</div></pre></td></tr></table></figure>
<p>如上输入 <code>other</code>  之后会在.ssh目录下生成两个文件 <code>other</code> 和 <code>other.pub</code> </p>
<h3 id="在-ssh下创建config文件"><a href="#在-ssh下创建config文件" class="headerlink" title="在.ssh下创建config文件"></a>在.ssh下创建config文件</h3><p>HostName 是域名地址</p>
<p>PreferredAuthentications  配置登录时用什么权限认证–可设为<code>publickey,password publickey,keyboard-interactive等</code></p>
<p>IdentityFile 是id_rsa的地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Host github.com  </div><div class="line">    HostName github.com  </div><div class="line">    PreferredAuthentications publickey  </div><div class="line">    IdentityFile ~/.ssh/id_rsa  </div><div class="line">  </div><div class="line">Host other.github.com  </div><div class="line">    HostName github.com  </div><div class="line">    PreferredAuthentications publickey  </div><div class="line">    IdentityFile ~/.ssh/other</div></pre></td></tr></table></figure>
<p>之后保存并推出编辑器。</p>
<h3 id="打开Git-Bash客户端测试"><a href="#打开Git-Bash客户端测试" class="headerlink" title="打开Git Bash客户端测试"></a>打开Git Bash客户端测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ssh -T git@github.com</div><div class="line">Hi SimpleLifee! You've successfully authenticated, but GitHub does not provide shell access.</div><div class="line"><span class="meta"></span></div><div class="line">$ ssh -T git@other.github.com</div><div class="line">Hi junoni! You've successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><p>如果在项目中使用 <code>git push</code> 时提示<code>[remote reject]   (Permission denied)</code> 。如下所示</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">To github.com:junoni/nimon.git</div><div class="line"> ! [remote rejected] work -&gt; work (permission denied)</div><div class="line">error: failed to push some refs to 'git@github.com:junoni/nimon.git'</div></pre></td></tr></table></figure>
<p>可是尝试下面命令，将<code>other</code> 加入到密钥列表中。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ssh-add ~/.ssh/other</div></pre></td></tr></table></figure>
<p>查看当前密钥列表</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ssh-add -l</div></pre></td></tr></table></figure>
<p>类似debug，查看与远程连接情况。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> ssh -v git@github.com</div></pre></td></tr></table></figure>
<h1 id="查看全局config信息"><a href="#查看全局config信息" class="headerlink" title="查看全局config信息"></a>查看全局config信息</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git config --list</div></pre></td></tr></table></figure>
<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p><strong>用户信息</strong><br>配置你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name “youname”</div><div class="line">$ git config --global user.email “12345@example.com”</div></pre></td></tr></table></figure>
<p>如果用了 —global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 —global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>
<h2 id="GIT基础"><a href="#GIT基础" class="headerlink" title="GIT基础"></a>GIT基础</h2><p><strong>查看配置信息</strong><br>查看已有的配置信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --list</div><div class="line">$ git config -l</div></pre></td></tr></table></figure>
<p><strong>获取帮助</strong><br>例如想获取config命令的帮助信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git help config </div><div class="line">$ git config --help</div></pre></td></tr></table></figure>
<p><strong>初始化新仓库</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure>
<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。</p>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><strong>跟踪文件：</strong>（将文件加到暂存区域）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add readme.txt</div></pre></td></tr></table></figure>
<p><strong>跟踪全部文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
<p><strong>提交更新</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m “first version”</div></pre></td></tr></table></figure>
<p><strong>上传（推送）到github</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p><strong>从现有仓库克隆</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone git://github.com/youname/project.git</div><div class="line">$ git clone git@github.com:youname/project.git</div><div class="line">$ git clone https://github.com/youname/project.git</div></pre></td></tr></table></figure>
<p><strong>检查当前文件状态</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git status</div></pre></td></tr></table></figure>
<p><strong>创建.gitignore文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch .gitignore</div></pre></td></tr></table></figure>
<p><strong>查看修改之后没有暂存起来的内容</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff</div></pre></td></tr></table></figure>
<p><strong>移除文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm readme.txt</div></pre></td></tr></table></figure>
<p><strong>重命名文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git mv oldname.txt newname.txt</div></pre></td></tr></table></figure>
<p><strong>查看提交历史</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log</div></pre></td></tr></table></figure>
<p><strong>取消暂存</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD readme.txt</div></pre></td></tr></table></figure>
<p><strong>添加远程仓库</strong>（远程仓库必须先在github上建好）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add [shortname] [url]</div></pre></td></tr></table></figure>
<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:youname/yourRepo.git</div></pre></td></tr></table></figure>
<p><strong>推送数据到仓库</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push [remote-name] [branch-name]</div></pre></td></tr></table></figure>
<p>如果要把本地的 master 分支推送到origin服务器上（再次说明下，克隆操作会自动使用默认的master 和origin 名字），可以运行下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p><strong>从远程仓库抓取数据</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch [remote-name]</div></pre></td></tr></table></figure>
<p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库<br><strong>远程仓库的删除</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote rm origin</div></pre></td></tr></table></figure>
<p><strong>远程仓库重命名</strong>(此处命名的是上文添加远程仓库中的shortname)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote rename origin origin2</div></pre></td></tr></table></figure>
<p><strong>自动补全</strong><br>输入命令后按tab键，就会看到列出所有匹配的可用命令建议：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git co&lt;tab&gt;</div></pre></td></tr></table></figure>
<h2 id="GIT分支"><a href="#GIT分支" class="headerlink" title="GIT分支"></a>GIT分支</h2><p><strong>创建一个名为“testing”的分支</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch testing</div></pre></td></tr></table></figure>
<p>切换到“testing”分支(默认为master分支)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout testing</div></pre></td></tr></table></figure>
<p><strong>新建并切换到该分支</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b iss53</div></pre></td></tr></table></figure>
<p>这条命令相当于执行下面这两条命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch iss53</div><div class="line">$ git checkout iss53</div></pre></td></tr></table></figure>
<p><strong>删除hotfix分支</strong>（如果该分支还未被合并则会提示错误，因为这样会丢失数据）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -d hotfix</div></pre></td></tr></table></figure>
<p><strong>强制删除hotfix分支</strong>（强制删除，不会提示错误）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -D hotfix</div></pre></td></tr></table></figure>
<p><strong>合并iss53分支</strong>（先切换到master分支）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">$ git merge iss53</div></pre></td></tr></table></figure>
<p><strong>查看当前所有分支</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure>
<p><strong>查看各个分支最后一个提交对象的信息</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -v</div></pre></td></tr></table></figure>
<p><strong>查看已经与当前分支合并的分支</strong>（已经合并的查出来后可以删掉）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --merge</div></pre></td></tr></table></figure>
<p><strong>查看未与当前分支合并的分支</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --no-merged</div></pre></td></tr></table></figure>
<p><strong>同步远程服务器数据到本地</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin</div></pre></td></tr></table></figure>
<p><strong>从新添加的远程仓库下载数据</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote add teamone git://git.team1.ourcompany.com</div><div class="line">$ git fetch teamone</div></pre></td></tr></table></figure>
<p><strong>分化一个新的分支</strong>(使用这个命令会从服务器上下载master最新的版本，所以如果当前本地版本不是最新的，新的分支和本地分支会不同)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b test1 origin/master</div></pre></td></tr></table></figure>
<p>假如你用这个新的分支进行git push，并且通过了合并，那么会在远程仓库建立一个新的同名分支<br>删除该分支的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :test1</div></pre></td></tr></table></figure>
<p><strong>分支的衍合：</strong>将test1分支衍合到master主分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout test1</div><div class="line">$ git rebase master</div></pre></td></tr></table></figure>
<p>另一种方法，直接衍合，不用再先切换到test1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rebase master test1</div></pre></td></tr></table></figure>
<p><strong>快进master分支</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">$ git merge client</div></pre></td></tr></table></figure>
<h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><ul>
<li>查看远程库信息，使用<code>git remote -v</code>；</li>
<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>
<li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li>
<li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li>
<li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li>
<li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li>
</ul>
<p><strong>找到历史提交的commit ID</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log  --graph --pretty=oneline --abbrev-commit</div></pre></td></tr></table></figure>
<h1 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h1><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li>
<li><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li>
<li><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；</li>
<li>命令<code>git tag</code>可以查看所有标签。</li>
<li><code>git show &lt;tagname&gt;</code>可以查看标签的详情</li>
</ul>
<h1 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h1><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul>
<li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li>
<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>
<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>
<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</div></pre></td></tr></table></figure>
<p>touch readme.md</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h4 id="git-init-初始化仓库"><a href="#git-init-初始化仓库" class="headerlink" title="git init 初始化仓库"></a>git init 初始化仓库</h4><h4 id="git-status-查看仓库的状态"><a href="#git-status-查看仓库的状态" class="headerlink" title="git status  查看仓库的状态"></a>git status  查看仓库的状态</h4><h4 id="git-add-向暂存区中添加文件"><a href="#git-add-向暂存区中添加文件" class="headerlink" title="git add 向暂存区中添加文件"></a>git add 向暂存区中添加文件</h4><h4 id="git-commit-保存仓库的历史记录"><a href="#git-commit-保存仓库的历史记录" class="headerlink" title="git commit 保存仓库的历史记录"></a>git commit 保存仓库的历史记录</h4><h5 id="记录一行提交信息"><a href="#记录一行提交信息" class="headerlink" title="记录一行提交信息"></a>记录一行提交信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git commit -m "First Commit"</div></pre></td></tr></table></figure>
<h5 id="记录详细提交信息"><a href="#记录详细提交信息" class="headerlink" title="记录详细提交信息"></a>记录详细提交信息</h5><p>请不要加-m，直接执行 git commit 命令。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git commit </div><div class="line">+git tracks changes of files.</div><div class="line"><span class="meta"></span></div><div class="line"># Please enter the commit message for your changes. Lines starting</div><div class="line"><span class="meta">#</span> with '#' will be ignored, and an empty message aborts the commit.</div><div class="line"><span class="meta">#</span> On branch dev</div><div class="line"><span class="meta">#</span> Your branch is ahead of 'origin/dev' by 3 commits.</div><div class="line"><span class="meta">#</span>   (use "git push" to publish your local commits)</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span> Changes to be committed:</div><div class="line"><span class="meta">#</span>       modified:   readme.md</div><div class="line"><span class="meta">#</span></div></pre></td></tr></table></figure>
<p>在编辑器中记录提交信息</p>
<ul>
<li>第一行：用一行文件简述提交的更改内容</li>
<li>第二行：空行</li>
<li>第三行：记录更改的原因和详细内容</li>
</ul>
<p>在以 # 标位注释的 Changes to be committed 可以查看本次提交中包含的文件。其他信息不必修改。</p>
<h5 id="终止提交"><a href="#终止提交" class="headerlink" title="终止提交"></a>终止提交</h5><p>请将提交信息留空并直接关闭编译器，随后提交就会被中止。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Aborting commit due to empty commit message.</div></pre></td></tr></table></figure>
<h5 id="查看提交后的状态"><a href="#查看提交后的状态" class="headerlink" title="查看提交后的状态"></a>查看提交后的状态</h5><p>执行完git commit 命令后再来查看当前状态</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git status</div><div class="line">On branch dev</div><div class="line">nothing to commit, working tree clean</div></pre></td></tr></table></figure>
<p>当前工作树处于刚刚提交的最新状态，所以结果显示没有更改。</p>
<h4 id="git-log-查看提交日志"><a href="#git-log-查看提交日志" class="headerlink" title="git log 查看提交日志"></a>git log 查看提交日志</h4><p>可以查看以往仓库中提交的日志。包括什么人在什么时候进行了提交或合并，以及操作后有怎样的差别。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git log</div><div class="line">commit d97ade219a7f50f61790a14aa40f3142a07f49ba</div><div class="line">Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class="line">Date:   Sat May 20 16:47:09 2017 +0800</div><div class="line"></div><div class="line">    First Commit</div></pre></td></tr></table></figure>
<p>Commit 旁边显示的是这个提交的哈希值。这个值很重要，在后面会讲到。</p>
<p>Author 栏中显示的是我们给 Git 设置的用户名和邮箱。</p>
<p>Date 栏显示的是提交的日期和时间。</p>
<p>最后是提交信息。</p>
<h5 id="只显示提交信息的第一行"><a href="#只显示提交信息的第一行" class="headerlink" title="只显示提交信息的第一行"></a>只显示提交信息的第一行</h5><p>在 <code>git log</code>  后面加上 <code>--pretty=short</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git log --pretty=short</div><div class="line"></div><div class="line">commit d97ade219a7f50f61790a14aa40f3142a07f49ba</div><div class="line">Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class="line"></div><div class="line">    First Commit</div></pre></td></tr></table></figure>
<h5 id="只显示指定目录、文件的日志"><a href="#只显示指定目录、文件的日志" class="headerlink" title="只显示指定目录、文件的日志"></a>只显示指定目录、文件的日志</h5><p>在 <code>git log</code> 后加上文件名或者目录名即可。</p>
<h5 id="显示改动的文件"><a href="#显示改动的文件" class="headerlink" title="显示改动的文件"></a>显示改动的文件</h5><p>如果想查看提交所带来的改动，可以加上 <code>-p</code> 参数，文件的前后差别就会显示在提交信息之后。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git log -p</div></pre></td></tr></table></figure>
<p>只查看某个文件提交前和提交后的差别</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git log -p README.md</div></pre></td></tr></table></figure>
<p>如上， 我们不必依次记下全部参数，每当有想查看的日志就积极去查，慢慢就能得心应手了。</p>
<h4 id="git-diff-查看更改前后的差别"><a href="#git-diff-查看更改前后的差别" class="headerlink" title="git diff 查看更改前后的差别"></a>git diff 查看更改前后的差别</h4><p><code>git diff</code> 可以查看工作树、暂存区、最新提交之间的差别。</p>
<p>注意暂存区是指 <code>git add</code> 之后，但未 <code>git commit</code>  时保存在暂存区的内容。这个时候可以使用 <code>git diff</code> 来查看工作树和暂存区的差别。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git diff readme.md</div><div class="line">diff --git a/readme.md b/readme.md</div><div class="line">index 7f612d5..c4123d2 100644</div><div class="line">--- a/readme.md</div><div class="line">+++ b/readme.md</div><div class="line">@@ -11,5 +11,5 @@ dev: other</div><div class="line"> something happend.</div><div class="line"> i will be fine.</div><div class="line"> hah</div><div class="line">-</div><div class="line">+hey! Git!</div></pre></td></tr></table></figure>
<p>注意，这里的 <code>+</code>  标出的是新添加的行，被删除的行则用 <code>-</code> 标出。</p>
<p>这时候如果使用 <code>git add</code> 将 <code>README.md</code> 加入暂存区后。工作树和正常启动内容并无差别，结果什么都不会显示。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git add README.md</div></pre></td></tr></table></figure>
<h5 id="查看工作树和最新提交的差别"><a href="#查看工作树和最新提交的差别" class="headerlink" title="查看工作树和最新提交的差别"></a>查看工作树和最新提交的差别</h5><p> 当使用<code>git add</code> 将 <code>README.md</code> 加入暂存区后，要查看工作树与最新提交的差别，请使用以下命令。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git diff HEAD</div><div class="line">diff --git a/readme.md b/readme.md</div><div class="line">index 7f612d5..c4123d2 100644</div><div class="line">--- a/readme.md</div><div class="line">+++ b/readme.md</div><div class="line">@@ -11,5 +11,5 @@ dev: other</div><div class="line"> something happend.</div><div class="line"> i will be fine.</div><div class="line"> hah</div><div class="line">-</div><div class="line">+hey! Git!</div></pre></td></tr></table></figure>
<p>不妨养成这样一个好习惯，在执行 <code>git commit</code> 命令之前先执行 <code>git diff HEAD</code> 查看本次提交与上次提交之间有什么差别，等确认完毕再进行提交。这里的 <code>HEAD</code> 指当前分支中最新的一次提交的指针。</p>
<p>##### </p>
<h1 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h1><h4 id="git-branch-显示分支一览表"><a href="#git-branch-显示分支一览表" class="headerlink" title="git branch 显示分支一览表"></a>git branch 显示分支一览表</h4><p>这个命令会将本地的分支名列表显示，* 表示当前所在分支。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git branch</div><div class="line">* master</div></pre></td></tr></table></figure>
<h4 id="git-checkout-b-创建、切换分支"><a href="#git-checkout-b-创建、切换分支" class="headerlink" title="git checkout -b 创建、切换分支"></a>git checkout -b 创建、切换分支</h4><p>以当前分支为基础创建新的分支，可以使用 <code>git checkout -b</code>命令</p>
<h5 id="切换到-feature-A-分支并进行提交"><a href="#切换到-feature-A-分支并进行提交" class="headerlink" title="切换到 feature-A 分支并进行提交"></a>切换到 feature-A 分支并进行提交</h5><p>执行下面的命令，创建名为 <code>feature-A</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout -b feature-A</div><div class="line">Switched to a new branch 'feature-A'</div></pre></td></tr></table></figure>
<p>实际上，以上语句等同于</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git branch feature-A</div><div class="line"><span class="meta">$</span> git checkout feature-A</div></pre></td></tr></table></figure>
<h5 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout master</div></pre></td></tr></table></figure>
<h5 id="切换回上一个分支"><a href="#切换回上一个分支" class="headerlink" title="切换回上一个分支"></a>切换回上一个分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout -</div></pre></td></tr></table></figure>
<p>使用 <code>-</code> （连字符） 代替分支名。</p>
<h4 id="特性分支"><a href="#特性分支" class="headerlink" title="特性分支"></a>特性分支</h4><p>顾名思义，特性分支是集中实现单一特性（主题），除此之外不进行任何作业的分支。在日常开发中，往往会创建数个特性分支，同时再保留一个随时可以发布软件的稳定分支。稳定分支一般由 <code>master</code>  分支担当。</p>
<p>只要保持这样一个开发流程，就能保证master分支可以随时供人查看。其他开发者也可以放心大胆从master分支创建新的特性分支。</p>
<h4 id="主干分支"><a href="#主干分支" class="headerlink" title="主干分支"></a>主干分支</h4><p>特性分支的原点，也是合并的终点。主干分支没有开发到一半的代码，可以随时供人查看。</p>
<p>主干分支可以有多个，使用 Tag 标签创建版本信息。</p>
<h4 id="git-merge-合并分支"><a href="#git-merge-合并分支" class="headerlink" title="git merge 合并分支"></a>git merge 合并分支</h4><p>先切换到master，然后与 <code>feature-A</code> 合并</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git merge --no-ff feature-A</div></pre></td></tr></table></figure>
<h4 id="git-log-—graph-以图表形式查看分支"><a href="#git-log-—graph-以图表形式查看分支" class="headerlink" title="git log —graph 以图表形式查看分支"></a>git log —graph 以图表形式查看分支</h4><p>可以直观地用图表形式输出提交的日志。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git log --graph</div><div class="line">*   commit 685c45a39c33a4777d14fb29f6f0bfb9b9920c49</div><div class="line">|\  Merge: 6b15d42 40befaa</div><div class="line">| | Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class="line">| | Date:   Sat May 20 18:04:48 2017 +0800</div><div class="line">| |</div><div class="line">| |     merge</div><div class="line">| |</div><div class="line">| *   commit 40befaab3f0db6fd47e2d553b88428a4ca39e670</div><div class="line">| |\  Merge: a0b10f9 6b15d42</div><div class="line">| |/  Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class="line">|/|   Date:   Sat May 20 17:51:52 2017 +0800</div><div class="line">| |</div><div class="line">| |       fix</div><div class="line">| |</div></pre></td></tr></table></figure>
<h1 id="更改提交的操作"><a href="#更改提交的操作" class="headerlink" title="更改提交的操作"></a>更改提交的操作</h1><h4 id="git-reset-回溯历史版本"><a href="#git-reset-回溯历史版本" class="headerlink" title="git reset 回溯历史版本"></a>git reset 回溯历史版本</h4><h5 id="回溯到创建-feature-A-分支前"><a href="#回溯到创建-feature-A-分支前" class="headerlink" title="回溯到创建 feature-A 分支前"></a>回溯到创建 <code>feature-A</code> 分支前</h5><p>让仓库的HEAD、暂存区、当前的工作树回溯到指定状态。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git reset --hard &lt;哈希值&gt;</div></pre></td></tr></table></figure>
<h5 id="创建-fix-B-分支"><a href="#创建-fix-B-分支" class="headerlink" title="创建 fix-B 分支"></a>创建 fix-B 分支</h5><h5 id="推进至feature-A分支合并后的状态"><a href="#推进至feature-A分支合并后的状态" class="headerlink" title="推进至feature-A分支合并后的状态"></a>推进至feature-A分支合并后的状态</h5><p>首先回复到feature-A分支合并后的状态，可以称之为“推进历史”。</p>
<p><code>git log</code> 只能查看以当前状态为终点的历史日志。</p>
<p>所以这里要使用<code>git reflog</code> 查看当前仓库的操作历史， 可以看到commit、checkout、reset、merge等Git命令的执行记录。</p>
<h5 id="消除冲突"><a href="#消除冲突" class="headerlink" title="消除冲突"></a>消除冲突</h5><p>如果系统提示我们文件发生了冲突，那么不解决冲突就无法完成合并，所以需要我们手动来解决冲突。解决完冲突文件后再执行<code>git add</code> 和<code>git commit</code> 。</p>
<h4 id="git-commit-–amend-修改提交信息"><a href="#git-commit-–amend-修改提交信息" class="headerlink" title="git commit –amend 修改提交信息"></a>git commit –amend 修改提交信息</h4><h4 id="git-rebase-i-压缩历史"><a href="#git-rebase-i-压缩历史" class="headerlink" title="git rebase -i 压缩历史"></a>git rebase -i 压缩历史</h4><p>在合并特性分支之前，如果发现已提交的内容中有些拼写错误，不妨提交一个修改，然后<strong>将这个修改包含到前一个提交之中</strong>，压缩成一个历史记录。这是个会经常用到的技巧。</p>
<h5 id="创建-feature-C-分支"><a href="#创建-feature-C-分支" class="headerlink" title="创建 feature-C 分支"></a>创建 feature-C 分支</h5><p>首先创建 feature-C 分支，然后 add 和 commit命令。</p>
<p>但是没必要每次这么麻烦。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git commit -am "Add feature-C"</div></pre></td></tr></table></figure>
<blockquote>
<p>执行上面语句的前提是，当前工作树中没有新增的Untracked  的文件。</p>
</blockquote>
<h5 id="修正拼写错误"><a href="#修正拼写错误" class="headerlink" title="修正拼写错误"></a>修正拼写错误</h5><p>修改错误之后，使用<code>git diff</code> 来查看差别。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git diff</div><div class="line">diff --git a/readme.md b/readme.md</div><div class="line">index 10f9ebb..3bbe2d0 100644</div><div class="line">--- a/readme.md</div><div class="line">+++ b/readme.md</div><div class="line">@@ -1,2 +1,3 @@</div><div class="line"> C</div><div class="line"> C</div><div class="line">+fix C</div></pre></td></tr></table></figure>
<p>然后进行提交</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git commit -am "Fix Typo"</div><div class="line">[C c3955c1] Fix Typo</div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
<p>错字漏字等失误称作typo，但是我们不希望在历史记录中看到这类提交，因为健全的历史记录不需要它们。</p>
<h5 id="更改历史"><a href="#更改历史" class="headerlink" title="更改历史"></a>更改历史</h5><p>我们将修正的内容与之前的一次提交合并，在历史记录中合并为一次完美的提交。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git rebase -i HEAD~2</div></pre></td></tr></table></figure>
<p>上面的命令，可以选定当前分支中包含HEAD ( 最新提交 ) 在内的两个最新历史记录为对象，并在编辑器中打开。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">pick 695471a Add C</div><div class="line">pick 2f8a965 fix typo</div><div class="line"><span class="meta"></span></div><div class="line"># Rebase 1db92da..2f8a965 onto 1db92da (2 commands)</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span> Commands:</div><div class="line"><span class="meta">#</span> p, pick = use commit</div><div class="line"><span class="meta">#</span> r, reword = use commit, but edit the commit message</div><div class="line"><span class="meta">#</span> e, edit = use commit, but stop for amending</div><div class="line"><span class="meta">#</span> s, squash = use commit, but meld into previous commit</div><div class="line"><span class="meta">#</span> f, fixup = like "squash", but discard this commit's log message</div><div class="line"><span class="meta">#</span> x, exec = run command (the rest of the line) using shell</div><div class="line"><span class="meta">#</span> d, drop = remove commit</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span> These lines can be re-ordered; they are executed from top to bottom.</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span> If you remove a line here THAT COMMIT WILL BE LOST.</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span> However, if you remove everything, the rebase will be aborted.</div><div class="line"><span class="meta">#</span></div><div class="line"><span class="meta">#</span> Note that empty commits are commented out</div></pre></td></tr></table></figure>
<p>695471a我们将 <code>2f8a965</code> 的 <code>fix typo</code> 的历史记录压缩到 <code>695471a</code> 的 <code>Add C</code>里。按照下图所示，将<code>2f8a965</code>左侧的 <code>pick</code> 部分删除，改写为 <code>fixup</code> 。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pick 695471a Add C</div><div class="line">fixup 2f8a965 fix typo</div></pre></td></tr></table></figure>
<p>保存编译器里的内容，关闭编辑器</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[detached HEAD 5f770a9] nnnnnnnn</div><div class="line"> Date: Sat May 20 22:07:28 2017 +0800</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line">Successfully rebased and updated refs/heads/C.</div></pre></td></tr></table></figure>
<p>系统显示 rebase 成功，也就是以下面这两个提交作为对象，将 <code>fix typo</code> 的内容合并到了上一个提交<code>Add C</code> 之中，改写成一个新的提交。</p>
<ul>
<li>695471a Add C</li>
<li>2f8a965 fix typo</li>
</ul>
<p>现在查看提交日志时会发现 <code>Add C</code> 的哈希值以及不再是 <code>695471a</code> ，这证明提交已经被更改了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git log --graph --oneline</div><div class="line">* 5f770a9 Add C</div><div class="line">* 1db92da haha</div><div class="line">* c1aabf4 Add B</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这样，<code>fix typo</code>就从历史中被抹去了，也相当于 <code>Add C</code>从来没有出现过拼写错误。这算是一种良性的历史改写。</p>
<h5 id="合并至master分支"><a href="#合并至master分支" class="headerlink" title="合并至master分支"></a>合并至master分支</h5><p>C 分支的使命告一段落，我们将它与master分支合并。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout master</div><div class="line">Switched to branch 'master'</div><div class="line"><span class="meta"></span></div><div class="line">$ git merge --no-ff C</div><div class="line">Merge made by the 'recursive' strategy.</div><div class="line"> a         | 2 ++</div><div class="line"> readme.md | 2 ++</div><div class="line"> 2 files changed, 4 insertions(+)</div><div class="line"> create mode 100644 a</div><div class="line"> create mode 100644 readme.md</div></pre></td></tr></table></figure>
<p>按照递归策略合并。</p>
<h1 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h1><blockquote>
<p>建议在新建远程仓库的时候不要勾选自动生成README文件的选项。</p>
</blockquote>
<h4 id="git-remote-add-添加远程仓库"><a href="#git-remote-add-添加远程仓库" class="headerlink" title="git remote add 添加远程仓库"></a>git remote add 添加远程仓库</h4><p>我们用 <code>git remote add</code> 命令将它设置成本地仓库的远程仓库。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git remote add origin git@github.com:9981NAN/9981NAN.git</div></pre></td></tr></table></figure>
<p>这样，Git会自动将 <code>git@github.com:9981NAN/9981NAN.git</code> 远程仓库名称设置为 origin （ 标识符 ）</p>
<h5 id="添加多个-URL-地址"><a href="#添加多个-URL-地址" class="headerlink" title="添加多个 URL 地址"></a>添加多个 URL 地址</h5><p>像上面 <code>git remote add origin &lt;url1&gt;</code> 添加第一个URL之后，如果想要添加多个 URL 地址，那么可以使用<code>git remote set-url --add origin &lt;url2&gt;</code> 添加第二个URL。 </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git remote set-url --add origin git@github.com:9981NAN/9981NAN.git</div></pre></td></tr></table></figure>
<p>这样一来，以后每次 <code>git push origin master</code>  的时候，就会自动向多个远程仓库中推送了。 </p>
<blockquote>
<p>但是使用 git pull 时，只能拉取origin里的一个URL地址（即fetch-url，如上），这个 fetch-url 默认是你添加到origin 的第一个地址。</p>
<p>如果你想更改，只需要更改 config 文件里，那几个url的顺序即可。 fetch-url 会直接对应排行第一的那个url 链接。</p>
</blockquote>
<h4 id="git-push-推送至远程仓库"><a href="#git-push-推送至远程仓库" class="headerlink" title="git push  推送至远程仓库"></a>git push  推送至远程仓库</h4><h5 id="推送至master分支"><a href="#推送至master分支" class="headerlink" title="推送至master分支"></a>推送至master分支</h5><p>如果想把当前分支下本地仓库的内容推送给远程仓库，需要用到 <code>git push</code>，假定我们在master分支下</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git push -u origin master</div></pre></td></tr></table></figure>
<p><code>-u</code>参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的 upstream（上游）。这样一来，下次运行 <code>git pull</code>命令从远程仓库获取内容时，本地仓库这个分支就可以直接从origin 的master 分支获取内容，省去了另外添加参数的麻烦。</p>
<h5 id="推送至master以外的分支"><a href="#推送至master以外的分支" class="headerlink" title="推送至master以外的分支"></a>推送至master以外的分支</h5><p>创建其他分支</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout -b feature-D</div></pre></td></tr></table></figure>
<p>将它push给远程仓库，并保持分支名不变</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git push -u origin feature-D</div></pre></td></tr></table></figure>
<h1 id="从远程仓库获取"><a href="#从远程仓库获取" class="headerlink" title="从远程仓库获取"></a>从远程仓库获取</h1><p>假设现在有另一名开发者要来共同开发，在另一个目录下新建本地仓库。</p>
<h4 id="git-clone-获取远程仓库"><a href="#git-clone-获取远程仓库" class="headerlink" title="git clone 获取远程仓库"></a>git clone 获取远程仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git clone git@github.com:9981NAN/9981NAN.git</div></pre></td></tr></table></figure>
<blockquote>
<p>注意clone的目录不要与之前操作的仓库在同一目录下</p>
</blockquote>
<p>执行 <code>git clone</code>命令后我们会默认处于master分支下，同时系统会自动将origin设置成该远程仓库的标识符。</p>
<p>我们可以使用下面的命令查看本地仓库和远程仓库的分支信息。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git branch -a</div></pre></td></tr></table></figure>
<h5 id="获取远程的feature-D分支"><a href="#获取远程的feature-D分支" class="headerlink" title="获取远程的feature-D分支"></a>获取远程的feature-D分支</h5><p>我们试着将feature-D分支获取至本地仓库。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout -b feature-D origin/feature-D</div></pre></td></tr></table></figure>
<p><code>-b</code> 参数后面是本地仓库中新建分支的名称，可以与远程仓库不同名，但是建议同名，便于理解。</p>
<h5 id="向本地的feature-D分支提交更改"><a href="#向本地的feature-D分支提交更改" class="headerlink" title="向本地的feature-D分支提交更改"></a>向本地的feature-D分支提交更改</h5><p>假定我们是另一位开发者，要做一个新的提交。在修改文件内容后进行查看和提交。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git diff</div><div class="line"><span class="meta"></span></div><div class="line">$ git commit -am "Add feature-D"</div></pre></td></tr></table></figure>
<h5 id="推送至feature-D分支"><a href="#推送至feature-D分支" class="headerlink" title="推送至feature-D分支"></a>推送至feature-D分支</h5><p>在<code>feature-D</code>分支下直接使用 <code>git push</code> 即可</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git diff</div></pre></td></tr></table></figure>
<h4 id="git-pull-获取最新的远程仓库分支"><a href="#git-pull-获取最新的远程仓库分支" class="headerlink" title="git pull 获取最新的远程仓库分支"></a>git pull 获取最新的远程仓库分支</h4><p>回到我们刚刚放下操作的目录，这边的本地仓库中只是创建了feature-D分支，并没有在feature-D进行任何提交，而远程仓库已经有了我们刚刚推送的提交。这时候就可以用<code>git pull</code> ，将本地的 feature-D 分支更新到最新状态。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git pull origin feature-D</div></pre></td></tr></table></figure>
<blockquote>
<p>如果两人同时修改了同一部分的源代码，push时就很容易发生冲突。所以多名开发者在同一个分支中进行作业时，为了减少冲突的情况，建议更频繁地进行push和pull操作。</p>
</blockquote>
<h1 id="GitHub功能"><a href="#GitHub功能" class="headerlink" title="GitHub功能"></a>GitHub功能</h1><h4 id="通过部分名称搜索文件"><a href="#通过部分名称搜索文件" class="headerlink" title="通过部分名称搜索文件"></a>通过部分名称搜索文件</h4><p>在仓库页面按下键盘T 键，然后输入要找的文件或者目录。速度非常快。</p>
<h4 id="查看差别"><a href="#查看差别" class="headerlink" title="查看差别"></a>查看差别</h4><h5 id="查看分支间的差别"><a href="#查看分支间的差别" class="headerlink" title="查看分支间的差别"></a>查看分支间的差别</h5><p>以我的9981NAN项目为例，要比较nimon分支和yong分支的差别，可以直接在浏览器URL中输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/9981NAN/9981NAN/compare/nimon...yong</div></pre></td></tr></table></figure>
<p>这样就可以查看两个分支间的差别了。</p>
<h5 id="查看与几天前的差别"><a href="#查看与几天前的差别" class="headerlink" title="查看与几天前的差别"></a>查看与几天前的差别</h5><p>输入下面的URL就可以查看nimon分支最近7天内的差别了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/9981NAN/9981NAN/compare/nimon@&#123;7.day.ago&#125;...nimon</div></pre></td></tr></table></figure>
<p>类似的还有</p>
<ul>
<li>day</li>
<li>week</li>
<li>month</li>
<li>year</li>
<li>hour</li>
</ul>
<h5 id="查看指定日期之间的差别"><a href="#查看指定日期之间的差别" class="headerlink" title="查看指定日期之间的差别"></a>查看指定日期之间的差别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/9981NAN/9981NAN/compare/nimon@&#123;2017-05-19&#125;...nimon</div></pre></td></tr></table></figure>
<h4 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h4><h5 id="通过提交信息操作Issue"><a href="#通过提交信息操作Issue" class="headerlink" title="通过提交信息操作Issue"></a>通过提交信息操作Issue</h5><p>在项目的Issue一览表中，每一个Issue标题的下面部分都分配 “#18” 的编号。我们只要在描述信息中加入 “#18” ，就可以在Issue中显示该提交的相关信息，使关联的提交一目了然。</p>
<h5 id="Close-Issue"><a href="#Close-Issue" class="headerlink" title="Close Issue"></a>Close Issue</h5><p>如果一个处于 Open 状态的 Issue 已经处理完毕，只要在该提交中以下列任意一种格式描述提交信息，对应的 Issue 就会被 close 。</p>
<ul>
<li>fix #18</li>
<li>fixes #18</li>
<li>fixed #18</li>
<li>close #18</li>
<li>closes #18</li>
<li>closed #18</li>
<li>resolve #18</li>
<li>resolves #18</li>
<li>resloved #18</li>
</ul>
<p>这样我们每次提交并push之后，就不必每次都到 Issue 中寻找相应的 Issue 再手动关闭了。这是一项很实用的功能。</p>
<blockquote>
<p>Issue 和 Pull Request 的编号通用。</p>
</blockquote>
<h4 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h4><h5 id="conversation"><a href="#conversation" class="headerlink" title="conversation"></a>conversation</h5><blockquote>
<p>引用评论，选中别人的评论后按 R 键。</p>
<p>在评论中应用表情，输入 “ ：” 即可选择。</p>
</blockquote>
<h5 id="Files-Changed"><a href="#Files-Changed" class="headerlink" title="Files Changed"></a>Files Changed</h5><p>默认情况下，系统会将空格的不同也高亮显示，想要关闭之？ 在URL 的末尾添加 “ ?w=1 ” 就可以不显示空格的差异了。</p>
<p>将鼠标放到被更改行号的左侧，可以看到一个加号，我们可以点击这个加号在代码中插入评论。这样评论是针对哪行代码就一目了然了</p>
<h4 id="Pulse"><a href="#Pulse" class="headerlink" title="Pulse"></a>Pulse</h4><p>Pulse是体现该仓库软件开发活跃度的功能，近期仓库创建了多个pull request 或 Issue，有多少人参与了这个仓库的开发。用户可以判断目前这个人间是否正在积极开发，在挑选GitHub上开发的软件时，可以作为一个重要的衡量标准。</p>
<h1 id="发送Pull-Request"><a href="#发送Pull-Request" class="headerlink" title="发送Pull Request"></a>发送Pull Request</h1><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h3><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><p>前面两步完成之后，我们需要在特性分支中进行开发</p>
<h4 id="确认分支"><a href="#确认分支" class="headerlink" title="确认分支"></a>确认分支</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git br -a</div><div class="line">* master</div><div class="line">  remotes/origin/HEAD -&gt; origin/master</div><div class="line">  remotes/origin/master</div></pre></td></tr></table></figure>
<h4 id="创建特性分支"><a href="#创建特性分支" class="headerlink" title="创建特性分支"></a>创建特性分支</h4><p>在 <code>work</code> 之后加上 <code>master</code> 表明在 <code>master</code> 分支的基础上创建 <code>work</code> 分支。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout -b work master</div><div class="line">Switched to a new branch 'work'</div></pre></td></tr></table></figure>
<h3 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h3><p>在 <code>readme.md</code> 文件中添加要增加的代码。</p>
<h3 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git commit -am "Add pull request"</div><div class="line">[work f3d798e] Add pull request</div><div class="line"> 1 file changed, 1 insertion(+), 2 deletions(-)</div></pre></td></tr></table></figure>
<h3 id="创建远程分支"><a href="#创建远程分支" class="headerlink" title="创建远程分支"></a>创建远程分支</h3><p>把在本地创建的分支推送到远程仓库，如果远程仓库没有该分支，那么就创建之。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git push origin work</div><div class="line">Counting objects: 3, done.</div><div class="line">Delta compression using up to 8 threads.</div><div class="line">Compressing objects: 100% (2/2), done.</div><div class="line">Writing objects: 100% (3/3), 283 bytes | 0 bytes/s, done.</div><div class="line">Total 3 (delta 1), reused 0 (delta 0)</div><div class="line">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</div><div class="line">To github.com:junoni/nimon.git</div><div class="line"> * [new branch]      work -&gt; work</div></pre></td></tr></table></figure>
<h3 id="在GitHub页面上创建Pull-Request"><a href="#在GitHub页面上创建Pull-Request" class="headerlink" title="在GitHub页面上创建Pull Request"></a>在GitHub页面上创建Pull Request</h3><h3 id="不进行Fork直接从分支发送Pull-Request"><a href="#不进行Fork直接从分支发送Pull-Request" class="headerlink" title="不进行Fork直接从分支发送Pull Request"></a>不进行Fork直接从分支发送Pull Request</h3><p>前提是拥有这个仓库编辑的权限</p>
<h2 id="仓库的维护"><a href="#仓库的维护" class="headerlink" title="仓库的维护"></a>仓库的维护</h2><p>Fork 或者 clone 来的仓库，一旦放置不管就会离最新的源代码越来越远。这时候我们需要让本地仓库与源代码保持最新状态。</p>
<p>我们需要将原仓库设置为远程仓库，从该仓库获取<code>fetch</code> 数据与本地仓库进行合并 <code>merge</code>  。</p>
<h3 id="Fork-与-clone"><a href="#Fork-与-clone" class="headerlink" title="Fork 与 clone"></a>Fork 与 clone</h3><h3 id="给原仓库设置名称"><a href="#给原仓库设置名称" class="headerlink" title="给原仓库设置名称"></a>给原仓库设置名称</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git remote add upstream git@github.com:SimpleLifee/nimon.git</div></pre></td></tr></table></figure>
<p>这样，我们这个仓库将以upstream作为原仓库的标识符。这个环境下只需要设定一次。</p>
<p>可以下面的命令查看</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git remote -v</div><div class="line">origin	git@github.com:junoni/nimon.git (fetch)</div><div class="line">origin	git@github.com:junoni/nimon.git (push)</div><div class="line">upstream	git@github.com:SimpleLifee/nimon.git (fetch)</div><div class="line">upstream	git@github.com:SimpleLifee/nimon.git (push)</div></pre></td></tr></table></figure>
<h3 id="获取最新数据"><a href="#获取最新数据" class="headerlink" title="获取最新数据"></a>获取最新数据</h3><p>要让仓库维持最新状态，只需要重复这一工作即可。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git fetch upstream</div><div class="line">remote: Counting objects: 14, done.</div><div class="line">remote: Compressing objects: 100% (7/7), done.</div><div class="line">remote: Total 14 (delta 3), reused 14 (delta 3), pack-reused 0</div><div class="line">Unpacking objects: 100% (14/14), done.</div><div class="line">From github.com:SimpleLifee/nimon</div><div class="line"> * [new branch]      dev        -&gt; upstream/dev</div><div class="line"> * [new branch]      feature-A  -&gt; upstream/feature-A</div><div class="line"> * [new branch]      master     -&gt; upstream/master</div></pre></td></tr></table></figure>
<h1 id="接受-Pull-Request"><a href="#接受-Pull-Request" class="headerlink" title="接受  Pull Request"></a>接受  Pull Request</h1><h2 id="采纳-Pull-Request-之前的准备"><a href="#采纳-Pull-Request-之前的准备" class="headerlink" title="采纳 Pull Request 之前的准备"></a>采纳 Pull Request 之前的准备</h2><h3 id="将接受方的本地仓库更新至最新状态"><a href="#将接受方的本地仓库更新至最新状态" class="headerlink" title="将接受方的本地仓库更新至最新状态"></a>将接受方的本地仓库更新至最新状态</h3><h3 id="获取发送方的远程仓库"><a href="#获取发送方的远程仓库" class="headerlink" title="获取发送方的远程仓库"></a>获取发送方的远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git remote add PR发送者 git@github.com:junoni/nimon.git</div></pre></td></tr></table></figure>
<p>查看添加后的情况</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git remote -v</div><div class="line">PR发送者	git@github.com:junoni/nimon.git (fetch)</div><div class="line">PR发送者	git@github.com:junoni/nimon.git (push)</div><div class="line">origin	git@github.com:SimpleLifee/nimon.git (fetch)</div><div class="line">origin	git@github.com:SimpleLifee/nimon.git (push)</div></pre></td></tr></table></figure>
<p>接着进行fetch</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git fetch PR发送者</div><div class="line">remote: Counting objects: 32, done.</div><div class="line">remote: Compressing objects: 100% (18/18), done.</div><div class="line">remote: Total 32 (delta 14), reused 26 (delta 8), pack-reused 0</div><div class="line">Unpacking objects: 100% (32/32), done.</div><div class="line">From github.com:junoni/nimon</div><div class="line"> * [new branch]      dev        -&gt; PR发送者/dev</div><div class="line"> * [new branch]      master     -&gt; PR发送者/master</div><div class="line"> * [new branch]      work       -&gt; PR发送者/work</div></pre></td></tr></table></figure>
<p>现在我们获取了Pull Request 发送仓库以及分支的数据（PR发送者/work）</p>
<h3 id="创建用于检查的分支"><a href="#创建用于检查的分支" class="headerlink" title="创建用于检查的分支"></a>创建用于检查的分支</h3><p>前面我们只获取了远程仓库的数据，这些数据尚未反映在任何一个分支中。因此我们需要创建一个分支，用于模拟采纳 Pull Request 后的状态。由于这是我们第一个 Pull Request ，分支名就叫 <code>pr1</code> 。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout -b pr1</div><div class="line">Switched to a new branch 'pr1'</div></pre></td></tr></table></figure>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>下面要将已经 fetch 完毕的 “PR发送者/work ” 的修改内容与 <code>pr1</code> 分支进行合并</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git merge PR发送者/work</div></pre></td></tr></table></figure>
<p>这时候我们需要检查一下合并的情况。</p>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>检查结束后<code>pr1</code> 分支就没用了，可以直接删除。我们需要先切换到 <code>pr1</code> 之外，例如 <code>master</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout master</div><div class="line">Previous HEAD position was f3d798e... Add pull request</div><div class="line">Switched to branch 'master'</div><div class="line">Your branch is ahead of 'origin/master' by 12 commits.</div><div class="line">  (use "git push" to publish your local commits)</div></pre></td></tr></table></figure>
<p>这时候，Git 提醒我们当前 <code>master</code> 分支已经比远程仓库多出 12 个新提交了，并建议我们使用 <code>git push</code> 向远程仓库推送新的提交。 </p>
<p>之后我们进行删除分支。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git branch -D pr1</div><div class="line">Deleted branch pr1 (was 685c45a).</div></pre></td></tr></table></figure>
<h2 id="采纳-Pull-Request"><a href="#采纳-Pull-Request" class="headerlink" title="采纳 Pull Request"></a>采纳 Pull Request</h2><p>我们可以打开浏览器找到相应的 Pull Request 页面，点击 merge pull request按钮，随后Pull Request的内容就会自动合并至仓库。</p>
<p>不过我们已经在本地构筑了相同的环境，只要通过 CLI 进行合并操作后再 push 至 Github，就可以完成Pull Request。</p>
<h3 id="合并到主分支"><a href="#合并到主分支" class="headerlink" title="合并到主分支"></a>合并到主分支</h3><p>首先我们切换到 <code>master</code> 分支上</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git checkout master</div></pre></td></tr></table></figure>
<p>然后合并 <code>PR发送者/work</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git merge PR发送者/work</div></pre></td></tr></table></figure>
<h3 id="Push-修改内容"><a href="#Push-修改内容" class="headerlink" title="Push 修改内容"></a>Push 修改内容</h3><p>先查看本地仓库和远程 GitHub端仓库库代码的差别</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git diff origin/master</div></pre></td></tr></table></figure>
<p>确认没有目的之外的差别后，进行push</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git push</div><div class="line">Counting objects: 10, done.</div><div class="line">Delta compression using up to 8 threads.</div><div class="line">Compressing objects: 100% (7/7), done.</div><div class="line">Writing objects: 100% (10/10), 1.05 KiB | 0 bytes/s, done.</div><div class="line">Total 10 (delta 3), reused 0 (delta 0)</div><div class="line">remote: Resolving deltas: 100% (3/3), completed with 1 local object.</div><div class="line">To github.com:SimpleLifee/nimon.git</div><div class="line">   8caf54d..067a3c8  master -&gt; master</div></pre></td></tr></table></figure>
<p>这样，仓库的 <code>Pull Request</code>会自动从 <code>Open</code> 状态变为 <code>Close</code> 状态。</p>
<p>至此，Pull Request 的操作都介绍完了。</p>
<h1 id="Hub命令"><a href="#Hub命令" class="headerlink" title="Hub命令"></a>Hub命令</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>如果使用Homebrew</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> brew install hub</div></pre></td></tr></table></figure>
<p>然后，在shell的环境路径后面添加 <code>~/bin</code> 。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> echo 'export PATH="~/bin:$PATH"' &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>
<p>重新启动shell，就可以使用hub命令了。</p>
<h4 id="确认运行情况"><a href="#确认运行情况" class="headerlink" title="确认运行情况"></a>确认运行情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hub --version</div><div class="line">git version 2.11.0 (Apple Git-81)</div><div class="line">hub version 2.2.9</div></pre></td></tr></table></figure>
<h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><p>使用hub命令的最佳实践是将相应的 git 设置成 hub 的别名。hub 命令可以完成 git 命令的所有操作，只需要在 shell 的配置文件中（.bash_profile） 添加下面一句即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval &quot;$(hub alias -s)&quot;</div></pre></td></tr></table></figure>
<h4 id="config-hub"><a href="#config-hub" class="headerlink" title="~/.config/hub"></a>~/.config/hub</h4><p>hub 命令在初次访问 GitHub 的 API 的时候会询问用户名和密码。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cat ~/.config/hub</div><div class="line">github.com:</div><div class="line">- user: SimpleLifee</div><div class="line">  oauth_token: 5cb6fb57b65693dac153bf2c61dd642a916b268b</div><div class="line">  protocol: https</div></pre></td></tr></table></figure>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="hub-clone"><a href="#hub-clone" class="headerlink" title="hub clone"></a>hub clone</h4><p>使用 <code>hub clone</code> 命令，可以省去指定 <code>GitHub</code> 端仓库的部分</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hub clone nimon</div></pre></td></tr></table></figure>
<p>上面这个命令与下面的命令效果相同。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git clone git@github.com/SimpleLifee/nimon.git</div></pre></td></tr></table></figure>
<p>如果要指定用户，可以输入以下命令。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hub clone junoni/nimon</div></pre></td></tr></table></figure>
<p>上面这个命令与下面的命令效果相同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com/junoni/nimon.git</div></pre></td></tr></table></figure>
<h4 id="hub-remote-add"><a href="#hub-remote-add" class="headerlink" title="hub remote add"></a>hub remote add</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> hub remote add junoni</div></pre></td></tr></table></figure>
<p>等同于</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git remote add junoni git://github.com/junoni/nimon.git</div></pre></td></tr></table></figure>
<h4 id="hub-fetch"><a href="#hub-fetch" class="headerlink" title="hub fetch"></a>hub fetch</h4><p>类似于 <code>hub remote add</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/05/05/00001-2017-05-05-GitHub/github.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;br&gt;GitHub基本操作&lt;br&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://nijun.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>spring学习总结——事务管理</title>
    <link href="http://nijun.me/2017/05/05/00001-2017-05-05-spring%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://nijun.me/2017/05/05/00001-2017-05-05-spring学习总结/</id>
    <published>2017-05-05T11:13:51.000Z</published>
    <updated>2017-05-15T02:45:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring介绍"><a href="#Spring介绍" class="headerlink" title="Spring介绍"></a>Spring介绍</h2><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式。</p>
<p><img src="/2017/05/05/00001-2017-05-05-spring学习总结/anisur.jpg" alt=""></p>
<a id="more"></a>
<h1 id="Spring中的事务管理介绍"><a href="#Spring中的事务管理介绍" class="headerlink" title="Spring中的事务管理介绍"></a>Spring中的事务管理介绍</h1><p> Spring 是 SSH 中的指挥员和管理者，它负责管理其他框架，控制着整个网站。Spring 中的事务分为：</p>
<ul>
<li>声明式事务  <ul>
<li>开发中<strong>推荐使用</strong>（代码侵入性最小）</li>
<li>Spring的声明式事务是通过<strong>AOP</strong>实现的</li>
</ul>
</li>
<li><p>编程式事务</p>
<ul>
<li>在实际中很少使用</li>
<li>通过<strong>TransactionTemplate</strong>手动管理事务</li>
</ul>
<p>其中声明式事务是在配置文件中进行相关的配置，而编程式事务就是用注解的方式写到代码里。配置文件中定义的bean要比注解里定义的加载早，所以有时会出现在启动阶段（listen 和filter ），是找不到bean 的。</p>
<p>那么到底是选择声明式还是编程式，我们需要有如下的考虑：</p>
<ol>
<li>如果是类级别并且不会发生变动的配置可以优先考虑注解配置，而对于那些第三方以及容易发生调整的配置就优先考虑XML配置文件方式。</li>
<li>相比于 @Transaction 事务注解，使用 aop / tx命名空间的事务配置更加灵活和简单。</li>
<li>注解可以有效减少配置的工作量，提高程序的内聚性。</li>
<li>在第三方Bean 的配置，以及诸如数据源、缓存池、持久层操作模板类、事务管理等内容的配置上，XML 配置依然拥有不可替代的地位。</li>
</ol>
</li>
</ul>
<p> Spring配置文件中关于事务配置总是由三个组成部分，分别是DataSource、TransactionManager 和代理机制这三部分，无论哪种配置方式，一般变化的只是代理机制这部分。DataSource、 TransactionManager 这两部分只是会根据数据访问方式有所变化，比如使用 Hibernate 进行数据访问时，DataSource 实际为 SessionFactory，TransactionManager 的实现为 HibernateTransactionManager。 下面一起看看三种声明式事务的具体配置：</p>
<h2 id="事务管理高层抽象"><a href="#事务管理高层抽象" class="headerlink" title="事务管理高层抽象"></a>事务管理高层抽象</h2><h3 id="1-PlatformTransactionManager"><a href="#1-PlatformTransactionManager" class="headerlink" title="1. PlatformTransactionManager"></a>1. PlatformTransactionManager</h3><p>事务管理器，真正管理事务的类，Spring为不同的持久化框架提供了不同的PlatformTransactionManager接口实现。</p>
<table>
<thead>
<tr>
<th>事务</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>org.springframework.jdbc.datasource.DataSourceTransactionManager</td>
<td>使用Spring JDBC或iBatis进行持久化数据使用</td>
</tr>
<tr>
<td>org.springframework.orm.hibernate5.HibernateTransactionManager</td>
<td>使用Hibernate5.0版本进行持久化数据时使用</td>
</tr>
</tbody>
</table>
<h3 id="2-TransactionDefinition"><a href="#2-TransactionDefinition" class="headerlink" title="2. TransactionDefinition"></a>2. TransactionDefinition</h3><p>事务定义信息（隔离、传播、超时、只读）</p>
<p>事务的特性：原子性、一致性、隔离性、持久性。</p>
<p>如果不考虑隔离性，会引发</p>
<blockquote>
<p>脏读：一个事务读取了另一个事务改写的但未提交的数据，如果这些数据被回滚，则读到的数据是无效的。</p>
<p>不可重复读：在同一事务中，多次读取同一数据返回的结果有所不同.</p>
<p>幻读：一个事务读取了几行记录后，另一个事务插入了一些记录。在后来的查询中，第一个事务就有些原来没有的记录。</p>
</blockquote>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><table>
<thead>
<tr>
<th>隔离级别</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>DEFAULT</td>
<td>使用后端数据库默认的隔离级别（spring中的选择项）</td>
</tr>
<tr>
<td>READ_UNCOMMITED</td>
<td>允许你读取还未提交的改变了的数据，是可能导致脏读、幻读、不可重复读的。</td>
</tr>
<tr>
<td>READ_COMMITED</td>
<td>允许在并发事务已经提交后读取。可防止脏读，但幻读、不可重复读仍可能发发生</td>
</tr>
<tr>
<td>REPEATABLE_READ</td>
<td>对相同字段对此读取时一致的，除非数据本身被事务改变，可防脏读和不可重复读，幻读仍可能发生。</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>完全服从ACID的隔离级别，确保不发生任意的读问题，事务排队，不会出现并发。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>如果选择了Spring默认的隔离级别，那么使用Mysql对应的默认级别是REPEATABLE_READ， Oracle对应的默认级别是READ_COMMITED。</p>
</blockquote>
<h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><p><strong>解决业务层方法之间的相互调用问题。</strong></p>
<p>假设业务层有两个方法aaa和bbb，当有复杂的事务情况发生时，比如某个事务需要同时调用aaa和bbb。</p>
<table>
<thead>
<tr>
<th>事务的传播行为</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>PROPAGATION_REQUIRED（默认）</td>
<td>支持当前事务，如果不存在就新建一个</td>
<td>如果aaa有事务，则使用之。如果没有就新建一个</td>
</tr>
<tr>
<td>PROPAGATION_SUPPORTS</td>
<td>支持当前事务，如果不存在，就不使用事务</td>
<td>如果aaa有事务，则使用之。如果没有就不使用事务</td>
</tr>
<tr>
<td>PROPAGATION_MANDATORY</td>
<td>支持当前事务，如果不存在，就抛出异常</td>
<td>如果aaa有事务，则使用之。如果没有就抛出异常</td>
</tr>
<tr>
<td>PROPAGATION_REQUIRES_NEW</td>
<td>如果有事务，挂起当前事务，创建一个新的事务</td>
<td>aaa和bbb没有在一个事务中</td>
</tr>
<tr>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td>以非事务方式允许，如果有事务运行，则挂起当前事务</td>
<td>aaa有事务，在执行bbb的时候，把aaa的事务挂起</td>
</tr>
<tr>
<td>PROPAGATION_NEVER</td>
<td>以非事务方式允许，如果有事务运行，则抛出异常</td>
<td>aaa有事务，在执行bbb的时候，会抛出异常</td>
</tr>
<tr>
<td>PROPAGATION_NESTED</td>
<td>如果当前事务存在，则使用嵌套事务</td>
<td>aaa一执行完后会使用事务设置一个保存点。在执行bbb的时候，如果bbb没有报异常，那么他们就一起提交了。如果bbb中发生了异常，你可以控制回滚到保存点还是初始位置。</td>
</tr>
</tbody>
</table>
<h3 id="3-TransactionStatus"><a href="#3-TransactionStatus" class="headerlink" title="3. TransactionStatus"></a>3. TransactionStatus</h3><p><strong>事务具体运行状态</strong></p>
<p>提供了一组可以获得事务当前状态的方法。</p>
<h2 id="编程式的事务控制"><a href="#编程式的事务控制" class="headerlink" title="编程式的事务控制"></a>编程式的事务控制</h2><ul>
<li>在你需要使用<strong>TransactionTemplate</strong>模板的的bean中进行注入。</li>
<li><strong>TransactionTemplate </strong>以来 <strong>DataSourceTransactionManager</strong> </li>
<li><strong>DataSourceTransactionManager</strong> 以来 <strong>DataSource</strong> 构造</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">&lt;!--  配置hibernate事务管理器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--注入sessionFactory--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--或者配置JDBC事务管理器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置事务管理的模板,spring为了简化事务管理的代码而提供的类--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h3><p>如果要使用 JDBCTemplate ，那么需要继承JdbcDaoSupport。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span>  <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"insert t_user values(null,?)"</span>;</div><div class="line">        <span class="keyword">this</span>.getJdbcTemplate().execute(sql,<span class="string">" nimon"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HibernateTemplate"><a href="#HibernateTemplate" class="headerlink" title="HibernateTemplate"></a>HibernateTemplate</h3><p>继承<code>HibernateDaoSupport</code> ，使用其中已经帮我们定义好的 <code>hibernateTemplate</code>  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class="line"><span class="meta">@Repository</span>(<span class="string">"userDaoHibernate"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoHibernateImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span>   </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/*这里两种方法选其一即可。*/</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySessionFactory</span><span class="params">(SessionFactory sessionFactory)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>.setSessionFactory(sessionFactory);</div><div class="line">    &#125;</div><div class="line">	<span class="comment">/*这里两种方法选其一即可。*/</span></div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"sessionFactory"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuperSessionFactory</span><span class="params">(SessionFactory sessionFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setSessionFactory(sessionFactory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">             <span class="keyword">this</span>.getHibernateTemplate().save(user);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识"><a href="#关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识" class="headerlink" title="关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识"></a>关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识</h3><p>首先 <code>sessionFactory</code> 和<code>HibernateTemplate</code> ， <code>HibernateTemplate</code> 和<code>HibernateDaoSupport</code> </p>
<p>SessionFactory 是一个创建 Session 的工厂，通过 SessionFactory 创建的 Session 可以去执行数据库操作</p>
<p>HibernateTemplate 把 Session 的一些操作进一步封装组合，实际上也基本上是执行 Session 一样的数据库操作，但是HibernateTemplate 能和 spring 的很多功能融合在一起，比如事务。</p>
<blockquote>
<p>如果我们吧 SessionFactory 比作是航母，Session 就是歼10，而 HibernateTemplate 就是歼15，歼10和歼15都是承载于航母之上的</p>
<p>不管是 Session 或者 HibernateTemplate  都需要SessionFactory的支持才能执行其功能</p>
<p>由于 HibernateTemplate 本身关于 sessionFactory的 处理原理，我们不再需要手动编写关于 sessionFactory、session、transaction等等代码。</p>
</blockquote>
<p>我们只需要编写关于业务逻辑相关的操作，其他的一并由HibernateTemplate完成。HibernateTemplate的这种设计模式我们称之为TemplateMethod，采用的方式叫callback或者钩子函数。这里的重点就是把SessionFactory注入到HibernateTemplate里面！！！</p>
<p>UserService</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"userService........"</span>);</div><div class="line">    mTransactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span> </span>&#123;  <span class="comment">//这里需要一个TransactionCallback参数</span></div><div class="line">            userDao.add();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要手动改service的代码，所以是不建议的。</p>
<h2 id="声明式的事务管理"><a href="#声明式的事务管理" class="headerlink" title="声明式的事务管理"></a>声明式的事务管理</h2><h3 id="公共配置"><a href="#公共配置" class="headerlink" title="公共配置"></a>公共配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置SessionFactory,交给spring管理 --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 引入hibernate配置文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/hibernate.cfg.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置DAO --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.dao.UserDaoImpl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注入bean"><a href="#注入bean" class="headerlink" title="注入bean"></a>注入bean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoImpl"</span> <span class="attr">class</span>=<span class="string">"cn.nini.dao.UserDaoImpl"</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!--需要继承JDBCDaoSupport --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">   </div><div class="line">   <span class="comment">&lt;!--没有增强过的对象--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.nini.service.UserService"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDaoImpl"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionTemplate"</span> <span class="attr">ref</span>=<span class="string">"transactionTemplate"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="第一种传统方式"><a href="#第一种传统方式" class="headerlink" title="第一种传统方式"></a>第一种传统方式</h3><p><strong>使用原始的TransactionProxyFactoryBean配置声明式事务</strong>，需要为每一个事务管理的类，配置 TransactionProxyFactoryBean 进行增强。</p>
<ol>
<li>要增强的bean</li>
<li>transactionManager</li>
<li>目标增强代理对象。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--增强过的对象--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置目标对象--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--注入事务管理器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--注入事务的属性--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--</span></div><div class="line">                prop的格式</div><div class="line">                    PROPAGATION : 事务的传播行为</div><div class="line">                    ISOLATION : 事务的隔离级别</div><div class="line">                    readOnly : 只读</div><div class="line">                    -Exception : 发生哪些异常回滚事务</div><div class="line">                    +Exception :发生哪些异常不回滚事务</div><div class="line">            --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"add*"</span>&gt;</span>PROPAGATION_REQUIRED,readOnly<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果设置了readOnly,那么只要进行了写操作就会出现， Connection is read-only.错误。</p>
</blockquote>
<ul>
<li>prop的格式<ul>
<li>PROPAGATION : 事务的传播行为</li>
<li>ISOLATION : 事务的隔离级别</li>
<li>readOnly : 只读</li>
<li>-Exception : 发生哪些异常回滚事务</li>
<li>+Exception :发生哪些异常不回滚事务</li>
</ul>
</li>
</ul>
<h3 id="第二种方式：tx-aop"><a href="#第二种方式：tx-aop" class="headerlink" title="第二种方式：tx/aop"></a>第二种方式：tx/aop</h3><p>tx / aop 方式，一旦配置好，类就不需要添加任何东西。    </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置事务的通知  (事务的增强)--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!-- </span></div><div class="line">			propagation	:事务传播行为</div><div class="line">			isolation	:事务的隔离级别</div><div class="line">			read-only	:只读</div><div class="line">			rollback-for:发生哪些异常回滚</div><div class="line">			no-rollback-for	:发生哪些异常不回滚</div><div class="line">			timeout		:过期信息</div><div class="line">		 --&gt;</div><div class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span>  <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">timeout</span>=<span class="string">"-1"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!--切入点--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut1"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.nini.service.UserService+.*(..))"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!--切面--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 事务属性 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"modify*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"del*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!--第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数    --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span>  <span class="attr">id</span>=<span class="string">"txPointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* org.nan.service.*.*(..))"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<p>execution(<em> org.nan.service.\</em>.*(..)) </p>
<p>第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数 </p>
<p>execution(<em> org.nan.service.UserService+.</em>(..))</p>
<p>这里的 “+” 是代表 UserService 的子类。</p>
<h3 id="第三种方式：注解"><a href="#第三种方式：注解" class="headerlink" title="第三种方式：注解"></a>第三种方式：注解</h3><p>使用注解方式，配置简单，需要在业务类上添加 <code>@Transactional</code> 注解</p>
<p>在xml中开启注解事务</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> <span class="comment">&lt;!--开启注解事务--&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>在需要开启事务的类前面加上</p>
<blockquote>
<p>但是如果抛出的是 checked 异常，那么就不会自动回滚。这时如果我想让他回滚怎么办呢？spring就给我们提供了@Transactional 注解，使用属性为 <code>rollbackFor = 将发生的异常.class</code></p>
<p>在运行期间如果抛出了运行期异常( <code>RuntimeException</code> )unchecked  ，那么就会自动回滚。如果我不想让他自动回滚，那么就使用 <code>noRollbackFor</code>即可。</p>
</blockquote>
<p>@Transactional中的的属性</p>
<ul>
<li>propagation    :事务的传播行为<ul>
<li>isolation    :事务的隔离级别</li>
<li>readOnly:只读</li>
<li>rollbackFor:发生哪些异常回滚</li>
<li>noRollbackFor:发生哪些异常不回滚</li>
</ul>
</li>
<li>rollbackForClassName 根据异常类名回滚</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/*</span></div><div class="line"> */</div><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly = <span class="keyword">false</span>,timeout = -<span class="number">1</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Spring-的-Bean-管理的中常用的注解"><a href="#Spring-的-Bean-管理的中常用的注解" class="headerlink" title="Spring 的 Bean 管理的中常用的注解"></a>Spring 的 Bean 管理的中常用的注解</h2><p>Spring 中提供@Component 的三个衍生注解:(功能目前来讲是一致的)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* @Component         :组件.(作用在类上)</div><div class="line">* @Controller        :WEB 层</div><div class="line">* @Service           :业务层</div><div class="line">* @Repository        :持久层</div></pre></td></tr></table></figure>
<p>这三个注解是为了让标注类本身的用途清晰，Spring 在后续版本会对其增强        </p>
<p>​                </p>
<h2 id="属性注入的注解"><a href="#属性注入的注解" class="headerlink" title="属性注入的注解"></a>属性注入的注解</h2><p> (使用注解注入的方式,可以不用提供 set 方法.)</p>
<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>spring可以自动帮你把bean里面引用的对象的 setter/getter 方法省略，它会自动帮你 set/get .</p>
<p>也可以用在<code>方法</code>上或者<code>构造函数</code>上。构造函数上如果有Bean，并调用方法自动注入这些Bean。</p>
<h4 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h4><p>强制使用名称注入.</p>
<p>​    </p>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>类似于<code>@Autowired</code>，只不过 <code>@Autowired</code> 按 byType 自动注入，面 <code>@Resource</code> 默认按 byName自动注入。</p>
<blockquote>
<p><strong>@Resource 相当于: @Autowired 和 @Qualifier 一起使用.</strong></p>
</blockquote>
<p>他有两个属性：</p>
<ul>
<li>name：name属性解析为 Bean的名字</li>
<li>type：type属性则解析为 Bean的类型</li>
</ul>
<p>所以如果使用 name属性，则使用 byName的自动注入策略，而使用 type属性时则使用 byType</p>
<blockquote>
<p>自动注入策略。如果既不指定 name也不指定 type属性，这时将通过反射机制使用默认的名称自动注入策略。如果没有指定 name 属性，并且按照默认的名称也找不到依赖对象，<code>@resource</code>会退回到按类型装配。丹一旦指定了 name 属性，就这样按照名称装配了。</p>
<p>Resource 注释类位于 Spring发布包的 <code>common-annotations.jar</code> 类包中</p>
</blockquote>
<h3 id="Required"><a href="#Required" class="headerlink" title="@Required"></a>@Required</h3><p><code>@Required</code> 注解检查 但他只检查属性是否已经设置而不会测试属性是否非空，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Required</span>  </div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProduct</span><span class="params">(Product product)</span> </span>&#123;  </div><div class="line">       <span class="keyword">this</span>.product = product;  </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意 : @Required只能设置在setter方法上</p>
<p>这样如果任何带有@Required的属性未设置的话 将会抛出BeanInitializationException异常</p>
</blockquote>
<h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><blockquote>
<p>注意 1 ： 在组件类前加上 @Component(“ 标识符 “) 的作用与在配置文件中配置是一样的。</p>
<p>注意 2 ： 如果不指定 @Qualifier(“ 标识符 “) 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(“ 标识符 “)  的标识符相同。</p>
<p>不然会出错     </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Injection of autowired dependencies failed</div><div class="line"></div><div class="line">Could not autowire field</div></pre></td></tr></table></figure>
<blockquote>
<p>注意 3 ： 如果@Component(“ 标识符 “)，重复定义了，那么会出现以下异常</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalStateException: Failed to load ApplicationContext</div><div class="line"></div><div class="line">Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]</div></pre></td></tr></table></figure>
<blockquote>
<p>注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NoUniqueBeanDefinitionException</div><div class="line">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class="line">expected single matching bean but found 2</div></pre></td></tr></table></figure>
<h2 id="使用spring提供的方便"><a href="#使用spring提供的方便" class="headerlink" title="使用spring提供的方便"></a>使用spring提供的方便</h2><p>使用@Autowired注解，必须事先在Spring容器中声明 <code>AutowiredAnnotationBeanPostProcessor的Bean</code> ：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor "</span>/&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>当 Spring 容器启动时，<code>AutowiredAnnotationBeanPostProcessor</code>将扫描 Spring 容器中所有 Bean,当发现 Bean 中拥有 @Autowired 注释时就找到和其匹配（默认按类型匹配）的 Bean,并注入到对应的地方中去。用到的技术是JAVA中的反射。</p>
</blockquote>
<p>使用 @Required注解，就必须声明 <code>RequiredAnnotationBeanPostProcessor</code> 的Bean：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>类似地，使用<code>@Resource</code> 、<code>@PostConstruct</code> 、<code>@PreDestroy</code> 等注解就必须声明 <code>CommonAnnotationBeanPostProcessor</code> ；使用 <code>@PersistenceContext</code> 注解，就必须声明  <code>PersistenceAnnotationBeanPostProcessor</code> 的Bean。</p>
<p>这样的声明未免太不优雅，而Spring为我们提供了一种极为方便注册这些BeanPostProcessor的方式，即使用 <strong><code>&lt;context:annotation- config/&gt;</code></strong> 隐式地向 Spring容器注册<code>AutowiredAnnotationBeanPostProcessor</code> 、<code>RequiredAnnotationBeanPostProcessor</code> 、<code>CommonAnnotationBeanPostProcessor</code> 以及    <code>PersistenceAnnotationBeanPostProcessor</code> 这4个BeanPostProcessor。如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>但是，在我们使用注解时一般都会配置扫描包路径选项：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"pack.pack"</span>/&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p> 该配置项其实也包含了自动注入上述processor的功能，因此当使用 <code>&lt;context:component-scan/&gt;</code> 后，即可将 <code>&lt;context:annotation-config/&gt;</code>省去。</p>
</blockquote>
<h2 id="Bean-的作用范围的注解"><a href="#Bean-的作用范围的注解" class="headerlink" title="Bean 的作用范围的注解"></a>Bean 的作用范围的注解</h2><blockquote>
<p>@Scope:</p>
<p>​    singleton:单例</p>
<pre><code>prototype:多例
</code></pre></blockquote>
<h2 id="Bean-的生命周期的配置"><a href="#Bean-的生命周期的配置" class="headerlink" title="Bean 的生命周期的配置"></a>Bean 的生命周期的配置</h2><p>​        </p>
<blockquote>
<p>@PostConstruct :相当于 init-method</p>
<p>@PreDestroy :相当于 destroy-method</p>
</blockquote>
<p>​            </p>
<h2 id="Spring-的-Bean-管理的方式的比较"><a href="#Spring-的-Bean-管理的方式的比较" class="headerlink" title="Spring 的 Bean 管理的方式的比较"></a>Spring 的 Bean 管理的方式的比较</h2><p>​            </p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">基于XML配置</th>
<th style="text-align:center">基于注解配置</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bean定义</td>
<td style="text-align:center"><bean id="…" class="…"></bean></td>
<td style="text-align:center">@Component 其衍生类 @Repository @Service @Controller</td>
</tr>
<tr>
<td>Bean名称</td>
<td style="text-align:center">通过id或name指定</td>
<td style="text-align:center">@Component(“person”)</td>
</tr>
<tr>
<td>Bean注入</td>
<td style="text-align:center"><property>或者通过p命名空间</property></td>
<td style="text-align:center">@AutoWired 按类型注入 @Qualifier按名称注入 @Resource 相当于@Autowired和@Qualifier同时使用</td>
</tr>
<tr>
<td>生命过程、Bean作用范围</td>
<td style="text-align:center">init-method destory-method 范围scope属性</td>
<td style="text-align:center">@PostConstruct 初始化 @PreDestory 销毁 @Scope 设置作用范围</td>
</tr>
<tr>
<td>适合场景</td>
<td style="text-align:center">Bean来自第三方</td>
<td style="text-align:center">Bean由用户自己实现开发</td>
</tr>
</tbody>
</table>
<p>xml和注解：</p>
<ul>
<li><p>XML ： 结构清晰</p>
</li>
<li><p>注解 ： 开发方便（属性注入）</p>
<p>  ​</p>
</li>
</ul>
<blockquote>
<p>实际开发中还有一种 XML 和注解整合开发:</p>
<p>Bean有XML配置.但是使用的属性使用注解注入.</p>
</blockquote>
<p>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring介绍&quot;&gt;&lt;a href=&quot;#Spring介绍&quot; class=&quot;headerlink&quot; title=&quot;Spring介绍&quot;&gt;&lt;/a&gt;Spring介绍&lt;/h2&gt;&lt;p&gt;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/05/05/00001-2017-05-05-spring学习总结/anisur.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://nijun.me/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>一些mac端好用端插件分享</title>
    <link href="http://nijun.me/2017/05/05/00001-2017-05-05-%E4%B8%80%E4%BA%9Bmac%E7%AB%AF%E5%A5%BD%E7%94%A8%E7%AB%AF%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
    <id>http://nijun.me/2017/05/05/00001-2017-05-05-一些mac端好用端插件分享/</id>
    <published>2017-05-05T05:28:27.000Z</published>
    <updated>2017-05-13T23:56:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><div align="center"><br>想要生活变得更好？来看看这些插件吧！<br></div><br><img src="/2017/05/05/00001-2017-05-05-一些mac端好用端插件分享/muhammad.jpg" alt=""><br><a id="more"></a></p>
<p>[TOC]</p>
<hr>
<h1 id="百度云限速？试试Mac神器Aria2"><a href="#百度云限速？试试Mac神器Aria2" class="headerlink" title="百度云限速？试试Mac神器Aria2"></a>百度云限速？试试Mac神器Aria2</h1><p><br><br>使用Tampermonkey插件 + “百度网盘直接下载助手”脚本（2017-03-20更新）</p>
<p>在Chrome上安装Tampermonkey插件。</p>
<p>安装“百度网盘直接下载助手”脚本。</p>
<h1 id="会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。"><a href="#会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。" class="headerlink" title="会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。"></a>会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。</h1><p>点击“直接下载”会使用浏览器默认下载器进行下载。点击“显示链接”，可复制链接放入aria2进行下载。</p>
<hr>
<h1 id="添加sitemap和feed插件"><a href="#添加sitemap和feed插件" class="headerlink" title="添加sitemap和feed插件"></a>添加sitemap和feed插件</h1><p><br></p>
<p>切换到你本地的hexo，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed -save</div><div class="line">npm install hexo-generator-sitemap -save</div></pre></td></tr></table></figure>
<p>修改_config.yml，增加以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># ExtensionsPlugins:</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-sitemap</div><div class="line"></div><div class="line"> #Feed Atomfeed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20#sitemapsitemap:</div><div class="line">  path: sitemap.xml</div></pre></td></tr></table></figure>
<p>再执行以下命令，部署服务端<br>hexo d -g</p>
<p>配完之后，就可以访问 <a href="https://gdutxiaoxu.github.io/atom.xml" target="_blank" rel="external">https://gdutxiaoxu.github.io/atom.xml</a> 和 <a href="https://gdutxiaoxu.github.io/sitemap.xml" target="_blank" rel="external">https://gdutxiaoxu.github.io/sitemap.xml</a> ，发现这两个文件已经成功生成了。</p>
<hr>
<h1 id="制作404页面"><a href="#制作404页面" class="headerlink" title="制作404页面"></a>制作404页面</h1><p><br></p>
<figure class="highlight html"><figcaption><span>404.html</span><a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="external">html</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"your site url "</span> <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="其他一些好用的插件"><a href="#其他一些好用的插件" class="headerlink" title="其他一些好用的插件"></a>其他一些好用的插件</h1><blockquote><p>hexo可视化后台管理，很方便 - <a href="https://github.com/nihgwu/hexo-hey" target="_blank" rel="external">hexo-hey</a><br>在 hexo 中无痛使用本地图片 - <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">hexo-asset-image</a><br>备份整个博客包括主题 - <a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="external">hexo-git-backup</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;br&gt;想要生活变得更好？来看看这些插件吧！&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;img src=&quot;/2017/05/05/00001-2017-05-05-一些mac端好用端插件分享/muhammad.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>老司机的踩坑提醒</title>
    <link href="http://nijun.me/2017/05/04/00001-%E8%80%81%E5%8F%B8%E6%9C%BA%E7%9A%84%E8%B8%A9%E5%9D%91%E6%8F%90%E9%86%92/"/>
    <id>http://nijun.me/2017/05/04/00001-老司机的踩坑提醒/</id>
    <published>2017-05-04T12:46:25.000Z</published>
    <updated>2017-05-08T22:38:43.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br> 错误和问题？在所难免，来和我一起看看吧！<br></div>

<a id="more"></a>
<h2 id="第一篇"><a href="#第一篇" class="headerlink" title="第一篇"></a>第一篇</h2><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>tomcat报</p>
<pre><code>Port already in use: xxxx
</code></pre><p>问题原因：当前有程序占用xxxx端口，需要将它结束进程。<br>​<br>    lsof -i:8087<br>用以显示符合条件的进程情况</p>
<pre><code>kill *pid*    
</code></pre><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>在执行<code>hexo -s</code>时，如果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR Plugin load failed: hexo-renderer-sass</div></pre></td></tr></table></figure>
<blockquote>
<p> npm rebuild node-sass –force</p>
</blockquote>
<p>使用上面这句可以解决问题。</p>
<p>如果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p>  npm install hexo –no-optional </p>
</blockquote>
<p>如果</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FATAL Cannot read property 'replace' of null hexo</div></pre></td></tr></table></figure>
<p>原因： 删除了站点配置文件中的 url后面的地址。</p>
<h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p>如果出现</p>
<pre><code>warning: LF will be replaced by CRLF in 2017/04/28/firstBlog/index.html.
The file will have its original line endings in your working directory.
</code></pre><p>原因分析：</p>
<p>CRLF – Carriage-Return Line-Feed 回车换行，回车(CR, ASCII 13, \r) 换行(LF, ASCII 10, \n)</p>
<pre><code>git config --gobal core.autocrlf false  
</code></pre><p>就可以解决这个问题了</p>
<h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><p>如果更新了css文件，那么需要把public的css文件删除，然后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy --generate</div></pre></td></tr></table></figure>
<h4 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR Deployer not found: git</div></pre></td></tr></table></figure>
<p>试试</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</div><div class="line"><span class="meta">$</span> npm install hexo --save</div></pre></td></tr></table></figure>
<h4 id="7-Spring"><a href="#7-Spring" class="headerlink" title="7. Spring"></a>7. Spring</h4><blockquote>
<p>BeanFactory not initialized or already closed - call ‘refresh’ before accessing beans via the ApplicationContext</p>
</blockquote>
<p>原因是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApplicationContext context = new ClassPathXmlApplicationContext();</div></pre></td></tr></table></figure>
<p>没有指定路径。</p>
<h4 id="8-spring"><a href="#8-spring" class="headerlink" title="8. spring"></a>8. spring</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Write operations are not allowed in read-<span class="function">only <span class="title">mode</span> <span class="params">(FlushMode.MANUAL)</span>: Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">read-only</span>=<span class="string">"false"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span></span></div><div class="line">                       <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut1"</span> <span class="attr">expression</span>=<span class="string">"execution(* me.nini.*.*.*(..))"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略"><a href="#9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略" class="headerlink" title="9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略"></a>9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Id</span></div><div class="line"><span class="meta">@GeneratedValue</span>(strategy= GenerationType.IDENTITY)</div></pre></td></tr></table></figure>
<h4 id="10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误"><a href="#10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误" class="headerlink" title="10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误"></a>10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误</h4><p>在注入bean的时候，类中的bean的字段名可以和xml文件中配置的bean的id不一致。不然就会报</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NoUniqueBeanDefinitionException</div><div class="line">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class="line">expected single matching bean but found 2</div></pre></td></tr></table></figure>
<p>​<br>那么如何解决呢？</p>
<p>只要在具有相同父类型的组件前加上 @Component(“标识符”)</p>
<p>​            </p>
<blockquote>
<p>注意 1 ： 在组件类前加上 @Component(“ 标识符 “) 的作用与在配置文件中配置是一样的。</p>
<p>注意 2 ： 如果不指定 @Qualifier(“ 标识符 “) 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(“ 标识符 “)  的标识符相同。</p>
<p>不然会出错     </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Injection of autowired dependencies failed</div><div class="line"></div><div class="line">Could not autowire field</div></pre></td></tr></table></figure>
<blockquote>
<p>注意 3 ： 如果@Component(“ 标识符 “)，重复定义了，那么会出现以下异常</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalStateException: Failed to load ApplicationContext</div><div class="line"></div><div class="line">Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]</div></pre></td></tr></table></figure>
<blockquote>
<p>注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NoUniqueBeanDefinitionException</div><div class="line">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class="line">expected single matching bean but found 2</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;div align=&quot;center&quot;&gt;&lt;br&gt; 错误和问题？在所难免，来和我一起看看吧！&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="技术" scheme="http://nijun.me/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://nijun.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
