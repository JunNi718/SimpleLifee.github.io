{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Hibernate 注解","path":"Hibernate 注解","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":0},{"_id":"source/uploads/alipay.png","path":"uploads/alipay.png","modified":0,"renderable":0},{"_id":"source/uploads/wechat.png","path":"uploads/wechat.png","modified":0,"renderable":0},{"_id":"themes/Vateral/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/photo/index/avatar.jpg","path":"photo/index/avatar.jpg","modified":0,"renderable":0},{"_id":"source/uploads/lovely.gif","path":"uploads/lovely.gif","modified":0,"renderable":0},{"_id":"themes/Vateral/source/css/Vateral.min.css","path":"css/Vateral.min.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/nprogress.css","path":"css/nprogress.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/Vateral.css","path":"css/Vateral.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/nprogress.min.css","path":"css/nprogress.min.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/magnific-popup.css","path":"css/magnific-popup.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/templatemo_style.css","path":"css/templatemo_style.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/header.png","path":"images/header.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/Vateral.js","path":"js/Vateral.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/LICENSE.md","path":"js/LICENSE.md","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/README.md","path":"js/README.md","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/bower.json","path":"js/bower.json","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/Vateral.min.js","path":"js/Vateral.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/exif.js","path":"js/exif.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.pjax.min.js","path":"js/jquery.pjax.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.easing.1.3.js","path":"js/jquery.easing.1.3.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.magnific-popup.min.js","path":"js/jquery.magnific-popup.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery.rotate.min.js","path":"js/jquery.rotate.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/nprogress.min.js","path":"js/nprogress.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/package.json","path":"js/package.json","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/modernizr.2.5.3.min.js","path":"js/modernizr.2.5.3.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/photopage.js","path":"js/photopage.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/templatemo_script.js","path":"js/templatemo_script.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/css/materialize.min.css","path":"css/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/jquery-3.1.1.min.js","path":"js/jquery-3.1.1.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.eot","path":"fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.woff2","path":"fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.woff","path":"fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.eot","path":"fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.eot","path":"fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.woff2","path":"fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.woff","path":"fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.eot","path":"fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.woff","path":"fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.woff2","path":"fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.woff","path":"fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.eot","path":"fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.woff2","path":"fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/header-bg.png","path":"images/header-bg.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.woff2","path":"fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.woff","path":"fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/link/all.png","path":"images/link/all.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/materialize.min.js","path":"js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.ttf","path":"fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.ttf","path":"fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.ttf","path":"fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.ttf","path":"fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.ttf","path":"fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-13.png","path":"images/random/vateral-13.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-17.png","path":"images/random/vateral-17.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-15.png","path":"images/random/vateral-15.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-16.png","path":"images/random/vateral-16.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-4.png","path":"images/random/vateral-4.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-6.png","path":"images/random/vateral-6.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-10.png","path":"images/random/vateral-10.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/coverpic.png","path":"images/coverpic.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-12.png","path":"images/random/vateral-12.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-3.png","path":"images/random/vateral-3.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-9.png","path":"images/random/vateral-9.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-11.png","path":"images/random/vateral-11.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-19.png","path":"images/random/vateral-19.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-8.png","path":"images/random/vateral-8.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-1.png","path":"images/random/vateral-1.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-2.png","path":"images/random/vateral-2.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-7.png","path":"images/random/vateral-7.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-18.png","path":"images/random/vateral-18.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-5.png","path":"images/random/vateral-5.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/vateral-14.png","path":"images/random/vateral-14.png","modified":0,"renderable":1},{"_id":"themes/Vateral/source/js/spec/Exif2-2.pdf","path":"js/spec/Exif2-2.pdf","modified":0,"renderable":1},{"_id":"themes/Vateral/source/images/random/moumao:hexo-theme-Vateral: hexo主题-Vateral（a theme of hexo named as Vateral）.webarchive","path":"images/random/moumao:hexo-theme-Vateral: hexo主题-Vateral（a theme of hexo named as Vateral）.webarchive","modified":0,"renderable":1},{"_id":"source/images/github.png","path":"images/github.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"f7d32c6d1ddac7caa964d346c19e920fa7b3986f","modified":1494030927000},{"_id":"source/.DS_Store","hash":"6bda2ccf10dc3391fd776520627025a4b4882b9b","modified":1496910898000},{"_id":"source/Hibernate 注解","hash":"10bcf654d27b72396bebb717d1fbd847a05fd94a","modified":1495183876000},{"_id":"source/CNAME","hash":"ce0bd6ca9c13b90228a839d28383305ea12584f5","modified":1493433164000},{"_id":"themes/Vateral/.bowerrc","hash":"5d8502d31f0ed07e935bc6faf5e7f8ce8308ab75","modified":1496593533000},{"_id":"themes/Vateral/.DS_Store","hash":"0bbbd6db6699b53d330d7ba4afddb1f1b76ed211","modified":1496644965000},{"_id":"source/robots.txt","hash":"6df0829ea45422db19e73b5793f380be8ae8998d","modified":1494726561000},{"_id":"themes/Vateral/README.md","hash":"cd0e7587883f2680347d7ae619fc9929258d7ee3","modified":1496593533000},{"_id":"themes/Vateral/_config.yml","hash":"4aed7da7dd36c3e9457022ada8cdb580a5c0a72d","modified":1496644735000},{"_id":"themes/Vateral/bower.json","hash":"03be72b7b0ba2db4acfea95ee4cf652725737b2f","modified":1496593533000},{"_id":"themes/Vateral/package.json","hash":"ffa0ab58475ceb2efd85de6d04ea7b50b4752316","modified":1496593533000},{"_id":"source/_drafts/2017-05-08-断言详解.md","hash":"1138d5b350d586309e8e0df7147e0445284e3cb1","modified":1494228315000},{"_id":"source/_data/photo.yml","hash":"110c13d2e5d3cd9d276e3dad6483f7a07b3e4a41","modified":1496603260000},{"_id":"source/_data/menu.yml","hash":"e71010c594dc9a54320658da421f581dfefae46d","modified":1493549350000},{"_id":"source/_drafts/.DS_Store","hash":"daf04c11d9298e8c19fff74bcb5bf710f66742e2","modified":1496644565000},{"_id":"source/_drafts/Gradle.md","hash":"8ad39a8dd7f311bc8b8f17a8f5ad09749e11786b","modified":1495861784000},{"_id":"source/_drafts/Important.md","hash":"a545f3fb72fc736f3eb73d76044854bd6dc87103","modified":1493998169000},{"_id":"source/_drafts/Hibernate的Hql总结.md","hash":"e915768b215c6ae6ed1f766960d82599f87dc81b","modified":1495239168000},{"_id":"source/_drafts/maven.md","hash":"622a12043a5d3815eb91f70351f1bb75424428f4","modified":1494419827000},{"_id":"source/_drafts/struts2零配置.md","hash":"05d9e704f78610ef9ef2d1601e271fc54323a2c1","modified":1494689276000},{"_id":"source/_drafts/struts2配置文件.md","hash":"2b32bb81487319e76ca5d8fdb7249769cdcd26af","modified":1494635942000},{"_id":"source/_drafts/老司机的踩坑提醒.md","hash":"f9d02580cc88e099e7327d157428a136e8b889d3","modified":1494283123000},{"_id":"source/_posts/2017-06-08-Activity的生命周期和启动模式.md","hash":"0be28f152ca51c902fb5b5cf203e3f5923202091","modified":1496910885000},{"_id":"source/_posts/.DS_Store","hash":"0824b5582a8d62aba824c10dff3f7186007bce80","modified":1496910898000},{"_id":"source/about/.DS_Store","hash":"f2aee57486db29d3a9028ecfe1f84362e50b5aa4","modified":1494596097000},{"_id":"source/about/index.md","hash":"04cca75fabecf67bc153f4b4177c998f8483ad11","modified":1494000110000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1496604173000},{"_id":"source/images/avatar.jpg","hash":"bf87f0fc2b9a3aae5d467b000fcc287b7febbaf6","modified":1493424614000},{"_id":"source/photo/.DS_Store","hash":"f2aee57486db29d3a9028ecfe1f84362e50b5aa4","modified":1494596091000},{"_id":"source/search/index.md","hash":"5b9936bed9f11ee09fb22f0f573e12d142b32f67","modified":1493708278000},{"_id":"source/photo/index.md","hash":"ed2908b66e202d4d44937ee9371bd345ca0fe2dd","modified":1496602788000},{"_id":"source/tags/index.md","hash":"b49d99918ffa858f33fdc03c2bb56370da04f20e","modified":1493999955000},{"_id":"source/tags/.DS_Store","hash":"f2aee57486db29d3a9028ecfe1f84362e50b5aa4","modified":1493999682000},{"_id":"source/uploads/avatar.jpg","hash":"bf87f0fc2b9a3aae5d467b000fcc287b7febbaf6","modified":1493424614000},{"_id":"themes/Vateral/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1496593533000},{"_id":"themes/Vateral/.git/config","hash":"f3afecfc515570aa4873b2cc58151e0618a7a062","modified":1496593533000},{"_id":"themes/Vateral/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1496593454000},{"_id":"themes/Vateral/.git/index","hash":"bd51103cc73f4d9fc68ae26971adf79e5b4ba41d","modified":1496602671000},{"_id":"themes/Vateral/.git/packed-refs","hash":"30326676d964276a2597fa6d01599df097da52cc","modified":1496593533000},{"_id":"themes/Vateral/.idea/Vateral.iml","hash":"4240dabdc746a36bae8a56eeec04a3a3fc59d842","modified":1496593533000},{"_id":"themes/Vateral/.idea/jsLibraryMappings.xml","hash":"3057cb9aa5f72d93b27b0fa4e16d257b6115d28e","modified":1496593533000},{"_id":"themes/Vateral/.idea/misc.xml","hash":"7df46872d1421797d543d0323da2e81710cc573d","modified":1496593533000},{"_id":"themes/Vateral/.idea/modules.xml","hash":"e8d632f5927e396a98c2badb2bef54c55df499b4","modified":1496593533000},{"_id":"themes/Vateral/.idea/vcs.xml","hash":"c92f3eb0ad1c70371e177a4d7d741f90af3f902c","modified":1496593533000},{"_id":"themes/Vateral/.idea/watcherTasks.xml","hash":"712597f3a6fe3b5da4b357499e8314ab21a512e2","modified":1496593533000},{"_id":"themes/Vateral/js/main.js","hash":"c63d759928eeb71fb5c9f2b836671241d33c4329","modified":1496593533000},{"_id":"themes/Vateral/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1496593533000},{"_id":"themes/Vateral/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1496593533000},{"_id":"themes/Vateral/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1496593533000},{"_id":"themes/Vateral/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1496593533000},{"_id":"themes/Vateral/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1496593533000},{"_id":"themes/Vateral/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1496593533000},{"_id":"themes/Vateral/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1496593533000},{"_id":"themes/Vateral/layout/.DS_Store","hash":"04c0dbe65c68d681085cd2d69af1ec1294d024df","modified":1496644999000},{"_id":"themes/Vateral/layout/about.ejs","hash":"dce19d0743772b2d8624bc880394f57de18e28e2","modified":1496593533000},{"_id":"themes/Vateral/layout/friends.ejs","hash":"7e83c779ba084c8076a8fc74e082aab0efb00f2c","modified":1496593533000},{"_id":"themes/Vateral/layout/category.ejs","hash":"3c627467358b91cfab881460f0ccca313c773d7c","modified":1496593533000},{"_id":"themes/Vateral/layout/archive.ejs","hash":"681e58b87971b409f41fb94b5142715731437c6d","modified":1496593533000},{"_id":"themes/Vateral/layout/index.ejs","hash":"34e3e9721ee0f7bfef8c2e2f06bac1b10aa4eb3e","modified":1496593533000},{"_id":"themes/Vateral/layout/layout.ejs","hash":"002d52fb27d6ac6abf790edac07b99ae9e3abaef","modified":1496593533000},{"_id":"themes/Vateral/layout/photo.ejs","hash":"b65177adb979fb9fcadea4cc83fc622216d99fb1","modified":1496593533000},{"_id":"themes/Vateral/layout/post.ejs","hash":"2e97a4435046ba8d85998cb3be646a46d08e67b7","modified":1496593533000},{"_id":"themes/Vateral/layout/tag.ejs","hash":"3c93eecaf26931c03aed2dd37a66281415c6b97e","modified":1496593533000},{"_id":"themes/Vateral/source/.DS_Store","hash":"e2c3c05cf7934a2fedbe36472a1aa1c1fc189998","modified":1496595247000},{"_id":"source/images/favicon.ico","hash":"8d6a1868a6f938337189edb4588ffe009c9a2b9c","modified":1493596590000},{"_id":"source/uploads/alipay.png","hash":"874a035ac340a25c1665f01f7b9ec7659885b85d","modified":1493963667000},{"_id":"source/uploads/wechat.png","hash":"0fb5f2dcf482c0a24c13f53b71d96dcf8cbb08cc","modified":1493964423000},{"_id":"themes/Vateral/.idea/workspace.xml","hash":"89c102beacde1845f541a726cef2a27c6a1a321d","modified":1496593533000},{"_id":"themes/Vateral/source/favicon.ico","hash":"b3f04351ed05e6c65ea7ea19dfed5b1839cacefc","modified":1496593533000},{"_id":"source/_drafts/Gradle/.DS_Store","hash":"17f83ff76d795b5a98871e3281cc0d023833d6cc","modified":1495864201000},{"_id":"source/_drafts/Maven/.DS_Store","hash":"1b2f7e56d1e295f5fc004a4071ce0c35f7f53044","modified":1495410889000},{"_id":"source/_drafts/Spring/.DS_Store","hash":"22fb3c7368d699c413e3fce3c4948ad63ef6150a","modified":1495612685000},{"_id":"source/_drafts/Maven/2017-05-10-maven.md","hash":"db1772c968d8a4dcf7f7fc3d6e64cede30ee36c6","modified":1494465475000},{"_id":"source/_drafts/Spring/2017-05-05-spring 事务管理（三）.md","hash":"d624ab33ee83974ec4aeb297c5b0595b50d91e4f","modified":1494816310000},{"_id":"source/_drafts/Spring/2017-05-08-Spring中jdbcTemplate和HibernateTemplate.md","hash":"0cf48ac7d74aa1390b2a5a76dc101e649e35c59f","modified":1494233804000},{"_id":"source/_drafts/Spring/2017-05-08-Spring使用容器管理beans.md","hash":"113c2511c8306557d072f2390fd2ddd476513a21","modified":1495606791000},{"_id":"source/_drafts/Spring/2017-05-08-Spring注解原理总结（二）.md","hash":"6c1ab447265f9369f12e424eb5a0dcace71f707f","modified":1494283366000},{"_id":"source/_drafts/Spring/2017-05-08-Spring整合Hibernate.md","hash":"f1823615c3555196aedb63d5313e593ba27549c7","modified":1494283448000},{"_id":"source/_drafts/Spring/2017-05-08-Spring注解原理总结（一）.md","hash":"c88d881385745c70a9f7274ea22562cad3d492d6","modified":1494283397000},{"_id":"source/_drafts/Spring In Action/.DS_Store","hash":"614effa2ea9ee7b5a04ce78b8072b49df04c9ad5","modified":1495612703000},{"_id":"source/_drafts/Spring In Action/老司机的踩坑提醒.md","hash":"f9d02580cc88e099e7327d157428a136e8b889d3","modified":1494283123000},{"_id":"source/_drafts/Spring/浅谈Spring AOP.md","hash":"d3e8e364738b7adf35657615f31ad1a457ae7288","modified":1495612714000},{"_id":"source/_drafts/struts2配置文件/struts.jpg","hash":"ad7eab2d64c3cd63ce43d1477d936fb4b310b7d3","modified":1494634488000},{"_id":"source/_drafts/我的草稿/fontawsome.png","hash":"580256e866d3a5063f54d9e7013737dc8ae123de","modified":1494761444000},{"_id":"source/_drafts/我的草稿/spring日常札记.md","hash":"61fed682685805e7ea81867e41497cb09c3b1fbf","modified":1494833506000},{"_id":"source/_drafts/我的草稿/（WIP）git cherry-pick介绍.md","hash":"74c50553670d4db350e23c89f46d90a085e0459f","modified":1495411679000},{"_id":"source/_drafts/我的草稿/博客的日常札记.md","hash":"2a4ea92c06d40778da9e4867f21568e20ac472fd","modified":1494761851000},{"_id":"source/_drafts/面试题总结/POJO和javabean的异同.md","hash":"ff1084145a8c868d968c2096e41bb80da72f477b","modified":1495612783000},{"_id":"source/_drafts/面试题总结/浅谈HTTP的无状态性和Cookie、Session来源.md","hash":"771b75f95dc627d5dfa939ce9058524170596da5","modified":1495612739000},{"_id":"source/_drafts/面试题总结/浅谈HTTP的无状态性和Cookie、Session来源的副本.md","hash":"43d33c9015d7ee74aaa2895a2dc45ed202cc1b51","modified":1495612753000},{"_id":"source/_posts/00001/.DS_Store","hash":"fd8022e962a26d21a62f1ca01219bf5c53ed808c","modified":1496910907000},{"_id":"source/photo/index/avatar.jpg","hash":"bf87f0fc2b9a3aae5d467b000fcc287b7febbaf6","modified":1493424614000},{"_id":"source/uploads/lovely.gif","hash":"f8b0797c669e63333e65165e70aeeebdb1430714","modified":1494737502000},{"_id":"themes/Vateral/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1496593454000},{"_id":"themes/Vateral/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1496593454000},{"_id":"themes/Vateral/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1496593454000},{"_id":"themes/Vateral/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1496593454000},{"_id":"themes/Vateral/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1496593454000},{"_id":"themes/Vateral/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1496593454000},{"_id":"themes/Vateral/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1496593454000},{"_id":"themes/Vateral/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1496593454000},{"_id":"themes/Vateral/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1496593454000},{"_id":"themes/Vateral/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1496593454000},{"_id":"themes/Vateral/.git/logs/HEAD","hash":"b7912fd0121b19285b161c5c86a9911d5ebd902f","modified":1496593533000},{"_id":"themes/Vateral/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1496593454000},{"_id":"themes/Vateral/layout/partials/footer.ejs","hash":"02fa27eff1227e1719c0891a699ea342788e1b99","modified":1496593533000},{"_id":"themes/Vateral/layout/partials/nav-left-list.ejs","hash":"d33b6d0ff9cd1de2214dc8a0d210c9a0bb1911c5","modified":1496593533000},{"_id":"themes/Vateral/layout/partials/nav-left-head.ejs","hash":"75ec2b9acf6270b5f7469e93852c1a6ae9b0ca5a","modified":1496593533000},{"_id":"themes/Vateral/layout/partials/nav-left.ejs","hash":"fa2ef9a890ccaf78aa9e1b24b29308205726c1a9","modified":1496593533000},{"_id":"themes/Vateral/layout/partials/recent-head.ejs","hash":"2f56bb99f5819796f57d3e776017a031b62f35c3","modified":1496593533000},{"_id":"themes/Vateral/layout/partials/recent-posts-noup.ejs","hash":"481a3b63820bfefac367094b9e59ac4504334d81","modified":1496593533000},{"_id":"themes/Vateral/source/css/Vateral.min.css","hash":"39dd40b3000007858021e43b10692652a84a03a6","modified":1496593533000},{"_id":"themes/Vateral/layout/partials/recent-posts.ejs","hash":"806dfec6276f8768d1c244f5e45a435edbcb147c","modified":1496593533000},{"_id":"themes/Vateral/layout/partials/pagination.ejs","hash":"3f3681ece3b5bead885ee9272775a56166543826","modified":1496593533000},{"_id":"themes/Vateral/source/css/nprogress.css","hash":"17ca817a091da9dcf5fe0f2f1e1f2eea60a33149","modified":1496593533000},{"_id":"themes/Vateral/source/css/Vateral.css","hash":"12866f9c49080b05db534d71267a688172a49909","modified":1496593533000},{"_id":"themes/Vateral/source/css/nprogress.min.css","hash":"eb76839f8583abb84141cf60fd28058841740e7b","modified":1496593533000},{"_id":"themes/Vateral/source/css/font-awesome.min.css","hash":"c068cd49f2dd57e8162c1ad380fc63f0ec59cb1a","modified":1496593533000},{"_id":"themes/Vateral/source/css/magnific-popup.css","hash":"8158ea6f0b9851a3e574c3f531843f703b7a0ec0","modified":1496593533000},{"_id":"themes/Vateral/source/css/templatemo_style.css","hash":"0b55b4ae7eb8c8ce5cbe0705bd3b8c95c83a1868","modified":1496593533000},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1496593533000},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1496593533000},{"_id":"themes/Vateral/source/images/header.png","hash":"8ce504534e37325732140741efdc432a62e9273f","modified":1496593534000},{"_id":"themes/Vateral/source/images/.DS_Store","hash":"6719edba9986edf84b57ab51479ff970d0b9cc02","modified":1496598462000},{"_id":"themes/Vateral/source/js/Vateral.js","hash":"2878b6c8b58edeb6ca884dcc8be03a00ac5d39d0","modified":1496593534000},{"_id":"themes/Vateral/source/js/LICENSE.md","hash":"8fce083aa639d11058fdd01c85190dce87560241","modified":1496593534000},{"_id":"themes/Vateral/source/js/README.md","hash":"fdbf6fee26e9bed79ad203972a3ca386e14e4361","modified":1496593534000},{"_id":"themes/Vateral/source/js/bower.json","hash":"9678ebb17f62024aa21eeae4f4c9af43492f5768","modified":1496593534000},{"_id":"themes/Vateral/source/js/Vateral.min.js","hash":"caf0283803553d1bc703321e1baebf9c2d664e38","modified":1496593534000},{"_id":"themes/Vateral/source/js/exif.js","hash":"0f584529ef7ec601eaddbee27fde6edbc2e82ccc","modified":1496593534000},{"_id":"themes/Vateral/source/js/jquery.pjax.min.js","hash":"b0b664e2b31e4bd0d271493c55946644817611bb","modified":1496593534000},{"_id":"themes/Vateral/source/js/jquery.easing.1.3.js","hash":"083a2d30bc0f76cc160a8bb00646750c6ce6a260","modified":1496593534000},{"_id":"themes/Vateral/source/js/jquery.pjax.js","hash":"13485a1e2dc9c8df28267549de1b8af8f39061d9","modified":1496593534000},{"_id":"themes/Vateral/source/js/main.min.js","hash":"1b34854b7c1e314c2739f7d23feadd0b49e710c4","modified":1496593534000},{"_id":"themes/Vateral/source/js/jquery.magnific-popup.min.js","hash":"9a45cea8875b8e067276f942eb8ba5d08e820cc9","modified":1496593534000},{"_id":"themes/Vateral/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1496593534000},{"_id":"themes/Vateral/source/js/jquery.rotate.min.js","hash":"d1645449a3b0d85052c6055474da9d2cb49a880f","modified":1496593534000},{"_id":"themes/Vateral/source/js/nprogress.min.js","hash":"a51a498e06f2198e9ac07de6efb45bce140d2c01","modified":1496593534000},{"_id":"themes/Vateral/source/js/package.json","hash":"59c850f26dd573f570a1363c93c7a767ddb8d578","modified":1496593534000},{"_id":"themes/Vateral/source/js/modernizr.2.5.3.min.js","hash":"7bac5df50deb223d46964a2c980a6bfabf57767a","modified":1496593534000},{"_id":"themes/Vateral/source/js/nprogress.js","hash":"a7e1146d2021c42e68b599dc8bcc69d44fc31df3","modified":1496593534000},{"_id":"themes/Vateral/source/js/photopage.js","hash":"125860b6ece132e64199315658bd9a73d734e344","modified":1496593534000},{"_id":"themes/Vateral/source/js/templatemo_script.js","hash":"38817e0337a13a22b0f8194ddd76ce8b7e5c7967","modified":1496593534000},{"_id":"source/_drafts/Gradle/阶段关系.png","hash":"4b5a359a892dc5aa86afb802b9088ad331bdf556","modified":1495799065000},{"_id":"source/_drafts/我的草稿/IoC例子.png","hash":"105494ff20ad1591157128b98304ef631b5f820e","modified":1494830608000},{"_id":"themes/Vateral/source/css/materialize.min.css","hash":"031f08da08b5e0fbde71927fb0860f08c6874989","modified":1496593533000},{"_id":"themes/Vateral/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1496593533000},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1496593533000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1496593534000},{"_id":"themes/Vateral/source/js/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1496593534000},{"_id":"source/_drafts/Maven/2017-05-10-maven/maven.png","hash":"2e17a90d1544ce31069138958ed65a91cd2bc1db","modified":1494455465000},{"_id":"source/_drafts/Spring/2017-05-05-spring 事务管理（三）/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493997959000},{"_id":"source/_drafts/Gradle/dependency.png","hash":"16a1344c95e91bac9ba8584fb16153c8523dfe10","modified":1495798848000},{"_id":"source/_drafts/Spring/2017-05-08-Spring使用容器管理beans/beans.png","hash":"5df111761d99e2e868c3547a3e9caaee4981a4f7","modified":1494220555000},{"_id":"source/_posts/00001/Android/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1496851527000},{"_id":"source/_posts/00001/Blog/.DS_Store","hash":"08323ab690d62b92565e60f341fe9f90930a0c72","modified":1496851384000},{"_id":"source/_posts/00001/Blog/2017-05-05-一些mac端好用端插件分享.md","hash":"8634f5ef74352c750ddc251af29a9f98a7ddb655","modified":1494719773000},{"_id":"source/_posts/00001/Git/.DS_Store","hash":"8468a4893cd90908dc5e07f3215e4d8b7ccf8b67","modified":1496851384000},{"_id":"source/_posts/00001/Blog/2017-05-05-自己动手搭建个人博客到优化.md","hash":"0af7a4a796db337742dc05d26b53e828882d2443","modified":1494719498000},{"_id":"source/_posts/00001/Git/2017-05-05-GitHub 学习之路.md","hash":"aafc4ef98581e55e3d7ad1193a3d9f941aa08c48","modified":1496644938000},{"_id":"themes/Vateral/.git/refs/heads/master","hash":"4b97185484598239fc76634bc761a7aa11445280","modified":1496593533000},{"_id":"themes/Vateral/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1496593533000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1496593534000},{"_id":"themes/Vateral/source/images/header-bg.png","hash":"7c271fc2b851c8e1f2c5e313a60a7864851d728e","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1496593534000},{"_id":"themes/Vateral/source/images/link/all.png","hash":"4187499cc20689a582300bfcb26576252a188d5d","modified":1496593534000},{"_id":"themes/Vateral/source/js/materialize.min.js","hash":"55bbdc929aeca8fe2136a6907b5f6f2e50d6a9a1","modified":1496593534000},{"_id":"source/_drafts/2017-05-08-断言详解/assert.png","hash":"6acbd8a0b83428376b6d2c1deecde0452d5d405a","modified":1494227404000},{"_id":"source/_drafts/Gradle/发布.png","hash":"9ce857cfeda3cb845a90d17052527a04f6fbad20","modified":1495861745000},{"_id":"source/_drafts/Spring/2017-05-08-Spring使用容器管理beans/modules.png","hash":"14755fa7cd153b95652cf8d02f51b4b594bebd85","modified":1494221606000},{"_id":"source/_posts/2017-06-08-Activity的生命周期和启动模式/Activity的生命周期.png","hash":"a17604b68135f18bb8f9f17efb29ceebcb8b74d3","modified":1496577218000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1496593534000},{"_id":"source/_drafts/Spring/2017-05-08-Spring使用容器管理beans/bean_life_circle.png","hash":"785e7590ac0f0c2769c1bb6a3b482f654243d7f2","modified":1494221139000},{"_id":"source/_posts/00001/Blog/2017-05-05-一些mac端好用端插件分享/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493997964000},{"_id":"source/_posts/00001/Blog/2017-05-05-自己动手搭建个人博客到优化/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493993732000},{"_id":"source/_posts/00001/Git/2017-05-05-GitHub 学习之路/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1493997952000},{"_id":"source/_posts/00001/Blog/2017-05-05-自己动手搭建个人博客到优化/avatar.jpg","hash":"bf87f0fc2b9a3aae5d467b000fcc287b7febbaf6","modified":1493424614000},{"_id":"themes/Vateral/.git/logs/refs/heads/master","hash":"b7912fd0121b19285b161c5c86a9911d5ebd902f","modified":1496593533000},{"_id":"themes/Vateral/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1496593533000},{"_id":"themes/Vateral/source/images/random/vateral-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1496593534000},{"_id":"themes/Vateral/source/images/coverpic.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1496593534000},{"_id":"themes/Vateral/.git/objects/pack/pack-50e119ff5651697fa6184c105449b6859cffee6b.idx","hash":"bf138e0e286bafa4bcc55ee8ab961c1817cb0987","modified":1496593533000},{"_id":"themes/Vateral/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1496593534000},{"_id":"source/_drafts/Spring/2017-05-08-Spring使用容器管理beans/spring_jar.png","hash":"3c97c8071d8ae27332f822521753aca58792339b","modified":1494221561000},{"_id":"themes/Vateral/.git/logs/refs/remotes/origin/HEAD","hash":"b7912fd0121b19285b161c5c86a9911d5ebd902f","modified":1496593533000},{"_id":"themes/Vateral/source/images/random/vateral-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1496593533000},{"_id":"themes/Vateral/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1496593534000},{"_id":"themes/Vateral/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1496593534000},{"_id":"themes/Vateral/source/images/random/vateral-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1496593534000},{"_id":"themes/Vateral/source/js/spec/Exif2-2.pdf","hash":"9ecf2bc7ebab6ef1916839d9778804945173ee39","modified":1496593534000},{"_id":"source/_posts/00001/Git/2017-05-05-GitHub 学习之路/github.png","hash":"005622e2a0a464d9159315ab55eb2e2ad7d81b5b","modified":1493993975000},{"_id":"themes/Vateral/source/images/random/moumao:hexo-theme-Vateral: hexo主题-Vateral（a theme of hexo named as Vateral）.webarchive","hash":"16c2ed57bca5fd4bf075e13686d72171627922b7","modified":1496593534000},{"_id":"source/images/github.png","hash":"bc8e80f1d8829411f0d698e82af7afaa898ae0ee","modified":1496604149000},{"_id":"source/_drafts/Spring/2017-05-05-spring 事务管理（三）/anisur.jpg","hash":"e1bc94d05dcc97e66183263b2d8c09111d5e4fa2","modified":1494039889000},{"_id":"source/_posts/00001/Blog/2017-05-05-一些mac端好用端插件分享/muhammad.jpg","hash":"3fc792f0dec7ba5cc96b967aae75b8915defb668","modified":1494032879000},{"_id":"themes/Vateral/.git/objects/pack/pack-50e119ff5651697fa6184c105449b6859cffee6b.pack","hash":"a07cae37b23d7bd24169eb3e8b8d3c74c249fc9f","modified":1496593533000},{"_id":"public/baidusitemap.xml","hash":"4cc12cc224e93252df57a7640b0e46bf8da9245d","modified":1496910949061},{"_id":"public/sitemap.xml","hash":"1d3be5d3397fcd47367c362641b7c63e98165664","modified":1496910949136},{"_id":"public/atom.xml","hash":"f7a718a0f098c738d1537f60c4d19c18cdd8c813","modified":1496910949139},{"_id":"public/404.html","hash":"a46f8e2bc0d855aca7389b27864aa18ec5ecf952","modified":1496910949166},{"_id":"public/about/index.html","hash":"f0a714363284f8cf7a902653c1e3afe0ab060600","modified":1496910949171},{"_id":"public/search/index.html","hash":"f138b8dc3b1bba5cd659d6c3124a015eb1a2bb11","modified":1496910949171},{"_id":"public/photo/index.html","hash":"3fd783890257d18d5170b9c2f908c245b8f4fa2f","modified":1496910949171},{"_id":"public/tags/index.html","hash":"ecccf9b26cbe82fa1169ad95912f128818c14639","modified":1496910949171},{"_id":"public/2017/05/05/00001-Blog-2017-05-05-一些mac端好用端插件分享/index.html","hash":"2b6e9948f098419d072456e8d126c022ec82ce67","modified":1496910949171},{"_id":"public/archives/index.html","hash":"0ae5429d03a688675775435b2378e892bb5734f0","modified":1496910949171},{"_id":"public/archives/2017/index.html","hash":"b02bd63aa8c53e28dac164c08c43314629498b01","modified":1496910949171},{"_id":"public/archives/2017/05/index.html","hash":"d3df0bbf25f41702357c3a7fbf256ee14fe7f8b3","modified":1496910949171},{"_id":"public/archives/2017/06/index.html","hash":"6ab007456e16e0df64ba799df1bfff58d537482d","modified":1496910949171},{"_id":"public/categories/技术/index.html","hash":"c73833e1b43bc65990ff8fe3aa478b7c8eb66a1a","modified":1496910949171},{"_id":"public/tags/技术/index.html","hash":"1c2bc7c95068cbad6d78ca1500b656a102ca986c","modified":1496910949171},{"_id":"public/tags/Android/index.html","hash":"a38ddba1966f7f920df888f55aa0a4ae3161381b","modified":1496910949171},{"_id":"public/tags/git/index.html","hash":"7e4f853eafeed22f2a88eaa6ddfc4da2b9084eaa","modified":1496910949171},{"_id":"public/2017/06/08/Activity的生命周期和启动模式/index.html","hash":"c639c1df3148257c34ea1ed0ff7607d43b971fad","modified":1496910949171},{"_id":"public/2017/05/05/00001-Blog-2017-05-05-自己动手搭建个人博客到优化/index.html","hash":"3380e207418a1b216ddee906fe2038d63763dd98","modified":1496910949171},{"_id":"public/2017/05/05/00001-Git-2017-05-05-GitHub-学习之路/index.html","hash":"d0e4e3ab1a6527f38921958b0886fce04fd92cb9","modified":1496910949171},{"_id":"public/index.html","hash":"05f082026425a5fed3980d4a077181ccf6e74313","modified":1496910949186},{"_id":"public/CNAME","hash":"ce0bd6ca9c13b90228a839d28383305ea12584f5","modified":1496910949186},{"_id":"public/Hibernate 注解","hash":"10bcf654d27b72396bebb717d1fbd847a05fd94a","modified":1496910949186},{"_id":"public/robots.txt","hash":"6df0829ea45422db19e73b5793f380be8ae8998d","modified":1496910949186},{"_id":"public/images/avatar.jpg","hash":"bf87f0fc2b9a3aae5d467b000fcc287b7febbaf6","modified":1496910949186},{"_id":"public/uploads/avatar.jpg","hash":"bf87f0fc2b9a3aae5d467b000fcc287b7febbaf6","modified":1496910949186},{"_id":"public/photo/index/avatar.jpg","hash":"bf87f0fc2b9a3aae5d467b000fcc287b7febbaf6","modified":1496910949187},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1496910949187},{"_id":"public/images/header.png","hash":"8ce504534e37325732140741efdc432a62e9273f","modified":1496910949187},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1496910949187},{"_id":"public/images/link/all.png","hash":"4187499cc20689a582300bfcb26576252a188d5d","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1496910949187},{"_id":"public/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1496910949187},{"_id":"public/2017/05/13/struts2配置文件/struts.jpg","hash":"ad7eab2d64c3cd63ce43d1477d936fb4b310b7d3","modified":1496910949187},{"_id":"public/2017/05/10/Maven-2017-05-10-maven/maven.png","hash":"2e17a90d1544ce31069138958ed65a91cd2bc1db","modified":1496910949187},{"_id":"public/2017/05/10/maven/2017-05-10-maven/maven.png","hash":"2e17a90d1544ce31069138958ed65a91cd2bc1db","modified":1496910949187},{"_id":"public/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/beans.png","hash":"5df111761d99e2e868c3547a3e9caaee4981a4f7","modified":1496910949187},{"_id":"public/2017/05/05/00001-Blog-2017-05-05-自己动手搭建个人博客到优化/avatar.jpg","hash":"bf87f0fc2b9a3aae5d467b000fcc287b7febbaf6","modified":1496910949188},{"_id":"public/images/favicon.ico","hash":"8d6a1868a6f938337189edb4588ffe009c9a2b9c","modified":1496910949210},{"_id":"public/uploads/alipay.png","hash":"874a035ac340a25c1665f01f7b9ec7659885b85d","modified":1496910949210},{"_id":"public/uploads/wechat.png","hash":"0fb5f2dcf482c0a24c13f53b71d96dcf8cbb08cc","modified":1496910949213},{"_id":"public/favicon.ico","hash":"b3f04351ed05e6c65ea7ea19dfed5b1839cacefc","modified":1496910949213},{"_id":"public/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1496910949214},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1496910949214},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1496910949214},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1496910949214},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1496910949214},{"_id":"public/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1496910949214},{"_id":"public/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1496910949214},{"_id":"public/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1496910949215},{"_id":"public/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1496910949215},{"_id":"public/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1496910949215},{"_id":"public/images/random/vateral-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1496910949215},{"_id":"public/images/random/vateral-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1496910949215},{"_id":"public/images/random/vateral-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1496910949215},{"_id":"public/images/random/vateral-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1496910949215},{"_id":"public/images/random/vateral-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1496910949215},{"_id":"public/images/random/vateral-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1496910949215},{"_id":"public/2017/05/26/Gradle/阶段关系.png","hash":"4b5a359a892dc5aa86afb802b9088ad331bdf556","modified":1496910949215},{"_id":"public/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/modules.png","hash":"14755fa7cd153b95652cf8d02f51b4b594bebd85","modified":1496910949215},{"_id":"public/css/Vateral.min.css","hash":"39dd40b3000007858021e43b10692652a84a03a6","modified":1496910949224},{"_id":"public/css/nprogress.css","hash":"17ca817a091da9dcf5fe0f2f1e1f2eea60a33149","modified":1496910949224},{"_id":"public/css/nprogress.min.css","hash":"eb76839f8583abb84141cf60fd28058841740e7b","modified":1496910949224},{"_id":"public/css/magnific-popup.css","hash":"8158ea6f0b9851a3e574c3f531843f703b7a0ec0","modified":1496910949224},{"_id":"public/css/templatemo_style.css","hash":"b89ba34b226f00ef607ed99cde85b7ed6831a956","modified":1496910949224},{"_id":"public/js/Vateral.js","hash":"2878b6c8b58edeb6ca884dcc8be03a00ac5d39d0","modified":1496910949225},{"_id":"public/js/bower.json","hash":"c8cbbd33d898c456de598aae64b9587323290805","modified":1496910949225},{"_id":"public/js/README.html","hash":"ee26384606057f6019b435eee9eb165e0d19946f","modified":1496910949225},{"_id":"public/js/LICENSE.html","hash":"5ad4375b07c65a4e2b1e68982a7d8aec9c7fab45","modified":1496910949225},{"_id":"public/js/Vateral.min.js","hash":"caf0283803553d1bc703321e1baebf9c2d664e38","modified":1496910949225},{"_id":"public/js/jquery.pjax.min.js","hash":"b0b664e2b31e4bd0d271493c55946644817611bb","modified":1496910949225},{"_id":"public/js/jquery.easing.1.3.js","hash":"3b9d89e35b108de862845a052637fdad668cbca7","modified":1496910949225},{"_id":"public/js/main.min.js","hash":"1b34854b7c1e314c2739f7d23feadd0b49e710c4","modified":1496910949225},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1496910949225},{"_id":"public/js/jquery.rotate.min.js","hash":"d1645449a3b0d85052c6055474da9d2cb49a880f","modified":1496910949225},{"_id":"public/js/nprogress.min.js","hash":"a51a498e06f2198e9ac07de6efb45bce140d2c01","modified":1496910949225},{"_id":"public/js/package.json","hash":"07bf8eaf536f3589e710b3d57876b77ee327621a","modified":1496910949225},{"_id":"public/js/modernizr.2.5.3.min.js","hash":"7bac5df50deb223d46964a2c980a6bfabf57767a","modified":1496910949225},{"_id":"public/js/nprogress.js","hash":"a7e1146d2021c42e68b599dc8bcc69d44fc31df3","modified":1496910949225},{"_id":"public/js/photopage.js","hash":"125860b6ece132e64199315658bd9a73d734e344","modified":1496910949226},{"_id":"public/js/templatemo_script.js","hash":"38817e0337a13a22b0f8194ddd76ce8b7e5c7967","modified":1496910949226},{"_id":"public/css/Vateral.css","hash":"12866f9c49080b05db534d71267a688172a49909","modified":1496910949226},{"_id":"public/css/font-awesome.min.css","hash":"c068cd49f2dd57e8162c1ad380fc63f0ec59cb1a","modified":1496910949226},{"_id":"public/js/exif.js","hash":"0f584529ef7ec601eaddbee27fde6edbc2e82ccc","modified":1496910949226},{"_id":"public/js/jquery.pjax.js","hash":"13485a1e2dc9c8df28267549de1b8af8f39061d9","modified":1496910949226},{"_id":"public/js/jquery.magnific-popup.min.js","hash":"9a45cea8875b8e067276f942eb8ba5d08e820cc9","modified":1496910949226},{"_id":"public/css/materialize.min.css","hash":"031f08da08b5e0fbde71927fb0860f08c6874989","modified":1496910949226},{"_id":"public/js/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1496910949226},{"_id":"public/js/materialize.min.js","hash":"55bbdc929aeca8fe2136a6907b5f6f2e50d6a9a1","modified":1496910949226},{"_id":"public/2017/05/10/maven/2017-05-10-maven.html","hash":"e4f0fbf314e7c27d97f2238784ab35443e025d99","modified":1496910949226},{"_id":"public/uploads/lovely.gif","hash":"f8b0797c669e63333e65165e70aeeebdb1430714","modified":1496910949226},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1496910949226},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1496910949226},{"_id":"public/images/header-bg.png","hash":"7c271fc2b851c8e1f2c5e313a60a7864851d728e","modified":1496910949226},{"_id":"public/images/random/vateral-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1496910949226},{"_id":"public/images/random/vateral-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1496910949226},{"_id":"public/images/random/vateral-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1496910949226},{"_id":"public/images/random/vateral-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1496910949227},{"_id":"public/2017/05/26/Gradle/dependency.png","hash":"16a1344c95e91bac9ba8584fb16153c8523dfe10","modified":1496910949227},{"_id":"public/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/bean_life_circle.png","hash":"785e7590ac0f0c2769c1bb6a3b482f654243d7f2","modified":1496910949227},{"_id":"public/images/random/vateral-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1496910949234},{"_id":"public/images/random/vateral-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1496910949234},{"_id":"public/images/random/vateral-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1496910949235},{"_id":"public/2017/05/26/Gradle/发布.png","hash":"9ce857cfeda3cb845a90d17052527a04f6fbad20","modified":1496910949235},{"_id":"public/2017/05/08/断言详解/assert.png","hash":"6acbd8a0b83428376b6d2c1deecde0452d5d405a","modified":1496910949235},{"_id":"public/2017/06/08/Activity的生命周期和启动模式/Activity的生命周期.png","hash":"a17604b68135f18bb8f9f17efb29ceebcb8b74d3","modified":1496910949235},{"_id":"public/images/coverpic.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1496910949241},{"_id":"public/images/random/vateral-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1496910949241},{"_id":"public/images/random/vateral-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1496910949241},{"_id":"public/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/spring_jar.png","hash":"3c97c8071d8ae27332f822521753aca58792339b","modified":1496910949241},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1496910949248},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1496910949259},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1496910949259},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1496910949259},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1496910949259},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1496910949260},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1496910949260},{"_id":"public/images/random/vateral-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1496910949261},{"_id":"public/images/random/vateral-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1496910949264},{"_id":"public/images/random/vateral-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1496910949264},{"_id":"public/images/random/vateral-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1496910949274},{"_id":"public/js/spec/Exif2-2.pdf","hash":"9ecf2bc7ebab6ef1916839d9778804945173ee39","modified":1496910949277},{"_id":"public/2017/05/05/00001-Git-2017-05-05-GitHub-学习之路/github.png","hash":"005622e2a0a464d9159315ab55eb2e2ad7d81b5b","modified":1496910949286},{"_id":"public/images/random/moumao:hexo-theme-Vateral: hexo主题-Vateral（a theme of hexo named as Vateral）.webarchive","hash":"16c2ed57bca5fd4bf075e13686d72171627922b7","modified":1496910949295},{"_id":"public/images/github.png","hash":"bc8e80f1d8829411f0d698e82af7afaa898ae0ee","modified":1496910949302},{"_id":"public/2017/05/05/Spring-2017-05-05-spring-事务管理（三）/anisur.jpg","hash":"e1bc94d05dcc97e66183263b2d8c09111d5e4fa2","modified":1496910949306},{"_id":"public/2017/05/05/00001-Blog-2017-05-05-一些mac端好用端插件分享/muhammad.jpg","hash":"3fc792f0dec7ba5cc96b967aae75b8915defb668","modified":1496910949324}],"Category":[{"name":"技术","_id":"cj3o64nba000ep5uknz03su7g"}],"Data":[{"_id":"photo","data":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}}},{"_id":"menu","data":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>","date":"2017-06-07T15:45:30.000Z","updated":"2017-05-06T00:35:27.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj3o64n8q0000p5uk9wls3efj","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\"></script>\n\n</body>\n</html>","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\"></script>\n\n</body>\n</html>"},{"title":"about","date":"2017-05-05T16:00:38.000Z","type":"about","layout":"about","_content":"\nnih ","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-05-06 00:00:38\ntype: \"about\"\nlayout: \"about\"\n\n---\n\nnih ","updated":"2017-05-05T16:01:50.000Z","path":"about/index.html","comments":1,"_id":"cj3o64nct000op5uk1nnq77cg","content":"<p>nih </p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<p>nih </p>\n"},{"title":"search","layout":"search","date":"2017-05-02T06:57:29.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: search\nlayout: search\ndate: 2017-05-02 14:57:29\n---\n","updated":"2017-05-02T06:57:58.000Z","path":"search/index.html","comments":1,"_id":"cj3o64ncu000pp5uk1g4lge4w","content":"","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""},{"title":"photo","date":"2017-05-01T23:51:03.000Z","type":"photo","layout":"photo","_content":"\n暂时先放一个照片。\n\n![](index/avatar.jpg)\n","source":"photo/index.md","raw":"---\ntitle: photo\ndate: 2017-05-02 07:51:03\ntype: photo\nlayout: photo\n---\n\n暂时先放一个照片。\n\n![](index/avatar.jpg)\n","updated":"2017-06-04T18:59:48.000Z","path":"photo/index.html","comments":1,"_id":"cj3o64ncv000qp5ukv2qytptz","content":"<p>暂时先放一个照片。</p>\n<p><img src=\"/photo/index/avatar.jpg\" alt=\"\"></p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<p>暂时先放一个照片。</p>\n<p><img src=\"/photo/index/avatar.jpg\" alt=\"\"></p>\n"},{"title":"tags","date":"2017-05-05T15:54:30.000Z","comments":0,"type":"tags","Layout":"tags","_content":"\n\n\n ","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-05-05 23:54:30\ncomments: false\ntype: \"tags\"\nLayout: \"tags\"\n---\n\n\n\n ","updated":"2017-05-05T15:59:15.000Z","path":"tags/index.html","layout":"page","_id":"cj3o64ncw000rp5uk4pr4qx3p","content":"","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""}],"Post":[{"title":"断言详解","date":"2017-05-08T07:10:49.000Z","_content":"\n<div align = \"center\">\n\n想了解更多JAVA中的断言？\n\n</div>\n\n<!-- more -->\n\n# Spring中的断言\n\n\n\nWeb 应用在接受表单提交的数据后都需要对其进行合法性检查，如果表单数据不合法，请求将被驳回。类似的，当我们在编写类的方法时，也常常需要对方法入参进行合 法性检查，如果入参不符合要求，方法将通过抛出异常的方式拒绝后续处理。举一个例子：有一个根据文件名获取输入流的方法：InputStream getData(String file)，为了使方法能够成功执行，必须保证 file 入参不能为 null 或空白字符，否则根本无须进行后继的处理。这时方法的编写者通常会在方法体的最前面编写一段对入参进行检测的代码，如下所示：\n\n\n\n```Java\n\npublic InputStream getData(String file) { \n    if (file == null || file.length() == 0|| file.replaceAll(\"\\\\s\", \"\").length() == 0) { \n        throw new IllegalArgumentException(\"file入参不是有效的文件地址\"); \n    } \n… \n} \n```\n\n\n\n在Spring中，给我们提供了 org.springframework.util.Assert 通用类完成这一任务。\n\n\n\nAssert 翻译为中文为“断言”，使用过 JUnit 的读者都熟知这个概念，它断定某一个实际的运行值和预期想一样，否则就抛出异常。Spring 对方法入参的检测借用了这个概念，其提供的 Assert 类拥有众多按规则对方法入参进行断言的方法，可以满足大部分方法入参检测的要求。这些断言方法在入参不满足要求时就会抛出 IllegalArgumentException。下面，我们来认识一下 Assert 类中的常用断言方法： \nSpring Assert的所有方法：\n\n![](assert.png)\n\n\n\n断言方法 说明 \n\n1. notNull(Object object)  \n\n当 object 不为 null 时抛出异常，notNull(Object object, String message) 方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null； \n\n2. isTrue(boolean expression) / isTrue(boolean expression, String message)  \n\n当 expression 不为 true 抛出异常； \n\n3. notEmpty(Collection collection) / notEmpty(Collection collection, String message)  \n\n当集合未包含元素时抛出异常。 \nnotEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断； \n\n4. hasLength(String text) / hasLength(String text, String message) \n\n当 text 为 null 或长度为 0 时抛出异常； \n\n5. hasText(String text) / hasText(String text, String message) \n\ntext 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常； \n\n6. isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message) \n\n如果 obj 不能被正确造型为 clazz 指定的类将抛出异常； \n\n7. isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message) \n\nsubType 必须可以按类型匹配于 superType，否则将抛出异常； \n\n\n\n\n\n使用 Assert 断言类可以简化方法入参检测的代码，如 InputStream getData(String file) 在应用 Assert 断言类后，其代码可以简化为以下的形式： \n\npublic InputStream getData(String file){ \n​    Assert.hasText(file,\"file入参不是有效的文件地址\"); \n​    ① 使用 [spring](http://lib.csdn.net/base/javaee) 断言类进行方法入参检测 \n… \n}","source":"_drafts/2017-05-08-断言详解.md","raw":"---\ntitle: 断言详解\ndate: 2017-05-08 15:10:49\ntags: java\n---\n\n<div align = \"center\">\n\n想了解更多JAVA中的断言？\n\n</div>\n\n<!-- more -->\n\n# Spring中的断言\n\n\n\nWeb 应用在接受表单提交的数据后都需要对其进行合法性检查，如果表单数据不合法，请求将被驳回。类似的，当我们在编写类的方法时，也常常需要对方法入参进行合 法性检查，如果入参不符合要求，方法将通过抛出异常的方式拒绝后续处理。举一个例子：有一个根据文件名获取输入流的方法：InputStream getData(String file)，为了使方法能够成功执行，必须保证 file 入参不能为 null 或空白字符，否则根本无须进行后继的处理。这时方法的编写者通常会在方法体的最前面编写一段对入参进行检测的代码，如下所示：\n\n\n\n```Java\n\npublic InputStream getData(String file) { \n    if (file == null || file.length() == 0|| file.replaceAll(\"\\\\s\", \"\").length() == 0) { \n        throw new IllegalArgumentException(\"file入参不是有效的文件地址\"); \n    } \n… \n} \n```\n\n\n\n在Spring中，给我们提供了 org.springframework.util.Assert 通用类完成这一任务。\n\n\n\nAssert 翻译为中文为“断言”，使用过 JUnit 的读者都熟知这个概念，它断定某一个实际的运行值和预期想一样，否则就抛出异常。Spring 对方法入参的检测借用了这个概念，其提供的 Assert 类拥有众多按规则对方法入参进行断言的方法，可以满足大部分方法入参检测的要求。这些断言方法在入参不满足要求时就会抛出 IllegalArgumentException。下面，我们来认识一下 Assert 类中的常用断言方法： \nSpring Assert的所有方法：\n\n![](assert.png)\n\n\n\n断言方法 说明 \n\n1. notNull(Object object)  \n\n当 object 不为 null 时抛出异常，notNull(Object object, String message) 方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null； \n\n2. isTrue(boolean expression) / isTrue(boolean expression, String message)  \n\n当 expression 不为 true 抛出异常； \n\n3. notEmpty(Collection collection) / notEmpty(Collection collection, String message)  \n\n当集合未包含元素时抛出异常。 \nnotEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断； \n\n4. hasLength(String text) / hasLength(String text, String message) \n\n当 text 为 null 或长度为 0 时抛出异常； \n\n5. hasText(String text) / hasText(String text, String message) \n\ntext 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常； \n\n6. isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message) \n\n如果 obj 不能被正确造型为 clazz 指定的类将抛出异常； \n\n7. isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message) \n\nsubType 必须可以按类型匹配于 superType，否则将抛出异常； \n\n\n\n\n\n使用 Assert 断言类可以简化方法入参检测的代码，如 InputStream getData(String file) 在应用 Assert 断言类后，其代码可以简化为以下的形式： \n\npublic InputStream getData(String file){ \n​    Assert.hasText(file,\"file入参不是有效的文件地址\"); \n​    ① 使用 [spring](http://lib.csdn.net/base/javaee) 断言类进行方法入参检测 \n… \n}","slug":"断言详解","published":0,"updated":"2017-05-08T07:25:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nai0001p5ukecsxsgn9","content":"<div align=\"center\"><br><br>想了解更多JAVA中的断言？<br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"Spring中的断言\"><a href=\"#Spring中的断言\" class=\"headerlink\" title=\"Spring中的断言\"></a>Spring中的断言</h1><p>Web 应用在接受表单提交的数据后都需要对其进行合法性检查，如果表单数据不合法，请求将被驳回。类似的，当我们在编写类的方法时，也常常需要对方法入参进行合 法性检查，如果入参不符合要求，方法将通过抛出异常的方式拒绝后续处理。举一个例子：有一个根据文件名获取输入流的方法：InputStream getData(String file)，为了使方法能够成功执行，必须保证 file 入参不能为 null 或空白字符，否则根本无须进行后继的处理。这时方法的编写者通常会在方法体的最前面编写一段对入参进行检测的代码，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getData</span><span class=\"params\">(String file)</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">if</span> (file == <span class=\"keyword\">null</span> || file.length() == <span class=\"number\">0</span>|| file.replaceAll(<span class=\"string\">\"\\\\s\"</span>, <span class=\"string\">\"\"</span>).length() == <span class=\"number\">0</span>) &#123; </div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"file入参不是有效的文件地址\"</span>); </div><div class=\"line\">    &#125; </div><div class=\"line\">… </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Spring中，给我们提供了 org.springframework.util.Assert 通用类完成这一任务。</p>\n<p>Assert 翻译为中文为“断言”，使用过 JUnit 的读者都熟知这个概念，它断定某一个实际的运行值和预期想一样，否则就抛出异常。Spring 对方法入参的检测借用了这个概念，其提供的 Assert 类拥有众多按规则对方法入参进行断言的方法，可以满足大部分方法入参检测的要求。这些断言方法在入参不满足要求时就会抛出 IllegalArgumentException。下面，我们来认识一下 Assert 类中的常用断言方法：<br>Spring Assert的所有方法：</p>\n<p><img src=\"/2017/05/08/断言详解/assert.png\" alt=\"\"></p>\n<p>断言方法 说明 </p>\n<ol>\n<li>notNull(Object object)  </li>\n</ol>\n<p>当 object 不为 null 时抛出异常，notNull(Object object, String message) 方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null； </p>\n<ol>\n<li>isTrue(boolean expression) / isTrue(boolean expression, String message)  </li>\n</ol>\n<p>当 expression 不为 true 抛出异常； </p>\n<ol>\n<li>notEmpty(Collection collection) / notEmpty(Collection collection, String message)  </li>\n</ol>\n<p>当集合未包含元素时抛出异常。<br>notEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断； </p>\n<ol>\n<li>hasLength(String text) / hasLength(String text, String message) </li>\n</ol>\n<p>当 text 为 null 或长度为 0 时抛出异常； </p>\n<ol>\n<li>hasText(String text) / hasText(String text, String message) </li>\n</ol>\n<p>text 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常； </p>\n<ol>\n<li>isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message) </li>\n</ol>\n<p>如果 obj 不能被正确造型为 clazz 指定的类将抛出异常； </p>\n<ol>\n<li>isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message) </li>\n</ol>\n<p>subType 必须可以按类型匹配于 superType，否则将抛出异常； </p>\n<p>使用 Assert 断言类可以简化方法入参检测的代码，如 InputStream getData(String file) 在应用 Assert 断言类后，其代码可以简化为以下的形式： </p>\n<p>public InputStream getData(String file){<br>​    Assert.hasText(file,”file入参不是有效的文件地址”);<br>​    ① 使用 <a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\" rel=\"external\">spring</a> 断言类进行方法入参检测<br>…<br>}</p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br><br>想了解更多JAVA中的断言？<br><br></div>","more":"<h1 id=\"Spring中的断言\"><a href=\"#Spring中的断言\" class=\"headerlink\" title=\"Spring中的断言\"></a>Spring中的断言</h1><p>Web 应用在接受表单提交的数据后都需要对其进行合法性检查，如果表单数据不合法，请求将被驳回。类似的，当我们在编写类的方法时，也常常需要对方法入参进行合 法性检查，如果入参不符合要求，方法将通过抛出异常的方式拒绝后续处理。举一个例子：有一个根据文件名获取输入流的方法：InputStream getData(String file)，为了使方法能够成功执行，必须保证 file 入参不能为 null 或空白字符，否则根本无须进行后继的处理。这时方法的编写者通常会在方法体的最前面编写一段对入参进行检测的代码，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">getData</span><span class=\"params\">(String file)</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">if</span> (file == <span class=\"keyword\">null</span> || file.length() == <span class=\"number\">0</span>|| file.replaceAll(<span class=\"string\">\"\\\\s\"</span>, <span class=\"string\">\"\"</span>).length() == <span class=\"number\">0</span>) &#123; </div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"file入参不是有效的文件地址\"</span>); </div><div class=\"line\">    &#125; </div><div class=\"line\">… </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Spring中，给我们提供了 org.springframework.util.Assert 通用类完成这一任务。</p>\n<p>Assert 翻译为中文为“断言”，使用过 JUnit 的读者都熟知这个概念，它断定某一个实际的运行值和预期想一样，否则就抛出异常。Spring 对方法入参的检测借用了这个概念，其提供的 Assert 类拥有众多按规则对方法入参进行断言的方法，可以满足大部分方法入参检测的要求。这些断言方法在入参不满足要求时就会抛出 IllegalArgumentException。下面，我们来认识一下 Assert 类中的常用断言方法：<br>Spring Assert的所有方法：</p>\n<p><img src=\"/2017/05/08/断言详解/assert.png\" alt=\"\"></p>\n<p>断言方法 说明 </p>\n<ol>\n<li>notNull(Object object)  </li>\n</ol>\n<p>当 object 不为 null 时抛出异常，notNull(Object object, String message) 方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null； </p>\n<ol>\n<li>isTrue(boolean expression) / isTrue(boolean expression, String message)  </li>\n</ol>\n<p>当 expression 不为 true 抛出异常； </p>\n<ol>\n<li>notEmpty(Collection collection) / notEmpty(Collection collection, String message)  </li>\n</ol>\n<p>当集合未包含元素时抛出异常。<br>notEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断； </p>\n<ol>\n<li>hasLength(String text) / hasLength(String text, String message) </li>\n</ol>\n<p>当 text 为 null 或长度为 0 时抛出异常； </p>\n<ol>\n<li>hasText(String text) / hasText(String text, String message) </li>\n</ol>\n<p>text 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常； </p>\n<ol>\n<li>isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message) </li>\n</ol>\n<p>如果 obj 不能被正确造型为 clazz 指定的类将抛出异常； </p>\n<ol>\n<li>isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message) </li>\n</ol>\n<p>subType 必须可以按类型匹配于 superType，否则将抛出异常； </p>\n<p>使用 Assert 断言类可以简化方法入参检测的代码，如 InputStream getData(String file) 在应用 Assert 断言类后，其代码可以简化为以下的形式： </p>\n<p>public InputStream getData(String file){<br>​    Assert.hasText(file,”file入参不是有效的文件地址”);<br>​    ① 使用 <a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\" rel=\"external\">spring</a> 断言类进行方法入参检测<br>…<br>}</p>"},{"_content":"```\n//闭包\ndef createDir = {\n    path ->\n        File dir =new File(path);\n        if (!dir.exists()){\n            dir.mkdirs();\n        }\n}\ntask makeJavaDir(){\n    def paths=['src/main/java','src/main/resource','src/test/java','src/test/resource']\n    doFirst{   \n        paths.forEach(createDir);\n    }\n}\n//web 工程依赖java工程\ntask makeWebDir(){\n    dependsOn 'makeJavaDir'\n    def paths = ['src/main/webapp','src/test/webapp']\n    doLast{\n        paths.forEach(createDir);\n    }\n}\n```\n\n\n\n\n\n# 高级应用\n\n\n\n## 构建生命周期\n\ngradle会根据构建脚本创建一个 project ，并且在这个构建脚本中隐式可用。\n\n配置\n\ntask loadVersion{\n\nProject.version='1.0'\n\n}\n\n```\n初始化 —> 配置（配置代码） —>  执行 （动作代码）\n```\n\n执行\n\nTask loadVersion << {\n\n​\tprint 'success'\n\n}\n\n配置：除了动作代码，其他都是配置代码，配置阶段主要的初始化任务。\n\n\n\n\n\n## 依赖管理\n\n\n\n### 工件坐标\n\n- group \n- name\n- version\n\n\n\n### 常用仓库\n\n- mavenLocal\n- mavenCentral （公共）\n- jcenter （公共）\n- 自定义maven仓库 （最常用）\n\n\n\n\n\n### 依赖的传递性\n\n\n\n### 自动化依赖管理\n\n![](dependency.png)\n\n\n\n### 依赖阶段配置\n\n- compile 、runtime\n- testCompile、testRuntime\n\n![](阶段关系.png)\n\n\n\n\n\n## 解决版本冲突\n\n默认是选取最新的版本，下面是更改这个策略\n\n```\n//更改默认依赖管理策略\nconfigurations.all{\n    resolutionStrategy{\n        failOnVersionConflict()\n    }\n}\n```\n\n\n\n### 排除传递性依赖\n\n```\ncompile ('org.hibernate:hibernate-core:3.6.3.Final'){\n    exclude group:\"org.slf4j\",module:\"slf4j-api\"\n}\n```\n\nmodule就是坐标中的name属性\n\n### 强制指定一个版本\n\n```\nconfigurations.all{\n    resolutionStrategy{\n        failOnVersionConflict()\n        force 'org.slf4j:slf4j-api:1.7.23'\n    }\n}\n```\n\n\n\n\n\n## 发布\n\n\n\n![](发布.png)","source":"_drafts/Gradle.md","raw":"```\n//闭包\ndef createDir = {\n    path ->\n        File dir =new File(path);\n        if (!dir.exists()){\n            dir.mkdirs();\n        }\n}\ntask makeJavaDir(){\n    def paths=['src/main/java','src/main/resource','src/test/java','src/test/resource']\n    doFirst{   \n        paths.forEach(createDir);\n    }\n}\n//web 工程依赖java工程\ntask makeWebDir(){\n    dependsOn 'makeJavaDir'\n    def paths = ['src/main/webapp','src/test/webapp']\n    doLast{\n        paths.forEach(createDir);\n    }\n}\n```\n\n\n\n\n\n# 高级应用\n\n\n\n## 构建生命周期\n\ngradle会根据构建脚本创建一个 project ，并且在这个构建脚本中隐式可用。\n\n配置\n\ntask loadVersion{\n\nProject.version='1.0'\n\n}\n\n```\n初始化 —> 配置（配置代码） —>  执行 （动作代码）\n```\n\n执行\n\nTask loadVersion << {\n\n​\tprint 'success'\n\n}\n\n配置：除了动作代码，其他都是配置代码，配置阶段主要的初始化任务。\n\n\n\n\n\n## 依赖管理\n\n\n\n### 工件坐标\n\n- group \n- name\n- version\n\n\n\n### 常用仓库\n\n- mavenLocal\n- mavenCentral （公共）\n- jcenter （公共）\n- 自定义maven仓库 （最常用）\n\n\n\n\n\n### 依赖的传递性\n\n\n\n### 自动化依赖管理\n\n![](dependency.png)\n\n\n\n### 依赖阶段配置\n\n- compile 、runtime\n- testCompile、testRuntime\n\n![](阶段关系.png)\n\n\n\n\n\n## 解决版本冲突\n\n默认是选取最新的版本，下面是更改这个策略\n\n```\n//更改默认依赖管理策略\nconfigurations.all{\n    resolutionStrategy{\n        failOnVersionConflict()\n    }\n}\n```\n\n\n\n### 排除传递性依赖\n\n```\ncompile ('org.hibernate:hibernate-core:3.6.3.Final'){\n    exclude group:\"org.slf4j\",module:\"slf4j-api\"\n}\n```\n\nmodule就是坐标中的name属性\n\n### 强制指定一个版本\n\n```\nconfigurations.all{\n    resolutionStrategy{\n        failOnVersionConflict()\n        force 'org.slf4j:slf4j-api:1.7.23'\n    }\n}\n```\n\n\n\n\n\n## 发布\n\n\n\n![](发布.png)","slug":"Gradle","published":0,"date":"2017-05-26T11:42:19.000Z","updated":"2017-05-27T05:09:44.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nam0002p5uk2x2c1ksn","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">//闭包</div><div class=\"line\">def createDir = &#123;</div><div class=\"line\">    path -&gt;</div><div class=\"line\">        File dir =new File(path);</div><div class=\"line\">        if (!dir.exists())&#123;</div><div class=\"line\">            dir.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">task makeJavaDir()&#123;</div><div class=\"line\">    def paths=[&apos;src/main/java&apos;,&apos;src/main/resource&apos;,&apos;src/test/java&apos;,&apos;src/test/resource&apos;]</div><div class=\"line\">    doFirst&#123;   </div><div class=\"line\">        paths.forEach(createDir);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//web 工程依赖java工程</div><div class=\"line\">task makeWebDir()&#123;</div><div class=\"line\">    dependsOn &apos;makeJavaDir&apos;</div><div class=\"line\">    def paths = [&apos;src/main/webapp&apos;,&apos;src/test/webapp&apos;]</div><div class=\"line\">    doLast&#123;</div><div class=\"line\">        paths.forEach(createDir);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"高级应用\"><a href=\"#高级应用\" class=\"headerlink\" title=\"高级应用\"></a>高级应用</h1><h2 id=\"构建生命周期\"><a href=\"#构建生命周期\" class=\"headerlink\" title=\"构建生命周期\"></a>构建生命周期</h2><p>gradle会根据构建脚本创建一个 project ，并且在这个构建脚本中隐式可用。</p>\n<p>配置</p>\n<p>task loadVersion{</p>\n<p>Project.version=’1.0’</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">初始化 —&gt; 配置（配置代码） —&gt;  执行 （动作代码）</div></pre></td></tr></table></figure>\n<p>执行</p>\n<p>Task loadVersion &lt;&lt; {</p>\n<p>​    print ‘success’</p>\n<p>}</p>\n<p>配置：除了动作代码，其他都是配置代码，配置阶段主要的初始化任务。</p>\n<h2 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h2><h3 id=\"工件坐标\"><a href=\"#工件坐标\" class=\"headerlink\" title=\"工件坐标\"></a>工件坐标</h3><ul>\n<li>group </li>\n<li>name</li>\n<li>version</li>\n</ul>\n<h3 id=\"常用仓库\"><a href=\"#常用仓库\" class=\"headerlink\" title=\"常用仓库\"></a>常用仓库</h3><ul>\n<li>mavenLocal</li>\n<li>mavenCentral （公共）</li>\n<li>jcenter （公共）</li>\n<li>自定义maven仓库 （最常用）</li>\n</ul>\n<h3 id=\"依赖的传递性\"><a href=\"#依赖的传递性\" class=\"headerlink\" title=\"依赖的传递性\"></a>依赖的传递性</h3><h3 id=\"自动化依赖管理\"><a href=\"#自动化依赖管理\" class=\"headerlink\" title=\"自动化依赖管理\"></a>自动化依赖管理</h3><p><img src=\"/2017/05/26/Gradle/dependency.png\" alt=\"\"></p>\n<h3 id=\"依赖阶段配置\"><a href=\"#依赖阶段配置\" class=\"headerlink\" title=\"依赖阶段配置\"></a>依赖阶段配置</h3><ul>\n<li>compile 、runtime</li>\n<li>testCompile、testRuntime</li>\n</ul>\n<p><img src=\"/2017/05/26/Gradle/阶段关系.png\" alt=\"\"></p>\n<h2 id=\"解决版本冲突\"><a href=\"#解决版本冲突\" class=\"headerlink\" title=\"解决版本冲突\"></a>解决版本冲突</h2><p>默认是选取最新的版本，下面是更改这个策略</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//更改默认依赖管理策略</div><div class=\"line\">configurations.all&#123;</div><div class=\"line\">    resolutionStrategy&#123;</div><div class=\"line\">        failOnVersionConflict()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"排除传递性依赖\"><a href=\"#排除传递性依赖\" class=\"headerlink\" title=\"排除传递性依赖\"></a>排除传递性依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile (&apos;org.hibernate:hibernate-core:3.6.3.Final&apos;)&#123;</div><div class=\"line\">    exclude group:&quot;org.slf4j&quot;,module:&quot;slf4j-api&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>module就是坐标中的name属性</p>\n<h3 id=\"强制指定一个版本\"><a href=\"#强制指定一个版本\" class=\"headerlink\" title=\"强制指定一个版本\"></a>强制指定一个版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">configurations.all&#123;</div><div class=\"line\">    resolutionStrategy&#123;</div><div class=\"line\">        failOnVersionConflict()</div><div class=\"line\">        force &apos;org.slf4j:slf4j-api:1.7.23&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p><img src=\"/2017/05/26/Gradle/发布.png\" alt=\"\"></p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">//闭包</div><div class=\"line\">def createDir = &#123;</div><div class=\"line\">    path -&gt;</div><div class=\"line\">        File dir =new File(path);</div><div class=\"line\">        if (!dir.exists())&#123;</div><div class=\"line\">            dir.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">task makeJavaDir()&#123;</div><div class=\"line\">    def paths=[&apos;src/main/java&apos;,&apos;src/main/resource&apos;,&apos;src/test/java&apos;,&apos;src/test/resource&apos;]</div><div class=\"line\">    doFirst&#123;   </div><div class=\"line\">        paths.forEach(createDir);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//web 工程依赖java工程</div><div class=\"line\">task makeWebDir()&#123;</div><div class=\"line\">    dependsOn &apos;makeJavaDir&apos;</div><div class=\"line\">    def paths = [&apos;src/main/webapp&apos;,&apos;src/test/webapp&apos;]</div><div class=\"line\">    doLast&#123;</div><div class=\"line\">        paths.forEach(createDir);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"高级应用\"><a href=\"#高级应用\" class=\"headerlink\" title=\"高级应用\"></a>高级应用</h1><h2 id=\"构建生命周期\"><a href=\"#构建生命周期\" class=\"headerlink\" title=\"构建生命周期\"></a>构建生命周期</h2><p>gradle会根据构建脚本创建一个 project ，并且在这个构建脚本中隐式可用。</p>\n<p>配置</p>\n<p>task loadVersion{</p>\n<p>Project.version=’1.0’</p>\n<p>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">初始化 —&gt; 配置（配置代码） —&gt;  执行 （动作代码）</div></pre></td></tr></table></figure>\n<p>执行</p>\n<p>Task loadVersion &lt;&lt; {</p>\n<p>​    print ‘success’</p>\n<p>}</p>\n<p>配置：除了动作代码，其他都是配置代码，配置阶段主要的初始化任务。</p>\n<h2 id=\"依赖管理\"><a href=\"#依赖管理\" class=\"headerlink\" title=\"依赖管理\"></a>依赖管理</h2><h3 id=\"工件坐标\"><a href=\"#工件坐标\" class=\"headerlink\" title=\"工件坐标\"></a>工件坐标</h3><ul>\n<li>group </li>\n<li>name</li>\n<li>version</li>\n</ul>\n<h3 id=\"常用仓库\"><a href=\"#常用仓库\" class=\"headerlink\" title=\"常用仓库\"></a>常用仓库</h3><ul>\n<li>mavenLocal</li>\n<li>mavenCentral （公共）</li>\n<li>jcenter （公共）</li>\n<li>自定义maven仓库 （最常用）</li>\n</ul>\n<h3 id=\"依赖的传递性\"><a href=\"#依赖的传递性\" class=\"headerlink\" title=\"依赖的传递性\"></a>依赖的传递性</h3><h3 id=\"自动化依赖管理\"><a href=\"#自动化依赖管理\" class=\"headerlink\" title=\"自动化依赖管理\"></a>自动化依赖管理</h3><p><img src=\"/2017/05/26/Gradle/dependency.png\" alt=\"\"></p>\n<h3 id=\"依赖阶段配置\"><a href=\"#依赖阶段配置\" class=\"headerlink\" title=\"依赖阶段配置\"></a>依赖阶段配置</h3><ul>\n<li>compile 、runtime</li>\n<li>testCompile、testRuntime</li>\n</ul>\n<p><img src=\"/2017/05/26/Gradle/阶段关系.png\" alt=\"\"></p>\n<h2 id=\"解决版本冲突\"><a href=\"#解决版本冲突\" class=\"headerlink\" title=\"解决版本冲突\"></a>解决版本冲突</h2><p>默认是选取最新的版本，下面是更改这个策略</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//更改默认依赖管理策略</div><div class=\"line\">configurations.all&#123;</div><div class=\"line\">    resolutionStrategy&#123;</div><div class=\"line\">        failOnVersionConflict()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"排除传递性依赖\"><a href=\"#排除传递性依赖\" class=\"headerlink\" title=\"排除传递性依赖\"></a>排除传递性依赖</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile (&apos;org.hibernate:hibernate-core:3.6.3.Final&apos;)&#123;</div><div class=\"line\">    exclude group:&quot;org.slf4j&quot;,module:&quot;slf4j-api&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>module就是坐标中的name属性</p>\n<h3 id=\"强制指定一个版本\"><a href=\"#强制指定一个版本\" class=\"headerlink\" title=\"强制指定一个版本\"></a>强制指定一个版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">configurations.all&#123;</div><div class=\"line\">    resolutionStrategy&#123;</div><div class=\"line\">        failOnVersionConflict()</div><div class=\"line\">        force &apos;org.slf4j:slf4j-api:1.7.23&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p><img src=\"/2017/05/26/Gradle/发布.png\" alt=\"\"></p>\n"},{"title":"Important","_content":"\n// Custom styles.\n// Custom styles.\n/*首页文章阴影样式*/\nbody{\n  z-index:9;\n}\n.post {\n  margin-bottom: 100px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 14px rgba(202,203,203,1);\n  -moz-box-shadow: 0 0 14px rgba(202,203,204,1);\n  background: #fff;\n}\n.posts-expand .post-eof {\n  display: block;\n  margin: 0px auto 60px;\n  width: 8%;\n  height: 1px;\n  background: #ccc;\n  text-align: center;\n}\n\n/*首页点击出现下划线*/\n.posts-expand .post-title-link:hover::before {\n  visibility: visible;\n  -webkit-transform: scaleX(1);\n  -moz-transform: scaleX(1);\n  -ms-transform: scaleX(1);\n  -o-transform: scaleX(1);\n  transform: scaleX(1);\n}\n.posts-expand .post-title-link{\n  margin-bottom 20px;\n  display: inline-block;\n  position: relative;\n  color: #555;\n  border-bottom: none;\n  line-height: 2.2;\n  vertical-align: top;\n}\n/*侧边栏博客链接前面小圆圈颜色*/\n.links-of-author a:before{\n  color:#fff;\n}\n\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n@media (max-width: 767px){\n  .menu {\n    text-align: right;\n  }\n}\n/*头像改为圆形，hover转动*/\n.site-author-image {\n  display: block;\n  margin: 15px auto;\n  /*padding: $site-author-image-padding;*/\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  /*\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n  */\n  border-radius:50%;\n  -webkit-transition: all 0.5s;\n  -moz-transition: all 0.5s;\n  -ms-transition: all 0.5s;\n  -o-transition: all 0.5s;\n  transition: all 0.5s;\n}\n.site-author-image:hover{\n  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.5);\n  -moz-box-shadow:0 0 10px rgba(0,0,0,0.5);\n  box-shadow:0 0 10px rgba(0,0,0,0.5);\n  webkit-transform: rotate(360deg) scale(1.1);\n  moz-transform: rotate(360deg) scale(1.1);\n  ms-transform: rotate(360deg) scale(1.1);\n  transform: rotate(360deg) scale(1.1);\n\n}\n@media (max-width: 767px) {\n\n  .site-nav-toggle {\n    display: none;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n  }\n}\n","source":"_drafts/Important.md","raw":"---\ntitle: Important\ntags:\n---\n\n// Custom styles.\n// Custom styles.\n/*首页文章阴影样式*/\nbody{\n  z-index:9;\n}\n.post {\n  margin-bottom: 100px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 14px rgba(202,203,203,1);\n  -moz-box-shadow: 0 0 14px rgba(202,203,204,1);\n  background: #fff;\n}\n.posts-expand .post-eof {\n  display: block;\n  margin: 0px auto 60px;\n  width: 8%;\n  height: 1px;\n  background: #ccc;\n  text-align: center;\n}\n\n/*首页点击出现下划线*/\n.posts-expand .post-title-link:hover::before {\n  visibility: visible;\n  -webkit-transform: scaleX(1);\n  -moz-transform: scaleX(1);\n  -ms-transform: scaleX(1);\n  -o-transform: scaleX(1);\n  transform: scaleX(1);\n}\n.posts-expand .post-title-link{\n  margin-bottom 20px;\n  display: inline-block;\n  position: relative;\n  color: #555;\n  border-bottom: none;\n  line-height: 2.2;\n  vertical-align: top;\n}\n/*侧边栏博客链接前面小圆圈颜色*/\n.links-of-author a:before{\n  color:#fff;\n}\n\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n@media (max-width: 767px){\n  .menu {\n    text-align: right;\n  }\n}\n/*头像改为圆形，hover转动*/\n.site-author-image {\n  display: block;\n  margin: 15px auto;\n  /*padding: $site-author-image-padding;*/\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  /*\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n  */\n  border-radius:50%;\n  -webkit-transition: all 0.5s;\n  -moz-transition: all 0.5s;\n  -ms-transition: all 0.5s;\n  -o-transition: all 0.5s;\n  transition: all 0.5s;\n}\n.site-author-image:hover{\n  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.5);\n  -moz-box-shadow:0 0 10px rgba(0,0,0,0.5);\n  box-shadow:0 0 10px rgba(0,0,0,0.5);\n  webkit-transform: rotate(360deg) scale(1.1);\n  moz-transform: rotate(360deg) scale(1.1);\n  ms-transform: rotate(360deg) scale(1.1);\n  transform: rotate(360deg) scale(1.1);\n\n}\n@media (max-width: 767px) {\n\n  .site-nav-toggle {\n    display: none;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n  }\n}\n","slug":"Important","published":0,"date":"2017-05-05T15:29:10.000Z","updated":"2017-05-05T15:29:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64naq0004p5uk5ban5wio","content":"<p>// Custom styles.<br>// Custom styles.<br>/<em>首页文章阴影样式</em>/<br>body{<br>  z-index:9;<br>}<br>.post {<br>  margin-bottom: 100px;<br>  padding: 25px;<br>  -webkit-box-shadow: 0 0 14px rgba(202,203,203,1);<br>  -moz-box-shadow: 0 0 14px rgba(202,203,204,1);<br>  background: #fff;<br>}<br>.posts-expand .post-eof {<br>  display: block;<br>  margin: 0px auto 60px;<br>  width: 8%;<br>  height: 1px;<br>  background: #ccc;<br>  text-align: center;<br>}</p>\n<p>/<em>首页点击出现下划线</em>/<br>.posts-expand .post-title-link:hover::before {<br>  visibility: visible;<br>  -webkit-transform: scaleX(1);<br>  -moz-transform: scaleX(1);<br>  -ms-transform: scaleX(1);<br>  -o-transform: scaleX(1);<br>  transform: scaleX(1);<br>}<br>.posts-expand .post-title-link{<br>  margin-bottom 20px;<br>  display: inline-block;<br>  position: relative;<br>  color: #555;<br>  border-bottom: none;<br>  line-height: 2.2;<br>  vertical-align: top;<br>}<br>/<em>侧边栏博客链接前面小圆圈颜色</em>/<br>.links-of-author a:before{<br>  color:#fff;<br>}</p>\n<p>.bg_content{<br>  position: fixed;<br>  top: 0;<br>  z-index: -1;<br>  width: 100%;<br>  height: 100%;<br>}</p>\n<p>#canvas{<br>  width: 100%;<br>  height:100%;<br>}<br>/<em>将头部背景变为透明</em>/<br>.header{<br>  background: transparent ;<br>}<br>@media (max-width: 767px){<br>  .menu {<br>    text-align: right;<br>  }<br>}<br>/<em>头像改为圆形，hover转动</em>/<br>.site-author-image {<br>  display: block;<br>  margin: 15px auto;<br>  /<em>padding: $site-author-image-padding;</em>/<br>  max-width: $site-author-image-width;<br>  height: $site-author-image-height;<br>  /<em><br>  border: $site-author-image-border-width solid $site-author-image-border-color;\n  </em>/<br>  border-radius:50%;<br>  -webkit-transition: all 0.5s;<br>  -moz-transition: all 0.5s;<br>  -ms-transition: all 0.5s;<br>  -o-transition: all 0.5s;<br>  transition: all 0.5s;<br>}<br>.site-author-image:hover{<br>  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.5);<br>  -moz-box-shadow:0 0 10px rgba(0,0,0,0.5);<br>  box-shadow:0 0 10px rgba(0,0,0,0.5);<br>  webkit-transform: rotate(360deg) scale(1.1);<br>  moz-transform: rotate(360deg) scale(1.1);<br>  ms-transform: rotate(360deg) scale(1.1);<br>  transform: rotate(360deg) scale(1.1);</p>\n<p>}<br>@media (max-width: 767px) {</p>\n<p>  .site-nav-toggle {<br>    display: none;<br>    position: absolute;<br>    top: 10px;<br>    right: 10px;<br>  }<br>}</p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<p>// Custom styles.<br>// Custom styles.<br>/<em>首页文章阴影样式</em>/<br>body{<br>  z-index:9;<br>}<br>.post {<br>  margin-bottom: 100px;<br>  padding: 25px;<br>  -webkit-box-shadow: 0 0 14px rgba(202,203,203,1);<br>  -moz-box-shadow: 0 0 14px rgba(202,203,204,1);<br>  background: #fff;<br>}<br>.posts-expand .post-eof {<br>  display: block;<br>  margin: 0px auto 60px;<br>  width: 8%;<br>  height: 1px;<br>  background: #ccc;<br>  text-align: center;<br>}</p>\n<p>/<em>首页点击出现下划线</em>/<br>.posts-expand .post-title-link:hover::before {<br>  visibility: visible;<br>  -webkit-transform: scaleX(1);<br>  -moz-transform: scaleX(1);<br>  -ms-transform: scaleX(1);<br>  -o-transform: scaleX(1);<br>  transform: scaleX(1);<br>}<br>.posts-expand .post-title-link{<br>  margin-bottom 20px;<br>  display: inline-block;<br>  position: relative;<br>  color: #555;<br>  border-bottom: none;<br>  line-height: 2.2;<br>  vertical-align: top;<br>}<br>/<em>侧边栏博客链接前面小圆圈颜色</em>/<br>.links-of-author a:before{<br>  color:#fff;<br>}</p>\n<p>.bg_content{<br>  position: fixed;<br>  top: 0;<br>  z-index: -1;<br>  width: 100%;<br>  height: 100%;<br>}</p>\n<p>#canvas{<br>  width: 100%;<br>  height:100%;<br>}<br>/<em>将头部背景变为透明</em>/<br>.header{<br>  background: transparent ;<br>}<br>@media (max-width: 767px){<br>  .menu {<br>    text-align: right;<br>  }<br>}<br>/<em>头像改为圆形，hover转动</em>/<br>.site-author-image {<br>  display: block;<br>  margin: 15px auto;<br>  /<em>padding: $site-author-image-padding;</em>/<br>  max-width: $site-author-image-width;<br>  height: $site-author-image-height;<br>  /<em><br>  border: $site-author-image-border-width solid $site-author-image-border-color;\n  </em>/<br>  border-radius:50%;<br>  -webkit-transition: all 0.5s;<br>  -moz-transition: all 0.5s;<br>  -ms-transition: all 0.5s;<br>  -o-transition: all 0.5s;<br>  transition: all 0.5s;<br>}<br>.site-author-image:hover{<br>  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.5);<br>  -moz-box-shadow:0 0 10px rgba(0,0,0,0.5);<br>  box-shadow:0 0 10px rgba(0,0,0,0.5);<br>  webkit-transform: rotate(360deg) scale(1.1);<br>  moz-transform: rotate(360deg) scale(1.1);<br>  ms-transform: rotate(360deg) scale(1.1);<br>  transform: rotate(360deg) scale(1.1);</p>\n<p>}<br>@media (max-width: 767px) {</p>\n<p>  .site-nav-toggle {<br>    display: none;<br>    position: absolute;<br>    top: 10px;<br>    right: 10px;<br>  }<br>}</p>\n"},{"_content":"\n\n\n\n# 投影查询\n\n是什么？\n\n> 查询一个或多个属性，但不全部查询。\n\n有三种方式：\n\n1. 直接查\n\n   ​\n\n```java\nQuery query = getSession().createQuery(\"select username,password from User\");\nList<Object[]> list = query.list();\nfor(Object[] o :list){\n  System.out.println(\"用户名：\" + o[0] );\n}\n```\n\n\n\n2. 查询返回对象\n\n\n\n```java\nQuery query = getSession().createQuery(\"select new User(username,password) from User\");\nList<User> list = query.list();\nfor(User user :list){\n  System.out.println(\"用户名：\" + user.getUsername() );\n}\n```\n\n\n\n3. 查询返回Map键值对\n\n\n\n```java\n//在遍历Map时可以根据编号获取属性值\n//Query query = getSession().createQuery(\"select new Map(username,password) from User\");\n//使用属性的别名，在遍历的时候可以根据名称获取属性值\nQuery query = getSession().createQuery(\"select new Map(u.username as username,u.password as password) from User as u\");\n\nList<User> list = query.list();\nfor(Map m :list){\n  System.out.println(\"用户名：\" + m.get(\"username\") + \"密码\" + m.get(\"password\") );\n}\n```\n\n","source":"_drafts/Hibernate的Hql总结.md","raw":"\n\n\n\n# 投影查询\n\n是什么？\n\n> 查询一个或多个属性，但不全部查询。\n\n有三种方式：\n\n1. 直接查\n\n   ​\n\n```java\nQuery query = getSession().createQuery(\"select username,password from User\");\nList<Object[]> list = query.list();\nfor(Object[] o :list){\n  System.out.println(\"用户名：\" + o[0] );\n}\n```\n\n\n\n2. 查询返回对象\n\n\n\n```java\nQuery query = getSession().createQuery(\"select new User(username,password) from User\");\nList<User> list = query.list();\nfor(User user :list){\n  System.out.println(\"用户名：\" + user.getUsername() );\n}\n```\n\n\n\n3. 查询返回Map键值对\n\n\n\n```java\n//在遍历Map时可以根据编号获取属性值\n//Query query = getSession().createQuery(\"select new Map(username,password) from User\");\n//使用属性的别名，在遍历的时候可以根据名称获取属性值\nQuery query = getSession().createQuery(\"select new Map(u.username as username,u.password as password) from User as u\");\n\nList<User> list = query.list();\nfor(Map m :list){\n  System.out.println(\"用户名：\" + m.get(\"username\") + \"密码\" + m.get(\"password\") );\n}\n```\n\n","slug":"Hibernate的Hql总结","published":0,"date":"2017-05-20T00:02:50.000Z","updated":"2017-05-20T00:12:48.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nas0005p5uk5rni8vwg","content":"<h1 id=\"投影查询\"><a href=\"#投影查询\" class=\"headerlink\" title=\"投影查询\"></a>投影查询</h1><p>是什么？</p>\n<blockquote>\n<p>查询一个或多个属性，但不全部查询。</p>\n</blockquote>\n<p>有三种方式：</p>\n<ol>\n<li><p>直接查</p>\n<p>​</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Query query = getSession().createQuery(<span class=\"string\">\"select username,password from User\"</span>);</div><div class=\"line\">List&lt;Object[]&gt; list = query.list();</div><div class=\"line\"><span class=\"keyword\">for</span>(Object[] o :list)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"用户名：\"</span> + o[<span class=\"number\">0</span>] );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>查询返回对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Query query = getSession().createQuery(<span class=\"string\">\"select new User(username,password) from User\"</span>);</div><div class=\"line\">List&lt;User&gt; list = query.list();</div><div class=\"line\"><span class=\"keyword\">for</span>(User user :list)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"用户名：\"</span> + user.getUsername() );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>查询返回Map键值对</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在遍历Map时可以根据编号获取属性值</span></div><div class=\"line\"><span class=\"comment\">//Query query = getSession().createQuery(\"select new Map(username,password) from User\");</span></div><div class=\"line\"><span class=\"comment\">//使用属性的别名，在遍历的时候可以根据名称获取属性值</span></div><div class=\"line\">Query query = getSession().createQuery(<span class=\"string\">\"select new Map(u.username as username,u.password as password) from User as u\"</span>);</div><div class=\"line\"></div><div class=\"line\">List&lt;User&gt; list = query.list();</div><div class=\"line\"><span class=\"keyword\">for</span>(Map m :list)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"用户名：\"</span> + m.get(<span class=\"string\">\"username\"</span>) + <span class=\"string\">\"密码\"</span> + m.get(<span class=\"string\">\"password\"</span>) );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"投影查询\"><a href=\"#投影查询\" class=\"headerlink\" title=\"投影查询\"></a>投影查询</h1><p>是什么？</p>\n<blockquote>\n<p>查询一个或多个属性，但不全部查询。</p>\n</blockquote>\n<p>有三种方式：</p>\n<ol>\n<li><p>直接查</p>\n<p>​</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Query query = getSession().createQuery(<span class=\"string\">\"select username,password from User\"</span>);</div><div class=\"line\">List&lt;Object[]&gt; list = query.list();</div><div class=\"line\"><span class=\"keyword\">for</span>(Object[] o :list)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"用户名：\"</span> + o[<span class=\"number\">0</span>] );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>查询返回对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Query query = getSession().createQuery(<span class=\"string\">\"select new User(username,password) from User\"</span>);</div><div class=\"line\">List&lt;User&gt; list = query.list();</div><div class=\"line\"><span class=\"keyword\">for</span>(User user :list)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"用户名：\"</span> + user.getUsername() );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>查询返回Map键值对</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在遍历Map时可以根据编号获取属性值</span></div><div class=\"line\"><span class=\"comment\">//Query query = getSession().createQuery(\"select new Map(username,password) from User\");</span></div><div class=\"line\"><span class=\"comment\">//使用属性的别名，在遍历的时候可以根据名称获取属性值</span></div><div class=\"line\">Query query = getSession().createQuery(<span class=\"string\">\"select new Map(u.username as username,u.password as password) from User as u\"</span>);</div><div class=\"line\"></div><div class=\"line\">List&lt;User&gt; list = query.list();</div><div class=\"line\"><span class=\"keyword\">for</span>(Map m :list)&#123;</div><div class=\"line\">  System.out.println(<span class=\"string\">\"用户名：\"</span> + m.get(<span class=\"string\">\"username\"</span>) + <span class=\"string\">\"密码\"</span> + m.get(<span class=\"string\">\"password\"</span>) );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"maven","_content":"\n <div align=\"center\">\n  想学习Maven吗？\n\n</div>\n\n<!-- more -->\n\n# 常用的构建命令\n\nmvn \n\n- v 查看版本\n\n\n- compile 编译\n\n\n- test 测试\n\n\n- package  打包\n  - 会依次执行  clean 、\n- clean 删除target文件夹\n- Install 安装jar包到本地仓库中\n\n\n\n# 自动创建目录骨架\n\n创建目录的两种方式：\n\n1. mvn archetype:generate 按照提示进行选择\n\n\n2. mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名\n\n   ​\t\t\t\t\t\t-DartifactId=项目名-模块名\n\n   ​\t\t\t\t\t\t-Dversion=版本号\n\n   ​\t\t\t\t\t\t-Dpackage=代码所在的包名\n\n\n\n# maven中的坐标和仓库\n\n## 坐标\n\n在`<dependency> `中的就是坐标\n\n```Xml\n  <dependency>\n    <groupId>com.nimon.maven01</groupId>\n    <artifactId>maven01-model</artifactId>  \n    <version>0.0.1SNAPSHOT</version>\n  </dependency>\n```\n\n> 项目的包名，建议和groupId和artifactId相吻合，这样看起来，就更加清晰，符合逻辑，也更方便搜索。\n\n\n\n## 构件\n\n在maven世界中，任何一个依赖、插件、项目构建的输出，都可以被称作为**构件**。\n\n**构件**通过坐标作为其唯一的标识，就好像我们的工作单位和家庭地址。\n\n> 收宝贝的时候，不是收到的那一刻，而是中间等待的过程。\n\n\n\n## 仓库\n\n​\t本地仓库和远程仓库\n\n​\t[查看仓库](http://search.maven.org/)\n\n​\t[全球中央仓库](https://repo.maven.apache.org/maven2/)\n\n​\t[MVN Repository](http://mvnrepository.com/)\n\n## 镜像仓库\n\n> 一旦配置了镜像，那么所有访问都会到镜像仓库中，原仓库将不能直接访问。\n\n> maven主目录 > conf > settings.xml > 146行\n\n```Xml\n    <mirror>\n      <id>maven.net.cn</id>\n      <mirrorOf>central</mirrorOf>\n      <name>Central mirror in china</name>\n      <url>http://maven.net.cn/content/groups/public</url>\n    </mirror>\n```\n\n\n\n## 更改仓库位置\n\n> maven从远程中央仓库下载默认是存放在当前用户目录中\n>\n> ​\t即 ~/.m2/repository\n\n修改 `settings.xml `文件，复制第 53 行的内容\n\n```\n <localRepository>/Users/nimon/nj/proj/maven/repo</localRepository>\n```\n\n其中路径表示新仓库的位置。然后复制一份 `settings.xml`  到 `repo` 目录下，这样我们以后更新maven版本就不用再修改原始的 `settings.xml`\n\n\n\n# maven的生命周期和插件\n\n## 完整的项目构建过程包括\n\n清理、编译、测试、打包、集成测试、验证、部署\n\nmaven将其进行抽象。实际上，maven和插件是密不可分的，maven抽象出一套项目构建的生命周期，而插件是对maven抽象的具体实现。\n\n比如，我们对项目进行编译，\n\n## maven中定义了三套独立的生命周期\n\n1. clean    清理项目\n2. default  构建项目\n3. site   生成项目站点\n\n这三套生命周期是相互独立的，每个生命周期又包含一些阶段，这些阶段是有顺序的，后面的阶段依赖于前面的阶段。在执行的时候，前面的阶段会顺序执行，并不会触发另外两个生命周期中的阶段。\n\n\n\n### clean 清理项目阶段\n\npre-clean 执行清理前的工作\n\nclean 清理上一次构建的文件\n\npost-clean 执行清理后的文件\n\n\n\n### default 构建项目（最核心）\n\ncompile test package install\n\n\n\n### site 生成项目站点\n\npre-site 在生成项目站点前要完成工作\n\nsite  生成项目的站点文档\n\npost-site  在生成项目站点后要完成的工作\n\nsite-deploy  发布生成的站点到服务器\n\n\n\n可以去 **[官方插件](https://maven.apache.org/plugins)** ，查找使用插件\n\n\n\n# pom.xml常用元素\n\npom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构建信息的管理。 \n\n\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>   \n  \n    <groupId>组织名，公司网址的反写+项目名</groupId>\n    <artifactId>项目名-模块名</artifactId>\n  \t<!--打包类型，默认是jar\n\t\twar zip pom\t\n\t-->\n    <packaging>war</packaging>\n  \t<!--第一个0表示大版本号\n\t第二个0 表示分支版本号\n\t第三个0 表示小版本号\n\tSNAPSHOT ：不稳定，尚处于开发中，快照版本\n\tALPHA ：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。\n\tBeta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。\n\tRELEASE ：稳定版\n\tGA ：正式发布\n\t-->\n    <version>0.0.1-SNAPSHOT</version>\n    <!--项目描述名-->\n    <name>maven05-demo Maven Webapp</name>\n  \t<!--项目地址-->\n    <url>http://maven.apache.org</url>\n    <!--项目描述-->\n    <description></description>\n  \t<developers></developers>\n  \t<licenses></licenses>\n  \t<organization></organization>\n  \n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n          \t<!--只存在于测试的 classpath 中-->\n            <scope>test</scope>\n          \t<type></type>\n          \t<!--设置依赖是否可选-->\n          \t<optional></optional>\n          \t<!--排除依赖传递列表-->\n          \t<exclusions>\n          \t\t<exclusion>\n              \t\t\n              \t</exclusion>\n          \t</exclusions>\n        </dependency>\n    </dependencies>\n  \n  \t<!--依赖的管理，不会被运行和引入到实际的依赖中-->\n  \t<dependencyManagerment>\n      \t<!--主要定义在父模块中，供子模块集成用的-->\n  \t\t<dependency>\n      \t\t\n      \t</dependency>\n  \t</dependencyManagerment>\n  \n  \t<!--插件列表-->\n  \t <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>2.4</version>\n              \t<!--上面三项是坐标-->\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.0.2</version>\n            </plugin>\n        </plugins>\n\t\t<!--子模块对父模块的继承-->\n       \t<parent></parent>\n\t\t<!--聚合多个maven运行项-->\n       \t<modules></modules>\n       \n        <finalName>maven05-demo</finalName>\n    </build>\n  \n</project>\n```\n\n\n\n# 依赖范围\n\n\n\n我们平时在开发时，如果要使用某一个框架，就需要把框架的jar包引入项目的 classpath 中，这样我们的项目就可以使用 框架为我们封装好的一些方法。maven给我们提供了三种classpath：\n\n1. 编译\n2. 测试 test\n3. 运行  \n\n所以依赖的范围就是控制依赖于三种 classpath 的关系的。\n\n有六中依赖范围的值可以选择：\n\n- compile 默认的范围，如果没有明确指定，编译依赖将在所有的 classpath 中都有效，而且会传递到依赖项目中。\n- provided  在编译和测试的时候有效\n- runtime 在测试和运行时有效\n- test 只在测试的时候有效\n- system 于本机系统相关联，可移植性差\n- import 导入的范围，它只使用在 dependencyManagerment ，表示从其他 pom 中导入的 dependency 的配置。\n\n例如\n\n```xml\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>maven</groupId>\n  <artifactId>B</artifactId>\n  <packaging>pom</packaging>\n  <name>B</name>\n  <version>1.0</version>\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>maven</groupId>\n        <artifactId>A</artifactId>\n        <version>1.0</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n      .....\n```\n\n\n\n\n\n# 依赖传递\n\n一个小案例\n\nshanji 依赖于 nage\n\nnage 依赖于 bge\n\nbge的依赖关系\n\n```xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.10</version>\n      <scope>test</scope>\n    </dependency>\n </dependencies>\n```\n\nnage的依赖关系\n\n```xml\n<dependencies>\n  \n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-bge</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n  </dependencies>\n```\n\nshanji的依赖关系\n\n```Xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  \n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-nage</artifactId>\n      <version>1.0-SNAPSHOT</version>\n      <exclusions>\n        <exclusion>\n          <groupId>com.hongxing</groupId>\n          <artifactId>hongxing-bge</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n```\n\n这时候nage下就有bge的依赖jar包，shanji下有bge和nage的依赖jar包。\n\n但是由于依赖的传递性，shanji 只依赖于nage ，shanji 项目中会出现 bge 的jar包。有时候，这不是我们想要的。\n\n这时可以在 nage 依赖下使用 <exclusions>  把 bge 排除在外。\n\n\n\n\n\n\n\n# 依赖冲突\n\n> eg 对不同版本的同一个构建。\n\n1. 短路优先\n\n   A -> B -> C -> X（JAR)\n\n   A -> D -> X（JAR)    **优先**\n\n\n举例：\n\n在 bge 中添加commons-io 2.5的版本依赖\n\n在 nage 中添加commons-io 2.0的版本依赖\n\n这时候在 shanji 项目中就会出现 2.0 的版本，因为shanji 离 nage 比较近。\n\n\n\n2. 先声明先优先\n\n如果路径长度相同，谁先声明，先解析谁。\n\n举例：\n\n```xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-bge</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-nage</artifactId>\n      <version>1.0-SNAPSHOT</version>\n      <!--<exclusions>-->\n        <!--<exclusion>-->\n          <!--<groupId>com.hongxing</groupId>-->\n          <!--<artifactId>hongxing-bge</artifactId>-->\n        <!--</exclusion>-->\n      <!--</exclusions>-->\n    </dependency>\n  </dependencies>\n```\n\n这时候，项目中 commons-io 的版本就变成了 2.5，因为是先声明 bge ，后声明 nage 。\n\n\n\n\n# 聚合和继承\n\n如果在maven中有多个项目，我们想要 install 将其放到本地仓库中， 必须对其依次执行 install 命令\n\nmaven 给我提供了一个解决办法，就是使用 **聚合** \n\n```xml\n<modules>\n  <module>../hongxing-bge</module>\n  <module>../hongxing-nage</module>\n  <module>../hongxing-shanji</module>\n</modules>\n```\n\n然后执行 install 命令，就会自动把三个module都安装到本地仓库中了。\n\n定义父容器\n\n```xml\n  \t<properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <junit.version>\n            3.8.1\n        </junit.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>${junit.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\n\n\n\n然后在子类中使用\n\n```xml\n  <parent>\n    <groupId>com.hongxing</groupId>\n    <artifactId>hongxing-parent</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n```\n\n> 注意修改  **<packaging>** 为pom\n\n\n\n# 使用maven构建web项目\n\n使用 jetty 发布\n\n```xml\n<plugin>\n  <groupId>org.eclipse.jetty</groupId>\n  <artifactId>jetty-maven-plugin</artifactId>\n  <version>9.4.4.v20170414</version>\n  <executions>\n    <execution>\n      <!--在打包成功后使用jetty:run来运行jetty服务-->\n      <phase>package</phase>  <!--指定在package阶段的时候-->\n      <goals>\n        <goal>run</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```\n\n","source":"_drafts/maven.md","raw":"---\ntitle: maven\ntags: maven\n\n---\n\n <div align=\"center\">\n  想学习Maven吗？\n\n</div>\n\n<!-- more -->\n\n# 常用的构建命令\n\nmvn \n\n- v 查看版本\n\n\n- compile 编译\n\n\n- test 测试\n\n\n- package  打包\n  - 会依次执行  clean 、\n- clean 删除target文件夹\n- Install 安装jar包到本地仓库中\n\n\n\n# 自动创建目录骨架\n\n创建目录的两种方式：\n\n1. mvn archetype:generate 按照提示进行选择\n\n\n2. mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名\n\n   ​\t\t\t\t\t\t-DartifactId=项目名-模块名\n\n   ​\t\t\t\t\t\t-Dversion=版本号\n\n   ​\t\t\t\t\t\t-Dpackage=代码所在的包名\n\n\n\n# maven中的坐标和仓库\n\n## 坐标\n\n在`<dependency> `中的就是坐标\n\n```Xml\n  <dependency>\n    <groupId>com.nimon.maven01</groupId>\n    <artifactId>maven01-model</artifactId>  \n    <version>0.0.1SNAPSHOT</version>\n  </dependency>\n```\n\n> 项目的包名，建议和groupId和artifactId相吻合，这样看起来，就更加清晰，符合逻辑，也更方便搜索。\n\n\n\n## 构件\n\n在maven世界中，任何一个依赖、插件、项目构建的输出，都可以被称作为**构件**。\n\n**构件**通过坐标作为其唯一的标识，就好像我们的工作单位和家庭地址。\n\n> 收宝贝的时候，不是收到的那一刻，而是中间等待的过程。\n\n\n\n## 仓库\n\n​\t本地仓库和远程仓库\n\n​\t[查看仓库](http://search.maven.org/)\n\n​\t[全球中央仓库](https://repo.maven.apache.org/maven2/)\n\n​\t[MVN Repository](http://mvnrepository.com/)\n\n## 镜像仓库\n\n> 一旦配置了镜像，那么所有访问都会到镜像仓库中，原仓库将不能直接访问。\n\n> maven主目录 > conf > settings.xml > 146行\n\n```Xml\n    <mirror>\n      <id>maven.net.cn</id>\n      <mirrorOf>central</mirrorOf>\n      <name>Central mirror in china</name>\n      <url>http://maven.net.cn/content/groups/public</url>\n    </mirror>\n```\n\n\n\n## 更改仓库位置\n\n> maven从远程中央仓库下载默认是存放在当前用户目录中\n>\n> ​\t即 ~/.m2/repository\n\n修改 `settings.xml `文件，复制第 53 行的内容\n\n```\n <localRepository>/Users/nimon/nj/proj/maven/repo</localRepository>\n```\n\n其中路径表示新仓库的位置。然后复制一份 `settings.xml`  到 `repo` 目录下，这样我们以后更新maven版本就不用再修改原始的 `settings.xml`\n\n\n\n# maven的生命周期和插件\n\n## 完整的项目构建过程包括\n\n清理、编译、测试、打包、集成测试、验证、部署\n\nmaven将其进行抽象。实际上，maven和插件是密不可分的，maven抽象出一套项目构建的生命周期，而插件是对maven抽象的具体实现。\n\n比如，我们对项目进行编译，\n\n## maven中定义了三套独立的生命周期\n\n1. clean    清理项目\n2. default  构建项目\n3. site   生成项目站点\n\n这三套生命周期是相互独立的，每个生命周期又包含一些阶段，这些阶段是有顺序的，后面的阶段依赖于前面的阶段。在执行的时候，前面的阶段会顺序执行，并不会触发另外两个生命周期中的阶段。\n\n\n\n### clean 清理项目阶段\n\npre-clean 执行清理前的工作\n\nclean 清理上一次构建的文件\n\npost-clean 执行清理后的文件\n\n\n\n### default 构建项目（最核心）\n\ncompile test package install\n\n\n\n### site 生成项目站点\n\npre-site 在生成项目站点前要完成工作\n\nsite  生成项目的站点文档\n\npost-site  在生成项目站点后要完成的工作\n\nsite-deploy  发布生成的站点到服务器\n\n\n\n可以去 **[官方插件](https://maven.apache.org/plugins)** ，查找使用插件\n\n\n\n# pom.xml常用元素\n\npom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构建信息的管理。 \n\n\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>   \n  \n    <groupId>组织名，公司网址的反写+项目名</groupId>\n    <artifactId>项目名-模块名</artifactId>\n  \t<!--打包类型，默认是jar\n\t\twar zip pom\t\n\t-->\n    <packaging>war</packaging>\n  \t<!--第一个0表示大版本号\n\t第二个0 表示分支版本号\n\t第三个0 表示小版本号\n\tSNAPSHOT ：不稳定，尚处于开发中，快照版本\n\tALPHA ：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。\n\tBeta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。\n\tRELEASE ：稳定版\n\tGA ：正式发布\n\t-->\n    <version>0.0.1-SNAPSHOT</version>\n    <!--项目描述名-->\n    <name>maven05-demo Maven Webapp</name>\n  \t<!--项目地址-->\n    <url>http://maven.apache.org</url>\n    <!--项目描述-->\n    <description></description>\n  \t<developers></developers>\n  \t<licenses></licenses>\n  \t<organization></organization>\n  \n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n          \t<!--只存在于测试的 classpath 中-->\n            <scope>test</scope>\n          \t<type></type>\n          \t<!--设置依赖是否可选-->\n          \t<optional></optional>\n          \t<!--排除依赖传递列表-->\n          \t<exclusions>\n          \t\t<exclusion>\n              \t\t\n              \t</exclusion>\n          \t</exclusions>\n        </dependency>\n    </dependencies>\n  \n  \t<!--依赖的管理，不会被运行和引入到实际的依赖中-->\n  \t<dependencyManagerment>\n      \t<!--主要定义在父模块中，供子模块集成用的-->\n  \t\t<dependency>\n      \t\t\n      \t</dependency>\n  \t</dependencyManagerment>\n  \n  \t<!--插件列表-->\n  \t <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>2.4</version>\n              \t<!--上面三项是坐标-->\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.0.2</version>\n            </plugin>\n        </plugins>\n\t\t<!--子模块对父模块的继承-->\n       \t<parent></parent>\n\t\t<!--聚合多个maven运行项-->\n       \t<modules></modules>\n       \n        <finalName>maven05-demo</finalName>\n    </build>\n  \n</project>\n```\n\n\n\n# 依赖范围\n\n\n\n我们平时在开发时，如果要使用某一个框架，就需要把框架的jar包引入项目的 classpath 中，这样我们的项目就可以使用 框架为我们封装好的一些方法。maven给我们提供了三种classpath：\n\n1. 编译\n2. 测试 test\n3. 运行  \n\n所以依赖的范围就是控制依赖于三种 classpath 的关系的。\n\n有六中依赖范围的值可以选择：\n\n- compile 默认的范围，如果没有明确指定，编译依赖将在所有的 classpath 中都有效，而且会传递到依赖项目中。\n- provided  在编译和测试的时候有效\n- runtime 在测试和运行时有效\n- test 只在测试的时候有效\n- system 于本机系统相关联，可移植性差\n- import 导入的范围，它只使用在 dependencyManagerment ，表示从其他 pom 中导入的 dependency 的配置。\n\n例如\n\n```xml\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>maven</groupId>\n  <artifactId>B</artifactId>\n  <packaging>pom</packaging>\n  <name>B</name>\n  <version>1.0</version>\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>maven</groupId>\n        <artifactId>A</artifactId>\n        <version>1.0</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n      .....\n```\n\n\n\n\n\n# 依赖传递\n\n一个小案例\n\nshanji 依赖于 nage\n\nnage 依赖于 bge\n\nbge的依赖关系\n\n```xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.10</version>\n      <scope>test</scope>\n    </dependency>\n </dependencies>\n```\n\nnage的依赖关系\n\n```xml\n<dependencies>\n  \n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-bge</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n  </dependencies>\n```\n\nshanji的依赖关系\n\n```Xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  \n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-nage</artifactId>\n      <version>1.0-SNAPSHOT</version>\n      <exclusions>\n        <exclusion>\n          <groupId>com.hongxing</groupId>\n          <artifactId>hongxing-bge</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n```\n\n这时候nage下就有bge的依赖jar包，shanji下有bge和nage的依赖jar包。\n\n但是由于依赖的传递性，shanji 只依赖于nage ，shanji 项目中会出现 bge 的jar包。有时候，这不是我们想要的。\n\n这时可以在 nage 依赖下使用 <exclusions>  把 bge 排除在外。\n\n\n\n\n\n\n\n# 依赖冲突\n\n> eg 对不同版本的同一个构建。\n\n1. 短路优先\n\n   A -> B -> C -> X（JAR)\n\n   A -> D -> X（JAR)    **优先**\n\n\n举例：\n\n在 bge 中添加commons-io 2.5的版本依赖\n\n在 nage 中添加commons-io 2.0的版本依赖\n\n这时候在 shanji 项目中就会出现 2.0 的版本，因为shanji 离 nage 比较近。\n\n\n\n2. 先声明先优先\n\n如果路径长度相同，谁先声明，先解析谁。\n\n举例：\n\n```xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-bge</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-nage</artifactId>\n      <version>1.0-SNAPSHOT</version>\n      <!--<exclusions>-->\n        <!--<exclusion>-->\n          <!--<groupId>com.hongxing</groupId>-->\n          <!--<artifactId>hongxing-bge</artifactId>-->\n        <!--</exclusion>-->\n      <!--</exclusions>-->\n    </dependency>\n  </dependencies>\n```\n\n这时候，项目中 commons-io 的版本就变成了 2.5，因为是先声明 bge ，后声明 nage 。\n\n\n\n\n# 聚合和继承\n\n如果在maven中有多个项目，我们想要 install 将其放到本地仓库中， 必须对其依次执行 install 命令\n\nmaven 给我提供了一个解决办法，就是使用 **聚合** \n\n```xml\n<modules>\n  <module>../hongxing-bge</module>\n  <module>../hongxing-nage</module>\n  <module>../hongxing-shanji</module>\n</modules>\n```\n\n然后执行 install 命令，就会自动把三个module都安装到本地仓库中了。\n\n定义父容器\n\n```xml\n  \t<properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <junit.version>\n            3.8.1\n        </junit.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>${junit.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\n\n\n\n然后在子类中使用\n\n```xml\n  <parent>\n    <groupId>com.hongxing</groupId>\n    <artifactId>hongxing-parent</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n```\n\n> 注意修改  **<packaging>** 为pom\n\n\n\n# 使用maven构建web项目\n\n使用 jetty 发布\n\n```xml\n<plugin>\n  <groupId>org.eclipse.jetty</groupId>\n  <artifactId>jetty-maven-plugin</artifactId>\n  <version>9.4.4.v20170414</version>\n  <executions>\n    <execution>\n      <!--在打包成功后使用jetty:run来运行jetty服务-->\n      <phase>package</phase>  <!--指定在package阶段的时候-->\n      <goals>\n        <goal>run</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```\n\n","slug":"maven","published":0,"date":"2017-05-10T12:37:07.000Z","updated":"2017-05-10T12:37:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nau0006p5ukrud2onaq","content":" <div align=\"center\"><br>  想学习Maven吗？<br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"常用的构建命令\"><a href=\"#常用的构建命令\" class=\"headerlink\" title=\"常用的构建命令\"></a>常用的构建命令</h1><p>mvn </p>\n<ul>\n<li>v 查看版本</li>\n</ul>\n<ul>\n<li>compile 编译</li>\n</ul>\n<ul>\n<li>test 测试</li>\n</ul>\n<ul>\n<li>package  打包<ul>\n<li>会依次执行  clean 、</li>\n</ul>\n</li>\n<li>clean 删除target文件夹</li>\n<li>Install 安装jar包到本地仓库中</li>\n</ul>\n<h1 id=\"自动创建目录骨架\"><a href=\"#自动创建目录骨架\" class=\"headerlink\" title=\"自动创建目录骨架\"></a>自动创建目录骨架</h1><p>创建目录的两种方式：</p>\n<ol>\n<li>mvn archetype:generate 按照提示进行选择</li>\n</ol>\n<ol>\n<li><p>mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名</p>\n<p>​                        -DartifactId=项目名-模块名</p>\n<p>​                        -Dversion=版本号</p>\n<p>​                        -Dpackage=代码所在的包名</p>\n</li>\n</ol>\n<h1 id=\"maven中的坐标和仓库\"><a href=\"#maven中的坐标和仓库\" class=\"headerlink\" title=\"maven中的坐标和仓库\"></a>maven中的坐标和仓库</h1><h2 id=\"坐标\"><a href=\"#坐标\" class=\"headerlink\" title=\"坐标\"></a>坐标</h2><p>在<code>&lt;dependency&gt;</code>中的就是坐标</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.nimon.maven01<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven01-model<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>项目的包名，建议和groupId和artifactId相吻合，这样看起来，就更加清晰，符合逻辑，也更方便搜索。</p>\n</blockquote>\n<h2 id=\"构件\"><a href=\"#构件\" class=\"headerlink\" title=\"构件\"></a>构件</h2><p>在maven世界中，任何一个依赖、插件、项目构建的输出，都可以被称作为<strong>构件</strong>。</p>\n<p><strong>构件</strong>通过坐标作为其唯一的标识，就好像我们的工作单位和家庭地址。</p>\n<blockquote>\n<p>收宝贝的时候，不是收到的那一刻，而是中间等待的过程。</p>\n</blockquote>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>​    本地仓库和远程仓库</p>\n<p>​    <a href=\"http://search.maven.org/\" target=\"_blank\" rel=\"external\">查看仓库</a></p>\n<p>​    <a href=\"https://repo.maven.apache.org/maven2/\" target=\"_blank\" rel=\"external\">全球中央仓库</a></p>\n<p>​    <a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"external\">MVN Repository</a></p>\n<h2 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h2><blockquote>\n<p>一旦配置了镜像，那么所有访问都会到镜像仓库中，原仓库将不能直接访问。</p>\n<p>maven主目录 &gt; conf &gt; settings.xml &gt; 146行</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven.net.cn<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central mirror in china<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.net.cn/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"更改仓库位置\"><a href=\"#更改仓库位置\" class=\"headerlink\" title=\"更改仓库位置\"></a>更改仓库位置</h2><blockquote>\n<p>maven从远程中央仓库下载默认是存放在当前用户目录中</p>\n<p>​    即 ~/.m2/repository</p>\n</blockquote>\n<p>修改 <code>settings.xml</code>文件，复制第 53 行的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;localRepository&gt;/Users/nimon/nj/proj/maven/repo&lt;/localRepository&gt;</div></pre></td></tr></table></figure>\n<p>其中路径表示新仓库的位置。然后复制一份 <code>settings.xml</code>  到 <code>repo</code> 目录下，这样我们以后更新maven版本就不用再修改原始的 <code>settings.xml</code></p>\n<h1 id=\"maven的生命周期和插件\"><a href=\"#maven的生命周期和插件\" class=\"headerlink\" title=\"maven的生命周期和插件\"></a>maven的生命周期和插件</h1><h2 id=\"完整的项目构建过程包括\"><a href=\"#完整的项目构建过程包括\" class=\"headerlink\" title=\"完整的项目构建过程包括\"></a>完整的项目构建过程包括</h2><p>清理、编译、测试、打包、集成测试、验证、部署</p>\n<p>maven将其进行抽象。实际上，maven和插件是密不可分的，maven抽象出一套项目构建的生命周期，而插件是对maven抽象的具体实现。</p>\n<p>比如，我们对项目进行编译，</p>\n<h2 id=\"maven中定义了三套独立的生命周期\"><a href=\"#maven中定义了三套独立的生命周期\" class=\"headerlink\" title=\"maven中定义了三套独立的生命周期\"></a>maven中定义了三套独立的生命周期</h2><ol>\n<li>clean    清理项目</li>\n<li>default  构建项目</li>\n<li>site   生成项目站点</li>\n</ol>\n<p>这三套生命周期是相互独立的，每个生命周期又包含一些阶段，这些阶段是有顺序的，后面的阶段依赖于前面的阶段。在执行的时候，前面的阶段会顺序执行，并不会触发另外两个生命周期中的阶段。</p>\n<h3 id=\"clean-清理项目阶段\"><a href=\"#clean-清理项目阶段\" class=\"headerlink\" title=\"clean 清理项目阶段\"></a>clean 清理项目阶段</h3><p>pre-clean 执行清理前的工作</p>\n<p>clean 清理上一次构建的文件</p>\n<p>post-clean 执行清理后的文件</p>\n<h3 id=\"default-构建项目（最核心）\"><a href=\"#default-构建项目（最核心）\" class=\"headerlink\" title=\"default 构建项目（最核心）\"></a>default 构建项目（最核心）</h3><p>compile test package install</p>\n<h3 id=\"site-生成项目站点\"><a href=\"#site-生成项目站点\" class=\"headerlink\" title=\"site 生成项目站点\"></a>site 生成项目站点</h3><p>pre-site 在生成项目站点前要完成工作</p>\n<p>site  生成项目的站点文档</p>\n<p>post-site  在生成项目站点后要完成的工作</p>\n<p>site-deploy  发布生成的站点到服务器</p>\n<p>可以去 <strong><a href=\"https://maven.apache.org/plugins\" target=\"_blank\" rel=\"external\">官方插件</a></strong> ，查找使用插件</p>\n<h1 id=\"pom-xml常用元素\"><a href=\"#pom-xml常用元素\" class=\"headerlink\" title=\"pom.xml常用元素\"></a>pom.xml常用元素</h1><p>pom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构建信息的管理。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span>   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>组织名，公司网址的反写+项目名<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>项目名-模块名<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--打包类型，默认是jar</span></div><div class=\"line\">\t\twar zip pom\t</div><div class=\"line\">\t--&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--第一个0表示大版本号</span></div><div class=\"line\">\t第二个0 表示分支版本号</div><div class=\"line\">\t第三个0 表示小版本号</div><div class=\"line\">\tSNAPSHOT ：不稳定，尚处于开发中，快照版本</div><div class=\"line\">\tALPHA ：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。</div><div class=\"line\">\tBeta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。</div><div class=\"line\">\tRELEASE ：稳定版</div><div class=\"line\">\tGA ：正式发布</div><div class=\"line\">\t--&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--项目描述名--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>maven05-demo Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--项目地址--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--项目描述--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">developers</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">developers</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">licenses</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">licenses</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">organization</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">organization</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--只存在于测试的 classpath 中--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--设置依赖是否可选--&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--排除依赖传递列表--&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">          \t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">              \t\t</div><div class=\"line\">              \t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!--依赖的管理，不会被运行和引入到实际的依赖中--&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">dependencyManagerment</span>&gt;</span></div><div class=\"line\">      \t<span class=\"comment\">&lt;!--主要定义在父模块中，供子模块集成用的--&gt;</span></div><div class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      \t\t</div><div class=\"line\">      \t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;/<span class=\"name\">dependencyManagerment</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!--插件列表--&gt;</span></div><div class=\"line\">  \t <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">              \t<span class=\"comment\">&lt;!--上面三项是坐标--&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>jar-no-fork<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--子模块对父模块的继承--&gt;</span></div><div class=\"line\">       \t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--聚合多个maven运行项--&gt;</span></div><div class=\"line\">       \t<span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>maven05-demo<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"依赖范围\"><a href=\"#依赖范围\" class=\"headerlink\" title=\"依赖范围\"></a>依赖范围</h1><p>我们平时在开发时，如果要使用某一个框架，就需要把框架的jar包引入项目的 classpath 中，这样我们的项目就可以使用 框架为我们封装好的一些方法。maven给我们提供了三种classpath：</p>\n<ol>\n<li>编译</li>\n<li>测试 test</li>\n<li>运行  </li>\n</ol>\n<p>所以依赖的范围就是控制依赖于三种 classpath 的关系的。</p>\n<p>有六中依赖范围的值可以选择：</p>\n<ul>\n<li>compile 默认的范围，如果没有明确指定，编译依赖将在所有的 classpath 中都有效，而且会传递到依赖项目中。</li>\n<li>provided  在编译和测试的时候有效</li>\n<li>runtime 在测试和运行时有效</li>\n<li>test 只在测试的时候有效</li>\n<li>system 于本机系统相关联，可移植性差</li>\n<li>import 导入的范围，它只使用在 dependencyManagerment ，表示从其他 pom 中导入的 dependency 的配置。</li>\n</ul>\n<p>例如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      .....</div></pre></td></tr></table></figure>\n<h1 id=\"依赖传递\"><a href=\"#依赖传递\" class=\"headerlink\" title=\"依赖传递\"></a>依赖传递</h1><p>一个小案例</p>\n<p>shanji 依赖于 nage</p>\n<p>nage 依赖于 bge</p>\n<p>bge的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>nage的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>shanji的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候nage下就有bge的依赖jar包，shanji下有bge和nage的依赖jar包。</p>\n<p>但是由于依赖的传递性，shanji 只依赖于nage ，shanji 项目中会出现 bge 的jar包。有时候，这不是我们想要的。</p>\n<p>这时可以在 nage 依赖下使用 <exclusions>  把 bge 排除在外。</exclusions></p>\n<h1 id=\"依赖冲突\"><a href=\"#依赖冲突\" class=\"headerlink\" title=\"依赖冲突\"></a>依赖冲突</h1><blockquote>\n<p>eg 对不同版本的同一个构建。</p>\n</blockquote>\n<ol>\n<li><p>短路优先</p>\n<p>A -&gt; B -&gt; C -&gt; X（JAR)</p>\n<p>A -&gt; D -&gt; X（JAR)    <strong>优先</strong></p>\n</li>\n</ol>\n<p>举例：</p>\n<p>在 bge 中添加commons-io 2.5的版本依赖</p>\n<p>在 nage 中添加commons-io 2.0的版本依赖</p>\n<p>这时候在 shanji 项目中就会出现 2.0 的版本，因为shanji 离 nage 比较近。</p>\n<ol>\n<li>先声明先优先</li>\n</ol>\n<p>如果路径长度相同，谁先声明，先解析谁。</p>\n<p>举例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--&lt;exclusions&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;exclusion&gt;--&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--&lt;groupId&gt;com.hongxing&lt;/groupId&gt;--&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--&lt;artifactId&gt;hongxing-bge&lt;/artifactId&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;/exclusion&gt;--&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--&lt;/exclusions&gt;--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候，项目中 commons-io 的版本就变成了 2.5，因为是先声明 bge ，后声明 nage 。</p>\n<h1 id=\"聚合和继承\"><a href=\"#聚合和继承\" class=\"headerlink\" title=\"聚合和继承\"></a>聚合和继承</h1><p>如果在maven中有多个项目，我们想要 install 将其放到本地仓库中， 必须对其依次执行 install 命令</p>\n<p>maven 给我提供了一个解决办法，就是使用 <strong>聚合</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-shanji<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后执行 install 命令，就会自动把三个module都安装到本地仓库中了。</p>\n<p>定义父容器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">junit.version</span>&gt;</span></div><div class=\"line\">         3.8.1</div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">junit.version</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;junit.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后在子类中使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意修改  <strong><packaging></packaging></strong> 为pom</p>\n</blockquote>\n<h1 id=\"使用maven构建web项目\"><a href=\"#使用maven构建web项目\" class=\"headerlink\" title=\"使用maven构建web项目\"></a>使用maven构建web项目</h1><p>使用 jetty 发布</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.eclipse.jetty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetty-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.4.4.v20170414<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--在打包成功后使用jetty:run来运行jetty服务--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span>  <span class=\"comment\">&lt;!--指定在package阶段的时候--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br>  想学习Maven吗？<br><br></div>","more":"<h1 id=\"常用的构建命令\"><a href=\"#常用的构建命令\" class=\"headerlink\" title=\"常用的构建命令\"></a>常用的构建命令</h1><p>mvn </p>\n<ul>\n<li>v 查看版本</li>\n</ul>\n<ul>\n<li>compile 编译</li>\n</ul>\n<ul>\n<li>test 测试</li>\n</ul>\n<ul>\n<li>package  打包<ul>\n<li>会依次执行  clean 、</li>\n</ul>\n</li>\n<li>clean 删除target文件夹</li>\n<li>Install 安装jar包到本地仓库中</li>\n</ul>\n<h1 id=\"自动创建目录骨架\"><a href=\"#自动创建目录骨架\" class=\"headerlink\" title=\"自动创建目录骨架\"></a>自动创建目录骨架</h1><p>创建目录的两种方式：</p>\n<ol>\n<li>mvn archetype:generate 按照提示进行选择</li>\n</ol>\n<ol>\n<li><p>mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名</p>\n<p>​                        -DartifactId=项目名-模块名</p>\n<p>​                        -Dversion=版本号</p>\n<p>​                        -Dpackage=代码所在的包名</p>\n</li>\n</ol>\n<h1 id=\"maven中的坐标和仓库\"><a href=\"#maven中的坐标和仓库\" class=\"headerlink\" title=\"maven中的坐标和仓库\"></a>maven中的坐标和仓库</h1><h2 id=\"坐标\"><a href=\"#坐标\" class=\"headerlink\" title=\"坐标\"></a>坐标</h2><p>在<code>&lt;dependency&gt;</code>中的就是坐标</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.nimon.maven01<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven01-model<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>项目的包名，建议和groupId和artifactId相吻合，这样看起来，就更加清晰，符合逻辑，也更方便搜索。</p>\n</blockquote>\n<h2 id=\"构件\"><a href=\"#构件\" class=\"headerlink\" title=\"构件\"></a>构件</h2><p>在maven世界中，任何一个依赖、插件、项目构建的输出，都可以被称作为<strong>构件</strong>。</p>\n<p><strong>构件</strong>通过坐标作为其唯一的标识，就好像我们的工作单位和家庭地址。</p>\n<blockquote>\n<p>收宝贝的时候，不是收到的那一刻，而是中间等待的过程。</p>\n</blockquote>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>​    本地仓库和远程仓库</p>\n<p>​    <a href=\"http://search.maven.org/\" target=\"_blank\" rel=\"external\">查看仓库</a></p>\n<p>​    <a href=\"https://repo.maven.apache.org/maven2/\" target=\"_blank\" rel=\"external\">全球中央仓库</a></p>\n<p>​    <a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"external\">MVN Repository</a></p>\n<h2 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h2><blockquote>\n<p>一旦配置了镜像，那么所有访问都会到镜像仓库中，原仓库将不能直接访问。</p>\n<p>maven主目录 &gt; conf &gt; settings.xml &gt; 146行</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven.net.cn<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central mirror in china<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.net.cn/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"更改仓库位置\"><a href=\"#更改仓库位置\" class=\"headerlink\" title=\"更改仓库位置\"></a>更改仓库位置</h2><blockquote>\n<p>maven从远程中央仓库下载默认是存放在当前用户目录中</p>\n<p>​    即 ~/.m2/repository</p>\n</blockquote>\n<p>修改 <code>settings.xml</code>文件，复制第 53 行的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;localRepository&gt;/Users/nimon/nj/proj/maven/repo&lt;/localRepository&gt;</div></pre></td></tr></table></figure>\n<p>其中路径表示新仓库的位置。然后复制一份 <code>settings.xml</code>  到 <code>repo</code> 目录下，这样我们以后更新maven版本就不用再修改原始的 <code>settings.xml</code></p>\n<h1 id=\"maven的生命周期和插件\"><a href=\"#maven的生命周期和插件\" class=\"headerlink\" title=\"maven的生命周期和插件\"></a>maven的生命周期和插件</h1><h2 id=\"完整的项目构建过程包括\"><a href=\"#完整的项目构建过程包括\" class=\"headerlink\" title=\"完整的项目构建过程包括\"></a>完整的项目构建过程包括</h2><p>清理、编译、测试、打包、集成测试、验证、部署</p>\n<p>maven将其进行抽象。实际上，maven和插件是密不可分的，maven抽象出一套项目构建的生命周期，而插件是对maven抽象的具体实现。</p>\n<p>比如，我们对项目进行编译，</p>\n<h2 id=\"maven中定义了三套独立的生命周期\"><a href=\"#maven中定义了三套独立的生命周期\" class=\"headerlink\" title=\"maven中定义了三套独立的生命周期\"></a>maven中定义了三套独立的生命周期</h2><ol>\n<li>clean    清理项目</li>\n<li>default  构建项目</li>\n<li>site   生成项目站点</li>\n</ol>\n<p>这三套生命周期是相互独立的，每个生命周期又包含一些阶段，这些阶段是有顺序的，后面的阶段依赖于前面的阶段。在执行的时候，前面的阶段会顺序执行，并不会触发另外两个生命周期中的阶段。</p>\n<h3 id=\"clean-清理项目阶段\"><a href=\"#clean-清理项目阶段\" class=\"headerlink\" title=\"clean 清理项目阶段\"></a>clean 清理项目阶段</h3><p>pre-clean 执行清理前的工作</p>\n<p>clean 清理上一次构建的文件</p>\n<p>post-clean 执行清理后的文件</p>\n<h3 id=\"default-构建项目（最核心）\"><a href=\"#default-构建项目（最核心）\" class=\"headerlink\" title=\"default 构建项目（最核心）\"></a>default 构建项目（最核心）</h3><p>compile test package install</p>\n<h3 id=\"site-生成项目站点\"><a href=\"#site-生成项目站点\" class=\"headerlink\" title=\"site 生成项目站点\"></a>site 生成项目站点</h3><p>pre-site 在生成项目站点前要完成工作</p>\n<p>site  生成项目的站点文档</p>\n<p>post-site  在生成项目站点后要完成的工作</p>\n<p>site-deploy  发布生成的站点到服务器</p>\n<p>可以去 <strong><a href=\"https://maven.apache.org/plugins\" target=\"_blank\" rel=\"external\">官方插件</a></strong> ，查找使用插件</p>\n<h1 id=\"pom-xml常用元素\"><a href=\"#pom-xml常用元素\" class=\"headerlink\" title=\"pom.xml常用元素\"></a>pom.xml常用元素</h1><p>pom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构建信息的管理。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span>   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>组织名，公司网址的反写+项目名<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>项目名-模块名<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--打包类型，默认是jar</span></div><div class=\"line\">\t\twar zip pom\t</div><div class=\"line\">\t--&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--第一个0表示大版本号</span></div><div class=\"line\">\t第二个0 表示分支版本号</div><div class=\"line\">\t第三个0 表示小版本号</div><div class=\"line\">\tSNAPSHOT ：不稳定，尚处于开发中，快照版本</div><div class=\"line\">\tALPHA ：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。</div><div class=\"line\">\tBeta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。</div><div class=\"line\">\tRELEASE ：稳定版</div><div class=\"line\">\tGA ：正式发布</div><div class=\"line\">\t--&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--项目描述名--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>maven05-demo Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--项目地址--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--项目描述--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">developers</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">developers</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">licenses</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">licenses</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">organization</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">organization</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--只存在于测试的 classpath 中--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--设置依赖是否可选--&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--排除依赖传递列表--&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">          \t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">              \t\t</div><div class=\"line\">              \t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!--依赖的管理，不会被运行和引入到实际的依赖中--&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">dependencyManagerment</span>&gt;</span></div><div class=\"line\">      \t<span class=\"comment\">&lt;!--主要定义在父模块中，供子模块集成用的--&gt;</span></div><div class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      \t\t</div><div class=\"line\">      \t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;/<span class=\"name\">dependencyManagerment</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!--插件列表--&gt;</span></div><div class=\"line\">  \t <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">              \t<span class=\"comment\">&lt;!--上面三项是坐标--&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>jar-no-fork<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--子模块对父模块的继承--&gt;</span></div><div class=\"line\">       \t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--聚合多个maven运行项--&gt;</span></div><div class=\"line\">       \t<span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>maven05-demo<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"依赖范围\"><a href=\"#依赖范围\" class=\"headerlink\" title=\"依赖范围\"></a>依赖范围</h1><p>我们平时在开发时，如果要使用某一个框架，就需要把框架的jar包引入项目的 classpath 中，这样我们的项目就可以使用 框架为我们封装好的一些方法。maven给我们提供了三种classpath：</p>\n<ol>\n<li>编译</li>\n<li>测试 test</li>\n<li>运行  </li>\n</ol>\n<p>所以依赖的范围就是控制依赖于三种 classpath 的关系的。</p>\n<p>有六中依赖范围的值可以选择：</p>\n<ul>\n<li>compile 默认的范围，如果没有明确指定，编译依赖将在所有的 classpath 中都有效，而且会传递到依赖项目中。</li>\n<li>provided  在编译和测试的时候有效</li>\n<li>runtime 在测试和运行时有效</li>\n<li>test 只在测试的时候有效</li>\n<li>system 于本机系统相关联，可移植性差</li>\n<li>import 导入的范围，它只使用在 dependencyManagerment ，表示从其他 pom 中导入的 dependency 的配置。</li>\n</ul>\n<p>例如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      .....</div></pre></td></tr></table></figure>\n<h1 id=\"依赖传递\"><a href=\"#依赖传递\" class=\"headerlink\" title=\"依赖传递\"></a>依赖传递</h1><p>一个小案例</p>\n<p>shanji 依赖于 nage</p>\n<p>nage 依赖于 bge</p>\n<p>bge的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>nage的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>shanji的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候nage下就有bge的依赖jar包，shanji下有bge和nage的依赖jar包。</p>\n<p>但是由于依赖的传递性，shanji 只依赖于nage ，shanji 项目中会出现 bge 的jar包。有时候，这不是我们想要的。</p>\n<p>这时可以在 nage 依赖下使用 <exclusions>  把 bge 排除在外。</exclusions></p>\n<h1 id=\"依赖冲突\"><a href=\"#依赖冲突\" class=\"headerlink\" title=\"依赖冲突\"></a>依赖冲突</h1><blockquote>\n<p>eg 对不同版本的同一个构建。</p>\n</blockquote>\n<ol>\n<li><p>短路优先</p>\n<p>A -&gt; B -&gt; C -&gt; X（JAR)</p>\n<p>A -&gt; D -&gt; X（JAR)    <strong>优先</strong></p>\n</li>\n</ol>\n<p>举例：</p>\n<p>在 bge 中添加commons-io 2.5的版本依赖</p>\n<p>在 nage 中添加commons-io 2.0的版本依赖</p>\n<p>这时候在 shanji 项目中就会出现 2.0 的版本，因为shanji 离 nage 比较近。</p>\n<ol>\n<li>先声明先优先</li>\n</ol>\n<p>如果路径长度相同，谁先声明，先解析谁。</p>\n<p>举例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--&lt;exclusions&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;exclusion&gt;--&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--&lt;groupId&gt;com.hongxing&lt;/groupId&gt;--&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--&lt;artifactId&gt;hongxing-bge&lt;/artifactId&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;/exclusion&gt;--&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--&lt;/exclusions&gt;--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候，项目中 commons-io 的版本就变成了 2.5，因为是先声明 bge ，后声明 nage 。</p>\n<h1 id=\"聚合和继承\"><a href=\"#聚合和继承\" class=\"headerlink\" title=\"聚合和继承\"></a>聚合和继承</h1><p>如果在maven中有多个项目，我们想要 install 将其放到本地仓库中， 必须对其依次执行 install 命令</p>\n<p>maven 给我提供了一个解决办法，就是使用 <strong>聚合</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-shanji<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后执行 install 命令，就会自动把三个module都安装到本地仓库中了。</p>\n<p>定义父容器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">junit.version</span>&gt;</span></div><div class=\"line\">         3.8.1</div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">junit.version</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;junit.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后在子类中使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意修改  <strong><packaging></packaging></strong> 为pom</p>\n</blockquote>\n<h1 id=\"使用maven构建web项目\"><a href=\"#使用maven构建web项目\" class=\"headerlink\" title=\"使用maven构建web项目\"></a>使用maven构建web项目</h1><p>使用 jetty 发布</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.eclipse.jetty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetty-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.4.4.v20170414<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--在打包成功后使用jetty:run来运行jetty服务--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span>  <span class=\"comment\">&lt;!--指定在package阶段的时候--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"struts2零配置","_content":"\n详情参考官方介绍](http://struts.apache.org/docs/convention-plugin.html)\n\n# 安装\n\n```Xml\n<dependency>\n    <groupId>org.apache.struts</groupId>\n    <artifactId>struts2-convention-plugin</artifactId>\n    <version>2.3.14</version>\n</dependency>\n```\n\n\n\n## 生成规则\n\n在此说明一下convention插件对Action的查找规则和URL的生成规则\n\nConvention 插件默认扫描继承了action类的子类和文件名以Action结尾的文件\n\n默认找的包是struts, struts2, action or action的包\n\n如：\n\n```Java\ncom.example.actions.MainAction\n\ncom.example.actions.products.Display (implements com.opensymphony.xwork2.Action)\n\ncom.example.struts.company.details.ShowCompanyDetailsAction\n\n```\n\n\n\n \n\n找到对应的类后，Convention 插件会根据包名生成namespaces地址\n\n```Java\ncom.example.actions.MainAction -> /\n\ncom.example.actions.products.Display -> /products\n\ncom.example.struts.company.details.ShowCompanyDetailsAction -> /company/details\n\n```\n\n \n\n然后根据类名，去除Action后缀，然后取其余部分小写，若有大小写混合，以-进行连接生成最终访问地址\n\n```Java\n\ncom.example.actions.MainAction -> /main\n\ncom.example.actions.products.Display -> /products/display\n\ncom.example.struts.company.details.ShowCompanyDetailsAction -> /company/details/show-company-details\n\n```\n\n\n\n\n\n## 配置\n\n配置convention插件的主要方式，是在Struts.xml文件中添加相应的配置。说是零配置，实际上是一次配置便不再需要做其他的配置了。\n\n\n\n\n\n```Xml\n<!-- 不进行扫描的包，用，分割，被包含的包，将不会被扫描成为action -->\n    <constant name=\"struts.convention.exclude.packages\" value=\"com.sean.service\" />\n    <!-- 进行扫描的根包，该包会被扫描成action -->\n    <constant name=\"struts.convention.action.packages\" value=\"com.sean.action\" />\n    <!-- 返回页面地址 -->\n    <constant name=\"struts.convention.result.path\" value=\"/WEB-INF/content/\" />\n    <!-- 用于进行action查找的后缀 -->\n    <constant name=\"struts.convention.action.suffix\" value=\"Action\" />\n    <!--用于生成action名字时的分隔符，比如DemoCustAction会被映射成为demo_cust,同时用于形成返回文件，比如访问DemoAction，return的值为input，插件会去指定不睦下，查找demo_input.jsp文件 -->\n    <constant name=\"struts.convention.action.name.separator\" value=\"_\" />\n    <!-- 指定的包会被进行扫描 -->\n    <constant name=\"struts.convention.package.locators\" value=\"action,actions,struts,struts2\" />\n    <!-- 返回页面类型 -->\n    <constant name=\"struts.convention.relative.result.types\" value=\"dispatcher,velocity,freemarker\" />\n    <!-- 开启动态调用函数，这个方法在struts2里面不推荐，可是在这里却可以实现动态方法的调用，不用自写action了 -->\n    <constant name=\"struts.enable.DynamicMethodInvocation\" value=\"true\" />\n    <!-- 开发模式 -->\n    <constant name=\"struts.devMode\" value=\"true\" />\n```\n\n\n\n## 实例\n\n按照上述的配置配置，创建好项目后，我们进行创建两个Action进行测试，这两个Action除了继承了ActionSupport外，其他什么都不添加。\n\n```Java\npackage com.sean.action;\n\nimport org.apache.struts2.convention.annotation.Result;\nimport org.apache.struts2.convention.annotation.Results;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\n\npublic class DemoAction extends ActionSupport {\n\n    public String execute(){\n        System.out.println(\"nihao!!!\");\n        return \"nijun\";\n    }\n}\n\n```\n\n```java\npackage com.sean.action;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\npublic class MyDemoAction extends ActionSupport{\n\n    public String index(){\n        return \"index\";\n    }\n}\n```\n\n同时创建对应的jsp文件：\n\n在content目录下，对应的 result 页面可以是 `nijun.jsp` 、`demo_nijun.jsp` 或者 `demo.jsp`  \n\n\n\n\n\n# 例子\n\n```Xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<!DOCTYPE struts PUBLIC  \n    \"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"  \n    \"http://struts.apache.org/dtds/struts-2.3.dtd\">  \n<struts>  \n  \n    <!-- 开发模式下的配置 -->  \n    <!-- 开发模式 配置文件改了,不用重新启动-->  \n    <!-- <constant name=\"struts.devMode\" value=\"true\" /> -->  \n    <!-- 设置浏览器是否缓存静态内容，默认值为true（生产环境下使用），开发阶段最好 关闭 -->     \n    <constant name=\"struts.serve.static.browserCache\" value=\"false\" />  \n    <!-- 当 struts的配置文件修改后，系统是否自动重新加载该文件，默认值为false（生 产环境下使用），开发阶段最好打开 -->   \n    <constant name=\"struts.configuration.xml.reload\" value=\"true\"/>  \n          \n    <!-- 请求参数的编码方式-->   \n    <constant name=\"struts.i18n.encoding\" value=\"UTF-8\"/>   \n    <!--  struts2拦截器默认拦截的后缀名     多个可以用逗号隔开  用于做网站伪静态化-->  \n    <constant name=\"struts.action.extension\" value=\"html\"/>  \n    <!-- 简单主题 -->  \n    <constant name=\"struts.ui.theme\" value=\"simple\" />  \n    <!-- 配置文件上传的总大小 -->  \n    <constant name=\"struts.multipart.maxSize\" value=\"2097152000\"></constant>  \n    <!-- 把struts的请求委托给spring管理, 作用:创建Action实例的过程由spring处理,其他的还是由struts2自己处理 -->  \n    <constant name=\"struts.objectFactory\" value=\"spring\" />   \n     <!-- 是否开启动态方法调用-->   \n    <constant name=\"struts.enable.DynamicMethodInvocation\" value=\"false\"/>   \n      \n  \n    <!-- Struts2约定限制结果页面必须放到/WEB-INF/content/目录中，可以通过下面常量来修改这个限制。-->  \n    <constant name=\"struts.convention.result.path\" value=\"/WEB-INF/jsp\" />  \n    <!-- 约定Action包位置：可以使用的Action的祖包，默认为没有， 设置为 cn.javass.ssh 就可以读取这个包及其子包的所有头上注册了【 @Action 】 的类。-->  \n    <!-- <constant name=\"struts.convention.action.packages\" value=\"cn.hl.s2sh.user.controller\" /> -->  \n    <!-- 默认配置包路径包含action,actions,struts,struts2的所有包都会被struts作为含有Action类的路径来搜索。通过设置struts.convention.package.locators属性来修改这个配置。 -->  \n    <constant name=\"struts.convention.package.locators\"  value=\"action,actions,struts,struts2,controller\" />   \n    <!-- 约定Action类名：要求Action的命名必须以Action为后缀，可以使用下面常量来修改后缀限制 -->  \n    <constant name=\"struts.convention.action.suffix\"  value=\"Action\" />   \n      \n      \n      \n      \n      \n    <!-- 配置全局的包  继承自json-default，json-default继承自struts-default包 --->  \n    <package name=\"mypackage\" extends=\"json-default\">  \n        <!-- <interceptors>  \n            注册自定义登录拦截器  \n            <interceptor name=\"login\" class=\"com.hl.zoneSystem_v01.struts.common.MyInterceptor\" />  \n            自定义拦截器栈  \n            <interceptor-stack name=\"myInterceptor\">  \n                <interceptor-ref name=\"login\" />  \n                <interceptor-ref name=\"defaultStack\">  \n                    <param name=\"modelDriven.refreshModelBeforeResult\">true</param>  \n                </interceptor-ref>  \n            </interceptor-stack>  \n        </interceptors> -->  \n        <!-- 定义默认栈 -->  \n        <!-- <default-interceptor-ref name=\"myInterceptor\" /> -->  \n        <!-- 定义默认action -->  \n        <!-- <default-action-ref name=\"notFound\" /> -->  \n          \n        <!-- 全局结果集 -->  \n        <global-results>  \n            <!-- ajax请求的结果集  表单验证用,值为true/false-->  \n            <result type=\"json\" name=\"ajax\">  \n                <param name=\"root\">message</param>  \n            </result>  \n            <!-- ajax请求的结果集  消息推送用,值为数字-->  \n            <result type=\"json\" name=\"ajax2\">  \n                <param name=\"root\">message2</param>  \n            </result>  \n            <!-- ajax请求的结果集 页面数据传送 返回map-->  \n            <result type=\"json\" name=\"jsonResult\">  \n                <param name=\"root\">jsonMap</param>  \n            </result>  \n            <!-- 下载 -->  \n            <result name=\"downloadFiles\" type=\"stream\">  \n                <!-- 对应web中下载配置：下载类型无限制  文件编码UTF-8-->  \n                <param name=\"contentType\">application/octet-stream;charset=UTF-8</param>  \n                <param name=\"inputName\">inputStreamFile</param>  \n                <!-- 对应web中下载配置：response.setHeader(\"Content-Disposition\", \"attachment;filename=\"+newUser.getFilename()); -->  \n                <param name=\"contentDisposition\">attachment;filename=${fileName}</param>  \n                <!-- 对应web中下载配置：byte[] b = new byte[1024]; -->  \n                <param name=\"bufferSize\">1024</param>  \n            </result>  \n            <!-- 项目根页面 -->  \n            <result name=\"index\" type=\"redirect\">/index.jsp</result>  \n            <!-- login 登录 -->  \n            <result name=\"loginUI\">/login.jsp</result>  \n            <!-- 前台全局消息显示页面 -->  \n            <result name=\"clientMessage\">/message.jsp</result>  \n            <!-- action错误，处理结果页面   -->  \n            <result name=\"error\">/error.jsp</result>  \n        </global-results>  \n        <!-- 全局异常 -->  \n        <!-- <global-exception-mappings>  \n            <exception-mapping result=\"error\" exception=\"java.lang.Exception\"></exception-mapping>  \n        </global-exception-mappings> -->  \n          \n    </package>     \n</struts>  \n```\n\n\n\n1，Action annotation。 \n最简单的例子 \n\n\n```Java\n\npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Action(\"/different/url\")  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n}  \n```\n那么这个HelloWorld的访问url就变为了/different/url。 \n\n一个方法可以被映射到多个url上面，如下所示，方位注解中的两个url都可以访问这个方法 \n```java\n \npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Actions({  \n    @Action(\"/different/url\"),  \n    @Action(\"/another/url\")  \n  })  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n}  \n```\n\n如果一个action中有多个方法，那么可以分别为各个方法指定访问url\n\n```java\npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Action(\"/different/url\")  \n  public String execute() {  \n    return SUCCESS;  \n  \n  }  \n  \n  @Action(\"url\")  \n  public String doSomething() {  \n    return SUCCESS;  \n  }  \n}  \n```\n请注意上面这个类的第二个方法doSomething()，它的url是“url”，这是个相对路径是，也就是说访问这个方法时的正确路径是namespace+url。而execute()通过访问/different/url就可以访问。 \n\n\n\n\n\n\n\n# 拦截器\n\n\n使用@Action的interceptorRefs 属性可以指定action或者方法的interceptor，如下面的例子\n ```Java\npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Action(interceptorRefs={@InterceptorRef(\"validation\"), @InterceptorRef(\"defaultStack\")})  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n  \n  @Action(\"url\")  \n  public String doSomething() {  \n    return SUCCESS;  \n  }  \n}  \n ```\n上面的action中execute()方法应用了 `validation `拦截器和 `defaultStack` 拦截器栈。 \n\n还可以使用params属性指定要传给拦截器的参数。形式为{键，值，键，值…………}，键值总是会成对出现，如下面的例子\n```Java\npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Action(interceptorRefs=@InterceptorRef(value=\"validation\",params={\"programmatic\", \"false\", \"declarative\", \"true}))  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n  \n  @Action(\"url\")  \n  public String doSomething() {  \n    return SUCCESS;  \n  }  \n}  \n```\n如果Action没有显式的指定拦截器的话，默认的拦截器会应用在这个Action上。 \n\n \n\n\n\n拦截器可以在类和方法的层面上应用。在方法层面指定拦截器使用@Action注解，在类层面指定拦截器使用@InterceptorRefs注解。类层面引用的拦截器会应用在所有的方法上，如下面的例子\n\n```java\npackage com.example.actions;  \n\nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n\n@InterceptorRefs({  \n    @InterceptorRef(\"interceptor-1\"),  \n    @InterceptorRef(\"defaultStack\")  \n})  \npublic class HelloWorld extends ActionSupport {  \n  @Action(value=\"action1\", interceptorRefs=@InterceptorRef(\"validation\"))  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n\n  @Action(value=\"action2\")  \n  public String doSomething() {  \n    return SUCCESS;  \n  }  \n}  \n```\n如上代码所示，execute()方法应用了interceptor-1,validation和defaultStack中的所有拦截器；而doSomething()方法则没有validation拦截器。 \n\n\n\n","source":"_drafts/struts2零配置.md","raw":"---\ntitle: struts2零配置\ntags: Struts2\n\n---\n\n详情参考官方介绍](http://struts.apache.org/docs/convention-plugin.html)\n\n# 安装\n\n```Xml\n<dependency>\n    <groupId>org.apache.struts</groupId>\n    <artifactId>struts2-convention-plugin</artifactId>\n    <version>2.3.14</version>\n</dependency>\n```\n\n\n\n## 生成规则\n\n在此说明一下convention插件对Action的查找规则和URL的生成规则\n\nConvention 插件默认扫描继承了action类的子类和文件名以Action结尾的文件\n\n默认找的包是struts, struts2, action or action的包\n\n如：\n\n```Java\ncom.example.actions.MainAction\n\ncom.example.actions.products.Display (implements com.opensymphony.xwork2.Action)\n\ncom.example.struts.company.details.ShowCompanyDetailsAction\n\n```\n\n\n\n \n\n找到对应的类后，Convention 插件会根据包名生成namespaces地址\n\n```Java\ncom.example.actions.MainAction -> /\n\ncom.example.actions.products.Display -> /products\n\ncom.example.struts.company.details.ShowCompanyDetailsAction -> /company/details\n\n```\n\n \n\n然后根据类名，去除Action后缀，然后取其余部分小写，若有大小写混合，以-进行连接生成最终访问地址\n\n```Java\n\ncom.example.actions.MainAction -> /main\n\ncom.example.actions.products.Display -> /products/display\n\ncom.example.struts.company.details.ShowCompanyDetailsAction -> /company/details/show-company-details\n\n```\n\n\n\n\n\n## 配置\n\n配置convention插件的主要方式，是在Struts.xml文件中添加相应的配置。说是零配置，实际上是一次配置便不再需要做其他的配置了。\n\n\n\n\n\n```Xml\n<!-- 不进行扫描的包，用，分割，被包含的包，将不会被扫描成为action -->\n    <constant name=\"struts.convention.exclude.packages\" value=\"com.sean.service\" />\n    <!-- 进行扫描的根包，该包会被扫描成action -->\n    <constant name=\"struts.convention.action.packages\" value=\"com.sean.action\" />\n    <!-- 返回页面地址 -->\n    <constant name=\"struts.convention.result.path\" value=\"/WEB-INF/content/\" />\n    <!-- 用于进行action查找的后缀 -->\n    <constant name=\"struts.convention.action.suffix\" value=\"Action\" />\n    <!--用于生成action名字时的分隔符，比如DemoCustAction会被映射成为demo_cust,同时用于形成返回文件，比如访问DemoAction，return的值为input，插件会去指定不睦下，查找demo_input.jsp文件 -->\n    <constant name=\"struts.convention.action.name.separator\" value=\"_\" />\n    <!-- 指定的包会被进行扫描 -->\n    <constant name=\"struts.convention.package.locators\" value=\"action,actions,struts,struts2\" />\n    <!-- 返回页面类型 -->\n    <constant name=\"struts.convention.relative.result.types\" value=\"dispatcher,velocity,freemarker\" />\n    <!-- 开启动态调用函数，这个方法在struts2里面不推荐，可是在这里却可以实现动态方法的调用，不用自写action了 -->\n    <constant name=\"struts.enable.DynamicMethodInvocation\" value=\"true\" />\n    <!-- 开发模式 -->\n    <constant name=\"struts.devMode\" value=\"true\" />\n```\n\n\n\n## 实例\n\n按照上述的配置配置，创建好项目后，我们进行创建两个Action进行测试，这两个Action除了继承了ActionSupport外，其他什么都不添加。\n\n```Java\npackage com.sean.action;\n\nimport org.apache.struts2.convention.annotation.Result;\nimport org.apache.struts2.convention.annotation.Results;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\n\npublic class DemoAction extends ActionSupport {\n\n    public String execute(){\n        System.out.println(\"nihao!!!\");\n        return \"nijun\";\n    }\n}\n\n```\n\n```java\npackage com.sean.action;\n\nimport com.opensymphony.xwork2.ActionSupport;\n\npublic class MyDemoAction extends ActionSupport{\n\n    public String index(){\n        return \"index\";\n    }\n}\n```\n\n同时创建对应的jsp文件：\n\n在content目录下，对应的 result 页面可以是 `nijun.jsp` 、`demo_nijun.jsp` 或者 `demo.jsp`  \n\n\n\n\n\n# 例子\n\n```Xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<!DOCTYPE struts PUBLIC  \n    \"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"  \n    \"http://struts.apache.org/dtds/struts-2.3.dtd\">  \n<struts>  \n  \n    <!-- 开发模式下的配置 -->  \n    <!-- 开发模式 配置文件改了,不用重新启动-->  \n    <!-- <constant name=\"struts.devMode\" value=\"true\" /> -->  \n    <!-- 设置浏览器是否缓存静态内容，默认值为true（生产环境下使用），开发阶段最好 关闭 -->     \n    <constant name=\"struts.serve.static.browserCache\" value=\"false\" />  \n    <!-- 当 struts的配置文件修改后，系统是否自动重新加载该文件，默认值为false（生 产环境下使用），开发阶段最好打开 -->   \n    <constant name=\"struts.configuration.xml.reload\" value=\"true\"/>  \n          \n    <!-- 请求参数的编码方式-->   \n    <constant name=\"struts.i18n.encoding\" value=\"UTF-8\"/>   \n    <!--  struts2拦截器默认拦截的后缀名     多个可以用逗号隔开  用于做网站伪静态化-->  \n    <constant name=\"struts.action.extension\" value=\"html\"/>  \n    <!-- 简单主题 -->  \n    <constant name=\"struts.ui.theme\" value=\"simple\" />  \n    <!-- 配置文件上传的总大小 -->  \n    <constant name=\"struts.multipart.maxSize\" value=\"2097152000\"></constant>  \n    <!-- 把struts的请求委托给spring管理, 作用:创建Action实例的过程由spring处理,其他的还是由struts2自己处理 -->  \n    <constant name=\"struts.objectFactory\" value=\"spring\" />   \n     <!-- 是否开启动态方法调用-->   \n    <constant name=\"struts.enable.DynamicMethodInvocation\" value=\"false\"/>   \n      \n  \n    <!-- Struts2约定限制结果页面必须放到/WEB-INF/content/目录中，可以通过下面常量来修改这个限制。-->  \n    <constant name=\"struts.convention.result.path\" value=\"/WEB-INF/jsp\" />  \n    <!-- 约定Action包位置：可以使用的Action的祖包，默认为没有， 设置为 cn.javass.ssh 就可以读取这个包及其子包的所有头上注册了【 @Action 】 的类。-->  \n    <!-- <constant name=\"struts.convention.action.packages\" value=\"cn.hl.s2sh.user.controller\" /> -->  \n    <!-- 默认配置包路径包含action,actions,struts,struts2的所有包都会被struts作为含有Action类的路径来搜索。通过设置struts.convention.package.locators属性来修改这个配置。 -->  \n    <constant name=\"struts.convention.package.locators\"  value=\"action,actions,struts,struts2,controller\" />   \n    <!-- 约定Action类名：要求Action的命名必须以Action为后缀，可以使用下面常量来修改后缀限制 -->  \n    <constant name=\"struts.convention.action.suffix\"  value=\"Action\" />   \n      \n      \n      \n      \n      \n    <!-- 配置全局的包  继承自json-default，json-default继承自struts-default包 --->  \n    <package name=\"mypackage\" extends=\"json-default\">  \n        <!-- <interceptors>  \n            注册自定义登录拦截器  \n            <interceptor name=\"login\" class=\"com.hl.zoneSystem_v01.struts.common.MyInterceptor\" />  \n            自定义拦截器栈  \n            <interceptor-stack name=\"myInterceptor\">  \n                <interceptor-ref name=\"login\" />  \n                <interceptor-ref name=\"defaultStack\">  \n                    <param name=\"modelDriven.refreshModelBeforeResult\">true</param>  \n                </interceptor-ref>  \n            </interceptor-stack>  \n        </interceptors> -->  \n        <!-- 定义默认栈 -->  \n        <!-- <default-interceptor-ref name=\"myInterceptor\" /> -->  \n        <!-- 定义默认action -->  \n        <!-- <default-action-ref name=\"notFound\" /> -->  \n          \n        <!-- 全局结果集 -->  \n        <global-results>  \n            <!-- ajax请求的结果集  表单验证用,值为true/false-->  \n            <result type=\"json\" name=\"ajax\">  \n                <param name=\"root\">message</param>  \n            </result>  \n            <!-- ajax请求的结果集  消息推送用,值为数字-->  \n            <result type=\"json\" name=\"ajax2\">  \n                <param name=\"root\">message2</param>  \n            </result>  \n            <!-- ajax请求的结果集 页面数据传送 返回map-->  \n            <result type=\"json\" name=\"jsonResult\">  \n                <param name=\"root\">jsonMap</param>  \n            </result>  \n            <!-- 下载 -->  \n            <result name=\"downloadFiles\" type=\"stream\">  \n                <!-- 对应web中下载配置：下载类型无限制  文件编码UTF-8-->  \n                <param name=\"contentType\">application/octet-stream;charset=UTF-8</param>  \n                <param name=\"inputName\">inputStreamFile</param>  \n                <!-- 对应web中下载配置：response.setHeader(\"Content-Disposition\", \"attachment;filename=\"+newUser.getFilename()); -->  \n                <param name=\"contentDisposition\">attachment;filename=${fileName}</param>  \n                <!-- 对应web中下载配置：byte[] b = new byte[1024]; -->  \n                <param name=\"bufferSize\">1024</param>  \n            </result>  \n            <!-- 项目根页面 -->  \n            <result name=\"index\" type=\"redirect\">/index.jsp</result>  \n            <!-- login 登录 -->  \n            <result name=\"loginUI\">/login.jsp</result>  \n            <!-- 前台全局消息显示页面 -->  \n            <result name=\"clientMessage\">/message.jsp</result>  \n            <!-- action错误，处理结果页面   -->  \n            <result name=\"error\">/error.jsp</result>  \n        </global-results>  \n        <!-- 全局异常 -->  \n        <!-- <global-exception-mappings>  \n            <exception-mapping result=\"error\" exception=\"java.lang.Exception\"></exception-mapping>  \n        </global-exception-mappings> -->  \n          \n    </package>     \n</struts>  \n```\n\n\n\n1，Action annotation。 \n最简单的例子 \n\n\n```Java\n\npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Action(\"/different/url\")  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n}  \n```\n那么这个HelloWorld的访问url就变为了/different/url。 \n\n一个方法可以被映射到多个url上面，如下所示，方位注解中的两个url都可以访问这个方法 \n```java\n \npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Actions({  \n    @Action(\"/different/url\"),  \n    @Action(\"/another/url\")  \n  })  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n}  \n```\n\n如果一个action中有多个方法，那么可以分别为各个方法指定访问url\n\n```java\npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Action(\"/different/url\")  \n  public String execute() {  \n    return SUCCESS;  \n  \n  }  \n  \n  @Action(\"url\")  \n  public String doSomething() {  \n    return SUCCESS;  \n  }  \n}  \n```\n请注意上面这个类的第二个方法doSomething()，它的url是“url”，这是个相对路径是，也就是说访问这个方法时的正确路径是namespace+url。而execute()通过访问/different/url就可以访问。 \n\n\n\n\n\n\n\n# 拦截器\n\n\n使用@Action的interceptorRefs 属性可以指定action或者方法的interceptor，如下面的例子\n ```Java\npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Action(interceptorRefs={@InterceptorRef(\"validation\"), @InterceptorRef(\"defaultStack\")})  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n  \n  @Action(\"url\")  \n  public String doSomething() {  \n    return SUCCESS;  \n  }  \n}  \n ```\n上面的action中execute()方法应用了 `validation `拦截器和 `defaultStack` 拦截器栈。 \n\n还可以使用params属性指定要传给拦截器的参数。形式为{键，值，键，值…………}，键值总是会成对出现，如下面的例子\n```Java\npackage com.example.actions;  \n  \nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n  \npublic class HelloWorld extends ActionSupport {  \n  @Action(interceptorRefs=@InterceptorRef(value=\"validation\",params={\"programmatic\", \"false\", \"declarative\", \"true}))  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n  \n  @Action(\"url\")  \n  public String doSomething() {  \n    return SUCCESS;  \n  }  \n}  \n```\n如果Action没有显式的指定拦截器的话，默认的拦截器会应用在这个Action上。 \n\n \n\n\n\n拦截器可以在类和方法的层面上应用。在方法层面指定拦截器使用@Action注解，在类层面指定拦截器使用@InterceptorRefs注解。类层面引用的拦截器会应用在所有的方法上，如下面的例子\n\n```java\npackage com.example.actions;  \n\nimport com.opensymphony.xwork2.ActionSupport;   \nimport org.apache.struts2.convention.annotation.Action;  \nimport org.apache.struts2.convention.annotation.Actions;  \n\n@InterceptorRefs({  \n    @InterceptorRef(\"interceptor-1\"),  \n    @InterceptorRef(\"defaultStack\")  \n})  \npublic class HelloWorld extends ActionSupport {  \n  @Action(value=\"action1\", interceptorRefs=@InterceptorRef(\"validation\"))  \n  public String execute() {  \n    return SUCCESS;  \n  }  \n\n  @Action(value=\"action2\")  \n  public String doSomething() {  \n    return SUCCESS;  \n  }  \n}  \n```\n如上代码所示，execute()方法应用了interceptor-1,validation和defaultStack中的所有拦截器；而doSomething()方法则没有validation拦截器。 \n\n\n\n","slug":"struts2零配置","published":0,"date":"2017-05-11T10:48:06.000Z","updated":"2017-05-13T15:27:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nay0008p5ukkn6eacmq","content":"<p>详情参考官方介绍](<a href=\"http://struts.apache.org/docs/convention-plugin.html\" target=\"_blank\" rel=\"external\">http://struts.apache.org/docs/convention-plugin.html</a>)</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-convention-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"生成规则\"><a href=\"#生成规则\" class=\"headerlink\" title=\"生成规则\"></a>生成规则</h2><p>在此说明一下convention插件对Action的查找规则和URL的生成规则</p>\n<p>Convention 插件默认扫描继承了action类的子类和文件名以Action结尾的文件</p>\n<p>默认找的包是struts, struts2, action or action的包</p>\n<p>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">com.example.actions.MainAction</div><div class=\"line\"></div><div class=\"line\">com.example.actions.products.Display (implements com.opensymphony.xwork2.Action)</div><div class=\"line\"></div><div class=\"line\">com.example.struts.company.details.ShowCompanyDetailsAction</div></pre></td></tr></table></figure>\n<p>找到对应的类后，Convention 插件会根据包名生成namespaces地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">com.example.actions.MainAction -&gt; /</div><div class=\"line\"></div><div class=\"line\">com.example.actions.products.Display -&gt; /products</div><div class=\"line\"></div><div class=\"line\">com.example.struts.company.details.ShowCompanyDetailsAction -&gt; /company/details</div></pre></td></tr></table></figure>\n<p>然后根据类名，去除Action后缀，然后取其余部分小写，若有大小写混合，以-进行连接生成最终访问地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">com.example.actions.MainAction -&gt; /main</div><div class=\"line\"></div><div class=\"line\">com.example.actions.products.Display -&gt; /products/display</div><div class=\"line\"></div><div class=\"line\">com.example.struts.company.details.ShowCompanyDetailsAction -&gt; /company/details/show-company-details</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置convention插件的主要方式，是在Struts.xml文件中添加相应的配置。说是零配置，实际上是一次配置便不再需要做其他的配置了。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 不进行扫描的包，用，分割，被包含的包，将不会被扫描成为action --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.exclude.packages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.sean.service\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 进行扫描的根包，该包会被扫描成action --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.action.packages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.sean.action\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 返回页面地址 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.result.path\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/content/\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 用于进行action查找的后缀 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.action.suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Action\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--用于生成action名字时的分隔符，比如DemoCustAction会被映射成为demo_cust,同时用于形成返回文件，比如访问DemoAction，return的值为input，插件会去指定不睦下，查找demo_input.jsp文件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.action.name.separator\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"_\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 指定的包会被进行扫描 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.package.locators\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"action,actions,struts,struts2\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 返回页面类型 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.relative.result.types\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"dispatcher,velocity,freemarker\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 开启动态调用函数，这个方法在struts2里面不推荐，可是在这里却可以实现动态方法的调用，不用自写action了 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 开发模式 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>按照上述的配置配置，创建好项目后，我们进行创建两个Action进行测试，这两个Action除了继承了ActionSupport外，其他什么都不添加。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.sean.action;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Result;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Results;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"nihao!!!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"nijun\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.sean.action;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDemoAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同时创建对应的jsp文件：</p>\n<p>在content目录下，对应的 result 页面可以是 <code>nijun.jsp</code> 、<code>demo_nijun.jsp</code> 或者 <code>demo.jsp</code>  </p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;  </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC  </span></div><div class=\"line\">    \"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"  </div><div class=\"line\">    \"http://struts.apache.org/dtds/struts-2.3.dtd\"&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span>  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 开发模式下的配置 --&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 开发模式 配置文件改了,不用重新启动--&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- &lt;constant name=\"struts.devMode\" value=\"true\" /&gt; --&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 设置浏览器是否缓存静态内容，默认值为true（生产环境下使用），开发阶段最好 关闭 --&gt;</span>     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.serve.static.browserCache\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 当 struts的配置文件修改后，系统是否自动重新加载该文件，默认值为false（生 产环境下使用），开发阶段最好打开 --&gt;</span>   </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.configuration.xml.reload\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 请求参数的编码方式--&gt;</span>   </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span>   </div><div class=\"line\">    <span class=\"comment\">&lt;!--  struts2拦截器默认拦截的后缀名     多个可以用逗号隔开  用于做网站伪静态化--&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"html\"</span>/&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 简单主题 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.ui.theme\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"simple\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置文件上传的总大小 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.multipart.maxSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2097152000\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constant</span>&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 把struts的请求委托给spring管理, 作用:创建Action实例的过程由spring处理,其他的还是由struts2自己处理 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.objectFactory\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"spring\"</span> /&gt;</span>   </div><div class=\"line\">     <span class=\"comment\">&lt;!-- 是否开启动态方法调用--&gt;</span>   </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span>   </div><div class=\"line\">      </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Struts2约定限制结果页面必须放到/WEB-INF/content/目录中，可以通过下面常量来修改这个限制。--&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.result.path\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 约定Action包位置：可以使用的Action的祖包，默认为没有， 设置为 cn.javass.ssh 就可以读取这个包及其子包的所有头上注册了【 @Action 】 的类。--&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- &lt;constant name=\"struts.convention.action.packages\" value=\"cn.hl.s2sh.user.controller\" /&gt; --&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 默认配置包路径包含action,actions,struts,struts2的所有包都会被struts作为含有Action类的路径来搜索。通过设置struts.convention.package.locators属性来修改这个配置。 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.package.locators\"</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"action,actions,struts,struts2,controller\"</span> /&gt;</span>   </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 约定Action类名：要求Action的命名必须以Action为后缀，可以使用下面常量来修改后缀限制 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.action.suffix\"</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"Action\"</span> /&gt;</span>   </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置全局的包  继承自json-default，json-default继承自struts-default包 ---&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mypackage\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;interceptors&gt;  </span></div><div class=\"line\">            注册自定义登录拦截器  </div><div class=\"line\">            &lt;interceptor name=\"login\" class=\"com.hl.zoneSystem_v01.struts.common.MyInterceptor\" /&gt;  </div><div class=\"line\">            自定义拦截器栈  </div><div class=\"line\">            &lt;interceptor-stack name=\"myInterceptor\"&gt;  </div><div class=\"line\">                &lt;interceptor-ref name=\"login\" /&gt;  </div><div class=\"line\">                &lt;interceptor-ref name=\"defaultStack\"&gt;  </div><div class=\"line\">                    &lt;param name=\"modelDriven.refreshModelBeforeResult\"&gt;true&lt;/param&gt;  </div><div class=\"line\">                &lt;/interceptor-ref&gt;  </div><div class=\"line\">            &lt;/interceptor-stack&gt;  </div><div class=\"line\">        &lt;/interceptors&gt; --&gt;  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 定义默认栈 --&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;default-interceptor-ref name=\"myInterceptor\" /&gt; --&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 定义默认action --&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;default-action-ref name=\"notFound\" /&gt; --&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 全局结果集 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">global-results</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- ajax请求的结果集  表单验证用,值为true/false--&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ajax\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>message<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- ajax请求的结果集  消息推送用,值为数字--&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ajax2\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>message2<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- ajax请求的结果集 页面数据传送 返回map--&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jsonResult\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>jsonMap<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 下载 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"downloadFiles\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"stream\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"comment\">&lt;!-- 对应web中下载配置：下载类型无限制  文件编码UTF-8--&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"contentType\"</span>&gt;</span>application/octet-stream;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"inputName\"</span>&gt;</span>inputStreamFile<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">                <span class=\"comment\">&lt;!-- 对应web中下载配置：response.setHeader(\"Content-Disposition\", \"attachment;filename=\"+newUser.getFilename()); --&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"contentDisposition\"</span>&gt;</span>attachment;filename=$&#123;fileName&#125;<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">                <span class=\"comment\">&lt;!-- 对应web中下载配置：byte[] b = new byte[1024]; --&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bufferSize\"</span>&gt;</span>1024<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 项目根页面 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- login 登录 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"loginUI\"</span>&gt;</span>/login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 前台全局消息显示页面 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clientMessage\"</span>&gt;</span>/message.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- action错误，处理结果页面   --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"error\"</span>&gt;</span>/error.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">global-results</span>&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 全局异常 --&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;global-exception-mappings&gt;  </span></div><div class=\"line\">            &lt;exception-mapping result=\"error\" exception=\"java.lang.Exception\"&gt;&lt;/exception-mapping&gt;  </div><div class=\"line\">        &lt;/global-exception-mappings&gt; --&gt;  </div><div class=\"line\">          </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span>     </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>1，Action annotation。<br>最简单的例子 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(<span class=\"string\">\"/different/url\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么这个HelloWorld的访问url就变为了/different/url。 </p>\n<p>一个方法可以被映射到多个url上面，如下所示，方位注解中的两个url都可以访问这个方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Actions</span>(&#123;  </div><div class=\"line\">    <span class=\"meta\">@Action</span>(<span class=\"string\">\"/different/url\"</span>),  </div><div class=\"line\">    <span class=\"meta\">@Action</span>(<span class=\"string\">\"/another/url\"</span>)  </div><div class=\"line\">  &#125;)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果一个action中有多个方法，那么可以分别为各个方法指定访问url</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(<span class=\"string\">\"/different/url\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(<span class=\"string\">\"url\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>请注意上面这个类的第二个方法doSomething()，它的url是“url”，这是个相对路径是，也就是说访问这个方法时的正确路径是namespace+url。而execute()通过访问/different/url就可以访问。 </p>\n<h1 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h1><p>使用@Action的interceptorRefs 属性可以指定action或者方法的interceptor，如下面的例子<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(interceptorRefs=&#123;<span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"validation\"</span>), <span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"defaultStack\"</span>)&#125;)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(<span class=\"string\">\"url\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的action中execute()方法应用了 <code>validation</code>拦截器和 <code>defaultStack</code> 拦截器栈。 </p>\n<p>还可以使用params属性指定要传给拦截器的参数。形式为{键，值，键，值…………}，键值总是会成对出现，如下面的例子<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\">import com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\">import org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\">import org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\">  </div><div class=\"line\">public class HelloWorld extends ActionSupport &#123;  </div><div class=\"line\">  @Action(interceptorRefs=@InterceptorRef(value=\"validation\",params=&#123;\"programmatic\", \"false\", \"declarative\", \"true&#125;))  </div><div class=\"line\">  public String execute() &#123;  </div><div class=\"line\">    return SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  @Action(\"url\")  </div><div class=\"line\">  public String doSomething() &#123;  </div><div class=\"line\">    return SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果Action没有显式的指定拦截器的话，默认的拦截器会应用在这个Action上。 </p>\n<p>拦截器可以在类和方法的层面上应用。在方法层面指定拦截器使用@Action注解，在类层面指定拦截器使用@InterceptorRefs注解。类层面引用的拦截器会应用在所有的方法上，如下面的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@InterceptorRefs</span>(&#123;  </div><div class=\"line\">    <span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"interceptor-1\"</span>),  </div><div class=\"line\">    <span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"defaultStack\"</span>)  </div><div class=\"line\">&#125;)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(value=<span class=\"string\">\"action1\"</span>, interceptorRefs=<span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"validation\"</span>))  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Action</span>(value=<span class=\"string\">\"action2\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上代码所示，execute()方法应用了interceptor-1,validation和defaultStack中的所有拦截器；而doSomething()方法则没有validation拦截器。 </p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<p>详情参考官方介绍](<a href=\"http://struts.apache.org/docs/convention-plugin.html\" target=\"_blank\" rel=\"external\">http://struts.apache.org/docs/convention-plugin.html</a>)</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.struts<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>struts2-convention-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"生成规则\"><a href=\"#生成规则\" class=\"headerlink\" title=\"生成规则\"></a>生成规则</h2><p>在此说明一下convention插件对Action的查找规则和URL的生成规则</p>\n<p>Convention 插件默认扫描继承了action类的子类和文件名以Action结尾的文件</p>\n<p>默认找的包是struts, struts2, action or action的包</p>\n<p>如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">com.example.actions.MainAction</div><div class=\"line\"></div><div class=\"line\">com.example.actions.products.Display (implements com.opensymphony.xwork2.Action)</div><div class=\"line\"></div><div class=\"line\">com.example.struts.company.details.ShowCompanyDetailsAction</div></pre></td></tr></table></figure>\n<p>找到对应的类后，Convention 插件会根据包名生成namespaces地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">com.example.actions.MainAction -&gt; /</div><div class=\"line\"></div><div class=\"line\">com.example.actions.products.Display -&gt; /products</div><div class=\"line\"></div><div class=\"line\">com.example.struts.company.details.ShowCompanyDetailsAction -&gt; /company/details</div></pre></td></tr></table></figure>\n<p>然后根据类名，去除Action后缀，然后取其余部分小写，若有大小写混合，以-进行连接生成最终访问地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">com.example.actions.MainAction -&gt; /main</div><div class=\"line\"></div><div class=\"line\">com.example.actions.products.Display -&gt; /products/display</div><div class=\"line\"></div><div class=\"line\">com.example.struts.company.details.ShowCompanyDetailsAction -&gt; /company/details/show-company-details</div></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置convention插件的主要方式，是在Struts.xml文件中添加相应的配置。说是零配置，实际上是一次配置便不再需要做其他的配置了。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 不进行扫描的包，用，分割，被包含的包，将不会被扫描成为action --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.exclude.packages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.sean.service\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 进行扫描的根包，该包会被扫描成action --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.action.packages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.sean.action\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 返回页面地址 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.result.path\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/content/\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 用于进行action查找的后缀 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.action.suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Action\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--用于生成action名字时的分隔符，比如DemoCustAction会被映射成为demo_cust,同时用于形成返回文件，比如访问DemoAction，return的值为input，插件会去指定不睦下，查找demo_input.jsp文件 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.action.name.separator\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"_\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 指定的包会被进行扫描 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.package.locators\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"action,actions,struts,struts2\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 返回页面类型 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.relative.result.types\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"dispatcher,velocity,freemarker\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 开启动态调用函数，这个方法在struts2里面不推荐，可是在这里却可以实现动态方法的调用，不用自写action了 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 开发模式 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>按照上述的配置配置，创建好项目后，我们进行创建两个Action进行测试，这两个Action除了继承了ActionSupport外，其他什么都不添加。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.sean.action;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Result;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Results;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"nihao!!!\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"nijun\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.sean.action;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDemoAction</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同时创建对应的jsp文件：</p>\n<p>在content目录下，对应的 result 页面可以是 <code>nijun.jsp</code> 、<code>demo_nijun.jsp</code> 或者 <code>demo.jsp</code>  </p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;  </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC  </span></div><div class=\"line\">    \"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN\"  </div><div class=\"line\">    \"http://struts.apache.org/dtds/struts-2.3.dtd\"&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span>  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 开发模式下的配置 --&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 开发模式 配置文件改了,不用重新启动--&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- &lt;constant name=\"struts.devMode\" value=\"true\" /&gt; --&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 设置浏览器是否缓存静态内容，默认值为true（生产环境下使用），开发阶段最好 关闭 --&gt;</span>     </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.serve.static.browserCache\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 当 struts的配置文件修改后，系统是否自动重新加载该文件，默认值为false（生 产环境下使用），开发阶段最好打开 --&gt;</span>   </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.configuration.xml.reload\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 请求参数的编码方式--&gt;</span>   </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span>   </div><div class=\"line\">    <span class=\"comment\">&lt;!--  struts2拦截器默认拦截的后缀名     多个可以用逗号隔开  用于做网站伪静态化--&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"html\"</span>/&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 简单主题 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.ui.theme\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"simple\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置文件上传的总大小 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.multipart.maxSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2097152000\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constant</span>&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 把struts的请求委托给spring管理, 作用:创建Action实例的过程由spring处理,其他的还是由struts2自己处理 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.objectFactory\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"spring\"</span> /&gt;</span>   </div><div class=\"line\">     <span class=\"comment\">&lt;!-- 是否开启动态方法调用--&gt;</span>   </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span>   </div><div class=\"line\">      </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- Struts2约定限制结果页面必须放到/WEB-INF/content/目录中，可以通过下面常量来修改这个限制。--&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.result.path\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp\"</span> /&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 约定Action包位置：可以使用的Action的祖包，默认为没有， 设置为 cn.javass.ssh 就可以读取这个包及其子包的所有头上注册了【 @Action 】 的类。--&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- &lt;constant name=\"struts.convention.action.packages\" value=\"cn.hl.s2sh.user.controller\" /&gt; --&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 默认配置包路径包含action,actions,struts,struts2的所有包都会被struts作为含有Action类的路径来搜索。通过设置struts.convention.package.locators属性来修改这个配置。 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.package.locators\"</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"action,actions,struts,struts2,controller\"</span> /&gt;</span>   </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 约定Action类名：要求Action的命名必须以Action为后缀，可以使用下面常量来修改后缀限制 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.convention.action.suffix\"</span>  <span class=\"attr\">value</span>=<span class=\"string\">\"Action\"</span> /&gt;</span>   </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 配置全局的包  继承自json-default，json-default继承自struts-default包 ---&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mypackage\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"json-default\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;interceptors&gt;  </span></div><div class=\"line\">            注册自定义登录拦截器  </div><div class=\"line\">            &lt;interceptor name=\"login\" class=\"com.hl.zoneSystem_v01.struts.common.MyInterceptor\" /&gt;  </div><div class=\"line\">            自定义拦截器栈  </div><div class=\"line\">            &lt;interceptor-stack name=\"myInterceptor\"&gt;  </div><div class=\"line\">                &lt;interceptor-ref name=\"login\" /&gt;  </div><div class=\"line\">                &lt;interceptor-ref name=\"defaultStack\"&gt;  </div><div class=\"line\">                    &lt;param name=\"modelDriven.refreshModelBeforeResult\"&gt;true&lt;/param&gt;  </div><div class=\"line\">                &lt;/interceptor-ref&gt;  </div><div class=\"line\">            &lt;/interceptor-stack&gt;  </div><div class=\"line\">        &lt;/interceptors&gt; --&gt;  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 定义默认栈 --&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;default-interceptor-ref name=\"myInterceptor\" /&gt; --&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 定义默认action --&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;default-action-ref name=\"notFound\" /&gt; --&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 全局结果集 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">global-results</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- ajax请求的结果集  表单验证用,值为true/false--&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ajax\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>message<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- ajax请求的结果集  消息推送用,值为数字--&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ajax2\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>message2<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- ajax请求的结果集 页面数据传送 返回map--&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jsonResult\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"root\"</span>&gt;</span>jsonMap<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 下载 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"downloadFiles\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"stream\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"comment\">&lt;!-- 对应web中下载配置：下载类型无限制  文件编码UTF-8--&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"contentType\"</span>&gt;</span>application/octet-stream;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"inputName\"</span>&gt;</span>inputStreamFile<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">                <span class=\"comment\">&lt;!-- 对应web中下载配置：response.setHeader(\"Content-Disposition\", \"attachment;filename=\"+newUser.getFilename()); --&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"contentDisposition\"</span>&gt;</span>attachment;filename=$&#123;fileName&#125;<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">                <span class=\"comment\">&lt;!-- 对应web中下载配置：byte[] b = new byte[1024]; --&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"bufferSize\"</span>&gt;</span>1024<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 项目根页面 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"redirect\"</span>&gt;</span>/index.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- login 登录 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"loginUI\"</span>&gt;</span>/login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 前台全局消息显示页面 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clientMessage\"</span>&gt;</span>/message.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- action错误，处理结果页面   --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"error\"</span>&gt;</span>/error.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">global-results</span>&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 全局异常 --&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- &lt;global-exception-mappings&gt;  </span></div><div class=\"line\">            &lt;exception-mapping result=\"error\" exception=\"java.lang.Exception\"&gt;&lt;/exception-mapping&gt;  </div><div class=\"line\">        &lt;/global-exception-mappings&gt; --&gt;  </div><div class=\"line\">          </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span>     </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>1，Action annotation。<br>最简单的例子 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(<span class=\"string\">\"/different/url\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>那么这个HelloWorld的访问url就变为了/different/url。 </p>\n<p>一个方法可以被映射到多个url上面，如下所示，方位注解中的两个url都可以访问这个方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Actions</span>(&#123;  </div><div class=\"line\">    <span class=\"meta\">@Action</span>(<span class=\"string\">\"/different/url\"</span>),  </div><div class=\"line\">    <span class=\"meta\">@Action</span>(<span class=\"string\">\"/another/url\"</span>)  </div><div class=\"line\">  &#125;)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果一个action中有多个方法，那么可以分别为各个方法指定访问url</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(<span class=\"string\">\"/different/url\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(<span class=\"string\">\"url\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>请注意上面这个类的第二个方法doSomething()，它的url是“url”，这是个相对路径是，也就是说访问这个方法时的正确路径是namespace+url。而execute()通过访问/different/url就可以访问。 </p>\n<h1 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h1><p>使用@Action的interceptorRefs 属性可以指定action或者方法的interceptor，如下面的例子<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(interceptorRefs=&#123;<span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"validation\"</span>), <span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"defaultStack\"</span>)&#125;)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(<span class=\"string\">\"url\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的action中execute()方法应用了 <code>validation</code>拦截器和 <code>defaultStack</code> 拦截器栈。 </p>\n<p>还可以使用params属性指定要传给拦截器的参数。形式为{键，值，键，值…………}，键值总是会成对出现，如下面的例子<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.example.actions;  </div><div class=\"line\">  </div><div class=\"line\">import com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\">import org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\">import org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\">  </div><div class=\"line\">public class HelloWorld extends ActionSupport &#123;  </div><div class=\"line\">  @Action(interceptorRefs=@InterceptorRef(value=\"validation\",params=&#123;\"programmatic\", \"false\", \"declarative\", \"true&#125;))  </div><div class=\"line\">  public String execute() &#123;  </div><div class=\"line\">    return SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  @Action(\"url\")  </div><div class=\"line\">  public String doSomething() &#123;  </div><div class=\"line\">    return SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果Action没有显式的指定拦截器的话，默认的拦截器会应用在这个Action上。 </p>\n<p>拦截器可以在类和方法的层面上应用。在方法层面指定拦截器使用@Action注解，在类层面指定拦截器使用@InterceptorRefs注解。类层面引用的拦截器会应用在所有的方法上，如下面的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example.actions;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.opensymphony.xwork2.ActionSupport;   </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Action;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.struts2.convention.annotation.Actions;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@InterceptorRefs</span>(&#123;  </div><div class=\"line\">    <span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"interceptor-1\"</span>),  </div><div class=\"line\">    <span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"defaultStack\"</span>)  </div><div class=\"line\">&#125;)  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> <span class=\"keyword\">extends</span> <span class=\"title\">ActionSupport</span> </span>&#123;  </div><div class=\"line\">  <span class=\"meta\">@Action</span>(value=<span class=\"string\">\"action1\"</span>, interceptorRefs=<span class=\"meta\">@InterceptorRef</span>(<span class=\"string\">\"validation\"</span>))  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">execute</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Action</span>(value=<span class=\"string\">\"action2\"</span>)  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如上代码所示，execute()方法应用了interceptor-1,validation和defaultStack中的所有拦截器；而doSomething()方法则没有validation拦截器。 </p>\n"},{"title":"struts2配置文件","_content":"\n# struts2配置文件的分类 \n\n1. 内部配置文件:有struts2自动加载，对其自身进行配置（struts-default.xml,struts-plugin.xml 等）  \n2. 开发人员使用的配置文件：有开发人员使用，用于对web应用进行配置。比如 web.xml，struts.xml struts.propeties. \n\n\n\n# 配置文件的作用详情 \n\n| 配置文件               | 是否可选 | 位置（相对webapp）                        | 说明                                       |\n| ------------------ | ---- | ----------------------------------- | ---------------------------------------- |\n| web.xml            | 否    | /WEB-INF/                           | web部署的描述文件，包括所有必须的框架组件                   |\n| struts.xml         | 是    | /WEB-INF/                           | Struts2框架的主要配置文件，包含action的映射，result映射和拦截器配置等 |\n| struts.properties  | 是    | /WEB-INF/classes                    | Struts2框架的属性配置文件                         |\n| struts-default.xml | 是    | /WEB-INF/lib/struts2-core-x.x.x.jar | Struts2框架提供的默认配置                         |\n| struts-plugin.xml  | 是    | /WEB-INF/lib/struts-xxx-plugin.jar  | Struts2框架的插件的配置文件                        |\n\n\n\n\n\n# struts.xml\n\n1. 在Struts2框架中，struts.xml文件具有的重要作用，因为应用中的所有常量 action 拦截器 几乎都配置在这个文件中。  \n2. struts.xml 文件通常放在web应用的WEB-INF/class目录中，在该目录下的struts.xml文件可以被Struts2框架自动加载  \n3. Struts2框架提供了struts.xml文件的DTD（Document Type Definition 文档类型定义）在Struts2的核心struts-core.x.x.jar 包含了struts.-2.0.dtd 该文件就是struts.xml 文件和struts-default.xml的DTD  \n\n\n\n\n\nstruts：package* ，incliude* bean* constant* \n\npackage：result-type? interceptors? default-interceptor-ref? default-aciton-ref? \n​        global-results? action* \n\naction* : param* result* interceptor-ref   exception-mapping* \n\n\n\n\n\n# strut-default.xml\n\n1. struts-default.xml 文件是Struts2框架的基础配置文件，为框架体统默认的配置，例如在前面struts.xml文件有如下的代码  \n\n   ```\n   <package name=\"default\" extends=\"struts-default\">  \n   ```\n\n2. 在Struts2核心包sturts2-core.x.x.jar 可以找到struts-default.xml 文件 该文件定义在struts-default包，也就是我们平常写的struts.xml 自定义的包 extendx struts-default  \n\n\n\n\n\n# struts.properties文件 \n\nstruts.properties文件是一个属性定义文件,在该文件中可以定义Struts2框架中大量的属性值和常量等，通过修改struts.properties文件中的内容，可以实现Struts2框架中的参数配置的修改。  \n\nstruts.properties 文件中的内容 严格遵循标准的键值对 Key-value 的形式 例如:  struts.custom.i18n.resources=globalMessage  \n\n\n\n# struts.properties 文件中的键 \n\n| struts.i18n.encoding         | 指定web应用的默认编码集。如果需要获取中文请求，可以将该值设置为GBK  GB2312 |\n| ---------------------------- | ---------------------------------------- |\n| struts.custom.i18n.resources | 指定struts2应用需要加载的国际化资源文件，多个资源文件中间用 英文逗号分开。 |\n| struts.locale                | 指定web 应用的默认Locale                        |\n| struts.configuration.files   | 指定struts2默认的加载配置文件。多个配置文件用英文逗号分开，其默认值是struts-default.xml struts-plugin.xml struts.xml |\n| struts.ui.theme              | 指定视图标签的默认视图主题，其默认值为xhtml                 |\n| struts.i18n.reload           | 设置是否每次HTTP请求到达时，系统都重新加载资源文件， 其默认值是 false。 |\n\n\n\n\n\n\n\n# struts-plugin.xml 文件 主要用于集成其他技术 \n\n\n\n1. struts-plugin.xml文件表示了Struts2框架中的插件配置文件，在该文件中定义了组件的包空间，拦截器，和其他配置常量等  \n2. 在Struts2框架中的lib文件夹下，除了包含Struts2的核心包之外，还包含了多个插件，这些插件 文件都是jar的形式存在，文件名中包含有-plugin。  \n\n\n![](struts.xml)\n\n\n\n\n\n# 常量的配置\n\n\n\n> 1.配置的位置 ：struts.xml  strust.properties 也可以在其他配置文件中。  \n\n> 2.Strust2框架按照一下的顺序加载Strust2常量  \n>\n> struts-default.xml 存放在struts-core.x.x.jar中  \n> struts-plugin.xml存放在struts-x.x.x.jar等struts插件jar文件中  \n> strust-xml　web应用中Struts2默认的配置文件  \n> struts.properties. struts2的属性配置文件  \n> web.xml web应用的配置   \n>\n> 注意：如果后者 中定义了与前者相同的属性，那么后者中的值覆盖前面的值。 \n\n\n## 常量的配置元素\n\n## struts.xml中\n\n> <constant> 元素配置属性常量时，需要指定一下两个必填属性：  \n>    name: 指定常量的名称  \n>    value：指定的常量的值  \n> 例如：　在struts.xml中配置字符集编码为gb2312 代码如下  \n> <constant name=\"struts.i18n.encoding\" value=\"gb2312\"/>  \n\n## Struts.properties.xml中\n\n> 如果在struts.properties中定义 代码如下  \n>\n>   struts.i18n.encoding=gb2312\n>\n> //struts.custom.i18n.resource=globalMessage  \n> \n\n\n\n## web.xml中\n\n```xml\n<filter>  \n    <filter-name>struts2</filter-name>  \n    <filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>  \n     \n    <!--配置上面拦截器的初始化参数 -->  \n    <init-param>  \n      <param-name>struts.i18n.encoding</param-name>  \n       <param-value>gb2312</param-value>  \n    </init-param>  \n</filter>  \n```\n\n\n\n\n\n```xml\n<constant name=\"struts.i18n.encoding\" value=\"UTF-8\" />   \n指定Web应用的默认编码集，相当于调用HttpServletRequest的setCharacterEncoding方法   \n<constant name=\"struts.action.extension\" value=\"do\" />   \n该属性指定需要Struts 2处理的请求后缀，该属性的默认值是action，即所有匹配*.action的请求都由Struts 2处理。    如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（，）隔开。     \n<constant name=\"struts.serve.static.browserCache \" value=\"false\" />   \n设置浏览器是否缓存静态内容，默认值为true，开发阶段最好false   \n<constant name=\"struts.configuration.xml.reload\" value=\"true\" />   \n当struts的配置文件修改后，系统是否自动重新加载该文件，默认值为false，开发阶段最好true   \n<constant name=\"struts.devMode\" value=\"true\" />   \n开发模式下设为true，这样可以打印出更详细的错误信息   \n<constant name=\"struts.enable.DynamicMethodInvocation\" value=\"false\" />   \n动态方法调用,可以解决多个请求对应一个Servlet的问题,后面详细讲解,默认为true,关闭则设为false.   \n下面是其他的一些常量，使用方法和上面相同。  \n\nstruts.serve.static.browserCache: 该属性设置浏览器是否缓存静态内容。当应用处于开发阶段时，我们希望每次请求都获得服务器的最新响应，则可设置该属性为false。   \n\nstruts.enable.DynamicMethodInvocation 该属性设置Struts 2是否支持动态方法调用，该属性的默认值是true。如果需要关闭动态方法调用，则可设置该属性为false。  \n\nstruts.enable.SlashesInActionNames 该属性设置Struts 2是否允许在Action名中使用斜线，该属性的默认值是false。如果开发者希望允许在Action名中使用斜线，则可设置该属性为true。  \n\nstruts.tag.altSyntax 该属性指定是否允许在Struts 2标签中使用表达式语法，因为通常都需要在标签中使用表达式语法，故此属性应该设置为true，该属性的默认值是true。   \n\nstruts.devMode该属性设置Struts 2应用是否使用开发模式。如果设置该属性为true，则可以在应用出错时显示更多、更友好的出错提示。该属性只接受true和flase两个值，该属性的默认值是false。通常，应用在开发阶段，将该属性设置为true，当进入产品发布阶段后，则该属性设置为false。  \n\nstruts.i18n.reload该属性设置是否每次HTTP请求到达时，系统都重新加载资源文件。该属性默认值是false。在开发阶段将该属性设置为true会更有利于开发，但在产品发布阶段应将该属性设置为false。  \n提示 开发阶段将该属性设置了true，将可以在每次请求时都重新加载国际化资源文件，从而可以让开发者看到实时开发效果；产品发布阶段应该将该属性设置为false，是为了提供响应性能，每次请求都需要重新加载资源文件会大大降低应用的性能。   \n\nstruts.ui.theme该属性指定视图标签默认的视图主题，该属性的默认值是xhtml。   \n\nstruts.ui.templateDir该属性指定视图主题所需要模板文件的位置，该属性的默认值是template，即默认加载template路径下的模板文件。   \n\nstruts.ui.templateSuffix该属性指定模板文件的后缀，该属性的默认属性值是ftl。该属性还允许使用ftl、vm或jsp，分别对应FreeMarker、Velocity和JSP模板。  \n\nstruts.configuration.xml.reload该属性设置当struts.xml文件改变后，系统是否自动重新加载该文件。该属性的默认值是false。   \n\nstruts.velocity.configfile该属性指定Velocity框架所需的velocity.properties文件的位置。该属性的默认值为velocity.properties。   \n\nstruts.velocity.contexts该属性指定Velocity框架的Context位置，如果该框架有多个Context，则多个Context之间以英文逗号（,）隔开。   \n\nstruts.velocity.toolboxlocation该属性指定Velocity框架的toolbox的位置。   \n\nstruts.url.http.port该属性指定Web应用所在的监听端口。该属性通常没有太大的用户，只是当Struts 2需要生成URL时（例如Url标签），该属性才提供Web应用的默认端口。   \n\nstruts.url.https.port该属性类似于struts.url.http.port属性的作用，区别是该属性指定的是Web应用的加密服务端口。   \n\nstruts.url.includeParams该属性指定Struts 2生成URL时是否包含请求参数。该属性接受none、get和all三个属性值，分别对应于不包含、仅包含GET类型请求参数和包含全部请求参数。   \n\nstruts.custom.i18n.resources该属性指定Struts 2应用所需要的国际化资源文件，如果有多份国际化资源文件，则多个资源文件的文件名以英文逗号（,）隔开。   \n\nstruts.dispatcher.parametersWorkaround 对于某些Java EE服务器，不支持HttpServlet Request调用getParameterMap()方法，此时可以设置该属性值为true来解决该问题。该属性的默认值是false。对于WebLogic、Orion和OC4J服务器，通常应该设置该属性为true。   \n\nstruts.freemarker.manager.classname 该属性指定Struts 2使用的FreeMarker管理器。该属性的默认值是org.apache.struts2.views.freemarker.FreemarkerManager，这是Struts 2内建的FreeMarker管理器。  \n\nstruts.freemarker.wrapper.altMap该属性只支持true和false两个属性值，默认值是true。通常无需修改该属性值。   \nstruts.xslt.nocache 该属性指定XSLT Result是否使用样式表缓存。当应用处于开发阶段时，该属性通常被设置为true；当应用处于产品使用阶段时，该属性通常被设置为false。 \n\nstruts.configuration.files 该属性指定Struts 2框架默认加载的配置文件，如果需要指定默认加载多个配置文件，则多个配置文件的文件名之间以英文逗号（,）隔开。该属性的默认值为struts-default.xml,struts-plugin.xml,struts.xml，看到该属性值，读者应该明白为什么Struts 2框架默认加载struts.xml文件了。\n```\n\n\n\n\n\n# Struts2 包、命名空间、包含的配置\n\n## 包配置\n\n在Struts2框架中，其核心组件是Action和拦截器等，该框架使用包管理这些组件，在包可以配置多个action，多个拦截器，多个拦截器栈，返回类型。使用 <package> 元素配置包。可以指定4个属性\n\n\n\n| 属性名       | 必选   | 说明                          |\n| --------- | ---- | --------------------------- |\n| name      | 是    | 指定包的名称，该名称是该包被其他包引用的key值    |\n| extends   | 否    | 知道该包继承其他包                   |\n| namespace | 否    | 指定哪个该包的命名空间                 |\n| abstract  | 否    | 指定该包是否是一个抽象包。抽象包中不定义action。 |\n\n\n\n\n\n## 命名空间配置 \n\n在Struts2中命名空间用namespace的方式来管理Action  \n因为在Action类中有多个业务处理方法，而客户端请求需要指向不同的方法，此时就需要用命名空间了。  \n例如：\n\n```xml\n<package name=\"myPackage\" extends=\"struts-default\" namespace=\"/tmq\">  \n   <action name=\"login\" class=\"my.test.Login.Action\">  \n      <result name=\"success\">welcome.jsp</result>  \n    </action>  \n</package>  \n\n```\n\n上述的配置后，name为login的action就可以处理下面的URL请求了  \nhttp://localhost:8080/struts2/tmq/login.action  \nhttp://localhot:8080/struts2/login.action  \n\n\n\n另一个例子\n\n```xml\n<struts>  \n    <!--配置myPackage包，默认命名空间为空-->  \n     <package name=\"myPackage\" extends=\"struts-default\">  \n           <action name=\"login\" class=\"my.test.LoginAction\">  \n                <result name=\"success\">welcome.jsp</result>  \n                <result name=\"Login\">login.jsp</result>  \n           </action>  \n       </package>  \n  \n     <package name=\"myPackage2\" extends=\"struts-default\" namespace=\"/tmq\">  \n           <action name=\"login\" class=\"my.test.LoginAction2\">  \n                <result name=\"success\">welcome.jsp</result>  \n                <result name=\"Login\">login.jsp</result>  \n           </action>  \n       </package>  \n       <!---http://localhost:8080/struts/login.action;会先查询非默认命名空间中的login Action如果没有找到 然后才到默认的命名空间-->  \n</struts> \n```\n\n\n\n\n\n> 命名空间注意：\n>\n> 1. 通过为包指定不同的命名空间，就可以在不同的包中配置name值相同的Action 而框架根据请求的ＵＲＬ，依然可以知道使用那个额Action来处理。如果为一个包指定了默认的命名空间，那么该包下的所有Action，都可以处理这个URL中对应的Action请求。  \n> 2. 同一个命名空间中的不能包含同名的Action，不同的命名空间中，可以包含相同的Action。  \n\n\n\n\n\n## 包含\n\n```Xml\n<!--_在一个Jsp文件中可以使用<jsp:include>指令，将其他文件包含到该文件中，同样的道理，在struts.xml文件中可以使用包含元素<include>包含其他配置文件-->  \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.0/EN\" \"http://struts.apache.org/dtds/struts-2.0.dtd\">  \n<struts>  \n   <include file=\"struts-actionchaining.xml\"/>  \n   <include file=\"struts-fileupload.xml\"/>  \n   <include file=\"struts-jsf.xml\"/>  \n   <include file=\"struts-filedownload.xml\"/>  \n   <include file=\"struts-conversion.xml\"/>  \n   <include file=\"struts-freemarker.xml\"/>  \n   <includer file=\"struts-tiles.xml\"/>  \n</struts> \n```\n\n","source":"_drafts/struts2配置文件.md","raw":"---\ntitle: struts2配置文件\ntags: struts2\n---\n\n# struts2配置文件的分类 \n\n1. 内部配置文件:有struts2自动加载，对其自身进行配置（struts-default.xml,struts-plugin.xml 等）  \n2. 开发人员使用的配置文件：有开发人员使用，用于对web应用进行配置。比如 web.xml，struts.xml struts.propeties. \n\n\n\n# 配置文件的作用详情 \n\n| 配置文件               | 是否可选 | 位置（相对webapp）                        | 说明                                       |\n| ------------------ | ---- | ----------------------------------- | ---------------------------------------- |\n| web.xml            | 否    | /WEB-INF/                           | web部署的描述文件，包括所有必须的框架组件                   |\n| struts.xml         | 是    | /WEB-INF/                           | Struts2框架的主要配置文件，包含action的映射，result映射和拦截器配置等 |\n| struts.properties  | 是    | /WEB-INF/classes                    | Struts2框架的属性配置文件                         |\n| struts-default.xml | 是    | /WEB-INF/lib/struts2-core-x.x.x.jar | Struts2框架提供的默认配置                         |\n| struts-plugin.xml  | 是    | /WEB-INF/lib/struts-xxx-plugin.jar  | Struts2框架的插件的配置文件                        |\n\n\n\n\n\n# struts.xml\n\n1. 在Struts2框架中，struts.xml文件具有的重要作用，因为应用中的所有常量 action 拦截器 几乎都配置在这个文件中。  \n2. struts.xml 文件通常放在web应用的WEB-INF/class目录中，在该目录下的struts.xml文件可以被Struts2框架自动加载  \n3. Struts2框架提供了struts.xml文件的DTD（Document Type Definition 文档类型定义）在Struts2的核心struts-core.x.x.jar 包含了struts.-2.0.dtd 该文件就是struts.xml 文件和struts-default.xml的DTD  \n\n\n\n\n\nstruts：package* ，incliude* bean* constant* \n\npackage：result-type? interceptors? default-interceptor-ref? default-aciton-ref? \n​        global-results? action* \n\naction* : param* result* interceptor-ref   exception-mapping* \n\n\n\n\n\n# strut-default.xml\n\n1. struts-default.xml 文件是Struts2框架的基础配置文件，为框架体统默认的配置，例如在前面struts.xml文件有如下的代码  \n\n   ```\n   <package name=\"default\" extends=\"struts-default\">  \n   ```\n\n2. 在Struts2核心包sturts2-core.x.x.jar 可以找到struts-default.xml 文件 该文件定义在struts-default包，也就是我们平常写的struts.xml 自定义的包 extendx struts-default  \n\n\n\n\n\n# struts.properties文件 \n\nstruts.properties文件是一个属性定义文件,在该文件中可以定义Struts2框架中大量的属性值和常量等，通过修改struts.properties文件中的内容，可以实现Struts2框架中的参数配置的修改。  \n\nstruts.properties 文件中的内容 严格遵循标准的键值对 Key-value 的形式 例如:  struts.custom.i18n.resources=globalMessage  \n\n\n\n# struts.properties 文件中的键 \n\n| struts.i18n.encoding         | 指定web应用的默认编码集。如果需要获取中文请求，可以将该值设置为GBK  GB2312 |\n| ---------------------------- | ---------------------------------------- |\n| struts.custom.i18n.resources | 指定struts2应用需要加载的国际化资源文件，多个资源文件中间用 英文逗号分开。 |\n| struts.locale                | 指定web 应用的默认Locale                        |\n| struts.configuration.files   | 指定struts2默认的加载配置文件。多个配置文件用英文逗号分开，其默认值是struts-default.xml struts-plugin.xml struts.xml |\n| struts.ui.theme              | 指定视图标签的默认视图主题，其默认值为xhtml                 |\n| struts.i18n.reload           | 设置是否每次HTTP请求到达时，系统都重新加载资源文件， 其默认值是 false。 |\n\n\n\n\n\n\n\n# struts-plugin.xml 文件 主要用于集成其他技术 \n\n\n\n1. struts-plugin.xml文件表示了Struts2框架中的插件配置文件，在该文件中定义了组件的包空间，拦截器，和其他配置常量等  \n2. 在Struts2框架中的lib文件夹下，除了包含Struts2的核心包之外，还包含了多个插件，这些插件 文件都是jar的形式存在，文件名中包含有-plugin。  \n\n\n![](struts.xml)\n\n\n\n\n\n# 常量的配置\n\n\n\n> 1.配置的位置 ：struts.xml  strust.properties 也可以在其他配置文件中。  \n\n> 2.Strust2框架按照一下的顺序加载Strust2常量  \n>\n> struts-default.xml 存放在struts-core.x.x.jar中  \n> struts-plugin.xml存放在struts-x.x.x.jar等struts插件jar文件中  \n> strust-xml　web应用中Struts2默认的配置文件  \n> struts.properties. struts2的属性配置文件  \n> web.xml web应用的配置   \n>\n> 注意：如果后者 中定义了与前者相同的属性，那么后者中的值覆盖前面的值。 \n\n\n## 常量的配置元素\n\n## struts.xml中\n\n> <constant> 元素配置属性常量时，需要指定一下两个必填属性：  \n>    name: 指定常量的名称  \n>    value：指定的常量的值  \n> 例如：　在struts.xml中配置字符集编码为gb2312 代码如下  \n> <constant name=\"struts.i18n.encoding\" value=\"gb2312\"/>  \n\n## Struts.properties.xml中\n\n> 如果在struts.properties中定义 代码如下  \n>\n>   struts.i18n.encoding=gb2312\n>\n> //struts.custom.i18n.resource=globalMessage  \n> \n\n\n\n## web.xml中\n\n```xml\n<filter>  \n    <filter-name>struts2</filter-name>  \n    <filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>  \n     \n    <!--配置上面拦截器的初始化参数 -->  \n    <init-param>  \n      <param-name>struts.i18n.encoding</param-name>  \n       <param-value>gb2312</param-value>  \n    </init-param>  \n</filter>  \n```\n\n\n\n\n\n```xml\n<constant name=\"struts.i18n.encoding\" value=\"UTF-8\" />   \n指定Web应用的默认编码集，相当于调用HttpServletRequest的setCharacterEncoding方法   \n<constant name=\"struts.action.extension\" value=\"do\" />   \n该属性指定需要Struts 2处理的请求后缀，该属性的默认值是action，即所有匹配*.action的请求都由Struts 2处理。    如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（，）隔开。     \n<constant name=\"struts.serve.static.browserCache \" value=\"false\" />   \n设置浏览器是否缓存静态内容，默认值为true，开发阶段最好false   \n<constant name=\"struts.configuration.xml.reload\" value=\"true\" />   \n当struts的配置文件修改后，系统是否自动重新加载该文件，默认值为false，开发阶段最好true   \n<constant name=\"struts.devMode\" value=\"true\" />   \n开发模式下设为true，这样可以打印出更详细的错误信息   \n<constant name=\"struts.enable.DynamicMethodInvocation\" value=\"false\" />   \n动态方法调用,可以解决多个请求对应一个Servlet的问题,后面详细讲解,默认为true,关闭则设为false.   \n下面是其他的一些常量，使用方法和上面相同。  \n\nstruts.serve.static.browserCache: 该属性设置浏览器是否缓存静态内容。当应用处于开发阶段时，我们希望每次请求都获得服务器的最新响应，则可设置该属性为false。   \n\nstruts.enable.DynamicMethodInvocation 该属性设置Struts 2是否支持动态方法调用，该属性的默认值是true。如果需要关闭动态方法调用，则可设置该属性为false。  \n\nstruts.enable.SlashesInActionNames 该属性设置Struts 2是否允许在Action名中使用斜线，该属性的默认值是false。如果开发者希望允许在Action名中使用斜线，则可设置该属性为true。  \n\nstruts.tag.altSyntax 该属性指定是否允许在Struts 2标签中使用表达式语法，因为通常都需要在标签中使用表达式语法，故此属性应该设置为true，该属性的默认值是true。   \n\nstruts.devMode该属性设置Struts 2应用是否使用开发模式。如果设置该属性为true，则可以在应用出错时显示更多、更友好的出错提示。该属性只接受true和flase两个值，该属性的默认值是false。通常，应用在开发阶段，将该属性设置为true，当进入产品发布阶段后，则该属性设置为false。  \n\nstruts.i18n.reload该属性设置是否每次HTTP请求到达时，系统都重新加载资源文件。该属性默认值是false。在开发阶段将该属性设置为true会更有利于开发，但在产品发布阶段应将该属性设置为false。  \n提示 开发阶段将该属性设置了true，将可以在每次请求时都重新加载国际化资源文件，从而可以让开发者看到实时开发效果；产品发布阶段应该将该属性设置为false，是为了提供响应性能，每次请求都需要重新加载资源文件会大大降低应用的性能。   \n\nstruts.ui.theme该属性指定视图标签默认的视图主题，该属性的默认值是xhtml。   \n\nstruts.ui.templateDir该属性指定视图主题所需要模板文件的位置，该属性的默认值是template，即默认加载template路径下的模板文件。   \n\nstruts.ui.templateSuffix该属性指定模板文件的后缀，该属性的默认属性值是ftl。该属性还允许使用ftl、vm或jsp，分别对应FreeMarker、Velocity和JSP模板。  \n\nstruts.configuration.xml.reload该属性设置当struts.xml文件改变后，系统是否自动重新加载该文件。该属性的默认值是false。   \n\nstruts.velocity.configfile该属性指定Velocity框架所需的velocity.properties文件的位置。该属性的默认值为velocity.properties。   \n\nstruts.velocity.contexts该属性指定Velocity框架的Context位置，如果该框架有多个Context，则多个Context之间以英文逗号（,）隔开。   \n\nstruts.velocity.toolboxlocation该属性指定Velocity框架的toolbox的位置。   \n\nstruts.url.http.port该属性指定Web应用所在的监听端口。该属性通常没有太大的用户，只是当Struts 2需要生成URL时（例如Url标签），该属性才提供Web应用的默认端口。   \n\nstruts.url.https.port该属性类似于struts.url.http.port属性的作用，区别是该属性指定的是Web应用的加密服务端口。   \n\nstruts.url.includeParams该属性指定Struts 2生成URL时是否包含请求参数。该属性接受none、get和all三个属性值，分别对应于不包含、仅包含GET类型请求参数和包含全部请求参数。   \n\nstruts.custom.i18n.resources该属性指定Struts 2应用所需要的国际化资源文件，如果有多份国际化资源文件，则多个资源文件的文件名以英文逗号（,）隔开。   \n\nstruts.dispatcher.parametersWorkaround 对于某些Java EE服务器，不支持HttpServlet Request调用getParameterMap()方法，此时可以设置该属性值为true来解决该问题。该属性的默认值是false。对于WebLogic、Orion和OC4J服务器，通常应该设置该属性为true。   \n\nstruts.freemarker.manager.classname 该属性指定Struts 2使用的FreeMarker管理器。该属性的默认值是org.apache.struts2.views.freemarker.FreemarkerManager，这是Struts 2内建的FreeMarker管理器。  \n\nstruts.freemarker.wrapper.altMap该属性只支持true和false两个属性值，默认值是true。通常无需修改该属性值。   \nstruts.xslt.nocache 该属性指定XSLT Result是否使用样式表缓存。当应用处于开发阶段时，该属性通常被设置为true；当应用处于产品使用阶段时，该属性通常被设置为false。 \n\nstruts.configuration.files 该属性指定Struts 2框架默认加载的配置文件，如果需要指定默认加载多个配置文件，则多个配置文件的文件名之间以英文逗号（,）隔开。该属性的默认值为struts-default.xml,struts-plugin.xml,struts.xml，看到该属性值，读者应该明白为什么Struts 2框架默认加载struts.xml文件了。\n```\n\n\n\n\n\n# Struts2 包、命名空间、包含的配置\n\n## 包配置\n\n在Struts2框架中，其核心组件是Action和拦截器等，该框架使用包管理这些组件，在包可以配置多个action，多个拦截器，多个拦截器栈，返回类型。使用 <package> 元素配置包。可以指定4个属性\n\n\n\n| 属性名       | 必选   | 说明                          |\n| --------- | ---- | --------------------------- |\n| name      | 是    | 指定包的名称，该名称是该包被其他包引用的key值    |\n| extends   | 否    | 知道该包继承其他包                   |\n| namespace | 否    | 指定哪个该包的命名空间                 |\n| abstract  | 否    | 指定该包是否是一个抽象包。抽象包中不定义action。 |\n\n\n\n\n\n## 命名空间配置 \n\n在Struts2中命名空间用namespace的方式来管理Action  \n因为在Action类中有多个业务处理方法，而客户端请求需要指向不同的方法，此时就需要用命名空间了。  \n例如：\n\n```xml\n<package name=\"myPackage\" extends=\"struts-default\" namespace=\"/tmq\">  \n   <action name=\"login\" class=\"my.test.Login.Action\">  \n      <result name=\"success\">welcome.jsp</result>  \n    </action>  \n</package>  \n\n```\n\n上述的配置后，name为login的action就可以处理下面的URL请求了  \nhttp://localhost:8080/struts2/tmq/login.action  \nhttp://localhot:8080/struts2/login.action  \n\n\n\n另一个例子\n\n```xml\n<struts>  \n    <!--配置myPackage包，默认命名空间为空-->  \n     <package name=\"myPackage\" extends=\"struts-default\">  \n           <action name=\"login\" class=\"my.test.LoginAction\">  \n                <result name=\"success\">welcome.jsp</result>  \n                <result name=\"Login\">login.jsp</result>  \n           </action>  \n       </package>  \n  \n     <package name=\"myPackage2\" extends=\"struts-default\" namespace=\"/tmq\">  \n           <action name=\"login\" class=\"my.test.LoginAction2\">  \n                <result name=\"success\">welcome.jsp</result>  \n                <result name=\"Login\">login.jsp</result>  \n           </action>  \n       </package>  \n       <!---http://localhost:8080/struts/login.action;会先查询非默认命名空间中的login Action如果没有找到 然后才到默认的命名空间-->  \n</struts> \n```\n\n\n\n\n\n> 命名空间注意：\n>\n> 1. 通过为包指定不同的命名空间，就可以在不同的包中配置name值相同的Action 而框架根据请求的ＵＲＬ，依然可以知道使用那个额Action来处理。如果为一个包指定了默认的命名空间，那么该包下的所有Action，都可以处理这个URL中对应的Action请求。  \n> 2. 同一个命名空间中的不能包含同名的Action，不同的命名空间中，可以包含相同的Action。  \n\n\n\n\n\n## 包含\n\n```Xml\n<!--_在一个Jsp文件中可以使用<jsp:include>指令，将其他文件包含到该文件中，同样的道理，在struts.xml文件中可以使用包含元素<include>包含其他配置文件-->  \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.0/EN\" \"http://struts.apache.org/dtds/struts-2.0.dtd\">  \n<struts>  \n   <include file=\"struts-actionchaining.xml\"/>  \n   <include file=\"struts-fileupload.xml\"/>  \n   <include file=\"struts-jsf.xml\"/>  \n   <include file=\"struts-filedownload.xml\"/>  \n   <include file=\"struts-conversion.xml\"/>  \n   <include file=\"struts-freemarker.xml\"/>  \n   <includer file=\"struts-tiles.xml\"/>  \n</struts> \n```\n\n","slug":"struts2配置文件","published":0,"date":"2017-05-12T23:07:09.000Z","updated":"2017-05-13T00:39:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nb0000ap5ukveyec3r9","content":"<h1 id=\"struts2配置文件的分类\"><a href=\"#struts2配置文件的分类\" class=\"headerlink\" title=\"struts2配置文件的分类\"></a>struts2配置文件的分类</h1><ol>\n<li>内部配置文件:有struts2自动加载，对其自身进行配置（struts-default.xml,struts-plugin.xml 等）  </li>\n<li>开发人员使用的配置文件：有开发人员使用，用于对web应用进行配置。比如 web.xml，struts.xml struts.propeties. </li>\n</ol>\n<h1 id=\"配置文件的作用详情\"><a href=\"#配置文件的作用详情\" class=\"headerlink\" title=\"配置文件的作用详情\"></a>配置文件的作用详情</h1><table>\n<thead>\n<tr>\n<th>配置文件</th>\n<th>是否可选</th>\n<th>位置（相对webapp）</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>web.xml</td>\n<td>否</td>\n<td>/WEB-INF/</td>\n<td>web部署的描述文件，包括所有必须的框架组件</td>\n</tr>\n<tr>\n<td>struts.xml</td>\n<td>是</td>\n<td>/WEB-INF/</td>\n<td>Struts2框架的主要配置文件，包含action的映射，result映射和拦截器配置等</td>\n</tr>\n<tr>\n<td>struts.properties</td>\n<td>是</td>\n<td>/WEB-INF/classes</td>\n<td>Struts2框架的属性配置文件</td>\n</tr>\n<tr>\n<td>struts-default.xml</td>\n<td>是</td>\n<td>/WEB-INF/lib/struts2-core-x.x.x.jar</td>\n<td>Struts2框架提供的默认配置</td>\n</tr>\n<tr>\n<td>struts-plugin.xml</td>\n<td>是</td>\n<td>/WEB-INF/lib/struts-xxx-plugin.jar</td>\n<td>Struts2框架的插件的配置文件</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"struts-xml\"><a href=\"#struts-xml\" class=\"headerlink\" title=\"struts.xml\"></a>struts.xml</h1><ol>\n<li>在Struts2框架中，struts.xml文件具有的重要作用，因为应用中的所有常量 action 拦截器 几乎都配置在这个文件中。  </li>\n<li>struts.xml 文件通常放在web应用的WEB-INF/class目录中，在该目录下的struts.xml文件可以被Struts2框架自动加载  </li>\n<li>Struts2框架提供了struts.xml文件的DTD（Document Type Definition 文档类型定义）在Struts2的核心struts-core.x.x.jar 包含了struts.-2.0.dtd 该文件就是struts.xml 文件和struts-default.xml的DTD  </li>\n</ol>\n<p>struts：package<em> ，incliude</em> bean<em> constant</em> </p>\n<p>package：result-type? interceptors? default-interceptor-ref? default-aciton-ref?<br>​        global-results? action* </p>\n<p>action<em> : param</em> result<em> interceptor-ref   exception-mapping</em> </p>\n<h1 id=\"strut-default-xml\"><a href=\"#strut-default-xml\" class=\"headerlink\" title=\"strut-default.xml\"></a>strut-default.xml</h1><ol>\n<li><p>struts-default.xml 文件是Struts2框架的基础配置文件，为框架体统默认的配置，例如在前面struts.xml文件有如下的代码  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;package name=&quot;default&quot; extends=&quot;struts-default&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在Struts2核心包sturts2-core.x.x.jar 可以找到struts-default.xml 文件 该文件定义在struts-default包，也就是我们平常写的struts.xml 自定义的包 extendx struts-default  </p>\n</li>\n</ol>\n<h1 id=\"struts-properties文件\"><a href=\"#struts-properties文件\" class=\"headerlink\" title=\"struts.properties文件\"></a>struts.properties文件</h1><p>struts.properties文件是一个属性定义文件,在该文件中可以定义Struts2框架中大量的属性值和常量等，通过修改struts.properties文件中的内容，可以实现Struts2框架中的参数配置的修改。  </p>\n<p>struts.properties 文件中的内容 严格遵循标准的键值对 Key-value 的形式 例如:  struts.custom.i18n.resources=globalMessage  </p>\n<h1 id=\"struts-properties-文件中的键\"><a href=\"#struts-properties-文件中的键\" class=\"headerlink\" title=\"struts.properties 文件中的键\"></a>struts.properties 文件中的键</h1><table>\n<thead>\n<tr>\n<th>struts.i18n.encoding</th>\n<th>指定web应用的默认编码集。如果需要获取中文请求，可以将该值设置为GBK  GB2312</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>struts.custom.i18n.resources</td>\n<td>指定struts2应用需要加载的国际化资源文件，多个资源文件中间用 英文逗号分开。</td>\n</tr>\n<tr>\n<td>struts.locale</td>\n<td>指定web 应用的默认Locale</td>\n</tr>\n<tr>\n<td>struts.configuration.files</td>\n<td>指定struts2默认的加载配置文件。多个配置文件用英文逗号分开，其默认值是struts-default.xml struts-plugin.xml struts.xml</td>\n</tr>\n<tr>\n<td>struts.ui.theme</td>\n<td>指定视图标签的默认视图主题，其默认值为xhtml</td>\n</tr>\n<tr>\n<td>struts.i18n.reload</td>\n<td>设置是否每次HTTP请求到达时，系统都重新加载资源文件， 其默认值是 false。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"struts-plugin-xml-文件-主要用于集成其他技术\"><a href=\"#struts-plugin-xml-文件-主要用于集成其他技术\" class=\"headerlink\" title=\"struts-plugin.xml 文件 主要用于集成其他技术\"></a>struts-plugin.xml 文件 主要用于集成其他技术</h1><ol>\n<li>struts-plugin.xml文件表示了Struts2框架中的插件配置文件，在该文件中定义了组件的包空间，拦截器，和其他配置常量等  </li>\n<li>在Struts2框架中的lib文件夹下，除了包含Struts2的核心包之外，还包含了多个插件，这些插件 文件都是jar的形式存在，文件名中包含有-plugin。  </li>\n</ol>\n<p><img src=\"/2017/05/13/struts2配置文件/struts.xml\" alt=\"\"></p>\n<h1 id=\"常量的配置\"><a href=\"#常量的配置\" class=\"headerlink\" title=\"常量的配置\"></a>常量的配置</h1><blockquote>\n<p>1.配置的位置 ：struts.xml  strust.properties 也可以在其他配置文件中。  </p>\n<p>2.Strust2框架按照一下的顺序加载Strust2常量  </p>\n<p>struts-default.xml 存放在struts-core.x.x.jar中<br>struts-plugin.xml存放在struts-x.x.x.jar等struts插件jar文件中<br>strust-xml　web应用中Struts2默认的配置文件<br>struts.properties. struts2的属性配置文件<br>web.xml web应用的配置   </p>\n<p>注意：如果后者 中定义了与前者相同的属性，那么后者中的值覆盖前面的值。 </p>\n</blockquote>\n<h2 id=\"常量的配置元素\"><a href=\"#常量的配置元素\" class=\"headerlink\" title=\"常量的配置元素\"></a>常量的配置元素</h2><h2 id=\"struts-xml中\"><a href=\"#struts-xml中\" class=\"headerlink\" title=\"struts.xml中\"></a>struts.xml中</h2><blockquote>\n<p><constant> 元素配置属性常量时，需要指定一下两个必填属性：<br>   name: 指定常量的名称<br>   value：指定的常量的值<br>例如：　在struts.xml中配置字符集编码为gb2312 代码如下  </constant></p>\n<constant name=\"struts.i18n.encoding\" value=\"gb2312\">  \n\n</constant></blockquote>\n<h2 id=\"Struts-properties-xml中\"><a href=\"#Struts-properties-xml中\" class=\"headerlink\" title=\"Struts.properties.xml中\"></a>Struts.properties.xml中</h2><blockquote>\n<p>如果在struts.properties中定义 代码如下  </p>\n<p>  struts.i18n.encoding=gb2312</p>\n<p>//struts.custom.i18n.resource=globalMessage  </p>\n</blockquote>\n<h2 id=\"web-xml中\"><a href=\"#web-xml中\" class=\"headerlink\" title=\"web.xml中\"></a>web.xml中</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.FilterDispatcher<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span>  </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">&lt;!--配置上面拦截器的初始化参数 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>struts.i18n.encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>gb2312<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span>   </div><div class=\"line\">指定Web应用的默认编码集，相当于调用HttpServletRequest的setCharacterEncoding方法   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"do\"</span> /&gt;</span>   </div><div class=\"line\">该属性指定需要Struts 2处理的请求后缀，该属性的默认值是action，即所有匹配*.action的请求都由Struts 2处理。    如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（，）隔开。     </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.serve.static.browserCache \"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>   </div><div class=\"line\">设置浏览器是否缓存静态内容，默认值为true，开发阶段最好false   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.configuration.xml.reload\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span>   </div><div class=\"line\">当struts的配置文件修改后，系统是否自动重新加载该文件，默认值为false，开发阶段最好true   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span>   </div><div class=\"line\">开发模式下设为true，这样可以打印出更详细的错误信息   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>   </div><div class=\"line\">动态方法调用,可以解决多个请求对应一个Servlet的问题,后面详细讲解,默认为true,关闭则设为false.   </div><div class=\"line\">下面是其他的一些常量，使用方法和上面相同。  </div><div class=\"line\"></div><div class=\"line\">struts.serve.static.browserCache: 该属性设置浏览器是否缓存静态内容。当应用处于开发阶段时，我们希望每次请求都获得服务器的最新响应，则可设置该属性为false。   </div><div class=\"line\"></div><div class=\"line\">struts.enable.DynamicMethodInvocation 该属性设置Struts 2是否支持动态方法调用，该属性的默认值是true。如果需要关闭动态方法调用，则可设置该属性为false。  </div><div class=\"line\"></div><div class=\"line\">struts.enable.SlashesInActionNames 该属性设置Struts 2是否允许在Action名中使用斜线，该属性的默认值是false。如果开发者希望允许在Action名中使用斜线，则可设置该属性为true。  </div><div class=\"line\"></div><div class=\"line\">struts.tag.altSyntax 该属性指定是否允许在Struts 2标签中使用表达式语法，因为通常都需要在标签中使用表达式语法，故此属性应该设置为true，该属性的默认值是true。   </div><div class=\"line\"></div><div class=\"line\">struts.devMode该属性设置Struts 2应用是否使用开发模式。如果设置该属性为true，则可以在应用出错时显示更多、更友好的出错提示。该属性只接受true和flase两个值，该属性的默认值是false。通常，应用在开发阶段，将该属性设置为true，当进入产品发布阶段后，则该属性设置为false。  </div><div class=\"line\"></div><div class=\"line\">struts.i18n.reload该属性设置是否每次HTTP请求到达时，系统都重新加载资源文件。该属性默认值是false。在开发阶段将该属性设置为true会更有利于开发，但在产品发布阶段应将该属性设置为false。  </div><div class=\"line\">提示 开发阶段将该属性设置了true，将可以在每次请求时都重新加载国际化资源文件，从而可以让开发者看到实时开发效果；产品发布阶段应该将该属性设置为false，是为了提供响应性能，每次请求都需要重新加载资源文件会大大降低应用的性能。   </div><div class=\"line\"></div><div class=\"line\">struts.ui.theme该属性指定视图标签默认的视图主题，该属性的默认值是xhtml。   </div><div class=\"line\"></div><div class=\"line\">struts.ui.templateDir该属性指定视图主题所需要模板文件的位置，该属性的默认值是template，即默认加载template路径下的模板文件。   </div><div class=\"line\"></div><div class=\"line\">struts.ui.templateSuffix该属性指定模板文件的后缀，该属性的默认属性值是ftl。该属性还允许使用ftl、vm或jsp，分别对应FreeMarker、Velocity和JSP模板。  </div><div class=\"line\"></div><div class=\"line\">struts.configuration.xml.reload该属性设置当struts.xml文件改变后，系统是否自动重新加载该文件。该属性的默认值是false。   </div><div class=\"line\"></div><div class=\"line\">struts.velocity.configfile该属性指定Velocity框架所需的velocity.properties文件的位置。该属性的默认值为velocity.properties。   </div><div class=\"line\"></div><div class=\"line\">struts.velocity.contexts该属性指定Velocity框架的Context位置，如果该框架有多个Context，则多个Context之间以英文逗号（,）隔开。   </div><div class=\"line\"></div><div class=\"line\">struts.velocity.toolboxlocation该属性指定Velocity框架的toolbox的位置。   </div><div class=\"line\"></div><div class=\"line\">struts.url.http.port该属性指定Web应用所在的监听端口。该属性通常没有太大的用户，只是当Struts 2需要生成URL时（例如Url标签），该属性才提供Web应用的默认端口。   </div><div class=\"line\"></div><div class=\"line\">struts.url.https.port该属性类似于struts.url.http.port属性的作用，区别是该属性指定的是Web应用的加密服务端口。   </div><div class=\"line\"></div><div class=\"line\">struts.url.includeParams该属性指定Struts 2生成URL时是否包含请求参数。该属性接受none、get和all三个属性值，分别对应于不包含、仅包含GET类型请求参数和包含全部请求参数。   </div><div class=\"line\"></div><div class=\"line\">struts.custom.i18n.resources该属性指定Struts 2应用所需要的国际化资源文件，如果有多份国际化资源文件，则多个资源文件的文件名以英文逗号（,）隔开。   </div><div class=\"line\"></div><div class=\"line\">struts.dispatcher.parametersWorkaround 对于某些Java EE服务器，不支持HttpServlet Request调用getParameterMap()方法，此时可以设置该属性值为true来解决该问题。该属性的默认值是false。对于WebLogic、Orion和OC4J服务器，通常应该设置该属性为true。   </div><div class=\"line\"></div><div class=\"line\">struts.freemarker.manager.classname 该属性指定Struts 2使用的FreeMarker管理器。该属性的默认值是org.apache.struts2.views.freemarker.FreemarkerManager，这是Struts 2内建的FreeMarker管理器。  </div><div class=\"line\"></div><div class=\"line\">struts.freemarker.wrapper.altMap该属性只支持true和false两个属性值，默认值是true。通常无需修改该属性值。   </div><div class=\"line\">struts.xslt.nocache 该属性指定XSLT Result是否使用样式表缓存。当应用处于开发阶段时，该属性通常被设置为true；当应用处于产品使用阶段时，该属性通常被设置为false。 </div><div class=\"line\"></div><div class=\"line\">struts.configuration.files 该属性指定Struts 2框架默认加载的配置文件，如果需要指定默认加载多个配置文件，则多个配置文件的文件名之间以英文逗号（,）隔开。该属性的默认值为struts-default.xml,struts-plugin.xml,struts.xml，看到该属性值，读者应该明白为什么Struts 2框架默认加载struts.xml文件了。</div></pre></td></tr></table></figure>\n<h1 id=\"Struts2-包、命名空间、包含的配置\"><a href=\"#Struts2-包、命名空间、包含的配置\" class=\"headerlink\" title=\"Struts2 包、命名空间、包含的配置\"></a>Struts2 包、命名空间、包含的配置</h1><h2 id=\"包配置\"><a href=\"#包配置\" class=\"headerlink\" title=\"包配置\"></a>包配置</h2><p>在Struts2框架中，其核心组件是Action和拦截器等，该框架使用包管理这些组件，在包可以配置多个action，多个拦截器，多个拦截器栈，返回类型。使用 <package> 元素配置包。可以指定4个属性</package></p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>必选</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>是</td>\n<td>指定包的名称，该名称是该包被其他包引用的key值</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>否</td>\n<td>知道该包继承其他包</td>\n</tr>\n<tr>\n<td>namespace</td>\n<td>否</td>\n<td>指定哪个该包的命名空间</td>\n</tr>\n<tr>\n<td>abstract</td>\n<td>否</td>\n<td>指定该包是否是一个抽象包。抽象包中不定义action。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"命名空间配置\"><a href=\"#命名空间配置\" class=\"headerlink\" title=\"命名空间配置\"></a>命名空间配置</h2><p>在Struts2中命名空间用namespace的方式来管理Action<br>因为在Action类中有多个业务处理方法，而客户端请求需要指向不同的方法，此时就需要用命名空间了。<br>例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myPackage\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/tmq\"</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my.test.Login.Action\"</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>welcome.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上述的配置后，name为login的action就可以处理下面的URL请求了<br><a href=\"http://localhost:8080/struts2/tmq/login.action\" target=\"_blank\" rel=\"external\">http://localhost:8080/struts2/tmq/login.action</a><br><a href=\"http://localhot:8080/struts2/login.action\" target=\"_blank\" rel=\"external\">http://localhot:8080/struts2/login.action</a>  </p>\n<p>另一个例子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!--配置myPackage包，默认命名空间为空--&gt;</span>  </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myPackage\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my.test.LoginAction\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>welcome.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Login\"</span>&gt;</span>login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span>  </div><div class=\"line\">  </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myPackage2\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/tmq\"</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my.test.LoginAction2\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>welcome.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Login\"</span>&gt;</span>login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span>  </div><div class=\"line\">       <span class=\"comment\">&lt;!---http://localhost:8080/struts/login.action;会先查询非默认命名空间中的login Action如果没有找到 然后才到默认的命名空间--&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>命名空间注意：</p>\n<ol>\n<li>通过为包指定不同的命名空间，就可以在不同的包中配置name值相同的Action 而框架根据请求的ＵＲＬ，依然可以知道使用那个额Action来处理。如果为一个包指定了默认的命名空间，那么该包下的所有Action，都可以处理这个URL中对应的Action请求。  </li>\n<li>同一个命名空间中的不能包含同名的Action，不同的命名空间中，可以包含相同的Action。  </li>\n</ol>\n</blockquote>\n<h2 id=\"包含\"><a href=\"#包含\" class=\"headerlink\" title=\"包含\"></a>包含</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--_在一个Jsp文件中可以使用&lt;jsp:include&gt;指令，将其他文件包含到该文件中，同样的道理，在struts.xml文件中可以使用包含元素&lt;include&gt;包含其他配置文件--&gt;</span>  </div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.0/EN\" \"http://struts.apache.org/dtds/struts-2.0.dtd\"&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-actionchaining.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-fileupload.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-jsf.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-filedownload.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-conversion.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-freemarker.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">includer</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-tiles.xml\"</span>/&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"struts2配置文件的分类\"><a href=\"#struts2配置文件的分类\" class=\"headerlink\" title=\"struts2配置文件的分类\"></a>struts2配置文件的分类</h1><ol>\n<li>内部配置文件:有struts2自动加载，对其自身进行配置（struts-default.xml,struts-plugin.xml 等）  </li>\n<li>开发人员使用的配置文件：有开发人员使用，用于对web应用进行配置。比如 web.xml，struts.xml struts.propeties. </li>\n</ol>\n<h1 id=\"配置文件的作用详情\"><a href=\"#配置文件的作用详情\" class=\"headerlink\" title=\"配置文件的作用详情\"></a>配置文件的作用详情</h1><table>\n<thead>\n<tr>\n<th>配置文件</th>\n<th>是否可选</th>\n<th>位置（相对webapp）</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>web.xml</td>\n<td>否</td>\n<td>/WEB-INF/</td>\n<td>web部署的描述文件，包括所有必须的框架组件</td>\n</tr>\n<tr>\n<td>struts.xml</td>\n<td>是</td>\n<td>/WEB-INF/</td>\n<td>Struts2框架的主要配置文件，包含action的映射，result映射和拦截器配置等</td>\n</tr>\n<tr>\n<td>struts.properties</td>\n<td>是</td>\n<td>/WEB-INF/classes</td>\n<td>Struts2框架的属性配置文件</td>\n</tr>\n<tr>\n<td>struts-default.xml</td>\n<td>是</td>\n<td>/WEB-INF/lib/struts2-core-x.x.x.jar</td>\n<td>Struts2框架提供的默认配置</td>\n</tr>\n<tr>\n<td>struts-plugin.xml</td>\n<td>是</td>\n<td>/WEB-INF/lib/struts-xxx-plugin.jar</td>\n<td>Struts2框架的插件的配置文件</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"struts-xml\"><a href=\"#struts-xml\" class=\"headerlink\" title=\"struts.xml\"></a>struts.xml</h1><ol>\n<li>在Struts2框架中，struts.xml文件具有的重要作用，因为应用中的所有常量 action 拦截器 几乎都配置在这个文件中。  </li>\n<li>struts.xml 文件通常放在web应用的WEB-INF/class目录中，在该目录下的struts.xml文件可以被Struts2框架自动加载  </li>\n<li>Struts2框架提供了struts.xml文件的DTD（Document Type Definition 文档类型定义）在Struts2的核心struts-core.x.x.jar 包含了struts.-2.0.dtd 该文件就是struts.xml 文件和struts-default.xml的DTD  </li>\n</ol>\n<p>struts：package<em> ，incliude</em> bean<em> constant</em> </p>\n<p>package：result-type? interceptors? default-interceptor-ref? default-aciton-ref?<br>​        global-results? action* </p>\n<p>action<em> : param</em> result<em> interceptor-ref   exception-mapping</em> </p>\n<h1 id=\"strut-default-xml\"><a href=\"#strut-default-xml\" class=\"headerlink\" title=\"strut-default.xml\"></a>strut-default.xml</h1><ol>\n<li><p>struts-default.xml 文件是Struts2框架的基础配置文件，为框架体统默认的配置，例如在前面struts.xml文件有如下的代码  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;package name=&quot;default&quot; extends=&quot;struts-default&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在Struts2核心包sturts2-core.x.x.jar 可以找到struts-default.xml 文件 该文件定义在struts-default包，也就是我们平常写的struts.xml 自定义的包 extendx struts-default  </p>\n</li>\n</ol>\n<h1 id=\"struts-properties文件\"><a href=\"#struts-properties文件\" class=\"headerlink\" title=\"struts.properties文件\"></a>struts.properties文件</h1><p>struts.properties文件是一个属性定义文件,在该文件中可以定义Struts2框架中大量的属性值和常量等，通过修改struts.properties文件中的内容，可以实现Struts2框架中的参数配置的修改。  </p>\n<p>struts.properties 文件中的内容 严格遵循标准的键值对 Key-value 的形式 例如:  struts.custom.i18n.resources=globalMessage  </p>\n<h1 id=\"struts-properties-文件中的键\"><a href=\"#struts-properties-文件中的键\" class=\"headerlink\" title=\"struts.properties 文件中的键\"></a>struts.properties 文件中的键</h1><table>\n<thead>\n<tr>\n<th>struts.i18n.encoding</th>\n<th>指定web应用的默认编码集。如果需要获取中文请求，可以将该值设置为GBK  GB2312</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>struts.custom.i18n.resources</td>\n<td>指定struts2应用需要加载的国际化资源文件，多个资源文件中间用 英文逗号分开。</td>\n</tr>\n<tr>\n<td>struts.locale</td>\n<td>指定web 应用的默认Locale</td>\n</tr>\n<tr>\n<td>struts.configuration.files</td>\n<td>指定struts2默认的加载配置文件。多个配置文件用英文逗号分开，其默认值是struts-default.xml struts-plugin.xml struts.xml</td>\n</tr>\n<tr>\n<td>struts.ui.theme</td>\n<td>指定视图标签的默认视图主题，其默认值为xhtml</td>\n</tr>\n<tr>\n<td>struts.i18n.reload</td>\n<td>设置是否每次HTTP请求到达时，系统都重新加载资源文件， 其默认值是 false。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"struts-plugin-xml-文件-主要用于集成其他技术\"><a href=\"#struts-plugin-xml-文件-主要用于集成其他技术\" class=\"headerlink\" title=\"struts-plugin.xml 文件 主要用于集成其他技术\"></a>struts-plugin.xml 文件 主要用于集成其他技术</h1><ol>\n<li>struts-plugin.xml文件表示了Struts2框架中的插件配置文件，在该文件中定义了组件的包空间，拦截器，和其他配置常量等  </li>\n<li>在Struts2框架中的lib文件夹下，除了包含Struts2的核心包之外，还包含了多个插件，这些插件 文件都是jar的形式存在，文件名中包含有-plugin。  </li>\n</ol>\n<p><img src=\"/2017/05/13/struts2配置文件/struts.xml\" alt=\"\"></p>\n<h1 id=\"常量的配置\"><a href=\"#常量的配置\" class=\"headerlink\" title=\"常量的配置\"></a>常量的配置</h1><blockquote>\n<p>1.配置的位置 ：struts.xml  strust.properties 也可以在其他配置文件中。  </p>\n<p>2.Strust2框架按照一下的顺序加载Strust2常量  </p>\n<p>struts-default.xml 存放在struts-core.x.x.jar中<br>struts-plugin.xml存放在struts-x.x.x.jar等struts插件jar文件中<br>strust-xml　web应用中Struts2默认的配置文件<br>struts.properties. struts2的属性配置文件<br>web.xml web应用的配置   </p>\n<p>注意：如果后者 中定义了与前者相同的属性，那么后者中的值覆盖前面的值。 </p>\n</blockquote>\n<h2 id=\"常量的配置元素\"><a href=\"#常量的配置元素\" class=\"headerlink\" title=\"常量的配置元素\"></a>常量的配置元素</h2><h2 id=\"struts-xml中\"><a href=\"#struts-xml中\" class=\"headerlink\" title=\"struts.xml中\"></a>struts.xml中</h2><blockquote>\n<p><constant> 元素配置属性常量时，需要指定一下两个必填属性：<br>   name: 指定常量的名称<br>   value：指定的常量的值<br>例如：　在struts.xml中配置字符集编码为gb2312 代码如下  </constant></p>\n<constant name=\"struts.i18n.encoding\" value=\"gb2312\">  \n\n</constant></blockquote>\n<h2 id=\"Struts-properties-xml中\"><a href=\"#Struts-properties-xml中\" class=\"headerlink\" title=\"Struts.properties.xml中\"></a>Struts.properties.xml中</h2><blockquote>\n<p>如果在struts.properties中定义 代码如下  </p>\n<p>  struts.i18n.encoding=gb2312</p>\n<p>//struts.custom.i18n.resource=globalMessage  </p>\n</blockquote>\n<h2 id=\"web-xml中\"><a href=\"#web-xml中\" class=\"headerlink\" title=\"web.xml中\"></a>web.xml中</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>struts2<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.FilterDispatcher<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span>  </div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">&lt;!--配置上面拦截器的初始化参数 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>struts.i18n.encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>gb2312<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.i18n.encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span>   </div><div class=\"line\">指定Web应用的默认编码集，相当于调用HttpServletRequest的setCharacterEncoding方法   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.action.extension\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"do\"</span> /&gt;</span>   </div><div class=\"line\">该属性指定需要Struts 2处理的请求后缀，该属性的默认值是action，即所有匹配*.action的请求都由Struts 2处理。    如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（，）隔开。     </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.serve.static.browserCache \"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>   </div><div class=\"line\">设置浏览器是否缓存静态内容，默认值为true，开发阶段最好false   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.configuration.xml.reload\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span>   </div><div class=\"line\">当struts的配置文件修改后，系统是否自动重新加载该文件，默认值为false，开发阶段最好true   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.devMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span>   </div><div class=\"line\">开发模式下设为true，这样可以打印出更详细的错误信息   </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">constant</span> <span class=\"attr\">name</span>=<span class=\"string\">\"struts.enable.DynamicMethodInvocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>   </div><div class=\"line\">动态方法调用,可以解决多个请求对应一个Servlet的问题,后面详细讲解,默认为true,关闭则设为false.   </div><div class=\"line\">下面是其他的一些常量，使用方法和上面相同。  </div><div class=\"line\"></div><div class=\"line\">struts.serve.static.browserCache: 该属性设置浏览器是否缓存静态内容。当应用处于开发阶段时，我们希望每次请求都获得服务器的最新响应，则可设置该属性为false。   </div><div class=\"line\"></div><div class=\"line\">struts.enable.DynamicMethodInvocation 该属性设置Struts 2是否支持动态方法调用，该属性的默认值是true。如果需要关闭动态方法调用，则可设置该属性为false。  </div><div class=\"line\"></div><div class=\"line\">struts.enable.SlashesInActionNames 该属性设置Struts 2是否允许在Action名中使用斜线，该属性的默认值是false。如果开发者希望允许在Action名中使用斜线，则可设置该属性为true。  </div><div class=\"line\"></div><div class=\"line\">struts.tag.altSyntax 该属性指定是否允许在Struts 2标签中使用表达式语法，因为通常都需要在标签中使用表达式语法，故此属性应该设置为true，该属性的默认值是true。   </div><div class=\"line\"></div><div class=\"line\">struts.devMode该属性设置Struts 2应用是否使用开发模式。如果设置该属性为true，则可以在应用出错时显示更多、更友好的出错提示。该属性只接受true和flase两个值，该属性的默认值是false。通常，应用在开发阶段，将该属性设置为true，当进入产品发布阶段后，则该属性设置为false。  </div><div class=\"line\"></div><div class=\"line\">struts.i18n.reload该属性设置是否每次HTTP请求到达时，系统都重新加载资源文件。该属性默认值是false。在开发阶段将该属性设置为true会更有利于开发，但在产品发布阶段应将该属性设置为false。  </div><div class=\"line\">提示 开发阶段将该属性设置了true，将可以在每次请求时都重新加载国际化资源文件，从而可以让开发者看到实时开发效果；产品发布阶段应该将该属性设置为false，是为了提供响应性能，每次请求都需要重新加载资源文件会大大降低应用的性能。   </div><div class=\"line\"></div><div class=\"line\">struts.ui.theme该属性指定视图标签默认的视图主题，该属性的默认值是xhtml。   </div><div class=\"line\"></div><div class=\"line\">struts.ui.templateDir该属性指定视图主题所需要模板文件的位置，该属性的默认值是template，即默认加载template路径下的模板文件。   </div><div class=\"line\"></div><div class=\"line\">struts.ui.templateSuffix该属性指定模板文件的后缀，该属性的默认属性值是ftl。该属性还允许使用ftl、vm或jsp，分别对应FreeMarker、Velocity和JSP模板。  </div><div class=\"line\"></div><div class=\"line\">struts.configuration.xml.reload该属性设置当struts.xml文件改变后，系统是否自动重新加载该文件。该属性的默认值是false。   </div><div class=\"line\"></div><div class=\"line\">struts.velocity.configfile该属性指定Velocity框架所需的velocity.properties文件的位置。该属性的默认值为velocity.properties。   </div><div class=\"line\"></div><div class=\"line\">struts.velocity.contexts该属性指定Velocity框架的Context位置，如果该框架有多个Context，则多个Context之间以英文逗号（,）隔开。   </div><div class=\"line\"></div><div class=\"line\">struts.velocity.toolboxlocation该属性指定Velocity框架的toolbox的位置。   </div><div class=\"line\"></div><div class=\"line\">struts.url.http.port该属性指定Web应用所在的监听端口。该属性通常没有太大的用户，只是当Struts 2需要生成URL时（例如Url标签），该属性才提供Web应用的默认端口。   </div><div class=\"line\"></div><div class=\"line\">struts.url.https.port该属性类似于struts.url.http.port属性的作用，区别是该属性指定的是Web应用的加密服务端口。   </div><div class=\"line\"></div><div class=\"line\">struts.url.includeParams该属性指定Struts 2生成URL时是否包含请求参数。该属性接受none、get和all三个属性值，分别对应于不包含、仅包含GET类型请求参数和包含全部请求参数。   </div><div class=\"line\"></div><div class=\"line\">struts.custom.i18n.resources该属性指定Struts 2应用所需要的国际化资源文件，如果有多份国际化资源文件，则多个资源文件的文件名以英文逗号（,）隔开。   </div><div class=\"line\"></div><div class=\"line\">struts.dispatcher.parametersWorkaround 对于某些Java EE服务器，不支持HttpServlet Request调用getParameterMap()方法，此时可以设置该属性值为true来解决该问题。该属性的默认值是false。对于WebLogic、Orion和OC4J服务器，通常应该设置该属性为true。   </div><div class=\"line\"></div><div class=\"line\">struts.freemarker.manager.classname 该属性指定Struts 2使用的FreeMarker管理器。该属性的默认值是org.apache.struts2.views.freemarker.FreemarkerManager，这是Struts 2内建的FreeMarker管理器。  </div><div class=\"line\"></div><div class=\"line\">struts.freemarker.wrapper.altMap该属性只支持true和false两个属性值，默认值是true。通常无需修改该属性值。   </div><div class=\"line\">struts.xslt.nocache 该属性指定XSLT Result是否使用样式表缓存。当应用处于开发阶段时，该属性通常被设置为true；当应用处于产品使用阶段时，该属性通常被设置为false。 </div><div class=\"line\"></div><div class=\"line\">struts.configuration.files 该属性指定Struts 2框架默认加载的配置文件，如果需要指定默认加载多个配置文件，则多个配置文件的文件名之间以英文逗号（,）隔开。该属性的默认值为struts-default.xml,struts-plugin.xml,struts.xml，看到该属性值，读者应该明白为什么Struts 2框架默认加载struts.xml文件了。</div></pre></td></tr></table></figure>\n<h1 id=\"Struts2-包、命名空间、包含的配置\"><a href=\"#Struts2-包、命名空间、包含的配置\" class=\"headerlink\" title=\"Struts2 包、命名空间、包含的配置\"></a>Struts2 包、命名空间、包含的配置</h1><h2 id=\"包配置\"><a href=\"#包配置\" class=\"headerlink\" title=\"包配置\"></a>包配置</h2><p>在Struts2框架中，其核心组件是Action和拦截器等，该框架使用包管理这些组件，在包可以配置多个action，多个拦截器，多个拦截器栈，返回类型。使用 <package> 元素配置包。可以指定4个属性</package></p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>必选</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>是</td>\n<td>指定包的名称，该名称是该包被其他包引用的key值</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>否</td>\n<td>知道该包继承其他包</td>\n</tr>\n<tr>\n<td>namespace</td>\n<td>否</td>\n<td>指定哪个该包的命名空间</td>\n</tr>\n<tr>\n<td>abstract</td>\n<td>否</td>\n<td>指定该包是否是一个抽象包。抽象包中不定义action。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"命名空间配置\"><a href=\"#命名空间配置\" class=\"headerlink\" title=\"命名空间配置\"></a>命名空间配置</h2><p>在Struts2中命名空间用namespace的方式来管理Action<br>因为在Action类中有多个业务处理方法，而客户端请求需要指向不同的方法，此时就需要用命名空间了。<br>例如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myPackage\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/tmq\"</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my.test.Login.Action\"</span>&gt;</span>  </div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>welcome.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上述的配置后，name为login的action就可以处理下面的URL请求了<br><a href=\"http://localhost:8080/struts2/tmq/login.action\" target=\"_blank\" rel=\"external\">http://localhost:8080/struts2/tmq/login.action</a><br><a href=\"http://localhot:8080/struts2/login.action\" target=\"_blank\" rel=\"external\">http://localhot:8080/struts2/login.action</a>  </p>\n<p>另一个例子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!--配置myPackage包，默认命名空间为空--&gt;</span>  </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myPackage\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my.test.LoginAction\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>welcome.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Login\"</span>&gt;</span>login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span>  </div><div class=\"line\">  </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myPackage2\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"struts-default\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/tmq\"</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"my.test.LoginAction2\"</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"success\"</span>&gt;</span>welcome.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Login\"</span>&gt;</span>login.jsp<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span>  </div><div class=\"line\">       <span class=\"comment\">&lt;!---http://localhost:8080/struts/login.action;会先查询非默认命名空间中的login Action如果没有找到 然后才到默认的命名空间--&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>命名空间注意：</p>\n<ol>\n<li>通过为包指定不同的命名空间，就可以在不同的包中配置name值相同的Action 而框架根据请求的ＵＲＬ，依然可以知道使用那个额Action来处理。如果为一个包指定了默认的命名空间，那么该包下的所有Action，都可以处理这个URL中对应的Action请求。  </li>\n<li>同一个命名空间中的不能包含同名的Action，不同的命名空间中，可以包含相同的Action。  </li>\n</ol>\n</blockquote>\n<h2 id=\"包含\"><a href=\"#包含\" class=\"headerlink\" title=\"包含\"></a>包含</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--_在一个Jsp文件中可以使用&lt;jsp:include&gt;指令，将其他文件包含到该文件中，同样的道理，在struts.xml文件中可以使用包含元素&lt;include&gt;包含其他配置文件--&gt;</span>  </div><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE struts PUBLIC \"-//Apache Software Foundation//DTD Struts Configuration 2.0/EN\" \"http://struts.apache.org/dtds/struts-2.0.dtd\"&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">struts</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-actionchaining.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-fileupload.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-jsf.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-filedownload.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-conversion.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-freemarker.xml\"</span>/&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">includer</span> <span class=\"attr\">file</span>=<span class=\"string\">\"struts-tiles.xml\"</span>/&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">struts</span>&gt;</span></div></pre></td></tr></table></figure>\n"},{"title":"老司机的踩坑提醒","updated":"2017-05-08T22:38:43.000Z","date":"2017-05-04T12:46:25.000Z","_content":"\n<div align=\"center\">\n 错误和问题？在所难免，来和我一起看看吧！\n</div>\n\n<!-- more -->\n\n## 第一篇 ##\n\n#### 1. \n\ntomcat报\n\n\tPort already in use: xxxx\n\n问题原因：当前有程序占用xxxx端口，需要将它结束进程。\n​\t\n\tlsof -i:8087  \n用以显示符合条件的进程情况\n\n\tkill *pid*\t\n\n\n#### 2. \n\n在执行`hexo -s`时，如果\n\n```\nERROR Plugin load failed: hexo-renderer-sass\n```\n\n>  npm rebuild node-sass --force\n\n使用上面这句可以解决问题。\n\n\n\n如果\n\n```\n Error: Cannot find module './build/Release/DTraceProviderBindings'\n```\n\n>   npm install hexo --no-optional \n\n\n\n\n\n如果\n\n```shell\nFATAL Cannot read property 'replace' of null hexo\n```\n\n原因： 删除了站点配置文件中的 url后面的地址。\n\n\n\n#### 4.\n\n如果出现\n\n\twarning: LF will be replaced by CRLF in 2017/04/28/firstBlog/index.html.\n\tThe file will have its original line endings in your working directory.\n原因分析：\n\nCRLF -- Carriage-Return Line-Feed 回车换行，回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)\n\n\tgit config --gobal core.autocrlf false  \n\n就可以解决这个问题了\n\n\n\n#### 5.\n\n如果更新了css文件，那么需要把public的css文件删除，然后\n\n```\n$ hexo deploy --generate\n```\n\n\n\n\n\n#### 6. \n\n```\nERROR Deployer not found: git\n```\n\n试试\n\n```Shell\n$ npm install hexo-deployer-git --save\n$ npm install hexo --save\n```\n\n\n\n\n\n#### 7. Spring\n\n> BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext\n\n\n\n原因是\n\n```\n ApplicationContext context = new ClassPathXmlApplicationContext();\n```\n\n没有指定路径。\n\n#### 8. spring \n\n ```Java\nWrite operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.\n ```\n\n\n\n\n\n```xml\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <tx:method name=\"save*\" read-only=\"false\" propagation=\"REQUIRED\"\n                       rollback-for=\"Exception\"/>\n        </tx:attributes>\n    </tx:advice>\n    <aop:config>\n        <aop:pointcut id=\"pointcut1\" expression=\"execution(* me.nini.*.*.*(..))\"/>\n        <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut1\"/>\n    </aop:config>\n\n```\n\n\n\n\n\n#### 9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略\n\n```java\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n```\n\n\n\n#### 10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\n\n在注入bean的时候，类中的bean的字段名可以和xml文件中配置的bean的id不一致。不然就会报\n\n\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n​\t\t\n那么如何解决呢？\n\n只要在具有相同父类型的组件前加上 @Component(\"标识符\")\n\n\n​\t\t\t\n\n> 注意 1 ： 在组件类前加上 @Component(\" 标识符 \") 的作用与在配置文件中配置是一样的。\n\n\n\n> 注意 2 ： 如果不指定 @Qualifier(\" 标识符 \") 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(\" 标识符 \")  的标识符相同。\n>\n> 不然会出错     \n\n\n```Java\n Injection of autowired dependencies failed\n\n Could not autowire field\n```\n\n\n> 注意 3 ： 如果@Component(\" 标识符 \")，重复定义了，那么会出现以下异常\n\n```Java\njava.lang.IllegalStateException: Failed to load ApplicationContext\n\nCaused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]\n\n```\n\n> 注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n\n","source":"_drafts/老司机的踩坑提醒.md","raw":"---\ntitle: 老司机的踩坑提醒\ntags: 技术\nupdated : 2017年5月5日 19:46:16\ndate : 2017/5/4 20:46:25\ncategories:\n- 技术\n---\n\n<div align=\"center\">\n 错误和问题？在所难免，来和我一起看看吧！\n</div>\n\n<!-- more -->\n\n## 第一篇 ##\n\n#### 1. \n\ntomcat报\n\n\tPort already in use: xxxx\n\n问题原因：当前有程序占用xxxx端口，需要将它结束进程。\n​\t\n\tlsof -i:8087  \n用以显示符合条件的进程情况\n\n\tkill *pid*\t\n\n\n#### 2. \n\n在执行`hexo -s`时，如果\n\n```\nERROR Plugin load failed: hexo-renderer-sass\n```\n\n>  npm rebuild node-sass --force\n\n使用上面这句可以解决问题。\n\n\n\n如果\n\n```\n Error: Cannot find module './build/Release/DTraceProviderBindings'\n```\n\n>   npm install hexo --no-optional \n\n\n\n\n\n如果\n\n```shell\nFATAL Cannot read property 'replace' of null hexo\n```\n\n原因： 删除了站点配置文件中的 url后面的地址。\n\n\n\n#### 4.\n\n如果出现\n\n\twarning: LF will be replaced by CRLF in 2017/04/28/firstBlog/index.html.\n\tThe file will have its original line endings in your working directory.\n原因分析：\n\nCRLF -- Carriage-Return Line-Feed 回车换行，回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)\n\n\tgit config --gobal core.autocrlf false  \n\n就可以解决这个问题了\n\n\n\n#### 5.\n\n如果更新了css文件，那么需要把public的css文件删除，然后\n\n```\n$ hexo deploy --generate\n```\n\n\n\n\n\n#### 6. \n\n```\nERROR Deployer not found: git\n```\n\n试试\n\n```Shell\n$ npm install hexo-deployer-git --save\n$ npm install hexo --save\n```\n\n\n\n\n\n#### 7. Spring\n\n> BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext\n\n\n\n原因是\n\n```\n ApplicationContext context = new ClassPathXmlApplicationContext();\n```\n\n没有指定路径。\n\n#### 8. spring \n\n ```Java\nWrite operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.\n ```\n\n\n\n\n\n```xml\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <tx:method name=\"save*\" read-only=\"false\" propagation=\"REQUIRED\"\n                       rollback-for=\"Exception\"/>\n        </tx:attributes>\n    </tx:advice>\n    <aop:config>\n        <aop:pointcut id=\"pointcut1\" expression=\"execution(* me.nini.*.*.*(..))\"/>\n        <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut1\"/>\n    </aop:config>\n\n```\n\n\n\n\n\n#### 9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略\n\n```java\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n```\n\n\n\n#### 10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\n\n在注入bean的时候，类中的bean的字段名可以和xml文件中配置的bean的id不一致。不然就会报\n\n\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n​\t\t\n那么如何解决呢？\n\n只要在具有相同父类型的组件前加上 @Component(\"标识符\")\n\n\n​\t\t\t\n\n> 注意 1 ： 在组件类前加上 @Component(\" 标识符 \") 的作用与在配置文件中配置是一样的。\n\n\n\n> 注意 2 ： 如果不指定 @Qualifier(\" 标识符 \") 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(\" 标识符 \")  的标识符相同。\n>\n> 不然会出错     \n\n\n```Java\n Injection of autowired dependencies failed\n\n Could not autowire field\n```\n\n\n> 注意 3 ： 如果@Component(\" 标识符 \")，重复定义了，那么会出现以下异常\n\n```Java\njava.lang.IllegalStateException: Failed to load ApplicationContext\n\nCaused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]\n\n```\n\n> 注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n\n","slug":"老司机的踩坑提醒","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nb6000bp5uk61amky9o","content":"<div align=\"center\"><br> 错误和问题？在所难免，来和我一起看看吧！<br></div>\n\n<a id=\"more\"></a>\n<h2 id=\"第一篇\"><a href=\"#第一篇\" class=\"headerlink\" title=\"第一篇\"></a>第一篇</h2><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><p>tomcat报</p>\n<pre><code>Port already in use: xxxx\n</code></pre><p>问题原因：当前有程序占用xxxx端口，需要将它结束进程。<br>​<br>    lsof -i:8087<br>用以显示符合条件的进程情况</p>\n<pre><code>kill *pid*    \n</code></pre><h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><p>在执行<code>hexo -s</code>时，如果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Plugin load failed: hexo-renderer-sass</div></pre></td></tr></table></figure>\n<blockquote>\n<p> npm rebuild node-sass –force</p>\n</blockquote>\n<p>使用上面这句可以解决问题。</p>\n<p>如果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>  npm install hexo –no-optional </p>\n</blockquote>\n<p>如果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">FATAL Cannot read property 'replace' of null hexo</div></pre></td></tr></table></figure>\n<p>原因： 删除了站点配置文件中的 url后面的地址。</p>\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h4><p>如果出现</p>\n<pre><code>warning: LF will be replaced by CRLF in 2017/04/28/firstBlog/index.html.\nThe file will have its original line endings in your working directory.\n</code></pre><p>原因分析：</p>\n<p>CRLF – Carriage-Return Line-Feed 回车换行，回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)</p>\n<pre><code>git config --gobal core.autocrlf false  \n</code></pre><p>就可以解决这个问题了</p>\n<h4 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h4><p>如果更新了css文件，那么需要把public的css文件删除，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy --generate</div></pre></td></tr></table></figure>\n<h4 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a>6.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Deployer not found: git</div></pre></td></tr></table></figure>\n<p>试试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</div><div class=\"line\"><span class=\"meta\">$</span> npm install hexo --save</div></pre></td></tr></table></figure>\n<h4 id=\"7-Spring\"><a href=\"#7-Spring\" class=\"headerlink\" title=\"7. Spring\"></a>7. Spring</h4><blockquote>\n<p>BeanFactory not initialized or already closed - call ‘refresh’ before accessing beans via the ApplicationContext</p>\n</blockquote>\n<p>原因是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ApplicationContext context = new ClassPathXmlApplicationContext();</div></pre></td></tr></table></figure>\n<p>没有指定路径。</p>\n<h4 id=\"8-spring\"><a href=\"#8-spring\" class=\"headerlink\" title=\"8. spring\"></a>8. spring</h4> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Write operations are not allowed in read-<span class=\"function\">only <span class=\"title\">mode</span> <span class=\"params\">(FlushMode.MANUAL)</span>: Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span></span></div><div class=\"line\">                       <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pointcut1\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* me.nini.*.*.*(..))\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointcut1\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略\"><a href=\"#9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略\" class=\"headerlink\" title=\"9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略\"></a>9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Id</span></div><div class=\"line\"><span class=\"meta\">@GeneratedValue</span>(strategy= GenerationType.IDENTITY)</div></pre></td></tr></table></figure>\n<h4 id=\"10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\"><a href=\"#10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\" class=\"headerlink\" title=\"10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\"></a>10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误</h4><p>在注入bean的时候，类中的bean的字段名可以和xml文件中配置的bean的id不一致。不然就会报</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>\n<p>​<br>那么如何解决呢？</p>\n<p>只要在具有相同父类型的组件前加上 @Component(“标识符”)</p>\n<p>​            </p>\n<blockquote>\n<p>注意 1 ： 在组件类前加上 @Component(“ 标识符 “) 的作用与在配置文件中配置是一样的。</p>\n<p>注意 2 ： 如果不指定 @Qualifier(“ 标识符 “) 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(“ 标识符 “)  的标识符相同。</p>\n<p>不然会出错     </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Injection of autowired dependencies failed</div><div class=\"line\"></div><div class=\"line\">Could not autowire field</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 3 ： 如果@Component(“ 标识符 “)，重复定义了，那么会出现以下异常</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.IllegalStateException: Failed to load ApplicationContext</div><div class=\"line\"></div><div class=\"line\">Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br> 错误和问题？在所难免，来和我一起看看吧！<br></div>","more":"<h2 id=\"第一篇\"><a href=\"#第一篇\" class=\"headerlink\" title=\"第一篇\"></a>第一篇</h2><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><p>tomcat报</p>\n<pre><code>Port already in use: xxxx\n</code></pre><p>问题原因：当前有程序占用xxxx端口，需要将它结束进程。<br>​<br>    lsof -i:8087<br>用以显示符合条件的进程情况</p>\n<pre><code>kill *pid*    \n</code></pre><h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><p>在执行<code>hexo -s</code>时，如果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Plugin load failed: hexo-renderer-sass</div></pre></td></tr></table></figure>\n<blockquote>\n<p> npm rebuild node-sass –force</p>\n</blockquote>\n<p>使用上面这句可以解决问题。</p>\n<p>如果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>  npm install hexo –no-optional </p>\n</blockquote>\n<p>如果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">FATAL Cannot read property 'replace' of null hexo</div></pre></td></tr></table></figure>\n<p>原因： 删除了站点配置文件中的 url后面的地址。</p>\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h4><p>如果出现</p>\n<pre><code>warning: LF will be replaced by CRLF in 2017/04/28/firstBlog/index.html.\nThe file will have its original line endings in your working directory.\n</code></pre><p>原因分析：</p>\n<p>CRLF – Carriage-Return Line-Feed 回车换行，回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)</p>\n<pre><code>git config --gobal core.autocrlf false  \n</code></pre><p>就可以解决这个问题了</p>\n<h4 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h4><p>如果更新了css文件，那么需要把public的css文件删除，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy --generate</div></pre></td></tr></table></figure>\n<h4 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a>6.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Deployer not found: git</div></pre></td></tr></table></figure>\n<p>试试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</div><div class=\"line\"><span class=\"meta\">$</span> npm install hexo --save</div></pre></td></tr></table></figure>\n<h4 id=\"7-Spring\"><a href=\"#7-Spring\" class=\"headerlink\" title=\"7. Spring\"></a>7. Spring</h4><blockquote>\n<p>BeanFactory not initialized or already closed - call ‘refresh’ before accessing beans via the ApplicationContext</p>\n</blockquote>\n<p>原因是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ApplicationContext context = new ClassPathXmlApplicationContext();</div></pre></td></tr></table></figure>\n<p>没有指定路径。</p>\n<h4 id=\"8-spring\"><a href=\"#8-spring\" class=\"headerlink\" title=\"8. spring\"></a>8. spring</h4> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Write operations are not allowed in read-<span class=\"function\">only <span class=\"title\">mode</span> <span class=\"params\">(FlushMode.MANUAL)</span>: Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span></span></div><div class=\"line\">                       <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pointcut1\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* me.nini.*.*.*(..))\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointcut1\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略\"><a href=\"#9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略\" class=\"headerlink\" title=\"9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略\"></a>9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Id</span></div><div class=\"line\"><span class=\"meta\">@GeneratedValue</span>(strategy= GenerationType.IDENTITY)</div></pre></td></tr></table></figure>\n<h4 id=\"10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\"><a href=\"#10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\" class=\"headerlink\" title=\"10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\"></a>10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误</h4><p>在注入bean的时候，类中的bean的字段名可以和xml文件中配置的bean的id不一致。不然就会报</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>\n<p>​<br>那么如何解决呢？</p>\n<p>只要在具有相同父类型的组件前加上 @Component(“标识符”)</p>\n<p>​            </p>\n<blockquote>\n<p>注意 1 ： 在组件类前加上 @Component(“ 标识符 “) 的作用与在配置文件中配置是一样的。</p>\n<p>注意 2 ： 如果不指定 @Qualifier(“ 标识符 “) 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(“ 标识符 “)  的标识符相同。</p>\n<p>不然会出错     </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Injection of autowired dependencies failed</div><div class=\"line\"></div><div class=\"line\">Could not autowire field</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 3 ： 如果@Component(“ 标识符 “)，重复定义了，那么会出现以下异常</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.IllegalStateException: Failed to load ApplicationContext</div><div class=\"line\"></div><div class=\"line\">Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>"},{"title":"Activity的生命周期和启动模式","date":"2017-06-07T16:05:40.000Z","_content":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Activity 的生命周期\n\n\n\n![](Activity生命周期.png)\n\n## 情形一\n\n例如：运行一个 Activity ，不进行任何的页面跳转，然后按下返回键结束。\n\n```shell\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onCreate: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStart: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onResume: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onPause: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStop: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onDestory: A\n```\n\n## 情形二\n\n（1）当第一次启动 A Activity 的时候，会按照下面的顺序执行。\n\n```shell\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onCreate: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStart: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onResume: A\n```\n\n`onStart` 的时候 Activity 还在后台，`onResume` 的时候才会显示到前台。\n\n\n\n（2）这时候点击按钮启动 B Acitivity 的时候\n\n```Shell\n05-30 12:00:56.869 3561-3561/me.nijun.launchmode I/AActivity: onPause: A\n05-30 12:21:03.756 4030-4030/me.nijun.launchmode I/BActivity: onCreate: B\n05-30 12:00:56.882 3561-3561/me.nijun.launchmode I/BActivity: onStart: B\n05-30 12:00:56.883 3561-3561/me.nijun.launchmode I/BActivity: onResume: B\n05-30 12:00:57.310 3561-3561/me.nijun.launchmode I/AActivity: onSaveInstanceState: A\n05-30 12:00:57.312 3561-3561/me.nijun.launchmode I/AActivity: onStop: A\n```\n\n可见，首先调用旧Activity的 `onpause` 方法，`onpause` 一定在要启动的新 Activity 之前执行，只有它执行完之后，新的 Activity 才会启动。正因为如此，我们在 onPause方法中不能重量级的操作，应当在 onStop 中处理操作，使新 Activity 尽快显示出来。\n\n`onSaveInstanceState` 方法会在 `onStop` 方法之前执行，但具体是否在`onPause` 之前还是之后是不确定的。\n\n`onStop` 方法是否执行是看 Activity 是否可见，如果用户回到桌面（不可见了），那么就会调用这个方法。但是如果如果调用新的 Activity 采用了新透明的主题，那么是**不会调用`onStop`** 方法的。\n\n\n\n（3）当用户按下返回键的时候\n\n 这时候 BAcitivity 将被销毁。在 `onPause` 执行后，并不会直接执行 `onStop` 而是会先执行 AActivity 的 onRestart 、onStart、onResume 方法。\n\n```shell\n05-30 12:21:11.422 4030-4030/me.nijun.launchmode I/BActivity: onPause: B\n05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onRestart: A\n05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onStart: A\n05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onResume: A\n05-30 12:21:11.764 4030-4030/me.nijun.launchmode I/BActivity: onStop: B\n05-30 12:21:11.765 4030-4030/me.nijun.launchmode I/BActivity: onDestroy: B\n```\n\n（4）当Activity被系统回收后再次打开，生命周期回调方法和 （1）一样，但是不是所有过程都一样。\n\n小结：\n\n1. onCreate 和 onDestory 是配对的，代表这创建和销毁。\n2. onStart 和 onStop 是配对的，代表着 Activity 是否可见。\n3. onResume 和 onPause 是配对的，代表的 Activity 是否在前台。\n4. A Activity 的生命周期：\n   1. A 被 B 完全遮挡住了：onCreate->onStart->onResume->onPause->onStop->onRestart->onStart->onResume。\n   2. A 被 B 部分遮挡住了：onCreate->onStart->onResume->onPause->onResume。\n\n## 情形三\n\n我们启动 Activity 之后，然后点击按钮弹出 AlertDialog 。\n\nActivity 的启动过程：onCreate->onStart->onResume\n\n因为当启动和退出 Dialog 的时候 ，Activity 的状态始终没有改变。这样看来，Dialog 是 Activity 内部的界面，不会影响到 Activity 的生命周期。\n\n\n\n## 异常情况\n\n\n\n（1）相关资源的配置发生改变导致 Activity 被杀死并重新创建。\n\n例子：比如用户转换屏幕，从竖屏切换到横屏。\n\n这时候Activity被销毁，其 onPause、onStop、onDestroy都会被调用。这个过程中也会调用 onSaveInstanceState 方法来保存当前Activity的状态，这个方法会在onStop之前执行，顺序与onPause无关。注意：在正常情况下是不会调用这个方法的。\n\n当Activity重新创建后，系统会调用 onRestoreInstanceState 方法，并把 onSaveInstanceState 保存的 Bundle 对象传递给onRestoreInstanceState和onCreate方法。\n\n从时序上看，onRestoreInstanceState 会在 onStart 方法之后调用。\n\n```java\n05-30 12:34:27.247 4030-4030/me.nijun.launchmode I/AActivity: onPause: A\n05-30 12:34:27.247 4030-4030/me.nijun.launchmode I/AActivity: onSaveInstanceState: A\n05-30 12:34:27.249 4030-4030/me.nijun.launchmode I/AActivity: onStop: A\n05-30 12:34:27.249 4030-4030/me.nijun.launchmode I/AActivity: onDestroy: A\n05-30 12:34:27.262 4030-4030/me.nijun.launchmode I/AActivity: onCreate:  A\n05-30 12:34:27.262 4030-4030/me.nijun.launchmode I/AActivity: onStart: A\n05-30 12:34:27.262 4030-4030/me.nijun.launchmode I/AActivity: onRestoreInstanceState: restore extra_test test\n05-30 12:34:27.263 4030-4030/me.nijun.launchmode I/AActivity: onResume: A\n  \n  public void main(){\n    \n  }\n```\n\n\n\n### 扩展\n\nView 与 Activity 一样，也有 onSaveInstanceState 和 onRestoreInstanceState 两个方法。\n\n关于保存和恢复View层次结构，系统的工作流程是这样的：首先Activity 在异常中止的情况下，会调用 onSaveInstanceState 去保存\u0001数据。 Activity 会委托 Window 去保存数据，Window再委托他上面的顶层容器去保存。顶层容器是一个ViewGroup，一般来说是 DecorView。顶层容器再去一一通知它的子元素去保存数据。\n\n这是一种典型的委托思想，上层委托下层，父容器委托子元素去处理意见事情。这在Android中有很多实现，比如**View的绘制过程、事件分发**。\n\nonSaveInstanceState 只会在 Activity 即将销毁并且有机会重新显示的情况下才会去调用。\n\n### 还有一点\n\nonRestoreInstanceState 和 onCreate 的区别：\n\nonRestoreInstanceState 一旦被调用，其参数 Bundle 一定有值，而onCreate在正常启动的时候其参数Bundle为null。\n\n官方推荐：使用 **onRestoreInstanceState** 去恢复保存的数据。\n\n\n\n\n\n### 解决办法\n\n如果不想要系统重新创建 Activity的话，可以指定在 AndroidManifest.xml 中指定 android:configChanges 的属性。\n\n最好是加上 orientation|screenSize|keyboardHidden 这三个值，因为 Android 13 （ API13 ）之后，screen size 也会跟着屏幕横竖屏切换而改变。可以设置下列语句\n\n```\nandroid:configChanges=\"orientation|screenSize|keyboardHidden\"\n```\n\n\n\n\n\n# Activity 的LaunchMode\n\n路漫漫其修远兮，吾将上下而求索。---屈原《离骚》\n\n今天，花了一个晚上的时间整理了一下 Activity 的 LaunchMode 启动模式。既然下定决心要走这一行，那么就从最基础的开始学起。\n\n在 Android 中，一共由四种启动模式，分别是\n\n1. standard\n2. singleTop\n3. singleTask\n4. singleInstance\n\n这里，我把这四个分成两组。\n\n其中，`standard `  和 `singleTop` Activity 为一类，使用 `standard` 或 `singleTop` 启动模式的 Activity 可多次实例化。可以属于任何任务栈，并且可以位于活动堆栈的任何位置。但是通常，它们被启动到所调用的任务中栈中。\n\n\n\n其中，standard 模式很简单，调用几次就创建几次。singleTop 与之类似，不同在于如果要启动的 Activity 已经在栈顶了，那么就不创建直接复用，并且调用 onNewIntent 方法。如果一个现有实例虽在目标任务内，但未处于堆栈顶部，或者虽然位于堆栈顶部，但不在目标任务中 — 则系统会创建一个新实例并将其推送到堆栈上。\n\n\n\n`singleTask` 和 `singleInstance` 为另一类。`singleTask` 和 `singleInstance` Activity 只能启动任务。 它们始终位于 Activity 堆栈的**栈顶**，并且每个栈中只能有一个相同的 Activity 。\n\nsingleTask 和 singleInstance 同样只在一个方面有差异。 singleTask 允许其他 Activity 成为其任务（必然是 standard 和 singleTask 的 Activity ）的组成部分，它始终位于其任务的根位置。singleInstance 不允许其他 Activity 成为其任务的组成部分。它是任务中唯一的 Activity。 如果它启动另一个 Activity，系统会将该 Activity 分配给其他任务 — 就好像 Intent 中包含 `FLAG_ACTIVITY_NEW_TASK` 一样。\n\n\n\n\n\n我自己做了一个实验。分别创建两个程序，一个叫做 LaunchMode，有 Activity A 和 Activity B，另一个叫做 LaunchModeB，有 Activity C 和 Activity D。在 Android 6.0 上运行。\n\n- 情形一\n\n前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B->A），LaunchModeB 从 C 启动 D（这时任务栈是 D->C），这时我想从 B 中 启动 C 和 Ｄ，其中 C 和 D 都是standard 模式。\n\n结果：在 B 中启动 C 后（这时任务栈是 C->B->A），C 从当前 Activity 右侧出现，按下 back 键直接向右侧消失。D 也是这个情况。\n\n首先，从右侧出现代表没有切换到其他的应用程序，而我们知道 C 和 D Activity 是 LaunchModeB 中的 Activity。那为什么不是打开 LaunchModeB 之后再启动 C Activity 呢？这时因为设置了 standard 这个启动模式，在这个例子中当前程序并没有创建新得任务栈，而是在 B Activity 所在的任务栈中将 C Activity 启动并加入其中。也就是说被启动的 Activity 会被加入到启动它的 Activity 中。\n\n- 情形二\n\n前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B->A），LaunchModeB 从 C 启动 D（这时任务栈是 D->C ，我想从 B 中 启动 C 和 Ｄ，其中 C 是 standard 模式 ，D 都是 singleTask 模式。\n\n结果：我在 B Activity 中点击启动 C ，这时和情形一是一样的，这里不讨论了。而如果点击启动 D 之后，系统发现在现有任务栈中已经有了 D Activity，这时候会并不会去创建新的，而是直接切换到 D Activity 所在的任务栈，这时候按下 back 键，将回退到 C Activity 中，再次按下 back 键，就销毁了LaunchModeB 中的任务栈。这时候再次在 B 中启动 D，这时候系统发现在任务栈中没有已有的 D，就会创建 D，并加入到新的任务栈中（这时任务栈是 D），按下 back 键就会直接销毁 Ｄ返回到 B Activity。\n\n\n\n- 情形三\n\n前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B->A），LaunchModeB 从 C 启动 D（这时任务栈是 D->C ，我想从 B 中 启动 C 和 Ｄ，其中 C 是 singleTask 模式 ，D 都是 standard 模式。\n\n结果：从 B 点击按钮打开 C （这时任务栈是 C ），singleTask 因为有 clearTop 的效果而被推出任务栈。在 C Activity 中再次打开 D Activity，不要按 back 键，选择任务返回到 B Activity，点击按钮打开 D Activity（这时任务栈是 D->B->A），发现动画效果是从右侧进入，断定此时这个 D Activity 所在的任务栈是 B Activity 所在的任务栈，因此这时按下 back 键，就不会返回到 C Activity，而是返回到 B Activity。\n\n还有一点需要注意，当我从 C 中启动 D 之后，按下 Home 键返回桌面，在从桌面图标点击进入程序，发现进入的是 C Activity，而不是 D Activity。原因还是 C Activity 是 singleTask 模式。\n\n\n\n- 情形四\n\n还是上面的前置条件，但是 C 和 D 都是 singleTask 模式。情况与情形三类似，只是在打开 D Activity 的时候（这时任务栈是 D->C），当前任务栈转移到了 LaunchModeB 程序中，相当于打开了 LaunchMode 这个程序，而这时栈顶是 D ，所以出现的是 D Activity，按下返回键跳转到 C Activity。\n\n\n\n另一种情况是在 Intent 中设置标志位来为 Activity 指定启动模式。这种方式优先于 AndroidManifest 中配置的方式，当两种同时存在时，以第二种方式为准。然后它们在限定范围上有所不同，第一种方式无法设置  FLAG_ACTIVITY_CLEAR_TOP 标志，而第二种方式无法指定 singleInstance 模式。\n\n\n\n**FLAG_ACTIVITY_NEW_TASK** \n\n等同于 “singleTask” 。在这种情况下，被启动的 Activity 的实例如果已经存在，那么系统会调用他的 onNewIntent ，而不会去调用 onCreate 。但是不要忘记，系统可能会杀掉后台运行的 Activity，如果这一切发生，那么系统就会调用 onCreate 方法，而不调用 onNewIntent 方法，一个好的解决方法就是在 onCreate 和 onNewIntent 方法中调用同一个处理数据的方法。\n\n**FLAG_ACTIVITY_SINGLE_TOP**\n\n等同于 “singleTop” 。\n\n**FLAG_ACTIVITY_CLEAR_TOP**\n\n等同于 “singleTop” 。\n\n在 Android Studio 中可以使用 `adb shell dumpsys activity` 来查看任务栈和 `taskAffinity` 的值。\n\n\n\n\n\n [taskAffinity](http://android.xsoftlab.net/guide/topics/manifest/activity-element.html#aff)","source":"_posts/2017-06-08-Activity的生命周期和启动模式.md","raw":"---\ntitle: Activity的生命周期和启动模式\ndate: 2017-06-08 00:05:40\ntags: Android\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Activity 的生命周期\n\n\n\n![](Activity生命周期.png)\n\n## 情形一\n\n例如：运行一个 Activity ，不进行任何的页面跳转，然后按下返回键结束。\n\n```shell\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onCreate: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStart: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onResume: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onPause: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStop: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onDestory: A\n```\n\n## 情形二\n\n（1）当第一次启动 A Activity 的时候，会按照下面的顺序执行。\n\n```shell\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onCreate: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStart: A\n05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onResume: A\n```\n\n`onStart` 的时候 Activity 还在后台，`onResume` 的时候才会显示到前台。\n\n\n\n（2）这时候点击按钮启动 B Acitivity 的时候\n\n```Shell\n05-30 12:00:56.869 3561-3561/me.nijun.launchmode I/AActivity: onPause: A\n05-30 12:21:03.756 4030-4030/me.nijun.launchmode I/BActivity: onCreate: B\n05-30 12:00:56.882 3561-3561/me.nijun.launchmode I/BActivity: onStart: B\n05-30 12:00:56.883 3561-3561/me.nijun.launchmode I/BActivity: onResume: B\n05-30 12:00:57.310 3561-3561/me.nijun.launchmode I/AActivity: onSaveInstanceState: A\n05-30 12:00:57.312 3561-3561/me.nijun.launchmode I/AActivity: onStop: A\n```\n\n可见，首先调用旧Activity的 `onpause` 方法，`onpause` 一定在要启动的新 Activity 之前执行，只有它执行完之后，新的 Activity 才会启动。正因为如此，我们在 onPause方法中不能重量级的操作，应当在 onStop 中处理操作，使新 Activity 尽快显示出来。\n\n`onSaveInstanceState` 方法会在 `onStop` 方法之前执行，但具体是否在`onPause` 之前还是之后是不确定的。\n\n`onStop` 方法是否执行是看 Activity 是否可见，如果用户回到桌面（不可见了），那么就会调用这个方法。但是如果如果调用新的 Activity 采用了新透明的主题，那么是**不会调用`onStop`** 方法的。\n\n\n\n（3）当用户按下返回键的时候\n\n 这时候 BAcitivity 将被销毁。在 `onPause` 执行后，并不会直接执行 `onStop` 而是会先执行 AActivity 的 onRestart 、onStart、onResume 方法。\n\n```shell\n05-30 12:21:11.422 4030-4030/me.nijun.launchmode I/BActivity: onPause: B\n05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onRestart: A\n05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onStart: A\n05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onResume: A\n05-30 12:21:11.764 4030-4030/me.nijun.launchmode I/BActivity: onStop: B\n05-30 12:21:11.765 4030-4030/me.nijun.launchmode I/BActivity: onDestroy: B\n```\n\n（4）当Activity被系统回收后再次打开，生命周期回调方法和 （1）一样，但是不是所有过程都一样。\n\n小结：\n\n1. onCreate 和 onDestory 是配对的，代表这创建和销毁。\n2. onStart 和 onStop 是配对的，代表着 Activity 是否可见。\n3. onResume 和 onPause 是配对的，代表的 Activity 是否在前台。\n4. A Activity 的生命周期：\n   1. A 被 B 完全遮挡住了：onCreate->onStart->onResume->onPause->onStop->onRestart->onStart->onResume。\n   2. A 被 B 部分遮挡住了：onCreate->onStart->onResume->onPause->onResume。\n\n## 情形三\n\n我们启动 Activity 之后，然后点击按钮弹出 AlertDialog 。\n\nActivity 的启动过程：onCreate->onStart->onResume\n\n因为当启动和退出 Dialog 的时候 ，Activity 的状态始终没有改变。这样看来，Dialog 是 Activity 内部的界面，不会影响到 Activity 的生命周期。\n\n\n\n## 异常情况\n\n\n\n（1）相关资源的配置发生改变导致 Activity 被杀死并重新创建。\n\n例子：比如用户转换屏幕，从竖屏切换到横屏。\n\n这时候Activity被销毁，其 onPause、onStop、onDestroy都会被调用。这个过程中也会调用 onSaveInstanceState 方法来保存当前Activity的状态，这个方法会在onStop之前执行，顺序与onPause无关。注意：在正常情况下是不会调用这个方法的。\n\n当Activity重新创建后，系统会调用 onRestoreInstanceState 方法，并把 onSaveInstanceState 保存的 Bundle 对象传递给onRestoreInstanceState和onCreate方法。\n\n从时序上看，onRestoreInstanceState 会在 onStart 方法之后调用。\n\n```java\n05-30 12:34:27.247 4030-4030/me.nijun.launchmode I/AActivity: onPause: A\n05-30 12:34:27.247 4030-4030/me.nijun.launchmode I/AActivity: onSaveInstanceState: A\n05-30 12:34:27.249 4030-4030/me.nijun.launchmode I/AActivity: onStop: A\n05-30 12:34:27.249 4030-4030/me.nijun.launchmode I/AActivity: onDestroy: A\n05-30 12:34:27.262 4030-4030/me.nijun.launchmode I/AActivity: onCreate:  A\n05-30 12:34:27.262 4030-4030/me.nijun.launchmode I/AActivity: onStart: A\n05-30 12:34:27.262 4030-4030/me.nijun.launchmode I/AActivity: onRestoreInstanceState: restore extra_test test\n05-30 12:34:27.263 4030-4030/me.nijun.launchmode I/AActivity: onResume: A\n  \n  public void main(){\n    \n  }\n```\n\n\n\n### 扩展\n\nView 与 Activity 一样，也有 onSaveInstanceState 和 onRestoreInstanceState 两个方法。\n\n关于保存和恢复View层次结构，系统的工作流程是这样的：首先Activity 在异常中止的情况下，会调用 onSaveInstanceState 去保存\u0001数据。 Activity 会委托 Window 去保存数据，Window再委托他上面的顶层容器去保存。顶层容器是一个ViewGroup，一般来说是 DecorView。顶层容器再去一一通知它的子元素去保存数据。\n\n这是一种典型的委托思想，上层委托下层，父容器委托子元素去处理意见事情。这在Android中有很多实现，比如**View的绘制过程、事件分发**。\n\nonSaveInstanceState 只会在 Activity 即将销毁并且有机会重新显示的情况下才会去调用。\n\n### 还有一点\n\nonRestoreInstanceState 和 onCreate 的区别：\n\nonRestoreInstanceState 一旦被调用，其参数 Bundle 一定有值，而onCreate在正常启动的时候其参数Bundle为null。\n\n官方推荐：使用 **onRestoreInstanceState** 去恢复保存的数据。\n\n\n\n\n\n### 解决办法\n\n如果不想要系统重新创建 Activity的话，可以指定在 AndroidManifest.xml 中指定 android:configChanges 的属性。\n\n最好是加上 orientation|screenSize|keyboardHidden 这三个值，因为 Android 13 （ API13 ）之后，screen size 也会跟着屏幕横竖屏切换而改变。可以设置下列语句\n\n```\nandroid:configChanges=\"orientation|screenSize|keyboardHidden\"\n```\n\n\n\n\n\n# Activity 的LaunchMode\n\n路漫漫其修远兮，吾将上下而求索。---屈原《离骚》\n\n今天，花了一个晚上的时间整理了一下 Activity 的 LaunchMode 启动模式。既然下定决心要走这一行，那么就从最基础的开始学起。\n\n在 Android 中，一共由四种启动模式，分别是\n\n1. standard\n2. singleTop\n3. singleTask\n4. singleInstance\n\n这里，我把这四个分成两组。\n\n其中，`standard `  和 `singleTop` Activity 为一类，使用 `standard` 或 `singleTop` 启动模式的 Activity 可多次实例化。可以属于任何任务栈，并且可以位于活动堆栈的任何位置。但是通常，它们被启动到所调用的任务中栈中。\n\n\n\n其中，standard 模式很简单，调用几次就创建几次。singleTop 与之类似，不同在于如果要启动的 Activity 已经在栈顶了，那么就不创建直接复用，并且调用 onNewIntent 方法。如果一个现有实例虽在目标任务内，但未处于堆栈顶部，或者虽然位于堆栈顶部，但不在目标任务中 — 则系统会创建一个新实例并将其推送到堆栈上。\n\n\n\n`singleTask` 和 `singleInstance` 为另一类。`singleTask` 和 `singleInstance` Activity 只能启动任务。 它们始终位于 Activity 堆栈的**栈顶**，并且每个栈中只能有一个相同的 Activity 。\n\nsingleTask 和 singleInstance 同样只在一个方面有差异。 singleTask 允许其他 Activity 成为其任务（必然是 standard 和 singleTask 的 Activity ）的组成部分，它始终位于其任务的根位置。singleInstance 不允许其他 Activity 成为其任务的组成部分。它是任务中唯一的 Activity。 如果它启动另一个 Activity，系统会将该 Activity 分配给其他任务 — 就好像 Intent 中包含 `FLAG_ACTIVITY_NEW_TASK` 一样。\n\n\n\n\n\n我自己做了一个实验。分别创建两个程序，一个叫做 LaunchMode，有 Activity A 和 Activity B，另一个叫做 LaunchModeB，有 Activity C 和 Activity D。在 Android 6.0 上运行。\n\n- 情形一\n\n前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B->A），LaunchModeB 从 C 启动 D（这时任务栈是 D->C），这时我想从 B 中 启动 C 和 Ｄ，其中 C 和 D 都是standard 模式。\n\n结果：在 B 中启动 C 后（这时任务栈是 C->B->A），C 从当前 Activity 右侧出现，按下 back 键直接向右侧消失。D 也是这个情况。\n\n首先，从右侧出现代表没有切换到其他的应用程序，而我们知道 C 和 D Activity 是 LaunchModeB 中的 Activity。那为什么不是打开 LaunchModeB 之后再启动 C Activity 呢？这时因为设置了 standard 这个启动模式，在这个例子中当前程序并没有创建新得任务栈，而是在 B Activity 所在的任务栈中将 C Activity 启动并加入其中。也就是说被启动的 Activity 会被加入到启动它的 Activity 中。\n\n- 情形二\n\n前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B->A），LaunchModeB 从 C 启动 D（这时任务栈是 D->C ，我想从 B 中 启动 C 和 Ｄ，其中 C 是 standard 模式 ，D 都是 singleTask 模式。\n\n结果：我在 B Activity 中点击启动 C ，这时和情形一是一样的，这里不讨论了。而如果点击启动 D 之后，系统发现在现有任务栈中已经有了 D Activity，这时候会并不会去创建新的，而是直接切换到 D Activity 所在的任务栈，这时候按下 back 键，将回退到 C Activity 中，再次按下 back 键，就销毁了LaunchModeB 中的任务栈。这时候再次在 B 中启动 D，这时候系统发现在任务栈中没有已有的 D，就会创建 D，并加入到新的任务栈中（这时任务栈是 D），按下 back 键就会直接销毁 Ｄ返回到 B Activity。\n\n\n\n- 情形三\n\n前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B->A），LaunchModeB 从 C 启动 D（这时任务栈是 D->C ，我想从 B 中 启动 C 和 Ｄ，其中 C 是 singleTask 模式 ，D 都是 standard 模式。\n\n结果：从 B 点击按钮打开 C （这时任务栈是 C ），singleTask 因为有 clearTop 的效果而被推出任务栈。在 C Activity 中再次打开 D Activity，不要按 back 键，选择任务返回到 B Activity，点击按钮打开 D Activity（这时任务栈是 D->B->A），发现动画效果是从右侧进入，断定此时这个 D Activity 所在的任务栈是 B Activity 所在的任务栈，因此这时按下 back 键，就不会返回到 C Activity，而是返回到 B Activity。\n\n还有一点需要注意，当我从 C 中启动 D 之后，按下 Home 键返回桌面，在从桌面图标点击进入程序，发现进入的是 C Activity，而不是 D Activity。原因还是 C Activity 是 singleTask 模式。\n\n\n\n- 情形四\n\n还是上面的前置条件，但是 C 和 D 都是 singleTask 模式。情况与情形三类似，只是在打开 D Activity 的时候（这时任务栈是 D->C），当前任务栈转移到了 LaunchModeB 程序中，相当于打开了 LaunchMode 这个程序，而这时栈顶是 D ，所以出现的是 D Activity，按下返回键跳转到 C Activity。\n\n\n\n另一种情况是在 Intent 中设置标志位来为 Activity 指定启动模式。这种方式优先于 AndroidManifest 中配置的方式，当两种同时存在时，以第二种方式为准。然后它们在限定范围上有所不同，第一种方式无法设置  FLAG_ACTIVITY_CLEAR_TOP 标志，而第二种方式无法指定 singleInstance 模式。\n\n\n\n**FLAG_ACTIVITY_NEW_TASK** \n\n等同于 “singleTask” 。在这种情况下，被启动的 Activity 的实例如果已经存在，那么系统会调用他的 onNewIntent ，而不会去调用 onCreate 。但是不要忘记，系统可能会杀掉后台运行的 Activity，如果这一切发生，那么系统就会调用 onCreate 方法，而不调用 onNewIntent 方法，一个好的解决方法就是在 onCreate 和 onNewIntent 方法中调用同一个处理数据的方法。\n\n**FLAG_ACTIVITY_SINGLE_TOP**\n\n等同于 “singleTop” 。\n\n**FLAG_ACTIVITY_CLEAR_TOP**\n\n等同于 “singleTop” 。\n\n在 Android Studio 中可以使用 `adb shell dumpsys activity` 来查看任务栈和 `taskAffinity` 的值。\n\n\n\n\n\n [taskAffinity](http://android.xsoftlab.net/guide/topics/manifest/activity-element.html#aff)","slug":"Activity的生命周期和启动模式","published":1,"updated":"2017-06-08T08:34:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nb8000cp5ukmhr4k63a","content":"<h1 id=\"Activity-的生命周期\"><a href=\"#Activity-的生命周期\" class=\"headerlink\" title=\"Activity 的生命周期\"></a>Activity 的生命周期</h1><p><img src=\"/2017/06/08/Activity的生命周期和启动模式/Activity生命周期.png\" alt=\"\"></p>\n<h2 id=\"情形一\"><a href=\"#情形一\" class=\"headerlink\" title=\"情形一\"></a>情形一</h2><p>例如：运行一个 Activity ，不进行任何的页面跳转，然后按下返回键结束。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onCreate: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStart: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onResume: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onPause: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStop: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onDestory: A</div></pre></td></tr></table></figure>\n<h2 id=\"情形二\"><a href=\"#情形二\" class=\"headerlink\" title=\"情形二\"></a>情形二</h2><p>（1）当第一次启动 A Activity 的时候，会按照下面的顺序执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onCreate: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStart: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onResume: A</div></pre></td></tr></table></figure>\n<p><code>onStart</code> 的时候 Activity 还在后台，<code>onResume</code> 的时候才会显示到前台。</p>\n<p>（2）这时候点击按钮启动 B Acitivity 的时候</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-30 12:00:56.869 3561-3561/me.nijun.launchmode I/AActivity: onPause: A</div><div class=\"line\">05-30 12:21:03.756 4030-4030/me.nijun.launchmode I/BActivity: onCreate: B</div><div class=\"line\">05-30 12:00:56.882 3561-3561/me.nijun.launchmode I/BActivity: onStart: B</div><div class=\"line\">05-30 12:00:56.883 3561-3561/me.nijun.launchmode I/BActivity: onResume: B</div><div class=\"line\">05-30 12:00:57.310 3561-3561/me.nijun.launchmode I/AActivity: onSaveInstanceState: A</div><div class=\"line\">05-30 12:00:57.312 3561-3561/me.nijun.launchmode I/AActivity: onStop: A</div></pre></td></tr></table></figure>\n<p>可见，首先调用旧Activity的 <code>onpause</code> 方法，<code>onpause</code> 一定在要启动的新 Activity 之前执行，只有它执行完之后，新的 Activity 才会启动。正因为如此，我们在 onPause方法中不能重量级的操作，应当在 onStop 中处理操作，使新 Activity 尽快显示出来。</p>\n<p><code>onSaveInstanceState</code> 方法会在 <code>onStop</code> 方法之前执行，但具体是否在<code>onPause</code> 之前还是之后是不确定的。</p>\n<p><code>onStop</code> 方法是否执行是看 Activity 是否可见，如果用户回到桌面（不可见了），那么就会调用这个方法。但是如果如果调用新的 Activity 采用了新透明的主题，那么是<strong>不会调用<code>onStop</code></strong> 方法的。</p>\n<p>（3）当用户按下返回键的时候</p>\n<p> 这时候 BAcitivity 将被销毁。在 <code>onPause</code> 执行后，并不会直接执行 <code>onStop</code> 而是会先执行 AActivity 的 onRestart 、onStart、onResume 方法。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-30 12:21:11.422 4030-4030/me.nijun.launchmode I/BActivity: onPause: B</div><div class=\"line\">05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onRestart: A</div><div class=\"line\">05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onStart: A</div><div class=\"line\">05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onResume: A</div><div class=\"line\">05-30 12:21:11.764 4030-4030/me.nijun.launchmode I/BActivity: onStop: B</div><div class=\"line\">05-30 12:21:11.765 4030-4030/me.nijun.launchmode I/BActivity: onDestroy: B</div></pre></td></tr></table></figure>\n<p>（4）当Activity被系统回收后再次打开，生命周期回调方法和 （1）一样，但是不是所有过程都一样。</p>\n<p>小结：</p>\n<ol>\n<li>onCreate 和 onDestory 是配对的，代表这创建和销毁。</li>\n<li>onStart 和 onStop 是配对的，代表着 Activity 是否可见。</li>\n<li>onResume 和 onPause 是配对的，代表的 Activity 是否在前台。</li>\n<li>A Activity 的生命周期：<ol>\n<li>A 被 B 完全遮挡住了：onCreate-&gt;onStart-&gt;onResume-&gt;onPause-&gt;onStop-&gt;onRestart-&gt;onStart-&gt;onResume。</li>\n<li>A 被 B 部分遮挡住了：onCreate-&gt;onStart-&gt;onResume-&gt;onPause-&gt;onResume。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"情形三\"><a href=\"#情形三\" class=\"headerlink\" title=\"情形三\"></a>情形三</h2><p>我们启动 Activity 之后，然后点击按钮弹出 AlertDialog 。</p>\n<p>Activity 的启动过程：onCreate-&gt;onStart-&gt;onResume</p>\n<p>因为当启动和退出 Dialog 的时候 ，Activity 的状态始终没有改变。这样看来，Dialog 是 Activity 内部的界面，不会影响到 Activity 的生命周期。</p>\n<h2 id=\"异常情况\"><a href=\"#异常情况\" class=\"headerlink\" title=\"异常情况\"></a>异常情况</h2><p>（1）相关资源的配置发生改变导致 Activity 被杀死并重新创建。</p>\n<p>例子：比如用户转换屏幕，从竖屏切换到横屏。</p>\n<p>这时候Activity被销毁，其 onPause、onStop、onDestroy都会被调用。这个过程中也会调用 onSaveInstanceState 方法来保存当前Activity的状态，这个方法会在onStop之前执行，顺序与onPause无关。注意：在正常情况下是不会调用这个方法的。</p>\n<p>当Activity重新创建后，系统会调用 onRestoreInstanceState 方法，并把 onSaveInstanceState 保存的 Bundle 对象传递给onRestoreInstanceState和onCreate方法。</p>\n<p>从时序上看，onRestoreInstanceState 会在 onStart 方法之后调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.247</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onPause: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.247</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onSaveInstanceState: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.249</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onStop: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.249</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onDestroy: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.262</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onCreate:  A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.262</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onStart: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.262</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onRestoreInstanceState: restore extra_test test</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.263</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onResume: <span class=\"function\">A</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span>&#123;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>View 与 Activity 一样，也有 onSaveInstanceState 和 onRestoreInstanceState 两个方法。</p>\n<p>关于保存和恢复View层次结构，系统的工作流程是这样的：首先Activity 在异常中止的情况下，会调用 onSaveInstanceState 去保存\u0001数据。 Activity 会委托 Window 去保存数据，Window再委托他上面的顶层容器去保存。顶层容器是一个ViewGroup，一般来说是 DecorView。顶层容器再去一一通知它的子元素去保存数据。</p>\n<p>这是一种典型的委托思想，上层委托下层，父容器委托子元素去处理意见事情。这在Android中有很多实现，比如<strong>View的绘制过程、事件分发</strong>。</p>\n<p>onSaveInstanceState 只会在 Activity 即将销毁并且有机会重新显示的情况下才会去调用。</p>\n<h3 id=\"还有一点\"><a href=\"#还有一点\" class=\"headerlink\" title=\"还有一点\"></a>还有一点</h3><p>onRestoreInstanceState 和 onCreate 的区别：</p>\n<p>onRestoreInstanceState 一旦被调用，其参数 Bundle 一定有值，而onCreate在正常启动的时候其参数Bundle为null。</p>\n<p>官方推荐：使用 <strong>onRestoreInstanceState</strong> 去恢复保存的数据。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>如果不想要系统重新创建 Activity的话，可以指定在 AndroidManifest.xml 中指定 android:configChanges 的属性。</p>\n<p>最好是加上 orientation|screenSize|keyboardHidden 这三个值，因为 Android 13 （ API13 ）之后，screen size 也会跟着屏幕横竖屏切换而改变。可以设置下列语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:configChanges=&quot;orientation|screenSize|keyboardHidden&quot;</div></pre></td></tr></table></figure>\n<h1 id=\"Activity-的LaunchMode\"><a href=\"#Activity-的LaunchMode\" class=\"headerlink\" title=\"Activity 的LaunchMode\"></a>Activity 的LaunchMode</h1><p>路漫漫其修远兮，吾将上下而求索。—屈原《离骚》</p>\n<p>今天，花了一个晚上的时间整理了一下 Activity 的 LaunchMode 启动模式。既然下定决心要走这一行，那么就从最基础的开始学起。</p>\n<p>在 Android 中，一共由四种启动模式，分别是</p>\n<ol>\n<li>standard</li>\n<li>singleTop</li>\n<li>singleTask</li>\n<li>singleInstance</li>\n</ol>\n<p>这里，我把这四个分成两组。</p>\n<p>其中，<code>standard</code>  和 <code>singleTop</code> Activity 为一类，使用 <code>standard</code> 或 <code>singleTop</code> 启动模式的 Activity 可多次实例化。可以属于任何任务栈，并且可以位于活动堆栈的任何位置。但是通常，它们被启动到所调用的任务中栈中。</p>\n<p>其中，standard 模式很简单，调用几次就创建几次。singleTop 与之类似，不同在于如果要启动的 Activity 已经在栈顶了，那么就不创建直接复用，并且调用 onNewIntent 方法。如果一个现有实例虽在目标任务内，但未处于堆栈顶部，或者虽然位于堆栈顶部，但不在目标任务中 — 则系统会创建一个新实例并将其推送到堆栈上。</p>\n<p><code>singleTask</code> 和 <code>singleInstance</code> 为另一类。<code>singleTask</code> 和 <code>singleInstance</code> Activity 只能启动任务。 它们始终位于 Activity 堆栈的<strong>栈顶</strong>，并且每个栈中只能有一个相同的 Activity 。</p>\n<p>singleTask 和 singleInstance 同样只在一个方面有差异。 singleTask 允许其他 Activity 成为其任务（必然是 standard 和 singleTask 的 Activity ）的组成部分，它始终位于其任务的根位置。singleInstance 不允许其他 Activity 成为其任务的组成部分。它是任务中唯一的 Activity。 如果它启动另一个 Activity，系统会将该 Activity 分配给其他任务 — 就好像 Intent 中包含 <code>FLAG_ACTIVITY_NEW_TASK</code> 一样。</p>\n<p>我自己做了一个实验。分别创建两个程序，一个叫做 LaunchMode，有 Activity A 和 Activity B，另一个叫做 LaunchModeB，有 Activity C 和 Activity D。在 Android 6.0 上运行。</p>\n<ul>\n<li>情形一</li>\n</ul>\n<p>前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B-&gt;A），LaunchModeB 从 C 启动 D（这时任务栈是 D-&gt;C），这时我想从 B 中 启动 C 和 Ｄ，其中 C 和 D 都是standard 模式。</p>\n<p>结果：在 B 中启动 C 后（这时任务栈是 C-&gt;B-&gt;A），C 从当前 Activity 右侧出现，按下 back 键直接向右侧消失。D 也是这个情况。</p>\n<p>首先，从右侧出现代表没有切换到其他的应用程序，而我们知道 C 和 D Activity 是 LaunchModeB 中的 Activity。那为什么不是打开 LaunchModeB 之后再启动 C Activity 呢？这时因为设置了 standard 这个启动模式，在这个例子中当前程序并没有创建新得任务栈，而是在 B Activity 所在的任务栈中将 C Activity 启动并加入其中。也就是说被启动的 Activity 会被加入到启动它的 Activity 中。</p>\n<ul>\n<li>情形二</li>\n</ul>\n<p>前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B-&gt;A），LaunchModeB 从 C 启动 D（这时任务栈是 D-&gt;C ，我想从 B 中 启动 C 和 Ｄ，其中 C 是 standard 模式 ，D 都是 singleTask 模式。</p>\n<p>结果：我在 B Activity 中点击启动 C ，这时和情形一是一样的，这里不讨论了。而如果点击启动 D 之后，系统发现在现有任务栈中已经有了 D Activity，这时候会并不会去创建新的，而是直接切换到 D Activity 所在的任务栈，这时候按下 back 键，将回退到 C Activity 中，再次按下 back 键，就销毁了LaunchModeB 中的任务栈。这时候再次在 B 中启动 D，这时候系统发现在任务栈中没有已有的 D，就会创建 D，并加入到新的任务栈中（这时任务栈是 D），按下 back 键就会直接销毁 Ｄ返回到 B Activity。</p>\n<ul>\n<li>情形三</li>\n</ul>\n<p>前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B-&gt;A），LaunchModeB 从 C 启动 D（这时任务栈是 D-&gt;C ，我想从 B 中 启动 C 和 Ｄ，其中 C 是 singleTask 模式 ，D 都是 standard 模式。</p>\n<p>结果：从 B 点击按钮打开 C （这时任务栈是 C ），singleTask 因为有 clearTop 的效果而被推出任务栈。在 C Activity 中再次打开 D Activity，不要按 back 键，选择任务返回到 B Activity，点击按钮打开 D Activity（这时任务栈是 D-&gt;B-&gt;A），发现动画效果是从右侧进入，断定此时这个 D Activity 所在的任务栈是 B Activity 所在的任务栈，因此这时按下 back 键，就不会返回到 C Activity，而是返回到 B Activity。</p>\n<p>还有一点需要注意，当我从 C 中启动 D 之后，按下 Home 键返回桌面，在从桌面图标点击进入程序，发现进入的是 C Activity，而不是 D Activity。原因还是 C Activity 是 singleTask 模式。</p>\n<ul>\n<li>情形四</li>\n</ul>\n<p>还是上面的前置条件，但是 C 和 D 都是 singleTask 模式。情况与情形三类似，只是在打开 D Activity 的时候（这时任务栈是 D-&gt;C），当前任务栈转移到了 LaunchModeB 程序中，相当于打开了 LaunchMode 这个程序，而这时栈顶是 D ，所以出现的是 D Activity，按下返回键跳转到 C Activity。</p>\n<p>另一种情况是在 Intent 中设置标志位来为 Activity 指定启动模式。这种方式优先于 AndroidManifest 中配置的方式，当两种同时存在时，以第二种方式为准。然后它们在限定范围上有所不同，第一种方式无法设置  FLAG_ACTIVITY_CLEAR_TOP 标志，而第二种方式无法指定 singleInstance 模式。</p>\n<p><strong>FLAG_ACTIVITY_NEW_TASK</strong> </p>\n<p>等同于 “singleTask” 。在这种情况下，被启动的 Activity 的实例如果已经存在，那么系统会调用他的 onNewIntent ，而不会去调用 onCreate 。但是不要忘记，系统可能会杀掉后台运行的 Activity，如果这一切发生，那么系统就会调用 onCreate 方法，而不调用 onNewIntent 方法，一个好的解决方法就是在 onCreate 和 onNewIntent 方法中调用同一个处理数据的方法。</p>\n<p><strong>FLAG_ACTIVITY_SINGLE_TOP</strong></p>\n<p>等同于 “singleTop” 。</p>\n<p><strong>FLAG_ACTIVITY_CLEAR_TOP</strong></p>\n<p>等同于 “singleTop” 。</p>\n<p>在 Android Studio 中可以使用 <code>adb shell dumpsys activity</code> 来查看任务栈和 <code>taskAffinity</code> 的值。</p>\n<p> <a href=\"http://android.xsoftlab.net/guide/topics/manifest/activity-element.html#aff\" target=\"_blank\" rel=\"external\">taskAffinity</a></p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"Activity-的生命周期\"><a href=\"#Activity-的生命周期\" class=\"headerlink\" title=\"Activity 的生命周期\"></a>Activity 的生命周期</h1><p><img src=\"/2017/06/08/Activity的生命周期和启动模式/Activity生命周期.png\" alt=\"\"></p>\n<h2 id=\"情形一\"><a href=\"#情形一\" class=\"headerlink\" title=\"情形一\"></a>情形一</h2><p>例如：运行一个 Activity ，不进行任何的页面跳转，然后按下返回键结束。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onCreate: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStart: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onResume: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onPause: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStop: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onDestory: A</div></pre></td></tr></table></figure>\n<h2 id=\"情形二\"><a href=\"#情形二\" class=\"headerlink\" title=\"情形二\"></a>情形二</h2><p>（1）当第一次启动 A Activity 的时候，会按照下面的顺序执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onCreate: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onStart: A</div><div class=\"line\">05-30 12:00:44.864 3561-3561/me.nijun.launchmode I/AActivity: onResume: A</div></pre></td></tr></table></figure>\n<p><code>onStart</code> 的时候 Activity 还在后台，<code>onResume</code> 的时候才会显示到前台。</p>\n<p>（2）这时候点击按钮启动 B Acitivity 的时候</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-30 12:00:56.869 3561-3561/me.nijun.launchmode I/AActivity: onPause: A</div><div class=\"line\">05-30 12:21:03.756 4030-4030/me.nijun.launchmode I/BActivity: onCreate: B</div><div class=\"line\">05-30 12:00:56.882 3561-3561/me.nijun.launchmode I/BActivity: onStart: B</div><div class=\"line\">05-30 12:00:56.883 3561-3561/me.nijun.launchmode I/BActivity: onResume: B</div><div class=\"line\">05-30 12:00:57.310 3561-3561/me.nijun.launchmode I/AActivity: onSaveInstanceState: A</div><div class=\"line\">05-30 12:00:57.312 3561-3561/me.nijun.launchmode I/AActivity: onStop: A</div></pre></td></tr></table></figure>\n<p>可见，首先调用旧Activity的 <code>onpause</code> 方法，<code>onpause</code> 一定在要启动的新 Activity 之前执行，只有它执行完之后，新的 Activity 才会启动。正因为如此，我们在 onPause方法中不能重量级的操作，应当在 onStop 中处理操作，使新 Activity 尽快显示出来。</p>\n<p><code>onSaveInstanceState</code> 方法会在 <code>onStop</code> 方法之前执行，但具体是否在<code>onPause</code> 之前还是之后是不确定的。</p>\n<p><code>onStop</code> 方法是否执行是看 Activity 是否可见，如果用户回到桌面（不可见了），那么就会调用这个方法。但是如果如果调用新的 Activity 采用了新透明的主题，那么是<strong>不会调用<code>onStop</code></strong> 方法的。</p>\n<p>（3）当用户按下返回键的时候</p>\n<p> 这时候 BAcitivity 将被销毁。在 <code>onPause</code> 执行后，并不会直接执行 <code>onStop</code> 而是会先执行 AActivity 的 onRestart 、onStart、onResume 方法。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">05-30 12:21:11.422 4030-4030/me.nijun.launchmode I/BActivity: onPause: B</div><div class=\"line\">05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onRestart: A</div><div class=\"line\">05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onStart: A</div><div class=\"line\">05-30 12:21:11.433 4030-4030/me.nijun.launchmode I/AActivity: onResume: A</div><div class=\"line\">05-30 12:21:11.764 4030-4030/me.nijun.launchmode I/BActivity: onStop: B</div><div class=\"line\">05-30 12:21:11.765 4030-4030/me.nijun.launchmode I/BActivity: onDestroy: B</div></pre></td></tr></table></figure>\n<p>（4）当Activity被系统回收后再次打开，生命周期回调方法和 （1）一样，但是不是所有过程都一样。</p>\n<p>小结：</p>\n<ol>\n<li>onCreate 和 onDestory 是配对的，代表这创建和销毁。</li>\n<li>onStart 和 onStop 是配对的，代表着 Activity 是否可见。</li>\n<li>onResume 和 onPause 是配对的，代表的 Activity 是否在前台。</li>\n<li>A Activity 的生命周期：<ol>\n<li>A 被 B 完全遮挡住了：onCreate-&gt;onStart-&gt;onResume-&gt;onPause-&gt;onStop-&gt;onRestart-&gt;onStart-&gt;onResume。</li>\n<li>A 被 B 部分遮挡住了：onCreate-&gt;onStart-&gt;onResume-&gt;onPause-&gt;onResume。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"情形三\"><a href=\"#情形三\" class=\"headerlink\" title=\"情形三\"></a>情形三</h2><p>我们启动 Activity 之后，然后点击按钮弹出 AlertDialog 。</p>\n<p>Activity 的启动过程：onCreate-&gt;onStart-&gt;onResume</p>\n<p>因为当启动和退出 Dialog 的时候 ，Activity 的状态始终没有改变。这样看来，Dialog 是 Activity 内部的界面，不会影响到 Activity 的生命周期。</p>\n<h2 id=\"异常情况\"><a href=\"#异常情况\" class=\"headerlink\" title=\"异常情况\"></a>异常情况</h2><p>（1）相关资源的配置发生改变导致 Activity 被杀死并重新创建。</p>\n<p>例子：比如用户转换屏幕，从竖屏切换到横屏。</p>\n<p>这时候Activity被销毁，其 onPause、onStop、onDestroy都会被调用。这个过程中也会调用 onSaveInstanceState 方法来保存当前Activity的状态，这个方法会在onStop之前执行，顺序与onPause无关。注意：在正常情况下是不会调用这个方法的。</p>\n<p>当Activity重新创建后，系统会调用 onRestoreInstanceState 方法，并把 onSaveInstanceState 保存的 Bundle 对象传递给onRestoreInstanceState和onCreate方法。</p>\n<p>从时序上看，onRestoreInstanceState 会在 onStart 方法之后调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.247</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onPause: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.247</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onSaveInstanceState: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.249</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onStop: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.249</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onDestroy: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.262</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onCreate:  A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.262</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onStart: A</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.262</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onRestoreInstanceState: restore extra_test test</div><div class=\"line\"><span class=\"number\">05</span>-<span class=\"number\">30</span> <span class=\"number\">12</span>:<span class=\"number\">34</span>:<span class=\"number\">27.263</span> <span class=\"number\">4030</span>-<span class=\"number\">4030</span>/me.nijun.launchmode I/AActivity: onResume: <span class=\"function\">A</span></div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span>&#123;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>View 与 Activity 一样，也有 onSaveInstanceState 和 onRestoreInstanceState 两个方法。</p>\n<p>关于保存和恢复View层次结构，系统的工作流程是这样的：首先Activity 在异常中止的情况下，会调用 onSaveInstanceState 去保存\u0001数据。 Activity 会委托 Window 去保存数据，Window再委托他上面的顶层容器去保存。顶层容器是一个ViewGroup，一般来说是 DecorView。顶层容器再去一一通知它的子元素去保存数据。</p>\n<p>这是一种典型的委托思想，上层委托下层，父容器委托子元素去处理意见事情。这在Android中有很多实现，比如<strong>View的绘制过程、事件分发</strong>。</p>\n<p>onSaveInstanceState 只会在 Activity 即将销毁并且有机会重新显示的情况下才会去调用。</p>\n<h3 id=\"还有一点\"><a href=\"#还有一点\" class=\"headerlink\" title=\"还有一点\"></a>还有一点</h3><p>onRestoreInstanceState 和 onCreate 的区别：</p>\n<p>onRestoreInstanceState 一旦被调用，其参数 Bundle 一定有值，而onCreate在正常启动的时候其参数Bundle为null。</p>\n<p>官方推荐：使用 <strong>onRestoreInstanceState</strong> 去恢复保存的数据。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>如果不想要系统重新创建 Activity的话，可以指定在 AndroidManifest.xml 中指定 android:configChanges 的属性。</p>\n<p>最好是加上 orientation|screenSize|keyboardHidden 这三个值，因为 Android 13 （ API13 ）之后，screen size 也会跟着屏幕横竖屏切换而改变。可以设置下列语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:configChanges=&quot;orientation|screenSize|keyboardHidden&quot;</div></pre></td></tr></table></figure>\n<h1 id=\"Activity-的LaunchMode\"><a href=\"#Activity-的LaunchMode\" class=\"headerlink\" title=\"Activity 的LaunchMode\"></a>Activity 的LaunchMode</h1><p>路漫漫其修远兮，吾将上下而求索。—屈原《离骚》</p>\n<p>今天，花了一个晚上的时间整理了一下 Activity 的 LaunchMode 启动模式。既然下定决心要走这一行，那么就从最基础的开始学起。</p>\n<p>在 Android 中，一共由四种启动模式，分别是</p>\n<ol>\n<li>standard</li>\n<li>singleTop</li>\n<li>singleTask</li>\n<li>singleInstance</li>\n</ol>\n<p>这里，我把这四个分成两组。</p>\n<p>其中，<code>standard</code>  和 <code>singleTop</code> Activity 为一类，使用 <code>standard</code> 或 <code>singleTop</code> 启动模式的 Activity 可多次实例化。可以属于任何任务栈，并且可以位于活动堆栈的任何位置。但是通常，它们被启动到所调用的任务中栈中。</p>\n<p>其中，standard 模式很简单，调用几次就创建几次。singleTop 与之类似，不同在于如果要启动的 Activity 已经在栈顶了，那么就不创建直接复用，并且调用 onNewIntent 方法。如果一个现有实例虽在目标任务内，但未处于堆栈顶部，或者虽然位于堆栈顶部，但不在目标任务中 — 则系统会创建一个新实例并将其推送到堆栈上。</p>\n<p><code>singleTask</code> 和 <code>singleInstance</code> 为另一类。<code>singleTask</code> 和 <code>singleInstance</code> Activity 只能启动任务。 它们始终位于 Activity 堆栈的<strong>栈顶</strong>，并且每个栈中只能有一个相同的 Activity 。</p>\n<p>singleTask 和 singleInstance 同样只在一个方面有差异。 singleTask 允许其他 Activity 成为其任务（必然是 standard 和 singleTask 的 Activity ）的组成部分，它始终位于其任务的根位置。singleInstance 不允许其他 Activity 成为其任务的组成部分。它是任务中唯一的 Activity。 如果它启动另一个 Activity，系统会将该 Activity 分配给其他任务 — 就好像 Intent 中包含 <code>FLAG_ACTIVITY_NEW_TASK</code> 一样。</p>\n<p>我自己做了一个实验。分别创建两个程序，一个叫做 LaunchMode，有 Activity A 和 Activity B，另一个叫做 LaunchModeB，有 Activity C 和 Activity D。在 Android 6.0 上运行。</p>\n<ul>\n<li>情形一</li>\n</ul>\n<p>前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B-&gt;A），LaunchModeB 从 C 启动 D（这时任务栈是 D-&gt;C），这时我想从 B 中 启动 C 和 Ｄ，其中 C 和 D 都是standard 模式。</p>\n<p>结果：在 B 中启动 C 后（这时任务栈是 C-&gt;B-&gt;A），C 从当前 Activity 右侧出现，按下 back 键直接向右侧消失。D 也是这个情况。</p>\n<p>首先，从右侧出现代表没有切换到其他的应用程序，而我们知道 C 和 D Activity 是 LaunchModeB 中的 Activity。那为什么不是打开 LaunchModeB 之后再启动 C Activity 呢？这时因为设置了 standard 这个启动模式，在这个例子中当前程序并没有创建新得任务栈，而是在 B Activity 所在的任务栈中将 C Activity 启动并加入其中。也就是说被启动的 Activity 会被加入到启动它的 Activity 中。</p>\n<ul>\n<li>情形二</li>\n</ul>\n<p>前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B-&gt;A），LaunchModeB 从 C 启动 D（这时任务栈是 D-&gt;C ，我想从 B 中 启动 C 和 Ｄ，其中 C 是 standard 模式 ，D 都是 singleTask 模式。</p>\n<p>结果：我在 B Activity 中点击启动 C ，这时和情形一是一样的，这里不讨论了。而如果点击启动 D 之后，系统发现在现有任务栈中已经有了 D Activity，这时候会并不会去创建新的，而是直接切换到 D Activity 所在的任务栈，这时候按下 back 键，将回退到 C Activity 中，再次按下 back 键，就销毁了LaunchModeB 中的任务栈。这时候再次在 B 中启动 D，这时候系统发现在任务栈中没有已有的 D，就会创建 D，并加入到新的任务栈中（这时任务栈是 D），按下 back 键就会直接销毁 Ｄ返回到 B Activity。</p>\n<ul>\n<li>情形三</li>\n</ul>\n<p>前置条件：LaunchMode中从 A 启动 B（这时任务栈是 B-&gt;A），LaunchModeB 从 C 启动 D（这时任务栈是 D-&gt;C ，我想从 B 中 启动 C 和 Ｄ，其中 C 是 singleTask 模式 ，D 都是 standard 模式。</p>\n<p>结果：从 B 点击按钮打开 C （这时任务栈是 C ），singleTask 因为有 clearTop 的效果而被推出任务栈。在 C Activity 中再次打开 D Activity，不要按 back 键，选择任务返回到 B Activity，点击按钮打开 D Activity（这时任务栈是 D-&gt;B-&gt;A），发现动画效果是从右侧进入，断定此时这个 D Activity 所在的任务栈是 B Activity 所在的任务栈，因此这时按下 back 键，就不会返回到 C Activity，而是返回到 B Activity。</p>\n<p>还有一点需要注意，当我从 C 中启动 D 之后，按下 Home 键返回桌面，在从桌面图标点击进入程序，发现进入的是 C Activity，而不是 D Activity。原因还是 C Activity 是 singleTask 模式。</p>\n<ul>\n<li>情形四</li>\n</ul>\n<p>还是上面的前置条件，但是 C 和 D 都是 singleTask 模式。情况与情形三类似，只是在打开 D Activity 的时候（这时任务栈是 D-&gt;C），当前任务栈转移到了 LaunchModeB 程序中，相当于打开了 LaunchMode 这个程序，而这时栈顶是 D ，所以出现的是 D Activity，按下返回键跳转到 C Activity。</p>\n<p>另一种情况是在 Intent 中设置标志位来为 Activity 指定启动模式。这种方式优先于 AndroidManifest 中配置的方式，当两种同时存在时，以第二种方式为准。然后它们在限定范围上有所不同，第一种方式无法设置  FLAG_ACTIVITY_CLEAR_TOP 标志，而第二种方式无法指定 singleInstance 模式。</p>\n<p><strong>FLAG_ACTIVITY_NEW_TASK</strong> </p>\n<p>等同于 “singleTask” 。在这种情况下，被启动的 Activity 的实例如果已经存在，那么系统会调用他的 onNewIntent ，而不会去调用 onCreate 。但是不要忘记，系统可能会杀掉后台运行的 Activity，如果这一切发生，那么系统就会调用 onCreate 方法，而不调用 onNewIntent 方法，一个好的解决方法就是在 onCreate 和 onNewIntent 方法中调用同一个处理数据的方法。</p>\n<p><strong>FLAG_ACTIVITY_SINGLE_TOP</strong></p>\n<p>等同于 “singleTop” 。</p>\n<p><strong>FLAG_ACTIVITY_CLEAR_TOP</strong></p>\n<p>等同于 “singleTop” 。</p>\n<p>在 Android Studio 中可以使用 <code>adb shell dumpsys activity</code> 来查看任务栈和 <code>taskAffinity</code> 的值。</p>\n<p> <a href=\"http://android.xsoftlab.net/guide/topics/manifest/activity-element.html#aff\" target=\"_blank\" rel=\"external\">taskAffinity</a></p>\n"},{"title":"spring学习总结——事务管理","date":"2017-05-05T11:13:51.000Z","_content":"\n\n\n\n\n## Spring介绍 ##\n\nSpring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式。\n\n\n\n![](anisur.jpg)\n\n<!-- more -->\n\n# Spring中的事务管理介绍 #\n\n Spring 是 SSH 中的指挥员和管理者，它负责管理其他框架，控制着整个网站。Spring 中的事务分为：\n\n- 声明式事务  \n  - 开发中**推荐使用**（代码侵入性最小）\n  - Spring的声明式事务是通过**AOP**实现的\n- 编程式事务\n  - 在实际中很少使用\n  - 通过**TransactionTemplate**手动管理事务\n\n 其中声明式事务是在配置文件中进行相关的配置，而编程式事务就是用注解的方式写到代码里。配置文件中定义的bean要比注解里定义的加载早，所以有时会出现在启动阶段（listen 和filter ），是找不到bean 的。\n\n 那么到底是选择声明式还是编程式，我们需要有如下的考虑：\n\n 1. 如果是类级别并且不会发生变动的配置可以优先考虑注解配置，而对于那些第三方以及容易发生调整的配置就优先考虑XML配置文件方式。\n 2. 相比于 @Transaction 事务注解，使用 aop / tx命名空间的事务配置更加灵活和简单。\n 3. 注解可以有效减少配置的工作量，提高程序的内聚性。\n 4. 在第三方Bean 的配置，以及诸如数据源、缓存池、持久层操作模板类、事务管理等内容的配置上，XML 配置依然拥有不可替代的地位。\n\n\n Spring配置文件中关于事务配置总是由三个组成部分，分别是DataSource、TransactionManager 和代理机制这三部分，无论哪种配置方式，一般变化的只是代理机制这部分。DataSource、 TransactionManager 这两部分只是会根据数据访问方式有所变化，比如使用 Hibernate 进行数据访问时，DataSource 实际为 SessionFactory，TransactionManager 的实现为 HibernateTransactionManager。 下面一起看看三种声明式事务的具体配置：\n\n\n\n\n\n\n\n\n\n## 事务管理高层抽象\n\n### 1. PlatformTransactionManager\n\n事务管理器，真正管理事务的类，Spring为不同的持久化框架提供了不同的PlatformTransactionManager接口实现。\n\n| 事务                                       | 说明                            |\n| ---------------------------------------- | ----------------------------- |\n| org.springframework.jdbc.datasource.DataSourceTransactionManager | 使用Spring JDBC或iBatis进行持久化数据使用 |\n| org.springframework.orm.hibernate5.HibernateTransactionManager | 使用Hibernate5.0版本进行持久化数据时使用    |\n\n\n\n\n\n### 2. TransactionDefinition\n\n事务定义信息（隔离、传播、超时、只读）\n\n事务的特性：原子性、一致性、隔离性、持久性。\n\n如果不考虑隔离性，会引发\n\n> 脏读：一个事务读取了另一个事务改写的但未提交的数据，如果这些数据被回滚，则读到的数据是无效的。\n>\n> 不可重复读：在同一事务中，多次读取同一数据返回的结果有所不同.\n>\n> 幻读：一个事务读取了几行记录后，另一个事务插入了一些记录。在后来的查询中，第一个事务就有些原来没有的记录。\n\n\n\n#### 隔离级别\n\n| 隔离级别            | 含义                                       |\n| --------------- | ---------------------------------------- |\n| DEFAULT         | 使用后端数据库默认的隔离级别（spring中的选择项）              |\n| READ_UNCOMMITED | 允许你读取还未提交的改变了的数据，是可能导致脏读、幻读、不可重复读的。      |\n| READ_COMMITED   | 允许在并发事务已经提交后读取。可防止脏读，但幻读、不可重复读仍可能发发生     |\n| REPEATABLE_READ | 对相同字段对此读取时一致的，除非数据本身被事务改变，可防脏读和不可重复读，幻读仍可能发生。 |\n| SERIALIZABLE    | 完全服从ACID的隔离级别，确保不发生任意的读问题，事务排队，不会出现并发。   |\n\n\n\n> 如果选择了Spring默认的隔离级别，那么使用Mysql对应的默认级别是REPEATABLE_READ， Oracle对应的默认级别是READ_COMMITED。\n\n\n\n#### 传播行为\n\n**解决业务层方法之间的相互调用问题。**\n\n假设业务层有两个方法aaa和bbb，当有复杂的事务情况发生时，比如某个事务需要同时调用aaa和bbb。\n\n| 事务的传播行为                   | 说明                       | 举例                                       |\n| ------------------------- | ------------------------ | ---------------------------------------- |\n| PROPAGATION_REQUIRED（默认）  | 支持当前事务，如果不存在就新建一个        | 如果aaa有事务，则使用之。如果没有就新建一个                  |\n| PROPAGATION_SUPPORTS      | 支持当前事务，如果不存在，就不使用事务      | 如果aaa有事务，则使用之。如果没有就不使用事务                 |\n| PROPAGATION_MANDATORY     | 支持当前事务，如果不存在，就抛出异常       | 如果aaa有事务，则使用之。如果没有就抛出异常                  |\n| PROPAGATION_REQUIRES_NEW  | 如果有事务，挂起当前事务，创建一个新的事务    | aaa和bbb没有在一个事务中                          |\n| PROPAGATION_NOT_SUPPORTED | 以非事务方式允许，如果有事务运行，则挂起当前事务 | aaa有事务，在执行bbb的时候，把aaa的事务挂起               |\n| PROPAGATION_NEVER         | 以非事务方式允许，如果有事务运行，则抛出异常   | aaa有事务，在执行bbb的时候，会抛出异常                   |\n| PROPAGATION_NESTED        | 如果当前事务存在，则使用嵌套事务         | aaa一执行完后会使用事务设置一个保存点。在执行bbb的时候，如果bbb没有报异常，那么他们就一起提交了。如果bbb中发生了异常，你可以控制回滚到保存点还是初始位置。 |\n\n\n\n\n\n### 3. TransactionStatus\n\n**事务具体运行状态**\n\n提供了一组可以获得事务当前状态的方法。\n\n\n\n\n\n\n\n## 编程式的事务控制\n\n- 在你需要使用**TransactionTemplate**模板的的bean中进行注入。\n- **TransactionTemplate **以来 **DataSourceTransactionManager** \n- **DataSourceTransactionManager** 以来 **DataSource** 构造\n\n\n\n```Xml\n    <!--  配置hibernate事务管理器 -->\n    <bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate5.HibernateTransactionManager\">\n        <!--注入sessionFactory-->\n        <property name=\"sessionFactory\" ref=\"sessionFactory\"/>\n    </bean>\n    <!--或者配置JDBC事务管理器-->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n       <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n\n<!--配置事务管理的模板,spring为了简化事务管理的代码而提供的类-->\n    <bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n    </bean>\n```\n\n\n\n### JDBCTemplate\n\n如果要使用 JDBCTemplate ，那么需要继承JdbcDaoSupport。\n\n```java\npublic class UserDaoImpl  extends JdbcDaoSupport implements UserDao{\n      @Override\n    public void add() {\n        String sql = \"insert t_user values(null,?)\";\n        this.getJdbcTemplate().execute(sql,\" nimon\");\n    }\n}\n```\n\n### HibernateTemplate\n\n继承`HibernateDaoSupport` ，使用其中已经帮我们定义好的 `hibernateTemplate`  \n\n\n\n```java\n@Transactional(propagation = Propagation.REQUIRED)\n@Repository(\"userDaoHibernate\")\npublic class UserDaoHibernateImpl extends HibernateDaoSupport   {\n\n    /*这里两种方法选其一即可。*/\n    @Autowired\n    public void setMySessionFactory(SessionFactory sessionFactory){\n        super.setSessionFactory(sessionFactory);\n    }\n\t/*这里两种方法选其一即可。*/\n    @Resource(name = \"sessionFactory\")\n    public void setSuperSessionFactory(SessionFactory sessionFactory) {\n        super.setSessionFactory(sessionFactory);\n    }\n\n    public boolean add(User user) {\n        try {\n             this.getHibernateTemplate().save(user);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n}\n```\n\n\n\n### 关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识\n\n首先 `sessionFactory` 和`HibernateTemplate` ， `HibernateTemplate` 和`HibernateDaoSupport` \n\nSessionFactory 是一个创建 Session 的工厂，通过 SessionFactory 创建的 Session 可以去执行数据库操作\n\nHibernateTemplate 把 Session 的一些操作进一步封装组合，实际上也基本上是执行 Session 一样的数据库操作，但是HibernateTemplate 能和 spring 的很多功能融合在一起，比如事务。\n\n> 如果我们吧 SessionFactory 比作是航母，Session 就是歼10，而 HibernateTemplate 就是歼15，歼10和歼15都是承载于航母之上的\n\n> 不管是 Session 或者 HibernateTemplate  都需要SessionFactory的支持才能执行其功能\n\n> 由于 HibernateTemplate 本身关于 sessionFactory的 处理原理，我们不再需要手动编写关于 sessionFactory、session、transaction等等代码。\n\n我们只需要编写关于业务逻辑相关的操作，其他的一并由HibernateTemplate完成。HibernateTemplate的这种设计模式我们称之为TemplateMethod，采用的方式叫callback或者钩子函数。这里的重点就是把SessionFactory注入到HibernateTemplate里面！！！\n\n\n\nUserService\n\n```java\n    public void add() {\n        System.out.println(\"userService........\");\n        mTransactionTemplate.execute(new TransactionCallbackWithoutResult() {\n            @Override\n            protected void doInTransactionWithoutResult(TransactionStatus status) {  //这里需要一个TransactionCallback参数\n                userDao.add();\n            }\n        });\n    }\n```\n\n需要手动改service的代码，所以是不建议的。\n\n\n\n## 声明式的事务管理\n\n###  公共配置\t\n\n```xml\n\t<!-- 配置SessionFactory,交给spring管理 -->\n\t\n\t<bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\">\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\n\t<!-- 引入hibernate配置文件 -->\n\t<property name=\"configLocation\" value=\"classpath:/hibernate.cfg.xml\"></property>\n```\n\n```xml\n<!-- 事务管理器 -->\n<bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate4.HibernateTransactionManager\">\n   <property name=\"sessionFactory\" ref=\"sessionFactory\"></property>\n</bean>\n```\n\n```xml\n<!-- 配置DAO --> \n<bean id=\"userDao\" class=\"com.dao.UserDaoImpl\">\n    <property name=\"sessionFactory\" ref=\"sessionFactory\"></property>\n</bean>\n```\n\n\n\n### 注入bean\n\n```Xml\n\t<bean id=\"userDaoImpl\" class=\"cn.nini.dao.UserDaoImpl\">\n        <!--需要继承JDBCDaoSupport -->\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n    </bean>\n    \n    <!--没有增强过的对象-->\n    <bean id=\"userService\" class=\"cn.nini.service.UserService\">\n        <property name=\"userDao\" ref=\"userDaoImpl\"/>\n        <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n    </bean>\n```\n\n\n\n\n\n### 第一种传统方式\n\n**使用原始的TransactionProxyFactoryBean配置声明式事务**，需要为每一个事务管理的类，配置 TransactionProxyFactoryBean 进行增强。\n\n1. 要增强的bean\n2. transactionManager\n3. 目标增强代理对象。\n\n```xml\n    <bean id=\"transactionManager\"\n          class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <!--增强过的对象-->\n    <bean id=\"userServiceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\n        <!--配置目标对象-->\n        <property name=\"target\" ref=\"userService\"/>\n        <!--注入事务管理器-->\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n        <!--注入事务的属性-->\n        <property name=\"transactionAttributes\">\n            <props>\n                <!--\n                    prop的格式\n                        PROPAGATION : 事务的传播行为\n                        ISOLATION : 事务的隔离级别\n                        readOnly : 只读\n                        -Exception : 发生哪些异常回滚事务\n                        +Exception :发生哪些异常不回滚事务\n                -->\n            <prop key=\"add*\">PROPAGATION_REQUIRED,readOnly</prop>\n            </props>\n        </property>\n    </bean>\n\n  \n```\n\n> 如果设置了readOnly,那么只要进行了写操作就会出现， Connection is read-only.错误。\n\n- prop的格式\n  - PROPAGATION : 事务的传播行为\n  - ISOLATION : 事务的隔离级别\n  - readOnly : 只读\n  - -Exception : 发生哪些异常回滚事务\n  - +Exception :发生哪些异常不回滚事务\n\n\n### 第二种方式：tx/aop\n\ntx / aop 方式，一旦配置好，类就不需要添加任何东西。\t\n\n```Xml\n\t<!--配置事务的通知  (事务的增强)-->\n    <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <!-- \n\t\t\t\tpropagation\t:事务传播行为\n\t\t\t\tisolation\t:事务的隔离级别\n\t\t\t\tread-only\t:只读\n\t\t\t\trollback-for:发生哪些异常回滚\n\t\t\t\tno-rollback-for\t:发生哪些异常不回滚\n\t\t\t\ttimeout\t\t:过期信息\n\t\t\t -->\n            <tx:method name=\"add*\" propagation=\"REQUIRED\" isolation=\"DEFAULT\"  read-only=\"false\" timeout=\"-1\"/>\n        </tx:attributes>\n    </tx:advice>\n    <aop:config>\n        <!--切入点-->\n        <aop:pointcut id=\"pointcut1\" expression=\"execution(* cn.nini.service.UserService+.*(..))\"/>\n        <!--切面-->\n        <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut1\"/>\n    </aop:config>\n```\n\n\n\n```xml\n<!-- 事务属性 -->\n  <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n   <tx:attributes>\n      <tx:method name=\"get*\" propagation=\"REQUIRED\" rollback-for=\"Exception\" read-only=\"true\"/>\n      <tx:method name=\"modify*\" propagation=\"REQUIRED\" rollback-for=\"Exception\" />\n      <tx:method name=\"del*\" propagation=\"REQUIRED\" rollback-for=\"Exception\"/>\n      <tx:method name=\"*\" propagation=\"REQUIRED\" read-only=\"true\"/>\n   </tx:attributes>\n</tx:advice>\n \n<aop:config>\n   <!--第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数    -->\n   <aop:pointcut  id=\"txPointCut\" expression=\"execution(* org.nan.service.*.*(..))\"/>\n   <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"txPointCut\"/>\n</aop:config>\n```\n\nexecution(* org.nan.service.\\*.\\*(..)) \n\n第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数 \n\nexecution(* org.nan.service.UserService+.*(..))\n\n这里的 \"+\" 是代表 UserService 的子类。\n\n\n\n### 第三种方式：注解\n\n使用注解方式，配置简单，需要在业务类上添加 `@Transactional` 注解\n\n在xml中开启注解事务\n\n```xml\n\t<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n  <!--开启注解事务-->\n  <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n```\n\n在需要开启事务的类前面加上\n\n> 但是如果抛出的是 checked 异常，那么就不会自动回滚。这时如果我想让他回滚怎么办呢？spring就给我们提供了@Transactional 注解，使用属性为 `rollbackFor = 将发生的异常.class`\n\n> 在运行期间如果抛出了运行期异常( `RuntimeException` )unchecked  ，那么就会自动回滚。如果我不想让他自动回滚，那么就使用 `noRollbackFor`即可。\n>\n> \n\n@Transactional中的的属性\n\n- propagation\t:事务的传播行为\n - isolation\t:事务的隔离级别\n  - readOnly:只读\n - rollbackFor:发生哪些异常回滚\n - noRollbackFor:发生哪些异常不回滚\n- rollbackForClassName 根据异常类名回滚\n\n```Java\n /*\n */\n@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly = false,timeout = -1)\npublic class UserService {\n\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n## Spring 的 Bean 管理的中常用的注解\n\nSpring 中提供@Component 的三个衍生注解:(功能目前来讲是一致的)\n\n```\n* @Component         :组件.(作用在类上)\n* @Controller        :WEB 层\n* @Service           :业务层\n* @Repository        :持久层\n```\n\n这三个注解是为了让标注类本身的用途清晰，Spring 在后续版本会对其增强\t\t\n\n\n​\t\t\t\t\n\n## 属性注入的注解\n\n (使用注解注入的方式,可以不用提供 set 方法.)\n\n\n\n\n###  @Autowired\n\nspring可以自动帮你把bean里面引用的对象的 setter/getter 方法省略，它会自动帮你 set/get .\n\n也可以用在`方法`上或者`构造函数`上。构造函数上如果有Bean，并调用方法自动注入这些Bean。\n\n\n\n#### @Qualifier\n\n强制使用名称注入.\n\n\n​\t\n\n\n\n\n### @Resource\n\n类似于`@Autowired`，只不过 `@Autowired` 按 byType 自动注入，面 `@Resource` 默认按 byName自动注入。\n\n> **@Resource 相当于: @Autowired 和 @Qualifier 一起使用.**\n\n他有两个属性：\n\n- name：name属性解析为 Bean的名字\n- type：type属性则解析为 Bean的类型\n\n\n\n所以如果使用 name属性，则使用 byName的自动注入策略，而使用 type属性时则使用 byType\n\n> 自动注入策略。如果既不指定 name也不指定 type属性，这时将通过反射机制使用默认的名称自动注入策略。如果没有指定 name 属性，并且按照默认的名称也找不到依赖对象，`@resource`会退回到按类型装配。丹一旦指定了 name 属性，就这样按照名称装配了。\n\n> Resource 注释类位于 Spring发布包的 `common-annotations.jar` 类包中\n\n\n\n### @Required\n\n`@Required` 注解检查 但他只检查属性是否已经设置而不会测试属性是否非空，\n\n\n\n```java\n\t@Required  \n    public void setProduct(Product product) {  \n        this.product = product;  \n    }  \n```\n\n> 注意 : @Required只能设置在setter方法上\n\n> 这样如果任何带有@Required的属性未设置的话 将会抛出BeanInitializationException异常\n\n\n\n## 需要注意的地方\n\n> 注意 1 ： 在组件类前加上 @Component(\" 标识符 \") 的作用与在配置文件中配置是一样的。\n\n\n\n> 注意 2 ： 如果不指定 @Qualifier(\" 标识符 \") 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(\" 标识符 \")  的标识符相同。\n>\n> 不然会出错     \n\n```Java\n Injection of autowired dependencies failed\n\n Could not autowire field\n```\n\n> 注意 3 ： 如果@Component(\" 标识符 \")，重复定义了，那么会出现以下异常\n\n```Java\njava.lang.IllegalStateException: Failed to load ApplicationContext\n\nCaused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]\n```\n\n> 注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n\n## 使用spring提供的方便\n\n\n\n使用@Autowired注解，必须事先在Spring容器中声明 `AutowiredAnnotationBeanPostProcessor的Bean` ：\n\n```xml\n<bean class=\"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor \"/>\n```\n\n> 当 Spring 容器启动时，`AutowiredAnnotationBeanPostProcessor`将扫描 Spring 容器中所有 Bean,当发现 Bean 中拥有 @Autowired 注释时就找到和其匹配（默认按类型匹配）的 Bean,并注入到对应的地方中去。用到的技术是JAVA中的反射。\n\n\n\n\n\n使用 @Required注解，就必须声明 `RequiredAnnotationBeanPostProcessor` 的Bean：\n\n```xml\n<bean class=\"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor\"/>\n```\n\n类似地，使用`@Resource` 、`@PostConstruct` 、`@PreDestroy` 等注解就必须声明 `CommonAnnotationBeanPostProcessor` ；使用 `@PersistenceContext` 注解，就必须声明  `PersistenceAnnotationBeanPostProcessor` 的Bean。\n\n\n\n这样的声明未免太不优雅，而Spring为我们提供了一种极为方便注册这些BeanPostProcessor的方式，即使用 **`<context:annotation- config/>`** 隐式地向 Spring容器注册`AutowiredAnnotationBeanPostProcessor` 、`RequiredAnnotationBeanPostProcessor` 、`CommonAnnotationBeanPostProcessor` 以及    `PersistenceAnnotationBeanPostProcessor` 这4个BeanPostProcessor。如下：\n\n```xml\n<context:annotation-config/> \n```\n\n但是，在我们使用注解时一般都会配置扫描包路径选项：\n\n```xml\n<context:component-scan base-package=\"pack.pack\"/>\n```\n\n>  该配置项其实也包含了自动注入上述processor的功能，因此当使用 `<context:component-scan/>` 后，即可将 `<context:annotation-config/> `省去。\n\n\n\n## Bean 的作用范围的注解\n\n> @Scope:\n>\n> ​\tsingleton:单例\n>\n>  \tprototype:多例\n\n\n\n## Bean 的生命周期的配置\n\n​\t\t\n\n> @PostConstruct :相当于 init-method\n>\n> @PreDestroy :相当于 destroy-method\n\n​\t\t\t\n\n## Spring 的 Bean 管理的方式的比较\n\n\n​\t\t\t\n\n|               |               基于XML配置                |                  基于注解配置                  |\n| ------------- | :----------------------------------: | :--------------------------------------: |\n| Bean定义        |     <bean id = \"…\" class = \"…\"/>     | @Component 其衍生类 @Repository @Service @Controller |\n| Bean名称        |             通过id或name指定              |           @Component(\"person\")           |\n| Bean注入        |         <property>或者通过p命名空间          | @AutoWired 按类型注入 @Qualifier按名称注入 @Resource 相当于@Autowired和@Qualifier同时使用 |\n| 生命过程、Bean作用范围 | init-method destory-method 范围scope属性 | @PostConstruct 初始化 @PreDestory 销毁 @Scope 设置作用范围 |\n| 适合场景          |              Bean来自第三方               |              Bean由用户自己实现开发               |\n\n\n\nxml和注解：\n\n*   XML ： 结构清晰\n\n* 注解 ： 开发方便（属性注入）\n\n    ​\n\n> 实际开发中还有一种 XML 和注解整合开发:\n>\n> Bean有XML配置.但是使用的属性使用注解注入.\n\n​\t","source":"_drafts/Spring/2017-05-05-spring 事务管理（三）.md","raw":"---\ntitle: spring学习总结——事务管理\ndate: 2017-05-05 19:13:51\ntags: Spring\n---\n\n\n\n\n\n## Spring介绍 ##\n\nSpring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式。\n\n\n\n![](anisur.jpg)\n\n<!-- more -->\n\n# Spring中的事务管理介绍 #\n\n Spring 是 SSH 中的指挥员和管理者，它负责管理其他框架，控制着整个网站。Spring 中的事务分为：\n\n- 声明式事务  \n  - 开发中**推荐使用**（代码侵入性最小）\n  - Spring的声明式事务是通过**AOP**实现的\n- 编程式事务\n  - 在实际中很少使用\n  - 通过**TransactionTemplate**手动管理事务\n\n 其中声明式事务是在配置文件中进行相关的配置，而编程式事务就是用注解的方式写到代码里。配置文件中定义的bean要比注解里定义的加载早，所以有时会出现在启动阶段（listen 和filter ），是找不到bean 的。\n\n 那么到底是选择声明式还是编程式，我们需要有如下的考虑：\n\n 1. 如果是类级别并且不会发生变动的配置可以优先考虑注解配置，而对于那些第三方以及容易发生调整的配置就优先考虑XML配置文件方式。\n 2. 相比于 @Transaction 事务注解，使用 aop / tx命名空间的事务配置更加灵活和简单。\n 3. 注解可以有效减少配置的工作量，提高程序的内聚性。\n 4. 在第三方Bean 的配置，以及诸如数据源、缓存池、持久层操作模板类、事务管理等内容的配置上，XML 配置依然拥有不可替代的地位。\n\n\n Spring配置文件中关于事务配置总是由三个组成部分，分别是DataSource、TransactionManager 和代理机制这三部分，无论哪种配置方式，一般变化的只是代理机制这部分。DataSource、 TransactionManager 这两部分只是会根据数据访问方式有所变化，比如使用 Hibernate 进行数据访问时，DataSource 实际为 SessionFactory，TransactionManager 的实现为 HibernateTransactionManager。 下面一起看看三种声明式事务的具体配置：\n\n\n\n\n\n\n\n\n\n## 事务管理高层抽象\n\n### 1. PlatformTransactionManager\n\n事务管理器，真正管理事务的类，Spring为不同的持久化框架提供了不同的PlatformTransactionManager接口实现。\n\n| 事务                                       | 说明                            |\n| ---------------------------------------- | ----------------------------- |\n| org.springframework.jdbc.datasource.DataSourceTransactionManager | 使用Spring JDBC或iBatis进行持久化数据使用 |\n| org.springframework.orm.hibernate5.HibernateTransactionManager | 使用Hibernate5.0版本进行持久化数据时使用    |\n\n\n\n\n\n### 2. TransactionDefinition\n\n事务定义信息（隔离、传播、超时、只读）\n\n事务的特性：原子性、一致性、隔离性、持久性。\n\n如果不考虑隔离性，会引发\n\n> 脏读：一个事务读取了另一个事务改写的但未提交的数据，如果这些数据被回滚，则读到的数据是无效的。\n>\n> 不可重复读：在同一事务中，多次读取同一数据返回的结果有所不同.\n>\n> 幻读：一个事务读取了几行记录后，另一个事务插入了一些记录。在后来的查询中，第一个事务就有些原来没有的记录。\n\n\n\n#### 隔离级别\n\n| 隔离级别            | 含义                                       |\n| --------------- | ---------------------------------------- |\n| DEFAULT         | 使用后端数据库默认的隔离级别（spring中的选择项）              |\n| READ_UNCOMMITED | 允许你读取还未提交的改变了的数据，是可能导致脏读、幻读、不可重复读的。      |\n| READ_COMMITED   | 允许在并发事务已经提交后读取。可防止脏读，但幻读、不可重复读仍可能发发生     |\n| REPEATABLE_READ | 对相同字段对此读取时一致的，除非数据本身被事务改变，可防脏读和不可重复读，幻读仍可能发生。 |\n| SERIALIZABLE    | 完全服从ACID的隔离级别，确保不发生任意的读问题，事务排队，不会出现并发。   |\n\n\n\n> 如果选择了Spring默认的隔离级别，那么使用Mysql对应的默认级别是REPEATABLE_READ， Oracle对应的默认级别是READ_COMMITED。\n\n\n\n#### 传播行为\n\n**解决业务层方法之间的相互调用问题。**\n\n假设业务层有两个方法aaa和bbb，当有复杂的事务情况发生时，比如某个事务需要同时调用aaa和bbb。\n\n| 事务的传播行为                   | 说明                       | 举例                                       |\n| ------------------------- | ------------------------ | ---------------------------------------- |\n| PROPAGATION_REQUIRED（默认）  | 支持当前事务，如果不存在就新建一个        | 如果aaa有事务，则使用之。如果没有就新建一个                  |\n| PROPAGATION_SUPPORTS      | 支持当前事务，如果不存在，就不使用事务      | 如果aaa有事务，则使用之。如果没有就不使用事务                 |\n| PROPAGATION_MANDATORY     | 支持当前事务，如果不存在，就抛出异常       | 如果aaa有事务，则使用之。如果没有就抛出异常                  |\n| PROPAGATION_REQUIRES_NEW  | 如果有事务，挂起当前事务，创建一个新的事务    | aaa和bbb没有在一个事务中                          |\n| PROPAGATION_NOT_SUPPORTED | 以非事务方式允许，如果有事务运行，则挂起当前事务 | aaa有事务，在执行bbb的时候，把aaa的事务挂起               |\n| PROPAGATION_NEVER         | 以非事务方式允许，如果有事务运行，则抛出异常   | aaa有事务，在执行bbb的时候，会抛出异常                   |\n| PROPAGATION_NESTED        | 如果当前事务存在，则使用嵌套事务         | aaa一执行完后会使用事务设置一个保存点。在执行bbb的时候，如果bbb没有报异常，那么他们就一起提交了。如果bbb中发生了异常，你可以控制回滚到保存点还是初始位置。 |\n\n\n\n\n\n### 3. TransactionStatus\n\n**事务具体运行状态**\n\n提供了一组可以获得事务当前状态的方法。\n\n\n\n\n\n\n\n## 编程式的事务控制\n\n- 在你需要使用**TransactionTemplate**模板的的bean中进行注入。\n- **TransactionTemplate **以来 **DataSourceTransactionManager** \n- **DataSourceTransactionManager** 以来 **DataSource** 构造\n\n\n\n```Xml\n    <!--  配置hibernate事务管理器 -->\n    <bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate5.HibernateTransactionManager\">\n        <!--注入sessionFactory-->\n        <property name=\"sessionFactory\" ref=\"sessionFactory\"/>\n    </bean>\n    <!--或者配置JDBC事务管理器-->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n       <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n\n<!--配置事务管理的模板,spring为了简化事务管理的代码而提供的类-->\n    <bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n    </bean>\n```\n\n\n\n### JDBCTemplate\n\n如果要使用 JDBCTemplate ，那么需要继承JdbcDaoSupport。\n\n```java\npublic class UserDaoImpl  extends JdbcDaoSupport implements UserDao{\n      @Override\n    public void add() {\n        String sql = \"insert t_user values(null,?)\";\n        this.getJdbcTemplate().execute(sql,\" nimon\");\n    }\n}\n```\n\n### HibernateTemplate\n\n继承`HibernateDaoSupport` ，使用其中已经帮我们定义好的 `hibernateTemplate`  \n\n\n\n```java\n@Transactional(propagation = Propagation.REQUIRED)\n@Repository(\"userDaoHibernate\")\npublic class UserDaoHibernateImpl extends HibernateDaoSupport   {\n\n    /*这里两种方法选其一即可。*/\n    @Autowired\n    public void setMySessionFactory(SessionFactory sessionFactory){\n        super.setSessionFactory(sessionFactory);\n    }\n\t/*这里两种方法选其一即可。*/\n    @Resource(name = \"sessionFactory\")\n    public void setSuperSessionFactory(SessionFactory sessionFactory) {\n        super.setSessionFactory(sessionFactory);\n    }\n\n    public boolean add(User user) {\n        try {\n             this.getHibernateTemplate().save(user);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n}\n```\n\n\n\n### 关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识\n\n首先 `sessionFactory` 和`HibernateTemplate` ， `HibernateTemplate` 和`HibernateDaoSupport` \n\nSessionFactory 是一个创建 Session 的工厂，通过 SessionFactory 创建的 Session 可以去执行数据库操作\n\nHibernateTemplate 把 Session 的一些操作进一步封装组合，实际上也基本上是执行 Session 一样的数据库操作，但是HibernateTemplate 能和 spring 的很多功能融合在一起，比如事务。\n\n> 如果我们吧 SessionFactory 比作是航母，Session 就是歼10，而 HibernateTemplate 就是歼15，歼10和歼15都是承载于航母之上的\n\n> 不管是 Session 或者 HibernateTemplate  都需要SessionFactory的支持才能执行其功能\n\n> 由于 HibernateTemplate 本身关于 sessionFactory的 处理原理，我们不再需要手动编写关于 sessionFactory、session、transaction等等代码。\n\n我们只需要编写关于业务逻辑相关的操作，其他的一并由HibernateTemplate完成。HibernateTemplate的这种设计模式我们称之为TemplateMethod，采用的方式叫callback或者钩子函数。这里的重点就是把SessionFactory注入到HibernateTemplate里面！！！\n\n\n\nUserService\n\n```java\n    public void add() {\n        System.out.println(\"userService........\");\n        mTransactionTemplate.execute(new TransactionCallbackWithoutResult() {\n            @Override\n            protected void doInTransactionWithoutResult(TransactionStatus status) {  //这里需要一个TransactionCallback参数\n                userDao.add();\n            }\n        });\n    }\n```\n\n需要手动改service的代码，所以是不建议的。\n\n\n\n## 声明式的事务管理\n\n###  公共配置\t\n\n```xml\n\t<!-- 配置SessionFactory,交给spring管理 -->\n\t\n\t<bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\">\n\t<property name=\"dataSource\" ref=\"dataSource\"></property>\n\t<!-- 引入hibernate配置文件 -->\n\t<property name=\"configLocation\" value=\"classpath:/hibernate.cfg.xml\"></property>\n```\n\n```xml\n<!-- 事务管理器 -->\n<bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate4.HibernateTransactionManager\">\n   <property name=\"sessionFactory\" ref=\"sessionFactory\"></property>\n</bean>\n```\n\n```xml\n<!-- 配置DAO --> \n<bean id=\"userDao\" class=\"com.dao.UserDaoImpl\">\n    <property name=\"sessionFactory\" ref=\"sessionFactory\"></property>\n</bean>\n```\n\n\n\n### 注入bean\n\n```Xml\n\t<bean id=\"userDaoImpl\" class=\"cn.nini.dao.UserDaoImpl\">\n        <!--需要继承JDBCDaoSupport -->\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <bean id=\"transactionTemplate\" class=\"org.springframework.transaction.support.TransactionTemplate\">\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n    </bean>\n    \n    <!--没有增强过的对象-->\n    <bean id=\"userService\" class=\"cn.nini.service.UserService\">\n        <property name=\"userDao\" ref=\"userDaoImpl\"/>\n        <property name=\"transactionTemplate\" ref=\"transactionTemplate\"/>\n    </bean>\n```\n\n\n\n\n\n### 第一种传统方式\n\n**使用原始的TransactionProxyFactoryBean配置声明式事务**，需要为每一个事务管理的类，配置 TransactionProxyFactoryBean 进行增强。\n\n1. 要增强的bean\n2. transactionManager\n3. 目标增强代理对象。\n\n```xml\n    <bean id=\"transactionManager\"\n          class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <!--增强过的对象-->\n    <bean id=\"userServiceProxy\" class=\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\">\n        <!--配置目标对象-->\n        <property name=\"target\" ref=\"userService\"/>\n        <!--注入事务管理器-->\n        <property name=\"transactionManager\" ref=\"transactionManager\"/>\n        <!--注入事务的属性-->\n        <property name=\"transactionAttributes\">\n            <props>\n                <!--\n                    prop的格式\n                        PROPAGATION : 事务的传播行为\n                        ISOLATION : 事务的隔离级别\n                        readOnly : 只读\n                        -Exception : 发生哪些异常回滚事务\n                        +Exception :发生哪些异常不回滚事务\n                -->\n            <prop key=\"add*\">PROPAGATION_REQUIRED,readOnly</prop>\n            </props>\n        </property>\n    </bean>\n\n  \n```\n\n> 如果设置了readOnly,那么只要进行了写操作就会出现， Connection is read-only.错误。\n\n- prop的格式\n  - PROPAGATION : 事务的传播行为\n  - ISOLATION : 事务的隔离级别\n  - readOnly : 只读\n  - -Exception : 发生哪些异常回滚事务\n  - +Exception :发生哪些异常不回滚事务\n\n\n### 第二种方式：tx/aop\n\ntx / aop 方式，一旦配置好，类就不需要添加任何东西。\t\n\n```Xml\n\t<!--配置事务的通知  (事务的增强)-->\n    <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <!-- \n\t\t\t\tpropagation\t:事务传播行为\n\t\t\t\tisolation\t:事务的隔离级别\n\t\t\t\tread-only\t:只读\n\t\t\t\trollback-for:发生哪些异常回滚\n\t\t\t\tno-rollback-for\t:发生哪些异常不回滚\n\t\t\t\ttimeout\t\t:过期信息\n\t\t\t -->\n            <tx:method name=\"add*\" propagation=\"REQUIRED\" isolation=\"DEFAULT\"  read-only=\"false\" timeout=\"-1\"/>\n        </tx:attributes>\n    </tx:advice>\n    <aop:config>\n        <!--切入点-->\n        <aop:pointcut id=\"pointcut1\" expression=\"execution(* cn.nini.service.UserService+.*(..))\"/>\n        <!--切面-->\n        <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut1\"/>\n    </aop:config>\n```\n\n\n\n```xml\n<!-- 事务属性 -->\n  <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n   <tx:attributes>\n      <tx:method name=\"get*\" propagation=\"REQUIRED\" rollback-for=\"Exception\" read-only=\"true\"/>\n      <tx:method name=\"modify*\" propagation=\"REQUIRED\" rollback-for=\"Exception\" />\n      <tx:method name=\"del*\" propagation=\"REQUIRED\" rollback-for=\"Exception\"/>\n      <tx:method name=\"*\" propagation=\"REQUIRED\" read-only=\"true\"/>\n   </tx:attributes>\n</tx:advice>\n \n<aop:config>\n   <!--第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数    -->\n   <aop:pointcut  id=\"txPointCut\" expression=\"execution(* org.nan.service.*.*(..))\"/>\n   <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"txPointCut\"/>\n</aop:config>\n```\n\nexecution(* org.nan.service.\\*.\\*(..)) \n\n第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数 \n\nexecution(* org.nan.service.UserService+.*(..))\n\n这里的 \"+\" 是代表 UserService 的子类。\n\n\n\n### 第三种方式：注解\n\n使用注解方式，配置简单，需要在业务类上添加 `@Transactional` 注解\n\n在xml中开启注解事务\n\n```xml\n\t<bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n  <!--开启注解事务-->\n  <tx:annotation-driven transaction-manager=\"transactionManager\"/>\n```\n\n在需要开启事务的类前面加上\n\n> 但是如果抛出的是 checked 异常，那么就不会自动回滚。这时如果我想让他回滚怎么办呢？spring就给我们提供了@Transactional 注解，使用属性为 `rollbackFor = 将发生的异常.class`\n\n> 在运行期间如果抛出了运行期异常( `RuntimeException` )unchecked  ，那么就会自动回滚。如果我不想让他自动回滚，那么就使用 `noRollbackFor`即可。\n>\n> \n\n@Transactional中的的属性\n\n- propagation\t:事务的传播行为\n - isolation\t:事务的隔离级别\n  - readOnly:只读\n - rollbackFor:发生哪些异常回滚\n - noRollbackFor:发生哪些异常不回滚\n- rollbackForClassName 根据异常类名回滚\n\n```Java\n /*\n */\n@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly = false,timeout = -1)\npublic class UserService {\n\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n## Spring 的 Bean 管理的中常用的注解\n\nSpring 中提供@Component 的三个衍生注解:(功能目前来讲是一致的)\n\n```\n* @Component         :组件.(作用在类上)\n* @Controller        :WEB 层\n* @Service           :业务层\n* @Repository        :持久层\n```\n\n这三个注解是为了让标注类本身的用途清晰，Spring 在后续版本会对其增强\t\t\n\n\n​\t\t\t\t\n\n## 属性注入的注解\n\n (使用注解注入的方式,可以不用提供 set 方法.)\n\n\n\n\n###  @Autowired\n\nspring可以自动帮你把bean里面引用的对象的 setter/getter 方法省略，它会自动帮你 set/get .\n\n也可以用在`方法`上或者`构造函数`上。构造函数上如果有Bean，并调用方法自动注入这些Bean。\n\n\n\n#### @Qualifier\n\n强制使用名称注入.\n\n\n​\t\n\n\n\n\n### @Resource\n\n类似于`@Autowired`，只不过 `@Autowired` 按 byType 自动注入，面 `@Resource` 默认按 byName自动注入。\n\n> **@Resource 相当于: @Autowired 和 @Qualifier 一起使用.**\n\n他有两个属性：\n\n- name：name属性解析为 Bean的名字\n- type：type属性则解析为 Bean的类型\n\n\n\n所以如果使用 name属性，则使用 byName的自动注入策略，而使用 type属性时则使用 byType\n\n> 自动注入策略。如果既不指定 name也不指定 type属性，这时将通过反射机制使用默认的名称自动注入策略。如果没有指定 name 属性，并且按照默认的名称也找不到依赖对象，`@resource`会退回到按类型装配。丹一旦指定了 name 属性，就这样按照名称装配了。\n\n> Resource 注释类位于 Spring发布包的 `common-annotations.jar` 类包中\n\n\n\n### @Required\n\n`@Required` 注解检查 但他只检查属性是否已经设置而不会测试属性是否非空，\n\n\n\n```java\n\t@Required  \n    public void setProduct(Product product) {  \n        this.product = product;  \n    }  \n```\n\n> 注意 : @Required只能设置在setter方法上\n\n> 这样如果任何带有@Required的属性未设置的话 将会抛出BeanInitializationException异常\n\n\n\n## 需要注意的地方\n\n> 注意 1 ： 在组件类前加上 @Component(\" 标识符 \") 的作用与在配置文件中配置是一样的。\n\n\n\n> 注意 2 ： 如果不指定 @Qualifier(\" 标识符 \") 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(\" 标识符 \")  的标识符相同。\n>\n> 不然会出错     \n\n```Java\n Injection of autowired dependencies failed\n\n Could not autowire field\n```\n\n> 注意 3 ： 如果@Component(\" 标识符 \")，重复定义了，那么会出现以下异常\n\n```Java\njava.lang.IllegalStateException: Failed to load ApplicationContext\n\nCaused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]\n```\n\n> 注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n\n## 使用spring提供的方便\n\n\n\n使用@Autowired注解，必须事先在Spring容器中声明 `AutowiredAnnotationBeanPostProcessor的Bean` ：\n\n```xml\n<bean class=\"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor \"/>\n```\n\n> 当 Spring 容器启动时，`AutowiredAnnotationBeanPostProcessor`将扫描 Spring 容器中所有 Bean,当发现 Bean 中拥有 @Autowired 注释时就找到和其匹配（默认按类型匹配）的 Bean,并注入到对应的地方中去。用到的技术是JAVA中的反射。\n\n\n\n\n\n使用 @Required注解，就必须声明 `RequiredAnnotationBeanPostProcessor` 的Bean：\n\n```xml\n<bean class=\"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor\"/>\n```\n\n类似地，使用`@Resource` 、`@PostConstruct` 、`@PreDestroy` 等注解就必须声明 `CommonAnnotationBeanPostProcessor` ；使用 `@PersistenceContext` 注解，就必须声明  `PersistenceAnnotationBeanPostProcessor` 的Bean。\n\n\n\n这样的声明未免太不优雅，而Spring为我们提供了一种极为方便注册这些BeanPostProcessor的方式，即使用 **`<context:annotation- config/>`** 隐式地向 Spring容器注册`AutowiredAnnotationBeanPostProcessor` 、`RequiredAnnotationBeanPostProcessor` 、`CommonAnnotationBeanPostProcessor` 以及    `PersistenceAnnotationBeanPostProcessor` 这4个BeanPostProcessor。如下：\n\n```xml\n<context:annotation-config/> \n```\n\n但是，在我们使用注解时一般都会配置扫描包路径选项：\n\n```xml\n<context:component-scan base-package=\"pack.pack\"/>\n```\n\n>  该配置项其实也包含了自动注入上述processor的功能，因此当使用 `<context:component-scan/>` 后，即可将 `<context:annotation-config/> `省去。\n\n\n\n## Bean 的作用范围的注解\n\n> @Scope:\n>\n> ​\tsingleton:单例\n>\n>  \tprototype:多例\n\n\n\n## Bean 的生命周期的配置\n\n​\t\t\n\n> @PostConstruct :相当于 init-method\n>\n> @PreDestroy :相当于 destroy-method\n\n​\t\t\t\n\n## Spring 的 Bean 管理的方式的比较\n\n\n​\t\t\t\n\n|               |               基于XML配置                |                  基于注解配置                  |\n| ------------- | :----------------------------------: | :--------------------------------------: |\n| Bean定义        |     <bean id = \"…\" class = \"…\"/>     | @Component 其衍生类 @Repository @Service @Controller |\n| Bean名称        |             通过id或name指定              |           @Component(\"person\")           |\n| Bean注入        |         <property>或者通过p命名空间          | @AutoWired 按类型注入 @Qualifier按名称注入 @Resource 相当于@Autowired和@Qualifier同时使用 |\n| 生命过程、Bean作用范围 | init-method destory-method 范围scope属性 | @PostConstruct 初始化 @PreDestory 销毁 @Scope 设置作用范围 |\n| 适合场景          |              Bean来自第三方               |              Bean由用户自己实现开发               |\n\n\n\nxml和注解：\n\n*   XML ： 结构清晰\n\n* 注解 ： 开发方便（属性注入）\n\n    ​\n\n> 实际开发中还有一种 XML 和注解整合开发:\n>\n> Bean有XML配置.但是使用的属性使用注解注入.\n\n​\t","slug":"Spring-2017-05-05-spring-事务管理（三）","published":0,"updated":"2017-05-15T02:45:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndk000sp5ukdfhsqfcb","content":"<h2 id=\"Spring介绍\"><a href=\"#Spring介绍\" class=\"headerlink\" title=\"Spring介绍\"></a>Spring介绍</h2><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式。</p>\n<p><img src=\"/2017/05/05/Spring-2017-05-05-spring-事务管理（三）/anisur.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h1 id=\"Spring中的事务管理介绍\"><a href=\"#Spring中的事务管理介绍\" class=\"headerlink\" title=\"Spring中的事务管理介绍\"></a>Spring中的事务管理介绍</h1><p> Spring 是 SSH 中的指挥员和管理者，它负责管理其他框架，控制着整个网站。Spring 中的事务分为：</p>\n<ul>\n<li>声明式事务  <ul>\n<li>开发中<strong>推荐使用</strong>（代码侵入性最小）</li>\n<li>Spring的声明式事务是通过<strong>AOP</strong>实现的</li>\n</ul>\n</li>\n<li><p>编程式事务</p>\n<ul>\n<li>在实际中很少使用</li>\n<li>通过<strong>TransactionTemplate</strong>手动管理事务</li>\n</ul>\n<p>其中声明式事务是在配置文件中进行相关的配置，而编程式事务就是用注解的方式写到代码里。配置文件中定义的bean要比注解里定义的加载早，所以有时会出现在启动阶段（listen 和filter ），是找不到bean 的。</p>\n<p>那么到底是选择声明式还是编程式，我们需要有如下的考虑：</p>\n<ol>\n<li>如果是类级别并且不会发生变动的配置可以优先考虑注解配置，而对于那些第三方以及容易发生调整的配置就优先考虑XML配置文件方式。</li>\n<li>相比于 @Transaction 事务注解，使用 aop / tx命名空间的事务配置更加灵活和简单。</li>\n<li>注解可以有效减少配置的工作量，提高程序的内聚性。</li>\n<li>在第三方Bean 的配置，以及诸如数据源、缓存池、持久层操作模板类、事务管理等内容的配置上，XML 配置依然拥有不可替代的地位。</li>\n</ol>\n</li>\n</ul>\n<p> Spring配置文件中关于事务配置总是由三个组成部分，分别是DataSource、TransactionManager 和代理机制这三部分，无论哪种配置方式，一般变化的只是代理机制这部分。DataSource、 TransactionManager 这两部分只是会根据数据访问方式有所变化，比如使用 Hibernate 进行数据访问时，DataSource 实际为 SessionFactory，TransactionManager 的实现为 HibernateTransactionManager。 下面一起看看三种声明式事务的具体配置：</p>\n<h2 id=\"事务管理高层抽象\"><a href=\"#事务管理高层抽象\" class=\"headerlink\" title=\"事务管理高层抽象\"></a>事务管理高层抽象</h2><h3 id=\"1-PlatformTransactionManager\"><a href=\"#1-PlatformTransactionManager\" class=\"headerlink\" title=\"1. PlatformTransactionManager\"></a>1. PlatformTransactionManager</h3><p>事务管理器，真正管理事务的类，Spring为不同的持久化框架提供了不同的PlatformTransactionManager接口实现。</p>\n<table>\n<thead>\n<tr>\n<th>事务</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>org.springframework.jdbc.datasource.DataSourceTransactionManager</td>\n<td>使用Spring JDBC或iBatis进行持久化数据使用</td>\n</tr>\n<tr>\n<td>org.springframework.orm.hibernate5.HibernateTransactionManager</td>\n<td>使用Hibernate5.0版本进行持久化数据时使用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-TransactionDefinition\"><a href=\"#2-TransactionDefinition\" class=\"headerlink\" title=\"2. TransactionDefinition\"></a>2. TransactionDefinition</h3><p>事务定义信息（隔离、传播、超时、只读）</p>\n<p>事务的特性：原子性、一致性、隔离性、持久性。</p>\n<p>如果不考虑隔离性，会引发</p>\n<blockquote>\n<p>脏读：一个事务读取了另一个事务改写的但未提交的数据，如果这些数据被回滚，则读到的数据是无效的。</p>\n<p>不可重复读：在同一事务中，多次读取同一数据返回的结果有所不同.</p>\n<p>幻读：一个事务读取了几行记录后，另一个事务插入了一些记录。在后来的查询中，第一个事务就有些原来没有的记录。</p>\n</blockquote>\n<h4 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h4><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEFAULT</td>\n<td>使用后端数据库默认的隔离级别（spring中的选择项）</td>\n</tr>\n<tr>\n<td>READ_UNCOMMITED</td>\n<td>允许你读取还未提交的改变了的数据，是可能导致脏读、幻读、不可重复读的。</td>\n</tr>\n<tr>\n<td>READ_COMMITED</td>\n<td>允许在并发事务已经提交后读取。可防止脏读，但幻读、不可重复读仍可能发发生</td>\n</tr>\n<tr>\n<td>REPEATABLE_READ</td>\n<td>对相同字段对此读取时一致的，除非数据本身被事务改变，可防脏读和不可重复读，幻读仍可能发生。</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>完全服从ACID的隔离级别，确保不发生任意的读问题，事务排队，不会出现并发。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果选择了Spring默认的隔离级别，那么使用Mysql对应的默认级别是REPEATABLE_READ， Oracle对应的默认级别是READ_COMMITED。</p>\n</blockquote>\n<h4 id=\"传播行为\"><a href=\"#传播行为\" class=\"headerlink\" title=\"传播行为\"></a>传播行为</h4><p><strong>解决业务层方法之间的相互调用问题。</strong></p>\n<p>假设业务层有两个方法aaa和bbb，当有复杂的事务情况发生时，比如某个事务需要同时调用aaa和bbb。</p>\n<table>\n<thead>\n<tr>\n<th>事务的传播行为</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PROPAGATION_REQUIRED（默认）</td>\n<td>支持当前事务，如果不存在就新建一个</td>\n<td>如果aaa有事务，则使用之。如果没有就新建一个</td>\n</tr>\n<tr>\n<td>PROPAGATION_SUPPORTS</td>\n<td>支持当前事务，如果不存在，就不使用事务</td>\n<td>如果aaa有事务，则使用之。如果没有就不使用事务</td>\n</tr>\n<tr>\n<td>PROPAGATION_MANDATORY</td>\n<td>支持当前事务，如果不存在，就抛出异常</td>\n<td>如果aaa有事务，则使用之。如果没有就抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_REQUIRES_NEW</td>\n<td>如果有事务，挂起当前事务，创建一个新的事务</td>\n<td>aaa和bbb没有在一个事务中</td>\n</tr>\n<tr>\n<td>PROPAGATION_NOT_SUPPORTED</td>\n<td>以非事务方式允许，如果有事务运行，则挂起当前事务</td>\n<td>aaa有事务，在执行bbb的时候，把aaa的事务挂起</td>\n</tr>\n<tr>\n<td>PROPAGATION_NEVER</td>\n<td>以非事务方式允许，如果有事务运行，则抛出异常</td>\n<td>aaa有事务，在执行bbb的时候，会抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_NESTED</td>\n<td>如果当前事务存在，则使用嵌套事务</td>\n<td>aaa一执行完后会使用事务设置一个保存点。在执行bbb的时候，如果bbb没有报异常，那么他们就一起提交了。如果bbb中发生了异常，你可以控制回滚到保存点还是初始位置。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-TransactionStatus\"><a href=\"#3-TransactionStatus\" class=\"headerlink\" title=\"3. TransactionStatus\"></a>3. TransactionStatus</h3><p><strong>事务具体运行状态</strong></p>\n<p>提供了一组可以获得事务当前状态的方法。</p>\n<h2 id=\"编程式的事务控制\"><a href=\"#编程式的事务控制\" class=\"headerlink\" title=\"编程式的事务控制\"></a>编程式的事务控制</h2><ul>\n<li>在你需要使用<strong>TransactionTemplate</strong>模板的的bean中进行注入。</li>\n<li><strong>TransactionTemplate </strong>以来 <strong>DataSourceTransactionManager</strong> </li>\n<li><strong>DataSourceTransactionManager</strong> 以来 <strong>DataSource</strong> 构造</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">&lt;!--  配置hibernate事务管理器 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate5.HibernateTransactionManager\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--注入sessionFactory--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--或者配置JDBC事务管理器--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--配置事务管理的模板,spring为了简化事务管理的代码而提供的类--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.TransactionTemplate\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"JDBCTemplate\"><a href=\"#JDBCTemplate\" class=\"headerlink\" title=\"JDBCTemplate\"></a>JDBCTemplate</h3><p>如果要使用 JDBCTemplate ，那么需要继承JdbcDaoSupport。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span>  <span class=\"keyword\">extends</span> <span class=\"title\">JdbcDaoSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span></span>&#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        String sql = <span class=\"string\">\"insert t_user values(null,?)\"</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.getJdbcTemplate().execute(sql,<span class=\"string\">\" nimon\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HibernateTemplate\"><a href=\"#HibernateTemplate\" class=\"headerlink\" title=\"HibernateTemplate\"></a>HibernateTemplate</h3><p>继承<code>HibernateDaoSupport</code> ，使用其中已经帮我们定义好的 <code>hibernateTemplate</code>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class=\"line\"><span class=\"meta\">@Repository</span>(<span class=\"string\">\"userDaoHibernate\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoHibernateImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">HibernateDaoSupport</span>   </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*这里两种方法选其一即可。*/</span></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMySessionFactory</span><span class=\"params\">(SessionFactory sessionFactory)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.setSessionFactory(sessionFactory);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">/*这里两种方法选其一即可。*/</span></div><div class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"sessionFactory\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSuperSessionFactory</span><span class=\"params\">(SessionFactory sessionFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.setSessionFactory(sessionFactory);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             <span class=\"keyword\">this</span>.getHibernateTemplate().save(user);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识\"><a href=\"#关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识\" class=\"headerlink\" title=\"关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识\"></a>关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识</h3><p>首先 <code>sessionFactory</code> 和<code>HibernateTemplate</code> ， <code>HibernateTemplate</code> 和<code>HibernateDaoSupport</code> </p>\n<p>SessionFactory 是一个创建 Session 的工厂，通过 SessionFactory 创建的 Session 可以去执行数据库操作</p>\n<p>HibernateTemplate 把 Session 的一些操作进一步封装组合，实际上也基本上是执行 Session 一样的数据库操作，但是HibernateTemplate 能和 spring 的很多功能融合在一起，比如事务。</p>\n<blockquote>\n<p>如果我们吧 SessionFactory 比作是航母，Session 就是歼10，而 HibernateTemplate 就是歼15，歼10和歼15都是承载于航母之上的</p>\n<p>不管是 Session 或者 HibernateTemplate  都需要SessionFactory的支持才能执行其功能</p>\n<p>由于 HibernateTemplate 本身关于 sessionFactory的 处理原理，我们不再需要手动编写关于 sessionFactory、session、transaction等等代码。</p>\n</blockquote>\n<p>我们只需要编写关于业务逻辑相关的操作，其他的一并由HibernateTemplate完成。HibernateTemplate的这种设计模式我们称之为TemplateMethod，采用的方式叫callback或者钩子函数。这里的重点就是把SessionFactory注入到HibernateTemplate里面！！！</p>\n<p>UserService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"userService........\"</span>);</div><div class=\"line\">    mTransactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallbackWithoutResult() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doInTransactionWithoutResult</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;  <span class=\"comment\">//这里需要一个TransactionCallback参数</span></div><div class=\"line\">            userDao.add();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>需要手动改service的代码，所以是不建议的。</p>\n<h2 id=\"声明式的事务管理\"><a href=\"#声明式的事务管理\" class=\"headerlink\" title=\"声明式的事务管理\"></a>声明式的事务管理</h2><h3 id=\"公共配置\"><a href=\"#公共配置\" class=\"headerlink\" title=\"公共配置\"></a>公共配置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 配置SessionFactory,交给spring管理 --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 引入hibernate配置文件 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:/hibernate.cfg.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 事务管理器 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate4.HibernateTransactionManager\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 配置DAO --&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.dao.UserDaoImpl\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"注入bean\"><a href=\"#注入bean\" class=\"headerlink\" title=\"注入bean\"></a>注入bean</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDaoImpl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.nini.dao.UserDaoImpl\"</span>&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!--需要继承JDBCDaoSupport --&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.TransactionTemplate\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">&lt;!--没有增强过的对象--&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.nini.service.UserService\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"userDaoImpl\"</span>/&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"第一种传统方式\"><a href=\"#第一种传统方式\" class=\"headerlink\" title=\"第一种传统方式\"></a>第一种传统方式</h3><p><strong>使用原始的TransactionProxyFactoryBean配置声明式事务</strong>，需要为每一个事务管理的类，配置 TransactionProxyFactoryBean 进行增强。</p>\n<ol>\n<li>要增强的bean</li>\n<li>transactionManager</li>\n<li>目标增强代理对象。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span></span></div><div class=\"line\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--增强过的对象--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userServiceProxy\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--配置目标对象--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"userService\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--注入事务管理器--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--注入事务的属性--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionAttributes\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--</span></div><div class=\"line\">                prop的格式</div><div class=\"line\">                    PROPAGATION : 事务的传播行为</div><div class=\"line\">                    ISOLATION : 事务的隔离级别</div><div class=\"line\">                    readOnly : 只读</div><div class=\"line\">                    -Exception : 发生哪些异常回滚事务</div><div class=\"line\">                    +Exception :发生哪些异常不回滚事务</div><div class=\"line\">            --&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"add*\"</span>&gt;</span>PROPAGATION_REQUIRED,readOnly<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果设置了readOnly,那么只要进行了写操作就会出现， Connection is read-only.错误。</p>\n</blockquote>\n<ul>\n<li>prop的格式<ul>\n<li>PROPAGATION : 事务的传播行为</li>\n<li>ISOLATION : 事务的隔离级别</li>\n<li>readOnly : 只读</li>\n<li>-Exception : 发生哪些异常回滚事务</li>\n<li>+Exception :发生哪些异常不回滚事务</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第二种方式：tx-aop\"><a href=\"#第二种方式：tx-aop\" class=\"headerlink\" title=\"第二种方式：tx/aop\"></a>第二种方式：tx/aop</h3><p>tx / aop 方式，一旦配置好，类就不需要添加任何东西。    </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--配置事务的通知  (事务的增强)--&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">           <span class=\"comment\">&lt;!-- </span></div><div class=\"line\">\t\t\tpropagation\t:事务传播行为</div><div class=\"line\">\t\t\tisolation\t:事务的隔离级别</div><div class=\"line\">\t\t\tread-only\t:只读</div><div class=\"line\">\t\t\trollback-for:发生哪些异常回滚</div><div class=\"line\">\t\t\tno-rollback-for\t:发生哪些异常不回滚</div><div class=\"line\">\t\t\ttimeout\t\t:过期信息</div><div class=\"line\">\t\t --&gt;</div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">isolation</span>=<span class=\"string\">\"DEFAULT\"</span>  <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">timeout</span>=<span class=\"string\">\"-1\"</span>/&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!--切入点--&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pointcut1\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.nini.service.UserService+.*(..))\"</span>/&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!--切面--&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointcut1\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 事务属性 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"modify*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"del*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">   <span class=\"comment\">&lt;!--第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数    --&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span>  <span class=\"attr\">id</span>=<span class=\"string\">\"txPointCut\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* org.nan.service.*.*(..))\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"txPointCut\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>execution(<em> org.nan.service.\\</em>.*(..)) </p>\n<p>第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数 </p>\n<p>execution(<em> org.nan.service.UserService+.</em>(..))</p>\n<p>这里的 “+” 是代表 UserService 的子类。</p>\n<h3 id=\"第三种方式：注解\"><a href=\"#第三种方式：注解\" class=\"headerlink\" title=\"第三种方式：注解\"></a>第三种方式：注解</h3><p>使用注解方式，配置简单，需要在业务类上添加 <code>@Transactional</code> 注解</p>\n<p>在xml中开启注解事务</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"> <span class=\"comment\">&lt;!--开启注解事务--&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>在需要开启事务的类前面加上</p>\n<blockquote>\n<p>但是如果抛出的是 checked 异常，那么就不会自动回滚。这时如果我想让他回滚怎么办呢？spring就给我们提供了@Transactional 注解，使用属性为 <code>rollbackFor = 将发生的异常.class</code></p>\n<p>在运行期间如果抛出了运行期异常( <code>RuntimeException</code> )unchecked  ，那么就会自动回滚。如果我不想让他自动回滚，那么就使用 <code>noRollbackFor</code>即可。</p>\n</blockquote>\n<p>@Transactional中的的属性</p>\n<ul>\n<li>propagation    :事务的传播行为<ul>\n<li>isolation    :事务的隔离级别</li>\n<li>readOnly:只读</li>\n<li>rollbackFor:发生哪些异常回滚</li>\n<li>noRollbackFor:发生哪些异常不回滚</li>\n</ul>\n</li>\n<li>rollbackForClassName 根据异常类名回滚</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/*</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Transactional</span>(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly = <span class=\"keyword\">false</span>,timeout = -<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Spring-的-Bean-管理的中常用的注解\"><a href=\"#Spring-的-Bean-管理的中常用的注解\" class=\"headerlink\" title=\"Spring 的 Bean 管理的中常用的注解\"></a>Spring 的 Bean 管理的中常用的注解</h2><p>Spring 中提供@Component 的三个衍生注解:(功能目前来讲是一致的)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">* @Component         :组件.(作用在类上)</div><div class=\"line\">* @Controller        :WEB 层</div><div class=\"line\">* @Service           :业务层</div><div class=\"line\">* @Repository        :持久层</div></pre></td></tr></table></figure>\n<p>这三个注解是为了让标注类本身的用途清晰，Spring 在后续版本会对其增强        </p>\n<p>​                </p>\n<h2 id=\"属性注入的注解\"><a href=\"#属性注入的注解\" class=\"headerlink\" title=\"属性注入的注解\"></a>属性注入的注解</h2><p> (使用注解注入的方式,可以不用提供 set 方法.)</p>\n<h3 id=\"Autowired\"><a href=\"#Autowired\" class=\"headerlink\" title=\"@Autowired\"></a>@Autowired</h3><p>spring可以自动帮你把bean里面引用的对象的 setter/getter 方法省略，它会自动帮你 set/get .</p>\n<p>也可以用在<code>方法</code>上或者<code>构造函数</code>上。构造函数上如果有Bean，并调用方法自动注入这些Bean。</p>\n<h4 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a>@Qualifier</h4><p>强制使用名称注入.</p>\n<p>​    </p>\n<h3 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"@Resource\"></a>@Resource</h3><p>类似于<code>@Autowired</code>，只不过 <code>@Autowired</code> 按 byType 自动注入，面 <code>@Resource</code> 默认按 byName自动注入。</p>\n<blockquote>\n<p><strong>@Resource 相当于: @Autowired 和 @Qualifier 一起使用.</strong></p>\n</blockquote>\n<p>他有两个属性：</p>\n<ul>\n<li>name：name属性解析为 Bean的名字</li>\n<li>type：type属性则解析为 Bean的类型</li>\n</ul>\n<p>所以如果使用 name属性，则使用 byName的自动注入策略，而使用 type属性时则使用 byType</p>\n<blockquote>\n<p>自动注入策略。如果既不指定 name也不指定 type属性，这时将通过反射机制使用默认的名称自动注入策略。如果没有指定 name 属性，并且按照默认的名称也找不到依赖对象，<code>@resource</code>会退回到按类型装配。丹一旦指定了 name 属性，就这样按照名称装配了。</p>\n<p>Resource 注释类位于 Spring发布包的 <code>common-annotations.jar</code> 类包中</p>\n</blockquote>\n<h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"@Required\"></a>@Required</h3><p><code>@Required</code> 注解检查 但他只检查属性是否已经设置而不会测试属性是否非空，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Required</span>  </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProduct</span><span class=\"params\">(Product product)</span> </span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">this</span>.product = product;  </div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 : @Required只能设置在setter方法上</p>\n<p>这样如果任何带有@Required的属性未设置的话 将会抛出BeanInitializationException异常</p>\n</blockquote>\n<h2 id=\"需要注意的地方\"><a href=\"#需要注意的地方\" class=\"headerlink\" title=\"需要注意的地方\"></a>需要注意的地方</h2><blockquote>\n<p>注意 1 ： 在组件类前加上 @Component(“ 标识符 “) 的作用与在配置文件中配置是一样的。</p>\n<p>注意 2 ： 如果不指定 @Qualifier(“ 标识符 “) 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(“ 标识符 “)  的标识符相同。</p>\n<p>不然会出错     </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Injection of autowired dependencies failed</div><div class=\"line\"></div><div class=\"line\">Could not autowire field</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 3 ： 如果@Component(“ 标识符 “)，重复定义了，那么会出现以下异常</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.IllegalStateException: Failed to load ApplicationContext</div><div class=\"line\"></div><div class=\"line\">Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>\n<h2 id=\"使用spring提供的方便\"><a href=\"#使用spring提供的方便\" class=\"headerlink\" title=\"使用spring提供的方便\"></a>使用spring提供的方便</h2><p>使用@Autowired注解，必须事先在Spring容器中声明 <code>AutowiredAnnotationBeanPostProcessor的Bean</code> ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor \"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>当 Spring 容器启动时，<code>AutowiredAnnotationBeanPostProcessor</code>将扫描 Spring 容器中所有 Bean,当发现 Bean 中拥有 @Autowired 注释时就找到和其匹配（默认按类型匹配）的 Bean,并注入到对应的地方中去。用到的技术是JAVA中的反射。</p>\n</blockquote>\n<p>使用 @Required注解，就必须声明 <code>RequiredAnnotationBeanPostProcessor</code> 的Bean：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>类似地，使用<code>@Resource</code> 、<code>@PostConstruct</code> 、<code>@PreDestroy</code> 等注解就必须声明 <code>CommonAnnotationBeanPostProcessor</code> ；使用 <code>@PersistenceContext</code> 注解，就必须声明  <code>PersistenceAnnotationBeanPostProcessor</code> 的Bean。</p>\n<p>这样的声明未免太不优雅，而Spring为我们提供了一种极为方便注册这些BeanPostProcessor的方式，即使用 <strong><code>&lt;context:annotation- config/&gt;</code></strong> 隐式地向 Spring容器注册<code>AutowiredAnnotationBeanPostProcessor</code> 、<code>RequiredAnnotationBeanPostProcessor</code> 、<code>CommonAnnotationBeanPostProcessor</code> 以及    <code>PersistenceAnnotationBeanPostProcessor</code> 这4个BeanPostProcessor。如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>但是，在我们使用注解时一般都会配置扫描包路径选项：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"pack.pack\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p> 该配置项其实也包含了自动注入上述processor的功能，因此当使用 <code>&lt;context:component-scan/&gt;</code> 后，即可将 <code>&lt;context:annotation-config/&gt;</code>省去。</p>\n</blockquote>\n<h2 id=\"Bean-的作用范围的注解\"><a href=\"#Bean-的作用范围的注解\" class=\"headerlink\" title=\"Bean 的作用范围的注解\"></a>Bean 的作用范围的注解</h2><blockquote>\n<p>@Scope:</p>\n<p>​    singleton:单例</p>\n<pre><code>prototype:多例\n</code></pre></blockquote>\n<h2 id=\"Bean-的生命周期的配置\"><a href=\"#Bean-的生命周期的配置\" class=\"headerlink\" title=\"Bean 的生命周期的配置\"></a>Bean 的生命周期的配置</h2><p>​        </p>\n<blockquote>\n<p>@PostConstruct :相当于 init-method</p>\n<p>@PreDestroy :相当于 destroy-method</p>\n</blockquote>\n<p>​            </p>\n<h2 id=\"Spring-的-Bean-管理的方式的比较\"><a href=\"#Spring-的-Bean-管理的方式的比较\" class=\"headerlink\" title=\"Spring 的 Bean 管理的方式的比较\"></a>Spring 的 Bean 管理的方式的比较</h2><p>​            </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">基于XML配置</th>\n<th style=\"text-align:center\">基于注解配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Bean定义</td>\n<td style=\"text-align:center\"><bean id=\"…\" class=\"…\"></bean></td>\n<td style=\"text-align:center\">@Component 其衍生类 @Repository @Service @Controller</td>\n</tr>\n<tr>\n<td>Bean名称</td>\n<td style=\"text-align:center\">通过id或name指定</td>\n<td style=\"text-align:center\">@Component(“person”)</td>\n</tr>\n<tr>\n<td>Bean注入</td>\n<td style=\"text-align:center\"><property>或者通过p命名空间</property></td>\n<td style=\"text-align:center\">@AutoWired 按类型注入 @Qualifier按名称注入 @Resource 相当于@Autowired和@Qualifier同时使用</td>\n</tr>\n<tr>\n<td>生命过程、Bean作用范围</td>\n<td style=\"text-align:center\">init-method destory-method 范围scope属性</td>\n<td style=\"text-align:center\">@PostConstruct 初始化 @PreDestory 销毁 @Scope 设置作用范围</td>\n</tr>\n<tr>\n<td>适合场景</td>\n<td style=\"text-align:center\">Bean来自第三方</td>\n<td style=\"text-align:center\">Bean由用户自己实现开发</td>\n</tr>\n</tbody>\n</table>\n<p>xml和注解：</p>\n<ul>\n<li><p>XML ： 结构清晰</p>\n</li>\n<li><p>注解 ： 开发方便（属性注入）</p>\n<p>  ​</p>\n</li>\n</ul>\n<blockquote>\n<p>实际开发中还有一种 XML 和注解整合开发:</p>\n<p>Bean有XML配置.但是使用的属性使用注解注入.</p>\n</blockquote>\n<p>​    </p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<h2 id=\"Spring介绍\"><a href=\"#Spring介绍\" class=\"headerlink\" title=\"Spring介绍\"></a>Spring介绍</h2><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式。</p>\n<p><img src=\"/2017/05/05/Spring-2017-05-05-spring-事务管理（三）/anisur.jpg\" alt=\"\"></p>","more":"<h1 id=\"Spring中的事务管理介绍\"><a href=\"#Spring中的事务管理介绍\" class=\"headerlink\" title=\"Spring中的事务管理介绍\"></a>Spring中的事务管理介绍</h1><p> Spring 是 SSH 中的指挥员和管理者，它负责管理其他框架，控制着整个网站。Spring 中的事务分为：</p>\n<ul>\n<li>声明式事务  <ul>\n<li>开发中<strong>推荐使用</strong>（代码侵入性最小）</li>\n<li>Spring的声明式事务是通过<strong>AOP</strong>实现的</li>\n</ul>\n</li>\n<li><p>编程式事务</p>\n<ul>\n<li>在实际中很少使用</li>\n<li>通过<strong>TransactionTemplate</strong>手动管理事务</li>\n</ul>\n<p>其中声明式事务是在配置文件中进行相关的配置，而编程式事务就是用注解的方式写到代码里。配置文件中定义的bean要比注解里定义的加载早，所以有时会出现在启动阶段（listen 和filter ），是找不到bean 的。</p>\n<p>那么到底是选择声明式还是编程式，我们需要有如下的考虑：</p>\n<ol>\n<li>如果是类级别并且不会发生变动的配置可以优先考虑注解配置，而对于那些第三方以及容易发生调整的配置就优先考虑XML配置文件方式。</li>\n<li>相比于 @Transaction 事务注解，使用 aop / tx命名空间的事务配置更加灵活和简单。</li>\n<li>注解可以有效减少配置的工作量，提高程序的内聚性。</li>\n<li>在第三方Bean 的配置，以及诸如数据源、缓存池、持久层操作模板类、事务管理等内容的配置上，XML 配置依然拥有不可替代的地位。</li>\n</ol>\n</li>\n</ul>\n<p> Spring配置文件中关于事务配置总是由三个组成部分，分别是DataSource、TransactionManager 和代理机制这三部分，无论哪种配置方式，一般变化的只是代理机制这部分。DataSource、 TransactionManager 这两部分只是会根据数据访问方式有所变化，比如使用 Hibernate 进行数据访问时，DataSource 实际为 SessionFactory，TransactionManager 的实现为 HibernateTransactionManager。 下面一起看看三种声明式事务的具体配置：</p>\n<h2 id=\"事务管理高层抽象\"><a href=\"#事务管理高层抽象\" class=\"headerlink\" title=\"事务管理高层抽象\"></a>事务管理高层抽象</h2><h3 id=\"1-PlatformTransactionManager\"><a href=\"#1-PlatformTransactionManager\" class=\"headerlink\" title=\"1. PlatformTransactionManager\"></a>1. PlatformTransactionManager</h3><p>事务管理器，真正管理事务的类，Spring为不同的持久化框架提供了不同的PlatformTransactionManager接口实现。</p>\n<table>\n<thead>\n<tr>\n<th>事务</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>org.springframework.jdbc.datasource.DataSourceTransactionManager</td>\n<td>使用Spring JDBC或iBatis进行持久化数据使用</td>\n</tr>\n<tr>\n<td>org.springframework.orm.hibernate5.HibernateTransactionManager</td>\n<td>使用Hibernate5.0版本进行持久化数据时使用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-TransactionDefinition\"><a href=\"#2-TransactionDefinition\" class=\"headerlink\" title=\"2. TransactionDefinition\"></a>2. TransactionDefinition</h3><p>事务定义信息（隔离、传播、超时、只读）</p>\n<p>事务的特性：原子性、一致性、隔离性、持久性。</p>\n<p>如果不考虑隔离性，会引发</p>\n<blockquote>\n<p>脏读：一个事务读取了另一个事务改写的但未提交的数据，如果这些数据被回滚，则读到的数据是无效的。</p>\n<p>不可重复读：在同一事务中，多次读取同一数据返回的结果有所不同.</p>\n<p>幻读：一个事务读取了几行记录后，另一个事务插入了一些记录。在后来的查询中，第一个事务就有些原来没有的记录。</p>\n</blockquote>\n<h4 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h4><table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEFAULT</td>\n<td>使用后端数据库默认的隔离级别（spring中的选择项）</td>\n</tr>\n<tr>\n<td>READ_UNCOMMITED</td>\n<td>允许你读取还未提交的改变了的数据，是可能导致脏读、幻读、不可重复读的。</td>\n</tr>\n<tr>\n<td>READ_COMMITED</td>\n<td>允许在并发事务已经提交后读取。可防止脏读，但幻读、不可重复读仍可能发发生</td>\n</tr>\n<tr>\n<td>REPEATABLE_READ</td>\n<td>对相同字段对此读取时一致的，除非数据本身被事务改变，可防脏读和不可重复读，幻读仍可能发生。</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>完全服从ACID的隔离级别，确保不发生任意的读问题，事务排队，不会出现并发。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>如果选择了Spring默认的隔离级别，那么使用Mysql对应的默认级别是REPEATABLE_READ， Oracle对应的默认级别是READ_COMMITED。</p>\n</blockquote>\n<h4 id=\"传播行为\"><a href=\"#传播行为\" class=\"headerlink\" title=\"传播行为\"></a>传播行为</h4><p><strong>解决业务层方法之间的相互调用问题。</strong></p>\n<p>假设业务层有两个方法aaa和bbb，当有复杂的事务情况发生时，比如某个事务需要同时调用aaa和bbb。</p>\n<table>\n<thead>\n<tr>\n<th>事务的传播行为</th>\n<th>说明</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PROPAGATION_REQUIRED（默认）</td>\n<td>支持当前事务，如果不存在就新建一个</td>\n<td>如果aaa有事务，则使用之。如果没有就新建一个</td>\n</tr>\n<tr>\n<td>PROPAGATION_SUPPORTS</td>\n<td>支持当前事务，如果不存在，就不使用事务</td>\n<td>如果aaa有事务，则使用之。如果没有就不使用事务</td>\n</tr>\n<tr>\n<td>PROPAGATION_MANDATORY</td>\n<td>支持当前事务，如果不存在，就抛出异常</td>\n<td>如果aaa有事务，则使用之。如果没有就抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_REQUIRES_NEW</td>\n<td>如果有事务，挂起当前事务，创建一个新的事务</td>\n<td>aaa和bbb没有在一个事务中</td>\n</tr>\n<tr>\n<td>PROPAGATION_NOT_SUPPORTED</td>\n<td>以非事务方式允许，如果有事务运行，则挂起当前事务</td>\n<td>aaa有事务，在执行bbb的时候，把aaa的事务挂起</td>\n</tr>\n<tr>\n<td>PROPAGATION_NEVER</td>\n<td>以非事务方式允许，如果有事务运行，则抛出异常</td>\n<td>aaa有事务，在执行bbb的时候，会抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_NESTED</td>\n<td>如果当前事务存在，则使用嵌套事务</td>\n<td>aaa一执行完后会使用事务设置一个保存点。在执行bbb的时候，如果bbb没有报异常，那么他们就一起提交了。如果bbb中发生了异常，你可以控制回滚到保存点还是初始位置。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-TransactionStatus\"><a href=\"#3-TransactionStatus\" class=\"headerlink\" title=\"3. TransactionStatus\"></a>3. TransactionStatus</h3><p><strong>事务具体运行状态</strong></p>\n<p>提供了一组可以获得事务当前状态的方法。</p>\n<h2 id=\"编程式的事务控制\"><a href=\"#编程式的事务控制\" class=\"headerlink\" title=\"编程式的事务控制\"></a>编程式的事务控制</h2><ul>\n<li>在你需要使用<strong>TransactionTemplate</strong>模板的的bean中进行注入。</li>\n<li><strong>TransactionTemplate </strong>以来 <strong>DataSourceTransactionManager</strong> </li>\n<li><strong>DataSourceTransactionManager</strong> 以来 <strong>DataSource</strong> 构造</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\">&lt;!--  配置hibernate事务管理器 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate5.HibernateTransactionManager\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--注入sessionFactory--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--或者配置JDBC事务管理器--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--配置事务管理的模板,spring为了简化事务管理的代码而提供的类--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.TransactionTemplate\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"JDBCTemplate\"><a href=\"#JDBCTemplate\" class=\"headerlink\" title=\"JDBCTemplate\"></a>JDBCTemplate</h3><p>如果要使用 JDBCTemplate ，那么需要继承JdbcDaoSupport。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span>  <span class=\"keyword\">extends</span> <span class=\"title\">JdbcDaoSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span></span>&#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        String sql = <span class=\"string\">\"insert t_user values(null,?)\"</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.getJdbcTemplate().execute(sql,<span class=\"string\">\" nimon\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HibernateTemplate\"><a href=\"#HibernateTemplate\" class=\"headerlink\" title=\"HibernateTemplate\"></a>HibernateTemplate</h3><p>继承<code>HibernateDaoSupport</code> ，使用其中已经帮我们定义好的 <code>hibernateTemplate</code>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class=\"line\"><span class=\"meta\">@Repository</span>(<span class=\"string\">\"userDaoHibernate\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoHibernateImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">HibernateDaoSupport</span>   </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*这里两种方法选其一即可。*/</span></div><div class=\"line\">    <span class=\"meta\">@Autowired</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMySessionFactory</span><span class=\"params\">(SessionFactory sessionFactory)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.setSessionFactory(sessionFactory);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">/*这里两种方法选其一即可。*/</span></div><div class=\"line\">    <span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"sessionFactory\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSuperSessionFactory</span><span class=\"params\">(SessionFactory sessionFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.setSessionFactory(sessionFactory);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(User user)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             <span class=\"keyword\">this</span>.getHibernateTemplate().save(user);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识\"><a href=\"#关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识\" class=\"headerlink\" title=\"关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识\"></a>关于sessionFactory、HibernateTemplate和HibernateDaoSupport的一些认识</h3><p>首先 <code>sessionFactory</code> 和<code>HibernateTemplate</code> ， <code>HibernateTemplate</code> 和<code>HibernateDaoSupport</code> </p>\n<p>SessionFactory 是一个创建 Session 的工厂，通过 SessionFactory 创建的 Session 可以去执行数据库操作</p>\n<p>HibernateTemplate 把 Session 的一些操作进一步封装组合，实际上也基本上是执行 Session 一样的数据库操作，但是HibernateTemplate 能和 spring 的很多功能融合在一起，比如事务。</p>\n<blockquote>\n<p>如果我们吧 SessionFactory 比作是航母，Session 就是歼10，而 HibernateTemplate 就是歼15，歼10和歼15都是承载于航母之上的</p>\n<p>不管是 Session 或者 HibernateTemplate  都需要SessionFactory的支持才能执行其功能</p>\n<p>由于 HibernateTemplate 本身关于 sessionFactory的 处理原理，我们不再需要手动编写关于 sessionFactory、session、transaction等等代码。</p>\n</blockquote>\n<p>我们只需要编写关于业务逻辑相关的操作，其他的一并由HibernateTemplate完成。HibernateTemplate的这种设计模式我们称之为TemplateMethod，采用的方式叫callback或者钩子函数。这里的重点就是把SessionFactory注入到HibernateTemplate里面！！！</p>\n<p>UserService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"userService........\"</span>);</div><div class=\"line\">    mTransactionTemplate.execute(<span class=\"keyword\">new</span> TransactionCallbackWithoutResult() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doInTransactionWithoutResult</span><span class=\"params\">(TransactionStatus status)</span> </span>&#123;  <span class=\"comment\">//这里需要一个TransactionCallback参数</span></div><div class=\"line\">            userDao.add();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>需要手动改service的代码，所以是不建议的。</p>\n<h2 id=\"声明式的事务管理\"><a href=\"#声明式的事务管理\" class=\"headerlink\" title=\"声明式的事务管理\"></a>声明式的事务管理</h2><h3 id=\"公共配置\"><a href=\"#公共配置\" class=\"headerlink\" title=\"公共配置\"></a>公共配置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 配置SessionFactory,交给spring管理 --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 引入hibernate配置文件 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:/hibernate.cfg.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 事务管理器 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate4.HibernateTransactionManager\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 配置DAO --&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.dao.UserDaoImpl\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"sessionFactory\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"注入bean\"><a href=\"#注入bean\" class=\"headerlink\" title=\"注入bean\"></a>注入bean</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDaoImpl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.nini.dao.UserDaoImpl\"</span>&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!--需要继承JDBCDaoSupport --&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.support.TransactionTemplate\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">&lt;!--没有增强过的对象--&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"cn.nini.service.UserService\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"userDaoImpl\"</span>/&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionTemplate\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionTemplate\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"第一种传统方式\"><a href=\"#第一种传统方式\" class=\"headerlink\" title=\"第一种传统方式\"></a>第一种传统方式</h3><p><strong>使用原始的TransactionProxyFactoryBean配置声明式事务</strong>，需要为每一个事务管理的类，配置 TransactionProxyFactoryBean 进行增强。</p>\n<ol>\n<li>要增强的bean</li>\n<li>transactionManager</li>\n<li>目标增强代理对象。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span></span></div><div class=\"line\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--增强过的对象--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userServiceProxy\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.transaction.interceptor.TransactionProxyFactoryBean\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--配置目标对象--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"target\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"userService\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--注入事务管理器--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--注入事务的属性--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"transactionAttributes\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--</span></div><div class=\"line\">                prop的格式</div><div class=\"line\">                    PROPAGATION : 事务的传播行为</div><div class=\"line\">                    ISOLATION : 事务的隔离级别</div><div class=\"line\">                    readOnly : 只读</div><div class=\"line\">                    -Exception : 发生哪些异常回滚事务</div><div class=\"line\">                    +Exception :发生哪些异常不回滚事务</div><div class=\"line\">            --&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"add*\"</span>&gt;</span>PROPAGATION_REQUIRED,readOnly<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果设置了readOnly,那么只要进行了写操作就会出现， Connection is read-only.错误。</p>\n</blockquote>\n<ul>\n<li>prop的格式<ul>\n<li>PROPAGATION : 事务的传播行为</li>\n<li>ISOLATION : 事务的隔离级别</li>\n<li>readOnly : 只读</li>\n<li>-Exception : 发生哪些异常回滚事务</li>\n<li>+Exception :发生哪些异常不回滚事务</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"第二种方式：tx-aop\"><a href=\"#第二种方式：tx-aop\" class=\"headerlink\" title=\"第二种方式：tx/aop\"></a>第二种方式：tx/aop</h3><p>tx / aop 方式，一旦配置好，类就不需要添加任何东西。    </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!--配置事务的通知  (事务的增强)--&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">           <span class=\"comment\">&lt;!-- </span></div><div class=\"line\">\t\t\tpropagation\t:事务传播行为</div><div class=\"line\">\t\t\tisolation\t:事务的隔离级别</div><div class=\"line\">\t\t\tread-only\t:只读</div><div class=\"line\">\t\t\trollback-for:发生哪些异常回滚</div><div class=\"line\">\t\t\tno-rollback-for\t:发生哪些异常不回滚</div><div class=\"line\">\t\t\ttimeout\t\t:过期信息</div><div class=\"line\">\t\t --&gt;</div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"add*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">isolation</span>=<span class=\"string\">\"DEFAULT\"</span>  <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">timeout</span>=<span class=\"string\">\"-1\"</span>/&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!--切入点--&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pointcut1\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* cn.nini.service.UserService+.*(..))\"</span>/&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!--切面--&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointcut1\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 事务属性 --&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"modify*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"del*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">   <span class=\"comment\">&lt;!--第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数    --&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span>  <span class=\"attr\">id</span>=<span class=\"string\">\"txPointCut\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* org.nan.service.*.*(..))\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"txPointCut\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>execution(<em> org.nan.service.\\</em>.*(..)) </p>\n<p>第一个*代表返回值,第二个代表service下子包,第三个达标方法名,(..)代表参数 </p>\n<p>execution(<em> org.nan.service.UserService+.</em>(..))</p>\n<p>这里的 “+” 是代表 UserService 的子类。</p>\n<h3 id=\"第三种方式：注解\"><a href=\"#第三种方式：注解\" class=\"headerlink\" title=\"第三种方式：注解\"></a>第三种方式：注解</h3><p>使用注解方式，配置简单，需要在业务类上添加 <code>@Transactional</code> 注解</p>\n<p>在xml中开启注解事务</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"> <span class=\"comment\">&lt;!--开启注解事务--&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>在需要开启事务的类前面加上</p>\n<blockquote>\n<p>但是如果抛出的是 checked 异常，那么就不会自动回滚。这时如果我想让他回滚怎么办呢？spring就给我们提供了@Transactional 注解，使用属性为 <code>rollbackFor = 将发生的异常.class</code></p>\n<p>在运行期间如果抛出了运行期异常( <code>RuntimeException</code> )unchecked  ，那么就会自动回滚。如果我不想让他自动回滚，那么就使用 <code>noRollbackFor</code>即可。</p>\n</blockquote>\n<p>@Transactional中的的属性</p>\n<ul>\n<li>propagation    :事务的传播行为<ul>\n<li>isolation    :事务的隔离级别</li>\n<li>readOnly:只读</li>\n<li>rollbackFor:发生哪些异常回滚</li>\n<li>noRollbackFor:发生哪些异常不回滚</li>\n</ul>\n</li>\n<li>rollbackForClassName 根据异常类名回滚</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/*</span></div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Transactional</span>(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,readOnly = <span class=\"keyword\">false</span>,timeout = -<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Spring-的-Bean-管理的中常用的注解\"><a href=\"#Spring-的-Bean-管理的中常用的注解\" class=\"headerlink\" title=\"Spring 的 Bean 管理的中常用的注解\"></a>Spring 的 Bean 管理的中常用的注解</h2><p>Spring 中提供@Component 的三个衍生注解:(功能目前来讲是一致的)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">* @Component         :组件.(作用在类上)</div><div class=\"line\">* @Controller        :WEB 层</div><div class=\"line\">* @Service           :业务层</div><div class=\"line\">* @Repository        :持久层</div></pre></td></tr></table></figure>\n<p>这三个注解是为了让标注类本身的用途清晰，Spring 在后续版本会对其增强        </p>\n<p>​                </p>\n<h2 id=\"属性注入的注解\"><a href=\"#属性注入的注解\" class=\"headerlink\" title=\"属性注入的注解\"></a>属性注入的注解</h2><p> (使用注解注入的方式,可以不用提供 set 方法.)</p>\n<h3 id=\"Autowired\"><a href=\"#Autowired\" class=\"headerlink\" title=\"@Autowired\"></a>@Autowired</h3><p>spring可以自动帮你把bean里面引用的对象的 setter/getter 方法省略，它会自动帮你 set/get .</p>\n<p>也可以用在<code>方法</code>上或者<code>构造函数</code>上。构造函数上如果有Bean，并调用方法自动注入这些Bean。</p>\n<h4 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a>@Qualifier</h4><p>强制使用名称注入.</p>\n<p>​    </p>\n<h3 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"@Resource\"></a>@Resource</h3><p>类似于<code>@Autowired</code>，只不过 <code>@Autowired</code> 按 byType 自动注入，面 <code>@Resource</code> 默认按 byName自动注入。</p>\n<blockquote>\n<p><strong>@Resource 相当于: @Autowired 和 @Qualifier 一起使用.</strong></p>\n</blockquote>\n<p>他有两个属性：</p>\n<ul>\n<li>name：name属性解析为 Bean的名字</li>\n<li>type：type属性则解析为 Bean的类型</li>\n</ul>\n<p>所以如果使用 name属性，则使用 byName的自动注入策略，而使用 type属性时则使用 byType</p>\n<blockquote>\n<p>自动注入策略。如果既不指定 name也不指定 type属性，这时将通过反射机制使用默认的名称自动注入策略。如果没有指定 name 属性，并且按照默认的名称也找不到依赖对象，<code>@resource</code>会退回到按类型装配。丹一旦指定了 name 属性，就这样按照名称装配了。</p>\n<p>Resource 注释类位于 Spring发布包的 <code>common-annotations.jar</code> 类包中</p>\n</blockquote>\n<h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"@Required\"></a>@Required</h3><p><code>@Required</code> 注解检查 但他只检查属性是否已经设置而不会测试属性是否非空，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Required</span>  </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProduct</span><span class=\"params\">(Product product)</span> </span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">this</span>.product = product;  </div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 : @Required只能设置在setter方法上</p>\n<p>这样如果任何带有@Required的属性未设置的话 将会抛出BeanInitializationException异常</p>\n</blockquote>\n<h2 id=\"需要注意的地方\"><a href=\"#需要注意的地方\" class=\"headerlink\" title=\"需要注意的地方\"></a>需要注意的地方</h2><blockquote>\n<p>注意 1 ： 在组件类前加上 @Component(“ 标识符 “) 的作用与在配置文件中配置是一样的。</p>\n<p>注意 2 ： 如果不指定 @Qualifier(“ 标识符 “) 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(“ 标识符 “)  的标识符相同。</p>\n<p>不然会出错     </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Injection of autowired dependencies failed</div><div class=\"line\"></div><div class=\"line\">Could not autowire field</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 3 ： 如果@Component(“ 标识符 “)，重复定义了，那么会出现以下异常</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.IllegalStateException: Failed to load ApplicationContext</div><div class=\"line\"></div><div class=\"line\">Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>\n<h2 id=\"使用spring提供的方便\"><a href=\"#使用spring提供的方便\" class=\"headerlink\" title=\"使用spring提供的方便\"></a>使用spring提供的方便</h2><p>使用@Autowired注解，必须事先在Spring容器中声明 <code>AutowiredAnnotationBeanPostProcessor的Bean</code> ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor \"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>当 Spring 容器启动时，<code>AutowiredAnnotationBeanPostProcessor</code>将扫描 Spring 容器中所有 Bean,当发现 Bean 中拥有 @Autowired 注释时就找到和其匹配（默认按类型匹配）的 Bean,并注入到对应的地方中去。用到的技术是JAVA中的反射。</p>\n</blockquote>\n<p>使用 @Required注解，就必须声明 <code>RequiredAnnotationBeanPostProcessor</code> 的Bean：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>类似地，使用<code>@Resource</code> 、<code>@PostConstruct</code> 、<code>@PreDestroy</code> 等注解就必须声明 <code>CommonAnnotationBeanPostProcessor</code> ；使用 <code>@PersistenceContext</code> 注解，就必须声明  <code>PersistenceAnnotationBeanPostProcessor</code> 的Bean。</p>\n<p>这样的声明未免太不优雅，而Spring为我们提供了一种极为方便注册这些BeanPostProcessor的方式，即使用 <strong><code>&lt;context:annotation- config/&gt;</code></strong> 隐式地向 Spring容器注册<code>AutowiredAnnotationBeanPostProcessor</code> 、<code>RequiredAnnotationBeanPostProcessor</code> 、<code>CommonAnnotationBeanPostProcessor</code> 以及    <code>PersistenceAnnotationBeanPostProcessor</code> 这4个BeanPostProcessor。如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>但是，在我们使用注解时一般都会配置扫描包路径选项：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"pack.pack\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p> 该配置项其实也包含了自动注入上述processor的功能，因此当使用 <code>&lt;context:component-scan/&gt;</code> 后，即可将 <code>&lt;context:annotation-config/&gt;</code>省去。</p>\n</blockquote>\n<h2 id=\"Bean-的作用范围的注解\"><a href=\"#Bean-的作用范围的注解\" class=\"headerlink\" title=\"Bean 的作用范围的注解\"></a>Bean 的作用范围的注解</h2><blockquote>\n<p>@Scope:</p>\n<p>​    singleton:单例</p>\n<pre><code>prototype:多例\n</code></pre></blockquote>\n<h2 id=\"Bean-的生命周期的配置\"><a href=\"#Bean-的生命周期的配置\" class=\"headerlink\" title=\"Bean 的生命周期的配置\"></a>Bean 的生命周期的配置</h2><p>​        </p>\n<blockquote>\n<p>@PostConstruct :相当于 init-method</p>\n<p>@PreDestroy :相当于 destroy-method</p>\n</blockquote>\n<p>​            </p>\n<h2 id=\"Spring-的-Bean-管理的方式的比较\"><a href=\"#Spring-的-Bean-管理的方式的比较\" class=\"headerlink\" title=\"Spring 的 Bean 管理的方式的比较\"></a>Spring 的 Bean 管理的方式的比较</h2><p>​            </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">基于XML配置</th>\n<th style=\"text-align:center\">基于注解配置</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Bean定义</td>\n<td style=\"text-align:center\"><bean id=\"…\" class=\"…\"></bean></td>\n<td style=\"text-align:center\">@Component 其衍生类 @Repository @Service @Controller</td>\n</tr>\n<tr>\n<td>Bean名称</td>\n<td style=\"text-align:center\">通过id或name指定</td>\n<td style=\"text-align:center\">@Component(“person”)</td>\n</tr>\n<tr>\n<td>Bean注入</td>\n<td style=\"text-align:center\"><property>或者通过p命名空间</property></td>\n<td style=\"text-align:center\">@AutoWired 按类型注入 @Qualifier按名称注入 @Resource 相当于@Autowired和@Qualifier同时使用</td>\n</tr>\n<tr>\n<td>生命过程、Bean作用范围</td>\n<td style=\"text-align:center\">init-method destory-method 范围scope属性</td>\n<td style=\"text-align:center\">@PostConstruct 初始化 @PreDestory 销毁 @Scope 设置作用范围</td>\n</tr>\n<tr>\n<td>适合场景</td>\n<td style=\"text-align:center\">Bean来自第三方</td>\n<td style=\"text-align:center\">Bean由用户自己实现开发</td>\n</tr>\n</tbody>\n</table>\n<p>xml和注解：</p>\n<ul>\n<li><p>XML ： 结构清晰</p>\n</li>\n<li><p>注解 ： 开发方便（属性注入）</p>\n<p>  ​</p>\n</li>\n</ul>\n<blockquote>\n<p>实际开发中还有一种 XML 和注解整合开发:</p>\n<p>Bean有XML配置.但是使用的属性使用注解注入.</p>\n</blockquote>\n<p>​    </p>"},{"title":"maven","_content":"\n <div align=\"center\">\n  想学习Maven吗？\n\n</div>\n\n<!-- more -->\n\n# 常用的构建命令\n\nmvn \n\n- v 查看版本\n\n\n- compile 编译\n\n\n- test 测试\n\n\n- package  打包\n  - 会依次执行  clean 、\n- clean 删除target文件夹\n- Install 安装jar包到本地仓库中\n\n\n\n# 自动创建目录骨架\n\n创建目录的两种方式：\n\n1. mvn archetype:generate 按照提示进行选择\n\n\n2. mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名\n\n   ​\t\t\t\t\t\t-DartifactId=项目名-模块名\n\n   ​\t\t\t\t\t\t-Dversion=版本号\n\n   ​\t\t\t\t\t\t-Dpackage=代码所在的包名\n\n\n\n\nsrc/main/java:存放java源文件\n\nsrc/main/resources:存放项目配置文件，如spring.xml,hibernate.cfg.xml。。。\n\nsrc/test/java:存放test的java文件\n\nsrc/test/resources:存放test时候所需的配置文件\n\n\n\n\n# maven中的坐标和仓库\n\n## 坐标\n\n在`<dependency> `中的就是坐标\n\n```Xml\n  <dependency>\n    <groupId>com.nimon.maven01</groupId>\n    <artifactId>maven01-model</artifactId>  \n    <version>0.0.1SNAPSHOT</version>\n  </dependency>\n```\n\n> 项目的包名，建议和groupId和artifactId相吻合，这样看起来，就更加清晰，符合逻辑，也更方便搜索。\n\n\n\n## 构件\n\n在maven世界中，任何一个依赖、插件、项目构建的输出，都可以被称作为**构件**。\n\n**构件**通过坐标作为其唯一的标识，就好像我们的工作单位和家庭地址。\n\n> 收宝贝的时候，不是收到的那一刻，而是中间等待的过程。\n\n\n\n## 仓库\n\n​\t本地仓库和远程仓库\n\n​\t[查看仓库](http://search.maven.org/)\n\n​\t[全球中央仓库](https://repo.maven.apache.org/maven2/)\n\n​\t[MVN Repository](http://mvnrepository.com/)\n\n## 镜像仓库\n\n> 一旦配置了镜像，那么所有访问都会到镜像仓库中，原仓库将不能直接访问。\n\n> maven主目录 > conf > settings.xml > 146行\n\n```Xml\n    <mirror>\n      <id>maven.net.cn</id>\n      <mirrorOf>central</mirrorOf>\n      <name>Central mirror in china</name>\n      <url>http://maven.net.cn/content/groups/public</url>\n    </mirror>\n```\n\n\n\n## 更改仓库位置\n\n> maven从远程中央仓库下载默认是存放在当前用户目录中\n>\n> ​\t即 ~/.m2/repository\n\n修改 `settings.xml `文件，复制第 53 行的内容\n\n```\n <localRepository>/Users/nimon/nj/proj/maven/repo</localRepository>\n```\n\n其中路径表示新仓库的位置。然后复制一份 `settings.xml`  到 `repo` 目录下，这样我们以后更新maven版本就不用再修改原始的 `settings.xml`\n\n\n\n# maven的生命周期和插件\n\n## 完整的项目构建过程包括\n\n清理、编译、测试、打包、集成测试、验证、部署\n\nmaven将其进行抽象。实际上，maven和插件是密不可分的，maven抽象出一套项目构建的生命周期，而插件是对maven抽象的具体实现。\n\n比如，我们对项目进行编译，\n\n## maven中定义了三套独立的生命周期\n\n1. clean    清理项目\n2. default  构建项目\n3. site   生成项目站点\n\n这三套生命周期是相互独立的，每个生命周期又包含一些阶段，这些阶段是有顺序的，后面的阶段依赖于前面的阶段。在执行的时候，前面的阶段会顺序执行，并不会触发另外两个生命周期中的阶段。\n\n\n\n### clean 清理项目阶段\n\npre-clean 执行清理前的工作\n\nclean 清理上一次构建的文件\n\npost-clean 执行清理后的文件\n\n\n\n### default 构建项目（最核心）\n\ncompile test package install\n\n\n\n### site 生成项目站点\n\npre-site 在生成项目站点前要完成工作\n\nsite  生成项目的站点文档\n\npost-site  在生成项目站点后要完成的工作\n\nsite-deploy  发布生成的站点到服务器\n\n\n\n可以去 **[官方插件](https://maven.apache.org/plugins)** ，查找使用插件\n\n\n\n# pom.xml常用元素\n\npom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构建信息的管理。 \n\n\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>   \n  \n    <groupId>组织名，公司网址的反写+项目名</groupId>\n    <artifactId>项目名-模块名</artifactId>\n  \t<!--打包类型，默认是jar\n\t\twar zip pom\t\n\t-->\n    <packaging>war</packaging>\n  \t<!--第一个0表示大版本号\n\t第二个0 表示分支版本号\n\t第三个0 表示小版本号\n\tSNAPSHOT ：不稳定，尚处于开发中，快照版本\n\tALPHA ：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。\n\tBeta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。\n\tRELEASE ：稳定版\n\tGA ：正式发布\n\t-->\n    <version>0.0.1-SNAPSHOT</version>\n    <!--项目描述名-->\n    <name>maven05-demo Maven Webapp</name>\n  \t<!--项目地址-->\n    <url>http://maven.apache.org</url>\n    <!--项目描述-->\n    <description></description>\n  \t<developers></developers>\n  \t<licenses></licenses>\n  \t<organization></organization>\n  \n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n          \t<!--只存在于测试的 classpath 中-->\n            <scope>test</scope>\n          \t<type></type>\n          \t<!--设置依赖是否可选-->\n          \t<optional></optional>\n          \t<!--排除依赖传递列表-->\n          \t<exclusions>\n          \t\t<exclusion>\n              \t\t\n              \t</exclusion>\n          \t</exclusions>\n        </dependency>\n    </dependencies>\n  \n  \t<!--依赖的管理，不会被运行和引入到实际的依赖中-->\n  \t<dependencyManagerment>\n      \t<!--主要定义在父模块中，供子模块集成用的-->\n  \t\t<dependency>\n      \t\t\n      \t</dependency>\n  \t</dependencyManagerment>\n  \n  \t<!--插件列表-->\n  \t <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>2.4</version>\n              \t<!--上面三项是坐标-->\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.0.2</version>\n            </plugin>\n        </plugins>\n\t\t<!--子模块对父模块的继承-->\n       \t<parent></parent>\n\t\t<!--聚合多个maven运行项-->\n       \t<modules></modules>\n       \n        <finalName>maven05-demo</finalName>\n    </build>\n  \n</project>\n```\n\n\n\n# 依赖范围\n\n\n\n我们平时在开发时，如果要使用某一个框架，就需要把框架的jar包引入项目的 classpath 中，这样我们的项目就可以使用 框架为我们封装好的一些方法。maven给我们提供了三种classpath：\n\n1. 编译\n2. 测试 test\n3. 运行  \n\n所以依赖的范围就是控制依赖于三种 classpath 的关系的。\n\n有六中依赖范围的值可以选择：\n\n- compile 默认的范围，如果没有明确指定，编译依赖将在所有的 classpath 中都有效，而且会传递到依赖项目中。\n- provided  在编译和测试的时候有效\n- runtime 在测试和运行时有效\n- test 只在测试的时候有效\n- system 于本机系统相关联，可移植性差\n- import 导入的范围，它只使用在 dependencyManagerment ，表示从其他 pom 中导入的 dependency 的配置。\n\n例如\n\n```xml\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>maven</groupId>\n  <artifactId>B</artifactId>\n  <packaging>pom</packaging>\n  <name>B</name>\n  <version>1.0</version>\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>maven</groupId>\n        <artifactId>A</artifactId>\n        <version>1.0</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n      .....\n```\n\n\n\n\n\n# 依赖传递\n\n一个小案例\n\nshanji 依赖于 nage\n\nnage 依赖于 bge\n\nbge的依赖关系\n\n```xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.10</version>\n      <scope>test</scope>\n    </dependency>\n </dependencies>\n```\n\nnage的依赖关系\n\n```xml\n<dependencies>\n  \n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-bge</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n  </dependencies>\n```\n\nshanji的依赖关系\n\n```Xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  \n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-nage</artifactId>\n      <version>1.0-SNAPSHOT</version>\n      <exclusions>\n        <exclusion>\n          <groupId>com.hongxing</groupId>\n          <artifactId>hongxing-bge</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n```\n\n这时候nage下就有bge的依赖jar包，shanji下有bge和nage的依赖jar包。\n\n但是由于依赖的传递性，shanji 只依赖于nage ，shanji 项目中会出现 bge 的jar包。有时候，这不是我们想要的。\n\n这时可以在 nage 依赖下使用 <exclusions>  把 bge 排除在外。\n\n\n\n\n\n\n\n# 依赖冲突\n\n> eg 对不同版本的同一个构建。\n\n1. 短路优先\n\n   A -> B -> C -> X（JAR)\n\n   A -> D -> X（JAR)    **优先**\n\n\n举例：\n\n在 bge 中添加commons-io 2.5的版本依赖\n\n在 nage 中添加commons-io 2.0的版本依赖\n\n这时候在 shanji 项目中就会出现 2.0 的版本，因为shanji 离 nage 比较近。\n\n\n\n2. 先声明先优先\n\n如果路径长度相同，谁先声明，先解析谁。\n\n举例：\n\n```xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-bge</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-nage</artifactId>\n      <version>1.0-SNAPSHOT</version>\n      <!--<exclusions>-->\n        <!--<exclusion>-->\n          <!--<groupId>com.hongxing</groupId>-->\n          <!--<artifactId>hongxing-bge</artifactId>-->\n        <!--</exclusion>-->\n      <!--</exclusions>-->\n    </dependency>\n  </dependencies>\n```\n\n这时候，项目中 commons-io 的版本就变成了 2.5，因为是先声明 bge ，后声明 nage 。\n\n\n\n\n# 聚合和继承\n\n如果在maven中有多个项目，我们想要 install 将其放到本地仓库中， 必须对其依次执行 install 命令\n\nmaven 给我提供了一个解决办法，就是使用 **聚合** \n\n```xml\n<modules>\n  <module>../hongxing-bge</module>\n  <module>../hongxing-nage</module>\n  <module>../hongxing-shanji</module>\n</modules>\n```\n\n然后执行 install 命令，就会自动把三个module都安装到本地仓库中了。\n\n定义父容器\n\n```xml\n  \t<properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <junit.version>\n            3.8.1\n        </junit.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>${junit.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\n\n\n\n然后在子类中使用\n\n```xml\n  <parent>\n    <groupId>com.hongxing</groupId>\n    <artifactId>hongxing-parent</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n```\n\n> 注意修改  **<packaging>** 为pom\n\n\n\n# 使用maven构建web项目\n\nNext，这里在Properties中添加一个参数`archetypeCatalog=internal`，不加这个参数，在maven生成骨架的时候将会非常慢，有时候会直接卡住。\n\n来自网上的解释：\n\n> archetypeCatalog表示插件使用的archetype元数据，不加这个参数时默认为remote，local，即中央仓库archetype元数据，由于中央仓库的archetype太多了，所以导致很慢，指定internal来表示仅使用内部元数据。\n\n![](maven.png)\n\n使用 jetty 发布\n\n```xml\n<plugin>\n  <groupId>org.eclipse.jetty</groupId>\n  <artifactId>jetty-maven-plugin</artifactId>\n  <version>9.4.4.v20170414</version>\n  <executions>\n    <execution>\n      <!--在打包成功后使用jetty:run来运行jetty服务-->\n      <phase>package</phase>  <!--指定在package阶段的时候-->\n      <goals>\n        <goal>run</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```\n\n","source":"_drafts/Maven/2017-05-10-maven.md","raw":"---\ntitle: maven\ntags: maven\n\n---\n\n <div align=\"center\">\n  想学习Maven吗？\n\n</div>\n\n<!-- more -->\n\n# 常用的构建命令\n\nmvn \n\n- v 查看版本\n\n\n- compile 编译\n\n\n- test 测试\n\n\n- package  打包\n  - 会依次执行  clean 、\n- clean 删除target文件夹\n- Install 安装jar包到本地仓库中\n\n\n\n# 自动创建目录骨架\n\n创建目录的两种方式：\n\n1. mvn archetype:generate 按照提示进行选择\n\n\n2. mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名\n\n   ​\t\t\t\t\t\t-DartifactId=项目名-模块名\n\n   ​\t\t\t\t\t\t-Dversion=版本号\n\n   ​\t\t\t\t\t\t-Dpackage=代码所在的包名\n\n\n\n\nsrc/main/java:存放java源文件\n\nsrc/main/resources:存放项目配置文件，如spring.xml,hibernate.cfg.xml。。。\n\nsrc/test/java:存放test的java文件\n\nsrc/test/resources:存放test时候所需的配置文件\n\n\n\n\n# maven中的坐标和仓库\n\n## 坐标\n\n在`<dependency> `中的就是坐标\n\n```Xml\n  <dependency>\n    <groupId>com.nimon.maven01</groupId>\n    <artifactId>maven01-model</artifactId>  \n    <version>0.0.1SNAPSHOT</version>\n  </dependency>\n```\n\n> 项目的包名，建议和groupId和artifactId相吻合，这样看起来，就更加清晰，符合逻辑，也更方便搜索。\n\n\n\n## 构件\n\n在maven世界中，任何一个依赖、插件、项目构建的输出，都可以被称作为**构件**。\n\n**构件**通过坐标作为其唯一的标识，就好像我们的工作单位和家庭地址。\n\n> 收宝贝的时候，不是收到的那一刻，而是中间等待的过程。\n\n\n\n## 仓库\n\n​\t本地仓库和远程仓库\n\n​\t[查看仓库](http://search.maven.org/)\n\n​\t[全球中央仓库](https://repo.maven.apache.org/maven2/)\n\n​\t[MVN Repository](http://mvnrepository.com/)\n\n## 镜像仓库\n\n> 一旦配置了镜像，那么所有访问都会到镜像仓库中，原仓库将不能直接访问。\n\n> maven主目录 > conf > settings.xml > 146行\n\n```Xml\n    <mirror>\n      <id>maven.net.cn</id>\n      <mirrorOf>central</mirrorOf>\n      <name>Central mirror in china</name>\n      <url>http://maven.net.cn/content/groups/public</url>\n    </mirror>\n```\n\n\n\n## 更改仓库位置\n\n> maven从远程中央仓库下载默认是存放在当前用户目录中\n>\n> ​\t即 ~/.m2/repository\n\n修改 `settings.xml `文件，复制第 53 行的内容\n\n```\n <localRepository>/Users/nimon/nj/proj/maven/repo</localRepository>\n```\n\n其中路径表示新仓库的位置。然后复制一份 `settings.xml`  到 `repo` 目录下，这样我们以后更新maven版本就不用再修改原始的 `settings.xml`\n\n\n\n# maven的生命周期和插件\n\n## 完整的项目构建过程包括\n\n清理、编译、测试、打包、集成测试、验证、部署\n\nmaven将其进行抽象。实际上，maven和插件是密不可分的，maven抽象出一套项目构建的生命周期，而插件是对maven抽象的具体实现。\n\n比如，我们对项目进行编译，\n\n## maven中定义了三套独立的生命周期\n\n1. clean    清理项目\n2. default  构建项目\n3. site   生成项目站点\n\n这三套生命周期是相互独立的，每个生命周期又包含一些阶段，这些阶段是有顺序的，后面的阶段依赖于前面的阶段。在执行的时候，前面的阶段会顺序执行，并不会触发另外两个生命周期中的阶段。\n\n\n\n### clean 清理项目阶段\n\npre-clean 执行清理前的工作\n\nclean 清理上一次构建的文件\n\npost-clean 执行清理后的文件\n\n\n\n### default 构建项目（最核心）\n\ncompile test package install\n\n\n\n### site 生成项目站点\n\npre-site 在生成项目站点前要完成工作\n\nsite  生成项目的站点文档\n\npost-site  在生成项目站点后要完成的工作\n\nsite-deploy  发布生成的站点到服务器\n\n\n\n可以去 **[官方插件](https://maven.apache.org/plugins)** ，查找使用插件\n\n\n\n# pom.xml常用元素\n\npom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构建信息的管理。 \n\n\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <modelVersion>4.0.0</modelVersion>   \n  \n    <groupId>组织名，公司网址的反写+项目名</groupId>\n    <artifactId>项目名-模块名</artifactId>\n  \t<!--打包类型，默认是jar\n\t\twar zip pom\t\n\t-->\n    <packaging>war</packaging>\n  \t<!--第一个0表示大版本号\n\t第二个0 表示分支版本号\n\t第三个0 表示小版本号\n\tSNAPSHOT ：不稳定，尚处于开发中，快照版本\n\tALPHA ：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。\n\tBeta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。\n\tRELEASE ：稳定版\n\tGA ：正式发布\n\t-->\n    <version>0.0.1-SNAPSHOT</version>\n    <!--项目描述名-->\n    <name>maven05-demo Maven Webapp</name>\n  \t<!--项目地址-->\n    <url>http://maven.apache.org</url>\n    <!--项目描述-->\n    <description></description>\n  \t<developers></developers>\n  \t<licenses></licenses>\n  \t<organization></organization>\n  \n    <dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.10</version>\n          \t<!--只存在于测试的 classpath 中-->\n            <scope>test</scope>\n          \t<type></type>\n          \t<!--设置依赖是否可选-->\n          \t<optional></optional>\n          \t<!--排除依赖传递列表-->\n          \t<exclusions>\n          \t\t<exclusion>\n              \t\t\n              \t</exclusion>\n          \t</exclusions>\n        </dependency>\n    </dependencies>\n  \n  \t<!--依赖的管理，不会被运行和引入到实际的依赖中-->\n  \t<dependencyManagerment>\n      \t<!--主要定义在父模块中，供子模块集成用的-->\n  \t\t<dependency>\n      \t\t\n      \t</dependency>\n  \t</dependencyManagerment>\n  \n  \t<!--插件列表-->\n  \t <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <version>2.4</version>\n              \t<!--上面三项是坐标-->\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>jar-no-fork</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <version>3.0.2</version>\n            </plugin>\n        </plugins>\n\t\t<!--子模块对父模块的继承-->\n       \t<parent></parent>\n\t\t<!--聚合多个maven运行项-->\n       \t<modules></modules>\n       \n        <finalName>maven05-demo</finalName>\n    </build>\n  \n</project>\n```\n\n\n\n# 依赖范围\n\n\n\n我们平时在开发时，如果要使用某一个框架，就需要把框架的jar包引入项目的 classpath 中，这样我们的项目就可以使用 框架为我们封装好的一些方法。maven给我们提供了三种classpath：\n\n1. 编译\n2. 测试 test\n3. 运行  \n\n所以依赖的范围就是控制依赖于三种 classpath 的关系的。\n\n有六中依赖范围的值可以选择：\n\n- compile 默认的范围，如果没有明确指定，编译依赖将在所有的 classpath 中都有效，而且会传递到依赖项目中。\n- provided  在编译和测试的时候有效\n- runtime 在测试和运行时有效\n- test 只在测试的时候有效\n- system 于本机系统相关联，可移植性差\n- import 导入的范围，它只使用在 dependencyManagerment ，表示从其他 pom 中导入的 dependency 的配置。\n\n例如\n\n```xml\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>maven</groupId>\n  <artifactId>B</artifactId>\n  <packaging>pom</packaging>\n  <name>B</name>\n  <version>1.0</version>\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>maven</groupId>\n        <artifactId>A</artifactId>\n        <version>1.0</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n      .....\n```\n\n\n\n\n\n# 依赖传递\n\n一个小案例\n\nshanji 依赖于 nage\n\nnage 依赖于 bge\n\nbge的依赖关系\n\n```xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.10</version>\n      <scope>test</scope>\n    </dependency>\n </dependencies>\n```\n\nnage的依赖关系\n\n```xml\n<dependencies>\n  \n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-bge</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n  </dependencies>\n```\n\nshanji的依赖关系\n\n```Xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n  \n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-nage</artifactId>\n      <version>1.0-SNAPSHOT</version>\n      <exclusions>\n        <exclusion>\n          <groupId>com.hongxing</groupId>\n          <artifactId>hongxing-bge</artifactId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n  </dependencies>\n```\n\n这时候nage下就有bge的依赖jar包，shanji下有bge和nage的依赖jar包。\n\n但是由于依赖的传递性，shanji 只依赖于nage ，shanji 项目中会出现 bge 的jar包。有时候，这不是我们想要的。\n\n这时可以在 nage 依赖下使用 <exclusions>  把 bge 排除在外。\n\n\n\n\n\n\n\n# 依赖冲突\n\n> eg 对不同版本的同一个构建。\n\n1. 短路优先\n\n   A -> B -> C -> X（JAR)\n\n   A -> D -> X（JAR)    **优先**\n\n\n举例：\n\n在 bge 中添加commons-io 2.5的版本依赖\n\n在 nage 中添加commons-io 2.0的版本依赖\n\n这时候在 shanji 项目中就会出现 2.0 的版本，因为shanji 离 nage 比较近。\n\n\n\n2. 先声明先优先\n\n如果路径长度相同，谁先声明，先解析谁。\n\n举例：\n\n```xml\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-bge</artifactId>\n      <version>1.0-SNAPSHOT</version>\n    </dependency>\n\n    <dependency>\n      <groupId>com.hongxing</groupId>\n      <artifactId>hongxing-nage</artifactId>\n      <version>1.0-SNAPSHOT</version>\n      <!--<exclusions>-->\n        <!--<exclusion>-->\n          <!--<groupId>com.hongxing</groupId>-->\n          <!--<artifactId>hongxing-bge</artifactId>-->\n        <!--</exclusion>-->\n      <!--</exclusions>-->\n    </dependency>\n  </dependencies>\n```\n\n这时候，项目中 commons-io 的版本就变成了 2.5，因为是先声明 bge ，后声明 nage 。\n\n\n\n\n# 聚合和继承\n\n如果在maven中有多个项目，我们想要 install 将其放到本地仓库中， 必须对其依次执行 install 命令\n\nmaven 给我提供了一个解决办法，就是使用 **聚合** \n\n```xml\n<modules>\n  <module>../hongxing-bge</module>\n  <module>../hongxing-nage</module>\n  <module>../hongxing-shanji</module>\n</modules>\n```\n\n然后执行 install 命令，就会自动把三个module都安装到本地仓库中了。\n\n定义父容器\n\n```xml\n  \t<properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <junit.version>\n            3.8.1\n        </junit.version>\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>${junit.version}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n```\n\n\n\n然后在子类中使用\n\n```xml\n  <parent>\n    <groupId>com.hongxing</groupId>\n    <artifactId>hongxing-parent</artifactId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n```\n\n> 注意修改  **<packaging>** 为pom\n\n\n\n# 使用maven构建web项目\n\nNext，这里在Properties中添加一个参数`archetypeCatalog=internal`，不加这个参数，在maven生成骨架的时候将会非常慢，有时候会直接卡住。\n\n来自网上的解释：\n\n> archetypeCatalog表示插件使用的archetype元数据，不加这个参数时默认为remote，local，即中央仓库archetype元数据，由于中央仓库的archetype太多了，所以导致很慢，指定internal来表示仅使用内部元数据。\n\n![](maven.png)\n\n使用 jetty 发布\n\n```xml\n<plugin>\n  <groupId>org.eclipse.jetty</groupId>\n  <artifactId>jetty-maven-plugin</artifactId>\n  <version>9.4.4.v20170414</version>\n  <executions>\n    <execution>\n      <!--在打包成功后使用jetty:run来运行jetty服务-->\n      <phase>package</phase>  <!--指定在package阶段的时候-->\n      <goals>\n        <goal>run</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```\n\n","slug":"Maven-2017-05-10-maven","published":0,"date":"2017-05-10T12:37:08.000Z","updated":"2017-05-11T01:17:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndl000tp5ukr1kf33yf","content":" <div align=\"center\"><br>  想学习Maven吗？<br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"常用的构建命令\"><a href=\"#常用的构建命令\" class=\"headerlink\" title=\"常用的构建命令\"></a>常用的构建命令</h1><p>mvn </p>\n<ul>\n<li>v 查看版本</li>\n</ul>\n<ul>\n<li>compile 编译</li>\n</ul>\n<ul>\n<li>test 测试</li>\n</ul>\n<ul>\n<li>package  打包<ul>\n<li>会依次执行  clean 、</li>\n</ul>\n</li>\n<li>clean 删除target文件夹</li>\n<li>Install 安装jar包到本地仓库中</li>\n</ul>\n<h1 id=\"自动创建目录骨架\"><a href=\"#自动创建目录骨架\" class=\"headerlink\" title=\"自动创建目录骨架\"></a>自动创建目录骨架</h1><p>创建目录的两种方式：</p>\n<ol>\n<li>mvn archetype:generate 按照提示进行选择</li>\n</ol>\n<ol>\n<li><p>mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名</p>\n<p>​                        -DartifactId=项目名-模块名</p>\n<p>​                        -Dversion=版本号</p>\n<p>​                        -Dpackage=代码所在的包名</p>\n</li>\n</ol>\n<p>src/main/java:存放java源文件</p>\n<p>src/main/resources:存放项目配置文件，如spring.xml,hibernate.cfg.xml。。。</p>\n<p>src/test/java:存放test的java文件</p>\n<p>src/test/resources:存放test时候所需的配置文件</p>\n<h1 id=\"maven中的坐标和仓库\"><a href=\"#maven中的坐标和仓库\" class=\"headerlink\" title=\"maven中的坐标和仓库\"></a>maven中的坐标和仓库</h1><h2 id=\"坐标\"><a href=\"#坐标\" class=\"headerlink\" title=\"坐标\"></a>坐标</h2><p>在<code>&lt;dependency&gt;</code>中的就是坐标</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.nimon.maven01<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven01-model<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>项目的包名，建议和groupId和artifactId相吻合，这样看起来，就更加清晰，符合逻辑，也更方便搜索。</p>\n</blockquote>\n<h2 id=\"构件\"><a href=\"#构件\" class=\"headerlink\" title=\"构件\"></a>构件</h2><p>在maven世界中，任何一个依赖、插件、项目构建的输出，都可以被称作为<strong>构件</strong>。</p>\n<p><strong>构件</strong>通过坐标作为其唯一的标识，就好像我们的工作单位和家庭地址。</p>\n<blockquote>\n<p>收宝贝的时候，不是收到的那一刻，而是中间等待的过程。</p>\n</blockquote>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>​    本地仓库和远程仓库</p>\n<p>​    <a href=\"http://search.maven.org/\" target=\"_blank\" rel=\"external\">查看仓库</a></p>\n<p>​    <a href=\"https://repo.maven.apache.org/maven2/\" target=\"_blank\" rel=\"external\">全球中央仓库</a></p>\n<p>​    <a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"external\">MVN Repository</a></p>\n<h2 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h2><blockquote>\n<p>一旦配置了镜像，那么所有访问都会到镜像仓库中，原仓库将不能直接访问。</p>\n<p>maven主目录 &gt; conf &gt; settings.xml &gt; 146行</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven.net.cn<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central mirror in china<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.net.cn/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"更改仓库位置\"><a href=\"#更改仓库位置\" class=\"headerlink\" title=\"更改仓库位置\"></a>更改仓库位置</h2><blockquote>\n<p>maven从远程中央仓库下载默认是存放在当前用户目录中</p>\n<p>​    即 ~/.m2/repository</p>\n</blockquote>\n<p>修改 <code>settings.xml</code>文件，复制第 53 行的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;localRepository&gt;/Users/nimon/nj/proj/maven/repo&lt;/localRepository&gt;</div></pre></td></tr></table></figure>\n<p>其中路径表示新仓库的位置。然后复制一份 <code>settings.xml</code>  到 <code>repo</code> 目录下，这样我们以后更新maven版本就不用再修改原始的 <code>settings.xml</code></p>\n<h1 id=\"maven的生命周期和插件\"><a href=\"#maven的生命周期和插件\" class=\"headerlink\" title=\"maven的生命周期和插件\"></a>maven的生命周期和插件</h1><h2 id=\"完整的项目构建过程包括\"><a href=\"#完整的项目构建过程包括\" class=\"headerlink\" title=\"完整的项目构建过程包括\"></a>完整的项目构建过程包括</h2><p>清理、编译、测试、打包、集成测试、验证、部署</p>\n<p>maven将其进行抽象。实际上，maven和插件是密不可分的，maven抽象出一套项目构建的生命周期，而插件是对maven抽象的具体实现。</p>\n<p>比如，我们对项目进行编译，</p>\n<h2 id=\"maven中定义了三套独立的生命周期\"><a href=\"#maven中定义了三套独立的生命周期\" class=\"headerlink\" title=\"maven中定义了三套独立的生命周期\"></a>maven中定义了三套独立的生命周期</h2><ol>\n<li>clean    清理项目</li>\n<li>default  构建项目</li>\n<li>site   生成项目站点</li>\n</ol>\n<p>这三套生命周期是相互独立的，每个生命周期又包含一些阶段，这些阶段是有顺序的，后面的阶段依赖于前面的阶段。在执行的时候，前面的阶段会顺序执行，并不会触发另外两个生命周期中的阶段。</p>\n<h3 id=\"clean-清理项目阶段\"><a href=\"#clean-清理项目阶段\" class=\"headerlink\" title=\"clean 清理项目阶段\"></a>clean 清理项目阶段</h3><p>pre-clean 执行清理前的工作</p>\n<p>clean 清理上一次构建的文件</p>\n<p>post-clean 执行清理后的文件</p>\n<h3 id=\"default-构建项目（最核心）\"><a href=\"#default-构建项目（最核心）\" class=\"headerlink\" title=\"default 构建项目（最核心）\"></a>default 构建项目（最核心）</h3><p>compile test package install</p>\n<h3 id=\"site-生成项目站点\"><a href=\"#site-生成项目站点\" class=\"headerlink\" title=\"site 生成项目站点\"></a>site 生成项目站点</h3><p>pre-site 在生成项目站点前要完成工作</p>\n<p>site  生成项目的站点文档</p>\n<p>post-site  在生成项目站点后要完成的工作</p>\n<p>site-deploy  发布生成的站点到服务器</p>\n<p>可以去 <strong><a href=\"https://maven.apache.org/plugins\" target=\"_blank\" rel=\"external\">官方插件</a></strong> ，查找使用插件</p>\n<h1 id=\"pom-xml常用元素\"><a href=\"#pom-xml常用元素\" class=\"headerlink\" title=\"pom.xml常用元素\"></a>pom.xml常用元素</h1><p>pom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构建信息的管理。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span>   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>组织名，公司网址的反写+项目名<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>项目名-模块名<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--打包类型，默认是jar</span></div><div class=\"line\">\t\twar zip pom\t</div><div class=\"line\">\t--&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--第一个0表示大版本号</span></div><div class=\"line\">\t第二个0 表示分支版本号</div><div class=\"line\">\t第三个0 表示小版本号</div><div class=\"line\">\tSNAPSHOT ：不稳定，尚处于开发中，快照版本</div><div class=\"line\">\tALPHA ：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。</div><div class=\"line\">\tBeta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。</div><div class=\"line\">\tRELEASE ：稳定版</div><div class=\"line\">\tGA ：正式发布</div><div class=\"line\">\t--&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--项目描述名--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>maven05-demo Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--项目地址--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--项目描述--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">developers</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">developers</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">licenses</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">licenses</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">organization</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">organization</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--只存在于测试的 classpath 中--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--设置依赖是否可选--&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--排除依赖传递列表--&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">          \t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">              \t\t</div><div class=\"line\">              \t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!--依赖的管理，不会被运行和引入到实际的依赖中--&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">dependencyManagerment</span>&gt;</span></div><div class=\"line\">      \t<span class=\"comment\">&lt;!--主要定义在父模块中，供子模块集成用的--&gt;</span></div><div class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      \t\t</div><div class=\"line\">      \t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;/<span class=\"name\">dependencyManagerment</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!--插件列表--&gt;</span></div><div class=\"line\">  \t <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">              \t<span class=\"comment\">&lt;!--上面三项是坐标--&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>jar-no-fork<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--子模块对父模块的继承--&gt;</span></div><div class=\"line\">       \t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--聚合多个maven运行项--&gt;</span></div><div class=\"line\">       \t<span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>maven05-demo<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"依赖范围\"><a href=\"#依赖范围\" class=\"headerlink\" title=\"依赖范围\"></a>依赖范围</h1><p>我们平时在开发时，如果要使用某一个框架，就需要把框架的jar包引入项目的 classpath 中，这样我们的项目就可以使用 框架为我们封装好的一些方法。maven给我们提供了三种classpath：</p>\n<ol>\n<li>编译</li>\n<li>测试 test</li>\n<li>运行  </li>\n</ol>\n<p>所以依赖的范围就是控制依赖于三种 classpath 的关系的。</p>\n<p>有六中依赖范围的值可以选择：</p>\n<ul>\n<li>compile 默认的范围，如果没有明确指定，编译依赖将在所有的 classpath 中都有效，而且会传递到依赖项目中。</li>\n<li>provided  在编译和测试的时候有效</li>\n<li>runtime 在测试和运行时有效</li>\n<li>test 只在测试的时候有效</li>\n<li>system 于本机系统相关联，可移植性差</li>\n<li>import 导入的范围，它只使用在 dependencyManagerment ，表示从其他 pom 中导入的 dependency 的配置。</li>\n</ul>\n<p>例如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      .....</div></pre></td></tr></table></figure>\n<h1 id=\"依赖传递\"><a href=\"#依赖传递\" class=\"headerlink\" title=\"依赖传递\"></a>依赖传递</h1><p>一个小案例</p>\n<p>shanji 依赖于 nage</p>\n<p>nage 依赖于 bge</p>\n<p>bge的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>nage的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>shanji的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候nage下就有bge的依赖jar包，shanji下有bge和nage的依赖jar包。</p>\n<p>但是由于依赖的传递性，shanji 只依赖于nage ，shanji 项目中会出现 bge 的jar包。有时候，这不是我们想要的。</p>\n<p>这时可以在 nage 依赖下使用 <exclusions>  把 bge 排除在外。</exclusions></p>\n<h1 id=\"依赖冲突\"><a href=\"#依赖冲突\" class=\"headerlink\" title=\"依赖冲突\"></a>依赖冲突</h1><blockquote>\n<p>eg 对不同版本的同一个构建。</p>\n</blockquote>\n<ol>\n<li><p>短路优先</p>\n<p>A -&gt; B -&gt; C -&gt; X（JAR)</p>\n<p>A -&gt; D -&gt; X（JAR)    <strong>优先</strong></p>\n</li>\n</ol>\n<p>举例：</p>\n<p>在 bge 中添加commons-io 2.5的版本依赖</p>\n<p>在 nage 中添加commons-io 2.0的版本依赖</p>\n<p>这时候在 shanji 项目中就会出现 2.0 的版本，因为shanji 离 nage 比较近。</p>\n<ol>\n<li>先声明先优先</li>\n</ol>\n<p>如果路径长度相同，谁先声明，先解析谁。</p>\n<p>举例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--&lt;exclusions&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;exclusion&gt;--&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--&lt;groupId&gt;com.hongxing&lt;/groupId&gt;--&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--&lt;artifactId&gt;hongxing-bge&lt;/artifactId&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;/exclusion&gt;--&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--&lt;/exclusions&gt;--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候，项目中 commons-io 的版本就变成了 2.5，因为是先声明 bge ，后声明 nage 。</p>\n<h1 id=\"聚合和继承\"><a href=\"#聚合和继承\" class=\"headerlink\" title=\"聚合和继承\"></a>聚合和继承</h1><p>如果在maven中有多个项目，我们想要 install 将其放到本地仓库中， 必须对其依次执行 install 命令</p>\n<p>maven 给我提供了一个解决办法，就是使用 <strong>聚合</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-shanji<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后执行 install 命令，就会自动把三个module都安装到本地仓库中了。</p>\n<p>定义父容器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">junit.version</span>&gt;</span></div><div class=\"line\">         3.8.1</div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">junit.version</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;junit.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后在子类中使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意修改  <strong><packaging></packaging></strong> 为pom</p>\n</blockquote>\n<h1 id=\"使用maven构建web项目\"><a href=\"#使用maven构建web项目\" class=\"headerlink\" title=\"使用maven构建web项目\"></a>使用maven构建web项目</h1><p>Next，这里在Properties中添加一个参数<code>archetypeCatalog=internal</code>，不加这个参数，在maven生成骨架的时候将会非常慢，有时候会直接卡住。</p>\n<p>来自网上的解释：</p>\n<blockquote>\n<p>archetypeCatalog表示插件使用的archetype元数据，不加这个参数时默认为remote，local，即中央仓库archetype元数据，由于中央仓库的archetype太多了，所以导致很慢，指定internal来表示仅使用内部元数据。</p>\n</blockquote>\n<p><img src=\"/2017/05/10/Maven-2017-05-10-maven/maven.png\" alt=\"\"></p>\n<p>使用 jetty 发布</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.eclipse.jetty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetty-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.4.4.v20170414<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--在打包成功后使用jetty:run来运行jetty服务--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span>  <span class=\"comment\">&lt;!--指定在package阶段的时候--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br>  想学习Maven吗？<br><br></div>","more":"<h1 id=\"常用的构建命令\"><a href=\"#常用的构建命令\" class=\"headerlink\" title=\"常用的构建命令\"></a>常用的构建命令</h1><p>mvn </p>\n<ul>\n<li>v 查看版本</li>\n</ul>\n<ul>\n<li>compile 编译</li>\n</ul>\n<ul>\n<li>test 测试</li>\n</ul>\n<ul>\n<li>package  打包<ul>\n<li>会依次执行  clean 、</li>\n</ul>\n</li>\n<li>clean 删除target文件夹</li>\n<li>Install 安装jar包到本地仓库中</li>\n</ul>\n<h1 id=\"自动创建目录骨架\"><a href=\"#自动创建目录骨架\" class=\"headerlink\" title=\"自动创建目录骨架\"></a>自动创建目录骨架</h1><p>创建目录的两种方式：</p>\n<ol>\n<li>mvn archetype:generate 按照提示进行选择</li>\n</ol>\n<ol>\n<li><p>mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名</p>\n<p>​                        -DartifactId=项目名-模块名</p>\n<p>​                        -Dversion=版本号</p>\n<p>​                        -Dpackage=代码所在的包名</p>\n</li>\n</ol>\n<p>src/main/java:存放java源文件</p>\n<p>src/main/resources:存放项目配置文件，如spring.xml,hibernate.cfg.xml。。。</p>\n<p>src/test/java:存放test的java文件</p>\n<p>src/test/resources:存放test时候所需的配置文件</p>\n<h1 id=\"maven中的坐标和仓库\"><a href=\"#maven中的坐标和仓库\" class=\"headerlink\" title=\"maven中的坐标和仓库\"></a>maven中的坐标和仓库</h1><h2 id=\"坐标\"><a href=\"#坐标\" class=\"headerlink\" title=\"坐标\"></a>坐标</h2><p>在<code>&lt;dependency&gt;</code>中的就是坐标</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.nimon.maven01<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven01-model<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>项目的包名，建议和groupId和artifactId相吻合，这样看起来，就更加清晰，符合逻辑，也更方便搜索。</p>\n</blockquote>\n<h2 id=\"构件\"><a href=\"#构件\" class=\"headerlink\" title=\"构件\"></a>构件</h2><p>在maven世界中，任何一个依赖、插件、项目构建的输出，都可以被称作为<strong>构件</strong>。</p>\n<p><strong>构件</strong>通过坐标作为其唯一的标识，就好像我们的工作单位和家庭地址。</p>\n<blockquote>\n<p>收宝贝的时候，不是收到的那一刻，而是中间等待的过程。</p>\n</blockquote>\n<h2 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h2><p>​    本地仓库和远程仓库</p>\n<p>​    <a href=\"http://search.maven.org/\" target=\"_blank\" rel=\"external\">查看仓库</a></p>\n<p>​    <a href=\"https://repo.maven.apache.org/maven2/\" target=\"_blank\" rel=\"external\">全球中央仓库</a></p>\n<p>​    <a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"external\">MVN Repository</a></p>\n<h2 id=\"镜像仓库\"><a href=\"#镜像仓库\" class=\"headerlink\" title=\"镜像仓库\"></a>镜像仓库</h2><blockquote>\n<p>一旦配置了镜像，那么所有访问都会到镜像仓库中，原仓库将不能直接访问。</p>\n<p>maven主目录 &gt; conf &gt; settings.xml &gt; 146行</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven.net.cn<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central mirror in china<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.net.cn/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"更改仓库位置\"><a href=\"#更改仓库位置\" class=\"headerlink\" title=\"更改仓库位置\"></a>更改仓库位置</h2><blockquote>\n<p>maven从远程中央仓库下载默认是存放在当前用户目录中</p>\n<p>​    即 ~/.m2/repository</p>\n</blockquote>\n<p>修改 <code>settings.xml</code>文件，复制第 53 行的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;localRepository&gt;/Users/nimon/nj/proj/maven/repo&lt;/localRepository&gt;</div></pre></td></tr></table></figure>\n<p>其中路径表示新仓库的位置。然后复制一份 <code>settings.xml</code>  到 <code>repo</code> 目录下，这样我们以后更新maven版本就不用再修改原始的 <code>settings.xml</code></p>\n<h1 id=\"maven的生命周期和插件\"><a href=\"#maven的生命周期和插件\" class=\"headerlink\" title=\"maven的生命周期和插件\"></a>maven的生命周期和插件</h1><h2 id=\"完整的项目构建过程包括\"><a href=\"#完整的项目构建过程包括\" class=\"headerlink\" title=\"完整的项目构建过程包括\"></a>完整的项目构建过程包括</h2><p>清理、编译、测试、打包、集成测试、验证、部署</p>\n<p>maven将其进行抽象。实际上，maven和插件是密不可分的，maven抽象出一套项目构建的生命周期，而插件是对maven抽象的具体实现。</p>\n<p>比如，我们对项目进行编译，</p>\n<h2 id=\"maven中定义了三套独立的生命周期\"><a href=\"#maven中定义了三套独立的生命周期\" class=\"headerlink\" title=\"maven中定义了三套独立的生命周期\"></a>maven中定义了三套独立的生命周期</h2><ol>\n<li>clean    清理项目</li>\n<li>default  构建项目</li>\n<li>site   生成项目站点</li>\n</ol>\n<p>这三套生命周期是相互独立的，每个生命周期又包含一些阶段，这些阶段是有顺序的，后面的阶段依赖于前面的阶段。在执行的时候，前面的阶段会顺序执行，并不会触发另外两个生命周期中的阶段。</p>\n<h3 id=\"clean-清理项目阶段\"><a href=\"#clean-清理项目阶段\" class=\"headerlink\" title=\"clean 清理项目阶段\"></a>clean 清理项目阶段</h3><p>pre-clean 执行清理前的工作</p>\n<p>clean 清理上一次构建的文件</p>\n<p>post-clean 执行清理后的文件</p>\n<h3 id=\"default-构建项目（最核心）\"><a href=\"#default-构建项目（最核心）\" class=\"headerlink\" title=\"default 构建项目（最核心）\"></a>default 构建项目（最核心）</h3><p>compile test package install</p>\n<h3 id=\"site-生成项目站点\"><a href=\"#site-生成项目站点\" class=\"headerlink\" title=\"site 生成项目站点\"></a>site 生成项目站点</h3><p>pre-site 在生成项目站点前要完成工作</p>\n<p>site  生成项目的站点文档</p>\n<p>post-site  在生成项目站点后要完成的工作</p>\n<p>site-deploy  发布生成的站点到服务器</p>\n<p>可以去 <strong><a href=\"https://maven.apache.org/plugins\" target=\"_blank\" rel=\"external\">官方插件</a></strong> ，查找使用插件</p>\n<h1 id=\"pom-xml常用元素\"><a href=\"#pom-xml常用元素\" class=\"headerlink\" title=\"pom.xml常用元素\"></a>pom.xml常用元素</h1><p>pom.xml是maven项目的核心管理文件，用于项目描述、组织管理、依赖管理和构建信息的管理。 </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span>   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>组织名，公司网址的反写+项目名<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>项目名-模块名<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--打包类型，默认是jar</span></div><div class=\"line\">\t\twar zip pom\t</div><div class=\"line\">\t--&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--第一个0表示大版本号</span></div><div class=\"line\">\t第二个0 表示分支版本号</div><div class=\"line\">\t第三个0 表示小版本号</div><div class=\"line\">\tSNAPSHOT ：不稳定，尚处于开发中，快照版本</div><div class=\"line\">\tALPHA ：是内部测试版,一般不向外部发布,会有很多Bug.一般只有测试人员使用。</div><div class=\"line\">\tBeta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出。</div><div class=\"line\">\tRELEASE ：稳定版</div><div class=\"line\">\tGA ：正式发布</div><div class=\"line\">\t--&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--项目描述名--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>maven05-demo Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  \t<span class=\"comment\">&lt;!--项目地址--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--项目描述--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">developers</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">developers</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">licenses</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">licenses</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">organization</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">organization</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--只存在于测试的 classpath 中--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--设置依赖是否可选--&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\">          \t<span class=\"comment\">&lt;!--排除依赖传递列表--&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">          \t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">              \t\t</div><div class=\"line\">              \t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          \t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!--依赖的管理，不会被运行和引入到实际的依赖中--&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">dependencyManagerment</span>&gt;</span></div><div class=\"line\">      \t<span class=\"comment\">&lt;!--主要定义在父模块中，供子模块集成用的--&gt;</span></div><div class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      \t\t</div><div class=\"line\">      \t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  \t<span class=\"tag\">&lt;/<span class=\"name\">dependencyManagerment</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!--插件列表--&gt;</span></div><div class=\"line\">  \t <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-source-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">              \t<span class=\"comment\">&lt;!--上面三项是坐标--&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>jar-no-fork<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-jar-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--子模块对父模块的继承--&gt;</span></div><div class=\"line\">       \t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--聚合多个maven运行项--&gt;</span></div><div class=\"line\">       \t<span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>maven05-demo<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"依赖范围\"><a href=\"#依赖范围\" class=\"headerlink\" title=\"依赖范围\"></a>依赖范围</h1><p>我们平时在开发时，如果要使用某一个框架，就需要把框架的jar包引入项目的 classpath 中，这样我们的项目就可以使用 框架为我们封装好的一些方法。maven给我们提供了三种classpath：</p>\n<ol>\n<li>编译</li>\n<li>测试 test</li>\n<li>运行  </li>\n</ol>\n<p>所以依赖的范围就是控制依赖于三种 classpath 的关系的。</p>\n<p>有六中依赖范围的值可以选择：</p>\n<ul>\n<li>compile 默认的范围，如果没有明确指定，编译依赖将在所有的 classpath 中都有效，而且会传递到依赖项目中。</li>\n<li>provided  在编译和测试的时候有效</li>\n<li>runtime 在测试和运行时有效</li>\n<li>test 只在测试的时候有效</li>\n<li>system 于本机系统相关联，可移植性差</li>\n<li>import 导入的范围，它只使用在 dependencyManagerment ，表示从其他 pom 中导入的 dependency 的配置。</li>\n</ul>\n<p>例如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>maven<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      .....</div></pre></td></tr></table></figure>\n<h1 id=\"依赖传递\"><a href=\"#依赖传递\" class=\"headerlink\" title=\"依赖传递\"></a>依赖传递</h1><p>一个小案例</p>\n<p>shanji 依赖于 nage</p>\n<p>nage 依赖于 bge</p>\n<p>bge的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>nage的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>shanji的依赖关系</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候nage下就有bge的依赖jar包，shanji下有bge和nage的依赖jar包。</p>\n<p>但是由于依赖的传递性，shanji 只依赖于nage ，shanji 项目中会出现 bge 的jar包。有时候，这不是我们想要的。</p>\n<p>这时可以在 nage 依赖下使用 <exclusions>  把 bge 排除在外。</exclusions></p>\n<h1 id=\"依赖冲突\"><a href=\"#依赖冲突\" class=\"headerlink\" title=\"依赖冲突\"></a>依赖冲突</h1><blockquote>\n<p>eg 对不同版本的同一个构建。</p>\n</blockquote>\n<ol>\n<li><p>短路优先</p>\n<p>A -&gt; B -&gt; C -&gt; X（JAR)</p>\n<p>A -&gt; D -&gt; X（JAR)    <strong>优先</strong></p>\n</li>\n</ol>\n<p>举例：</p>\n<p>在 bge 中添加commons-io 2.5的版本依赖</p>\n<p>在 nage 中添加commons-io 2.0的版本依赖</p>\n<p>这时候在 shanji 项目中就会出现 2.0 的版本，因为shanji 离 nage 比较近。</p>\n<ol>\n<li>先声明先优先</li>\n</ol>\n<p>如果路径长度相同，谁先声明，先解析谁。</p>\n<p>举例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--&lt;exclusions&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;exclusion&gt;--&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--&lt;groupId&gt;com.hongxing&lt;/groupId&gt;--&gt;</span></div><div class=\"line\">          <span class=\"comment\">&lt;!--&lt;artifactId&gt;hongxing-bge&lt;/artifactId&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;/exclusion&gt;--&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--&lt;/exclusions&gt;--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这时候，项目中 commons-io 的版本就变成了 2.5，因为是先声明 bge ，后声明 nage 。</p>\n<h1 id=\"聚合和继承\"><a href=\"#聚合和继承\" class=\"headerlink\" title=\"聚合和继承\"></a>聚合和继承</h1><p>如果在maven中有多个项目，我们想要 install 将其放到本地仓库中， 必须对其依次执行 install 命令</p>\n<p>maven 给我提供了一个解决办法，就是使用 <strong>聚合</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-bge<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-nage<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>../hongxing-shanji<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后执行 install 命令，就会自动把三个module都安装到本地仓库中了。</p>\n<p>定义父容器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">junit.version</span>&gt;</span></div><div class=\"line\">         3.8.1</div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">junit.version</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;junit.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然后在子类中使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hongxing<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hongxing-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意修改  <strong><packaging></packaging></strong> 为pom</p>\n</blockquote>\n<h1 id=\"使用maven构建web项目\"><a href=\"#使用maven构建web项目\" class=\"headerlink\" title=\"使用maven构建web项目\"></a>使用maven构建web项目</h1><p>Next，这里在Properties中添加一个参数<code>archetypeCatalog=internal</code>，不加这个参数，在maven生成骨架的时候将会非常慢，有时候会直接卡住。</p>\n<p>来自网上的解释：</p>\n<blockquote>\n<p>archetypeCatalog表示插件使用的archetype元数据，不加这个参数时默认为remote，local，即中央仓库archetype元数据，由于中央仓库的archetype太多了，所以导致很慢，指定internal来表示仅使用内部元数据。</p>\n</blockquote>\n<p><img src=\"/2017/05/10/Maven-2017-05-10-maven/maven.png\" alt=\"\"></p>\n<p>使用 jetty 发布</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.eclipse.jetty<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jetty-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.4.4.v20170414<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">      <span class=\"comment\">&lt;!--在打包成功后使用jetty:run来运行jetty服务--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span>  <span class=\"comment\">&lt;!--指定在package阶段的时候--&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"Spring中jdbcTemplate的用法实例（一）","date":"2017-05-08T05:56:19.000Z","_content":"\n\n\n<div align = \"center\">\n\nJdbcTemplate详解\n\n</div>\n\n<!-- more -->\n\n# 注入JdbcTemplate的三种方式\n\n​      第一种方式： 在 Spring 的 IoC 容器中配置一个 JdbcTemplate 的 bean，将 DataSource 注入进来，然后再把JdbcTemplate 注入到自定义DAO 中。 \n\n​      第二种方式：我们可以在自己定义的DAO 实现类中注入一个DataSource 引用来完 成JdbcTemplate 的实例化。也就是它是从外部“注入” DataSource 到DAO 中，然后 自己实例化JdbcTemplate，然后将DataSource 设置到JdbcTemplate 对象中。 \n\n​     \n​      第三种方式: Spring 提供了 org.springframework.jdbc.core.support.JdbcDaoSupport 类 ， 这 个 类 中 定 义 了 JdbcTemplate 属性，也定义了DataSource 属性，当设置DataSource 属性的时候，会创 建jdbcTemplate 的实例，所以我们自己编写的DAO 只需要继承JdbcDaoSupport 类， 然后注入DataSource 即可。**提倡采用第三种方法**。\n\n\n\n第一种方法\n\n```java\npublic class UserServiceImpl implements UserService {  \n  \n    private JdbcTemplate jdbcTemplate;  \n      \n    public JdbcTemplate getJdbcTemplate() {  \n        return jdbcTemplate;  \n    }  \n  \n    //注入方法1     \n    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {  \n        this.jdbcTemplate = jdbcTemplate;  \n    }  \n  \n    //其它方法这里省略……  \n}  \n```\n\n```xml\n<bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\">  \n        <property name = \"dataSource\" ref=\"dataSource\">  \n</bean>  \n<bean id=\"userService\" class=\"com.nini.account.jdbcTemplate.UserServiceImpl\">  \n     <property name=\"jdbcTemplate\" ref=\"jdbcTemplate\"/>  \n</bean>  \n```\n\n第二种方法\n\n```java\npublic class UserServiceImpl implements UserService {  \n  \n        private JdbcTemplate jdbcTemplate;  \n          \n        //注入方法2  \n        public void setDataSource(DataSource dataSource) {  \n                   this.jdbcTemplate = new JdbcTemplate(dataSource);  \n        }  \n       \n       //其它方法省略……  \n}  \n```\n\n```xml\n<bean id=\"userService\" class=\"com.nini.account.jdbcTemplate.UserServiceImpl\">  \n       <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean> \n```\n\n\n\n第三种方法\n\n继承JdbcDaoSupport，其内部有个JdbcTemplate ，需要注入DataSource 属性来实例化。\n\n```java\n public class UserDaoImpl extends JdbcDaoSupport implements UserDao {  \n  \n    @Override  \n    public void save(User user) {  \n        String sql = null;  \n        this.getJdbcTemplate().update(sql);  \n    }  \n        //其它方法省略……  \n}  \n```\n\n```xml\n<bean id=\"userDao\" class=\"com.nini.account.jdbcTemplate.UserDaoImpl\">  \n           <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean>  \n```\n\n\n\n\n\n\n\n# 常用方法\n\n> jdbcTemplate 中的sql均是用“?”做占位符的\n\n```java\npublic class User {  \n    private int id;  \n    private String username;  \n    private String password;  \n    private String sex;  \n              \n               //setter和getter方法省略……  \n}  \n```\n\n\n\n> jdbcTemplate.update 适合于 insert 、update 和 delete操作；  \n\n```java\n\t/**   \n     * 第一个参数为执行sql   \n     * 第二个参数为参数数据   \n     */   \n    public void save3(User user) {  \n        Assert.isNull(user, \"user is not null\");  \n        jdbcTemplate.update(\"insert into tb_test1(name,password) values(?,?)\",   \n                new Object[]{user.getUsername(),user.getPassword()});  \n    }  \n      \n    /**   \n     * 第一个参数为执行sql   \n     * 第二个参数为参数数据   \n     * 第三个参数为参数类型   \n     */   \n    @Override  \n    public void save(User user) {  \n        Assert.isNull(user, \"user is not null\");  \n        jdbcTemplate.update(  \n                \"insert into tb_test1(name,password) values(?,?)\",   \n                new Object[]{user.getUsername(),user.getPassword()},   \n                new int[]{java.sql.Types.VARCHAR,java.sql.Types.VARCHAR}  \n                );  \n    }  \n\n\n\t//避免sql注入  \n    public void save2(final User user) {  \n        Assert.isNull(user, \"user is not null\");  \n          \n        jdbcTemplate.update(\"insert into tb_test1(name,password) values(?,?)\",   \n                new PreparedStatementSetter(){  \n              \n                    @Override  \n                    public void setValues(PreparedStatement ps) throws SQLException {  \n                        ps.setString(1, user.getUsername());  \n                        ps.setString(2, user.getPassword());  \n                    }  \n        });  \n          \n    }  \n\n\t//返回插入的主键  \n    public List save5(final User user) {  \n          \n        KeyHolder keyHolder = new GeneratedKeyHolder();  \n  \n        jdbcTemplate.update(new PreparedStatementCreator() {  \n                      \n                                @Override  \n                                public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {  \n                                    PreparedStatement ps = connection.prepareStatement(\"insert into tb_test1(name,password) values(?,?)\", new String[] {\"id\"});  \n                                    ps.setString(1, user.getUsername());  \n                                    ps.setString(2, user.getPassword());  \n                                    return ps;  \n                                }  \n                            },  \n                keyHolder);  \n          \n        return keyHolder.getKeyList();  \n    } \n\n    @Override  \n    public void delete(User user) {  \n        Assert.isNull(user, \"user is not null\");  \n        jdbcTemplate.update(  \n                \"delete from tb_test1 where id = ?\",   \n                new Object[]{user.getId()},   \n                new int[]{java.sql.Types.INTEGER});  \n    }  \n\n    //最全的参数3个  \n    public int queryForInt3(User user){  \n        return jdbcTemplate.queryForInt(\"select count(0) from tb_test1 where username = ?\" ,  \n                new Object[]{user.getUsername()},  \n                new int[]{java.sql.Types.VARCHAR});  \n    }  \n\n    public User queryForObject5(User user) {  \n        return (User) jdbcTemplate.queryForObject(  \n                \"select * from tb_test1 where id = ?\",   \n                new Object[]{user.getId()},  \n                new RowMapper(){  \n  \n                    @Override  \n                    public Object mapRow(ResultSet rs,int rowNum)throws SQLException {  \n                        User user  = new User();  \n                        user.setId(rs.getInt(\"id\"));  \n                        user.setUsername(rs.getString(\"username\"));  \n                        user.setPassword(rs.getString(\"password\"));  \n                        return user;  \n                    }  \n              \n        }); //class是结果数据的java类型  \n    }  \n\n    @SuppressWarnings(\"unchecked\")  \n    //最全的参数查询  \n    public List<User> queryForList3(User user) {  \n        return (List<User>) jdbcTemplate.queryForList(\"select * from tb_test1 where username = ?\",  \n                            new Object[]{user.getUsername()},  \n                            new int[]{java.sql.Types.VARCHAR},  \n                            User.class);  \n    }  \n\n\n    //批量操作    适合于增、删、改操作  \n    public int[] batchUpdate(final List users) {  \n          \n        int[] updateCounts = jdbcTemplate.batchUpdate(  \n                \"update tb_test1 set username = ?, password = ? where id = ?\",  \n                new BatchPreparedStatementSetter() {  \n                      \n                        @Override  \n                        public void setValues(PreparedStatement ps, int i) throws SQLException {  \n                            ps.setString(1, ((User)users.get(i)).getUsername());  \n                            ps.setString(2, ((User)users.get(i)).getPassword());  \n                            ps.setLong(3, ((User)users.get(i)).getId());  \n                        }  \n                          \n                        @Override  \n                        public int getBatchSize() {  \n                            return users.size();  \n                        }  \n                }   \n        );  \n          \n        return updateCounts;  \n    }  \n\n\t//调用存储过程  \n    public void callProcedure(int id){  \n        this.jdbcTemplate.update(\"call SUPPORT.REFRESH_USERS_SUMMARY(?)\", new Object[]{Long.valueOf(id)});  \n\t}  \n```\n\n其中，batchUpdate适合于批量增、删、改操作；\n\n​         update(…)：使用于增、删、改操作；\n\n​         execute（）：执行一个独立的sql语句，包括ddl语句；\n\n​         queryForInt ：查询出一个整数值\n\n\n\n\n\n# HibernateTemplate\n\n下面是 HibernateTemplate的常用方法。\n\ndelete(Object entity): 删除指定持久化实例。    \n\ndeleteAll(Collection entities): 删除集合内全部持久化类实例。  \n\nfind(String queryString): 根据 HQL 查询字符串来返回实例集合。 \n\nfindByNamedQuery(String queryName): 根据命名查询返回实例集合。    \n\nget(Classentity Class,Serializable id): 根据主键加载特定持久化类的实例。    \n\nsave(Object entity): 保存新的实例。    \n\nsaveOrUpdate(Object entity): 根据实例状态，选择保存或者更新。    \n\nupdate(Object entity): 更新实例的状态，要求entity 是持久状态。   \n\nsetMaxResults(intmax Results): 设置分页的大小。\n\n\n\nhql语句\n\nSelect/update/delete…… from …… where …… group by …… having …… orderby …… asc/desc","source":"_drafts/Spring/2017-05-08-Spring中jdbcTemplate和HibernateTemplate.md","raw":"---\ntitle: Spring中jdbcTemplate的用法实例（一）\ndate: 2017-05-08 13:56:19\ntags: Spring\n\n---\n\n\n\n<div align = \"center\">\n\nJdbcTemplate详解\n\n</div>\n\n<!-- more -->\n\n# 注入JdbcTemplate的三种方式\n\n​      第一种方式： 在 Spring 的 IoC 容器中配置一个 JdbcTemplate 的 bean，将 DataSource 注入进来，然后再把JdbcTemplate 注入到自定义DAO 中。 \n\n​      第二种方式：我们可以在自己定义的DAO 实现类中注入一个DataSource 引用来完 成JdbcTemplate 的实例化。也就是它是从外部“注入” DataSource 到DAO 中，然后 自己实例化JdbcTemplate，然后将DataSource 设置到JdbcTemplate 对象中。 \n\n​     \n​      第三种方式: Spring 提供了 org.springframework.jdbc.core.support.JdbcDaoSupport 类 ， 这 个 类 中 定 义 了 JdbcTemplate 属性，也定义了DataSource 属性，当设置DataSource 属性的时候，会创 建jdbcTemplate 的实例，所以我们自己编写的DAO 只需要继承JdbcDaoSupport 类， 然后注入DataSource 即可。**提倡采用第三种方法**。\n\n\n\n第一种方法\n\n```java\npublic class UserServiceImpl implements UserService {  \n  \n    private JdbcTemplate jdbcTemplate;  \n      \n    public JdbcTemplate getJdbcTemplate() {  \n        return jdbcTemplate;  \n    }  \n  \n    //注入方法1     \n    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {  \n        this.jdbcTemplate = jdbcTemplate;  \n    }  \n  \n    //其它方法这里省略……  \n}  \n```\n\n```xml\n<bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\">  \n        <property name = \"dataSource\" ref=\"dataSource\">  \n</bean>  \n<bean id=\"userService\" class=\"com.nini.account.jdbcTemplate.UserServiceImpl\">  \n     <property name=\"jdbcTemplate\" ref=\"jdbcTemplate\"/>  \n</bean>  \n```\n\n第二种方法\n\n```java\npublic class UserServiceImpl implements UserService {  \n  \n        private JdbcTemplate jdbcTemplate;  \n          \n        //注入方法2  \n        public void setDataSource(DataSource dataSource) {  \n                   this.jdbcTemplate = new JdbcTemplate(dataSource);  \n        }  \n       \n       //其它方法省略……  \n}  \n```\n\n```xml\n<bean id=\"userService\" class=\"com.nini.account.jdbcTemplate.UserServiceImpl\">  \n       <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean> \n```\n\n\n\n第三种方法\n\n继承JdbcDaoSupport，其内部有个JdbcTemplate ，需要注入DataSource 属性来实例化。\n\n```java\n public class UserDaoImpl extends JdbcDaoSupport implements UserDao {  \n  \n    @Override  \n    public void save(User user) {  \n        String sql = null;  \n        this.getJdbcTemplate().update(sql);  \n    }  \n        //其它方法省略……  \n}  \n```\n\n```xml\n<bean id=\"userDao\" class=\"com.nini.account.jdbcTemplate.UserDaoImpl\">  \n           <property name=\"dataSource\" ref=\"dataSource\"/>  \n</bean>  \n```\n\n\n\n\n\n\n\n# 常用方法\n\n> jdbcTemplate 中的sql均是用“?”做占位符的\n\n```java\npublic class User {  \n    private int id;  \n    private String username;  \n    private String password;  \n    private String sex;  \n              \n               //setter和getter方法省略……  \n}  \n```\n\n\n\n> jdbcTemplate.update 适合于 insert 、update 和 delete操作；  \n\n```java\n\t/**   \n     * 第一个参数为执行sql   \n     * 第二个参数为参数数据   \n     */   \n    public void save3(User user) {  \n        Assert.isNull(user, \"user is not null\");  \n        jdbcTemplate.update(\"insert into tb_test1(name,password) values(?,?)\",   \n                new Object[]{user.getUsername(),user.getPassword()});  \n    }  \n      \n    /**   \n     * 第一个参数为执行sql   \n     * 第二个参数为参数数据   \n     * 第三个参数为参数类型   \n     */   \n    @Override  \n    public void save(User user) {  \n        Assert.isNull(user, \"user is not null\");  \n        jdbcTemplate.update(  \n                \"insert into tb_test1(name,password) values(?,?)\",   \n                new Object[]{user.getUsername(),user.getPassword()},   \n                new int[]{java.sql.Types.VARCHAR,java.sql.Types.VARCHAR}  \n                );  \n    }  \n\n\n\t//避免sql注入  \n    public void save2(final User user) {  \n        Assert.isNull(user, \"user is not null\");  \n          \n        jdbcTemplate.update(\"insert into tb_test1(name,password) values(?,?)\",   \n                new PreparedStatementSetter(){  \n              \n                    @Override  \n                    public void setValues(PreparedStatement ps) throws SQLException {  \n                        ps.setString(1, user.getUsername());  \n                        ps.setString(2, user.getPassword());  \n                    }  \n        });  \n          \n    }  \n\n\t//返回插入的主键  \n    public List save5(final User user) {  \n          \n        KeyHolder keyHolder = new GeneratedKeyHolder();  \n  \n        jdbcTemplate.update(new PreparedStatementCreator() {  \n                      \n                                @Override  \n                                public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {  \n                                    PreparedStatement ps = connection.prepareStatement(\"insert into tb_test1(name,password) values(?,?)\", new String[] {\"id\"});  \n                                    ps.setString(1, user.getUsername());  \n                                    ps.setString(2, user.getPassword());  \n                                    return ps;  \n                                }  \n                            },  \n                keyHolder);  \n          \n        return keyHolder.getKeyList();  \n    } \n\n    @Override  \n    public void delete(User user) {  \n        Assert.isNull(user, \"user is not null\");  \n        jdbcTemplate.update(  \n                \"delete from tb_test1 where id = ?\",   \n                new Object[]{user.getId()},   \n                new int[]{java.sql.Types.INTEGER});  \n    }  \n\n    //最全的参数3个  \n    public int queryForInt3(User user){  \n        return jdbcTemplate.queryForInt(\"select count(0) from tb_test1 where username = ?\" ,  \n                new Object[]{user.getUsername()},  \n                new int[]{java.sql.Types.VARCHAR});  \n    }  \n\n    public User queryForObject5(User user) {  \n        return (User) jdbcTemplate.queryForObject(  \n                \"select * from tb_test1 where id = ?\",   \n                new Object[]{user.getId()},  \n                new RowMapper(){  \n  \n                    @Override  \n                    public Object mapRow(ResultSet rs,int rowNum)throws SQLException {  \n                        User user  = new User();  \n                        user.setId(rs.getInt(\"id\"));  \n                        user.setUsername(rs.getString(\"username\"));  \n                        user.setPassword(rs.getString(\"password\"));  \n                        return user;  \n                    }  \n              \n        }); //class是结果数据的java类型  \n    }  \n\n    @SuppressWarnings(\"unchecked\")  \n    //最全的参数查询  \n    public List<User> queryForList3(User user) {  \n        return (List<User>) jdbcTemplate.queryForList(\"select * from tb_test1 where username = ?\",  \n                            new Object[]{user.getUsername()},  \n                            new int[]{java.sql.Types.VARCHAR},  \n                            User.class);  \n    }  \n\n\n    //批量操作    适合于增、删、改操作  \n    public int[] batchUpdate(final List users) {  \n          \n        int[] updateCounts = jdbcTemplate.batchUpdate(  \n                \"update tb_test1 set username = ?, password = ? where id = ?\",  \n                new BatchPreparedStatementSetter() {  \n                      \n                        @Override  \n                        public void setValues(PreparedStatement ps, int i) throws SQLException {  \n                            ps.setString(1, ((User)users.get(i)).getUsername());  \n                            ps.setString(2, ((User)users.get(i)).getPassword());  \n                            ps.setLong(3, ((User)users.get(i)).getId());  \n                        }  \n                          \n                        @Override  \n                        public int getBatchSize() {  \n                            return users.size();  \n                        }  \n                }   \n        );  \n          \n        return updateCounts;  \n    }  \n\n\t//调用存储过程  \n    public void callProcedure(int id){  \n        this.jdbcTemplate.update(\"call SUPPORT.REFRESH_USERS_SUMMARY(?)\", new Object[]{Long.valueOf(id)});  \n\t}  \n```\n\n其中，batchUpdate适合于批量增、删、改操作；\n\n​         update(…)：使用于增、删、改操作；\n\n​         execute（）：执行一个独立的sql语句，包括ddl语句；\n\n​         queryForInt ：查询出一个整数值\n\n\n\n\n\n# HibernateTemplate\n\n下面是 HibernateTemplate的常用方法。\n\ndelete(Object entity): 删除指定持久化实例。    \n\ndeleteAll(Collection entities): 删除集合内全部持久化类实例。  \n\nfind(String queryString): 根据 HQL 查询字符串来返回实例集合。 \n\nfindByNamedQuery(String queryName): 根据命名查询返回实例集合。    \n\nget(Classentity Class,Serializable id): 根据主键加载特定持久化类的实例。    \n\nsave(Object entity): 保存新的实例。    \n\nsaveOrUpdate(Object entity): 根据实例状态，选择保存或者更新。    \n\nupdate(Object entity): 更新实例的状态，要求entity 是持久状态。   \n\nsetMaxResults(intmax Results): 设置分页的大小。\n\n\n\nhql语句\n\nSelect/update/delete…… from …… where …… group by …… having …… orderby …… asc/desc","slug":"Spring-2017-05-08-Spring中jdbcTemplate和HibernateTemplate","published":0,"updated":"2017-05-08T08:56:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndm000vp5ukfjp1jdkh","content":"<div align=\"center\"><br><br>JdbcTemplate详解<br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"注入JdbcTemplate的三种方式\"><a href=\"#注入JdbcTemplate的三种方式\" class=\"headerlink\" title=\"注入JdbcTemplate的三种方式\"></a>注入JdbcTemplate的三种方式</h1><p>​      第一种方式： 在 Spring 的 IoC 容器中配置一个 JdbcTemplate 的 bean，将 DataSource 注入进来，然后再把JdbcTemplate 注入到自定义DAO 中。 </p>\n<p>​      第二种方式：我们可以在自己定义的DAO 实现类中注入一个DataSource 引用来完 成JdbcTemplate 的实例化。也就是它是从外部“注入” DataSource 到DAO 中，然后 自己实例化JdbcTemplate，然后将DataSource 设置到JdbcTemplate 对象中。 </p>\n<p>​<br>​      第三种方式: Spring 提供了 org.springframework.jdbc.core.support.JdbcDaoSupport 类 ， 这 个 类 中 定 义 了 JdbcTemplate 属性，也定义了DataSource 属性，当设置DataSource 属性的时候，会创 建jdbcTemplate 的实例，所以我们自己编写的DAO 只需要继承JdbcDaoSupport 类， 然后注入DataSource 即可。<strong>提倡采用第三种方法</strong>。</p>\n<p>第一种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JdbcTemplate <span class=\"title\">getJdbcTemplate</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> jdbcTemplate;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//注入方法1     </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJdbcTemplate</span><span class=\"params\">(JdbcTemplate jdbcTemplate)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.jdbcTemplate = jdbcTemplate;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//其它方法这里省略……  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jdbcTemplate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.core.JdbcTemplate\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span> = <span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.nini.account.jdbcTemplate.UserServiceImpl\"</span>&gt;</span>  </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcTemplate\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"jdbcTemplate\"</span>/&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>第二种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//注入方法2  </span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSource</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;  </div><div class=\"line\">                   <span class=\"keyword\">this</span>.jdbcTemplate = <span class=\"keyword\">new</span> JdbcTemplate(dataSource);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">       </div><div class=\"line\">       <span class=\"comment\">//其它方法省略……  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.nini.account.jdbcTemplate.UserServiceImpl\"</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>第三种方法</p>\n<p>继承JdbcDaoSupport，其内部有个JdbcTemplate ，需要注入DataSource 属性来实例化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">JdbcDaoSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">        String sql = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.getJdbcTemplate().update(sql);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">        <span class=\"comment\">//其它方法省略……  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.nini.account.jdbcTemplate.UserDaoImpl\"</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h1><blockquote>\n<p>jdbcTemplate 中的sql均是用“?”做占位符的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String username;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String password;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String sex;  </div><div class=\"line\">              </div><div class=\"line\">               <span class=\"comment\">//setter和getter方法省略……  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>jdbcTemplate.update 适合于 insert 、update 和 delete操作；  </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**   </span></div><div class=\"line\">    * 第一个参数为执行sql   </div><div class=\"line\">    * 第二个参数为参数数据   </div><div class=\"line\">    */   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save3</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       Assert.isNull(user, <span class=\"string\">\"user is not null\"</span>);  </div><div class=\"line\">       jdbcTemplate.update(<span class=\"string\">\"insert into tb_test1(name,password) values(?,?)\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getUsername(),user.getPassword()&#125;);  </div><div class=\"line\">   &#125;  </div><div class=\"line\">     </div><div class=\"line\">   <span class=\"comment\">/**   </span></div><div class=\"line\">    * 第一个参数为执行sql   </div><div class=\"line\">    * 第二个参数为参数数据   </div><div class=\"line\">    * 第三个参数为参数类型   </div><div class=\"line\">    */   </div><div class=\"line\">   <span class=\"meta\">@Override</span>  </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       Assert.isNull(user, <span class=\"string\">\"user is not null\"</span>);  </div><div class=\"line\">       jdbcTemplate.update(  </div><div class=\"line\">               <span class=\"string\">\"insert into tb_test1(name,password) values(?,?)\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getUsername(),user.getPassword()&#125;,   </div><div class=\"line\">               <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;java.sql.Types.VARCHAR,java.sql.Types.VARCHAR&#125;  </div><div class=\"line\">               );  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//避免sql注入  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save2</span><span class=\"params\">(<span class=\"keyword\">final</span> User user)</span> </span>&#123;  </div><div class=\"line\">       Assert.isNull(user, <span class=\"string\">\"user is not null\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">       jdbcTemplate.update(<span class=\"string\">\"insert into tb_test1(name,password) values(?,?)\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> PreparedStatementSetter()&#123;  </div><div class=\"line\">             </div><div class=\"line\">                   <span class=\"meta\">@Override</span>  </div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValues</span><span class=\"params\">(PreparedStatement ps)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;  </div><div class=\"line\">                       ps.setString(<span class=\"number\">1</span>, user.getUsername());  </div><div class=\"line\">                       ps.setString(<span class=\"number\">2</span>, user.getPassword());  </div><div class=\"line\">                   &#125;  </div><div class=\"line\">       &#125;);  </div><div class=\"line\">         </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//返回插入的主键  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">save5</span><span class=\"params\">(<span class=\"keyword\">final</span> User user)</span> </span>&#123;  </div><div class=\"line\">         </div><div class=\"line\">       KeyHolder keyHolder = <span class=\"keyword\">new</span> GeneratedKeyHolder();  </div><div class=\"line\"> </div><div class=\"line\">       jdbcTemplate.update(<span class=\"keyword\">new</span> PreparedStatementCreator() &#123;  </div><div class=\"line\">                     </div><div class=\"line\">                               <span class=\"meta\">@Override</span>  </div><div class=\"line\">                               <span class=\"function\"><span class=\"keyword\">public</span> PreparedStatement <span class=\"title\">createPreparedStatement</span><span class=\"params\">(Connection connection)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;  </div><div class=\"line\">                                   PreparedStatement ps = connection.prepareStatement(<span class=\"string\">\"insert into tb_test1(name,password) values(?,?)\"</span>, <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"id\"</span>&#125;);  </div><div class=\"line\">                                   ps.setString(<span class=\"number\">1</span>, user.getUsername());  </div><div class=\"line\">                                   ps.setString(<span class=\"number\">2</span>, user.getPassword());  </div><div class=\"line\">                                   <span class=\"keyword\">return</span> ps;  </div><div class=\"line\">                               &#125;  </div><div class=\"line\">                           &#125;,  </div><div class=\"line\">               keyHolder);  </div><div class=\"line\">         </div><div class=\"line\">       <span class=\"keyword\">return</span> keyHolder.getKeyList();  </div><div class=\"line\">   &#125; </div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span>  </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       Assert.isNull(user, <span class=\"string\">\"user is not null\"</span>);  </div><div class=\"line\">       jdbcTemplate.update(  </div><div class=\"line\">               <span class=\"string\">\"delete from tb_test1 where id = ?\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getId()&#125;,   </div><div class=\"line\">               <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;java.sql.Types.INTEGER&#125;);  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//最全的参数3个  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">queryForInt3</span><span class=\"params\">(User user)</span></span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">return</span> jdbcTemplate.queryForInt(<span class=\"string\">\"select count(0) from tb_test1 where username = ?\"</span> ,  </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getUsername()&#125;,  </div><div class=\"line\">               <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;java.sql.Types.VARCHAR&#125;);  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">queryForObject5</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">return</span> (User) jdbcTemplate.queryForObject(  </div><div class=\"line\">               <span class=\"string\">\"select * from tb_test1 where id = ?\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getId()&#125;,  </div><div class=\"line\">               <span class=\"keyword\">new</span> RowMapper()&#123;  </div><div class=\"line\"> </div><div class=\"line\">                   <span class=\"meta\">@Override</span>  </div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">mapRow</span><span class=\"params\">(ResultSet rs,<span class=\"keyword\">int</span> rowNum)</span><span class=\"keyword\">throws</span> SQLException </span>&#123;  </div><div class=\"line\">                       User user  = <span class=\"keyword\">new</span> User();  </div><div class=\"line\">                       user.setId(rs.getInt(<span class=\"string\">\"id\"</span>));  </div><div class=\"line\">                       user.setUsername(rs.getString(<span class=\"string\">\"username\"</span>));  </div><div class=\"line\">                       user.setPassword(rs.getString(<span class=\"string\">\"password\"</span>));  </div><div class=\"line\">                       <span class=\"keyword\">return</span> user;  </div><div class=\"line\">                   &#125;  </div><div class=\"line\">             </div><div class=\"line\">       &#125;); <span class=\"comment\">//class是结果数据的java类型  </span></div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)  </div><div class=\"line\">   <span class=\"comment\">//最全的参数查询  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">queryForList3</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">return</span> (List&lt;User&gt;) jdbcTemplate.queryForList(<span class=\"string\">\"select * from tb_test1 where username = ?\"</span>,  </div><div class=\"line\">                           <span class=\"keyword\">new</span> Object[]&#123;user.getUsername()&#125;,  </div><div class=\"line\">                           <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;java.sql.Types.VARCHAR&#125;,  </div><div class=\"line\">                           User.class);  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//批量操作    适合于增、删、改操作  </span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] batchUpdate(<span class=\"keyword\">final</span> List users) &#123;  </div><div class=\"line\">         </div><div class=\"line\">       <span class=\"keyword\">int</span>[] updateCounts = jdbcTemplate.batchUpdate(  </div><div class=\"line\">               <span class=\"string\">\"update tb_test1 set username = ?, password = ? where id = ?\"</span>,  </div><div class=\"line\">               <span class=\"keyword\">new</span> BatchPreparedStatementSetter() &#123;  </div><div class=\"line\">                     </div><div class=\"line\">                       <span class=\"meta\">@Override</span>  </div><div class=\"line\">                       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValues</span><span class=\"params\">(PreparedStatement ps, <span class=\"keyword\">int</span> i)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;  </div><div class=\"line\">                           ps.setString(<span class=\"number\">1</span>, ((User)users.get(i)).getUsername());  </div><div class=\"line\">                           ps.setString(<span class=\"number\">2</span>, ((User)users.get(i)).getPassword());  </div><div class=\"line\">                           ps.setLong(<span class=\"number\">3</span>, ((User)users.get(i)).getId());  </div><div class=\"line\">                       &#125;  </div><div class=\"line\">                         </div><div class=\"line\">                       <span class=\"meta\">@Override</span>  </div><div class=\"line\">                       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBatchSize</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                           <span class=\"keyword\">return</span> users.size();  </div><div class=\"line\">                       &#125;  </div><div class=\"line\">               &#125;   </div><div class=\"line\">       );  </div><div class=\"line\">         </div><div class=\"line\">       <span class=\"keyword\">return</span> updateCounts;  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用存储过程  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callProcedure</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">this</span>.jdbcTemplate.update(<span class=\"string\">\"call SUPPORT.REFRESH_USERS_SUMMARY(?)\"</span>, <span class=\"keyword\">new</span> Object[]&#123;Long.valueOf(id)&#125;);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，batchUpdate适合于批量增、删、改操作；</p>\n<p>​         update(…)：使用于增、删、改操作；</p>\n<p>​         execute（）：执行一个独立的sql语句，包括ddl语句；</p>\n<p>​         queryForInt ：查询出一个整数值</p>\n<h1 id=\"HibernateTemplate\"><a href=\"#HibernateTemplate\" class=\"headerlink\" title=\"HibernateTemplate\"></a>HibernateTemplate</h1><p>下面是 HibernateTemplate的常用方法。</p>\n<p>delete(Object entity): 删除指定持久化实例。    </p>\n<p>deleteAll(Collection entities): 删除集合内全部持久化类实例。  </p>\n<p>find(String queryString): 根据 HQL 查询字符串来返回实例集合。 </p>\n<p>findByNamedQuery(String queryName): 根据命名查询返回实例集合。    </p>\n<p>get(Classentity Class,Serializable id): 根据主键加载特定持久化类的实例。    </p>\n<p>save(Object entity): 保存新的实例。    </p>\n<p>saveOrUpdate(Object entity): 根据实例状态，选择保存或者更新。    </p>\n<p>update(Object entity): 更新实例的状态，要求entity 是持久状态。   </p>\n<p>setMaxResults(intmax Results): 设置分页的大小。</p>\n<p>hql语句</p>\n<p>Select/update/delete…… from …… where …… group by …… having …… orderby …… asc/desc</p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br><br>JdbcTemplate详解<br><br></div>","more":"<h1 id=\"注入JdbcTemplate的三种方式\"><a href=\"#注入JdbcTemplate的三种方式\" class=\"headerlink\" title=\"注入JdbcTemplate的三种方式\"></a>注入JdbcTemplate的三种方式</h1><p>​      第一种方式： 在 Spring 的 IoC 容器中配置一个 JdbcTemplate 的 bean，将 DataSource 注入进来，然后再把JdbcTemplate 注入到自定义DAO 中。 </p>\n<p>​      第二种方式：我们可以在自己定义的DAO 实现类中注入一个DataSource 引用来完 成JdbcTemplate 的实例化。也就是它是从外部“注入” DataSource 到DAO 中，然后 自己实例化JdbcTemplate，然后将DataSource 设置到JdbcTemplate 对象中。 </p>\n<p>​<br>​      第三种方式: Spring 提供了 org.springframework.jdbc.core.support.JdbcDaoSupport 类 ， 这 个 类 中 定 义 了 JdbcTemplate 属性，也定义了DataSource 属性，当设置DataSource 属性的时候，会创 建jdbcTemplate 的实例，所以我们自己编写的DAO 只需要继承JdbcDaoSupport 类， 然后注入DataSource 即可。<strong>提倡采用第三种方法</strong>。</p>\n<p>第一种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JdbcTemplate <span class=\"title\">getJdbcTemplate</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> jdbcTemplate;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//注入方法1     </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setJdbcTemplate</span><span class=\"params\">(JdbcTemplate jdbcTemplate)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.jdbcTemplate = jdbcTemplate;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"comment\">//其它方法这里省略……  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jdbcTemplate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.core.JdbcTemplate\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span> = <span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.nini.account.jdbcTemplate.UserServiceImpl\"</span>&gt;</span>  </div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"jdbcTemplate\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"jdbcTemplate\"</span>/&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>第二种方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">        <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//注入方法2  </span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSource</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;  </div><div class=\"line\">                   <span class=\"keyword\">this</span>.jdbcTemplate = <span class=\"keyword\">new</span> JdbcTemplate(dataSource);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">       </div><div class=\"line\">       <span class=\"comment\">//其它方法省略……  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.nini.account.jdbcTemplate.UserServiceImpl\"</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>第三种方法</p>\n<p>继承JdbcDaoSupport，其内部有个JdbcTemplate ，需要注入DataSource 属性来实例化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserDaoImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">JdbcDaoSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDao</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">        String sql = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.getJdbcTemplate().update(sql);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">        <span class=\"comment\">//其它方法省略……  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.nini.account.jdbcTemplate.UserDaoImpl\"</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h1><blockquote>\n<p>jdbcTemplate 中的sql均是用“?”做占位符的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String username;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String password;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String sex;  </div><div class=\"line\">              </div><div class=\"line\">               <span class=\"comment\">//setter和getter方法省略……  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>jdbcTemplate.update 适合于 insert 、update 和 delete操作；  </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**   </span></div><div class=\"line\">    * 第一个参数为执行sql   </div><div class=\"line\">    * 第二个参数为参数数据   </div><div class=\"line\">    */   </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save3</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       Assert.isNull(user, <span class=\"string\">\"user is not null\"</span>);  </div><div class=\"line\">       jdbcTemplate.update(<span class=\"string\">\"insert into tb_test1(name,password) values(?,?)\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getUsername(),user.getPassword()&#125;);  </div><div class=\"line\">   &#125;  </div><div class=\"line\">     </div><div class=\"line\">   <span class=\"comment\">/**   </span></div><div class=\"line\">    * 第一个参数为执行sql   </div><div class=\"line\">    * 第二个参数为参数数据   </div><div class=\"line\">    * 第三个参数为参数类型   </div><div class=\"line\">    */   </div><div class=\"line\">   <span class=\"meta\">@Override</span>  </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       Assert.isNull(user, <span class=\"string\">\"user is not null\"</span>);  </div><div class=\"line\">       jdbcTemplate.update(  </div><div class=\"line\">               <span class=\"string\">\"insert into tb_test1(name,password) values(?,?)\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getUsername(),user.getPassword()&#125;,   </div><div class=\"line\">               <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;java.sql.Types.VARCHAR,java.sql.Types.VARCHAR&#125;  </div><div class=\"line\">               );  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//避免sql注入  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save2</span><span class=\"params\">(<span class=\"keyword\">final</span> User user)</span> </span>&#123;  </div><div class=\"line\">       Assert.isNull(user, <span class=\"string\">\"user is not null\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">       jdbcTemplate.update(<span class=\"string\">\"insert into tb_test1(name,password) values(?,?)\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> PreparedStatementSetter()&#123;  </div><div class=\"line\">             </div><div class=\"line\">                   <span class=\"meta\">@Override</span>  </div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValues</span><span class=\"params\">(PreparedStatement ps)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;  </div><div class=\"line\">                       ps.setString(<span class=\"number\">1</span>, user.getUsername());  </div><div class=\"line\">                       ps.setString(<span class=\"number\">2</span>, user.getPassword());  </div><div class=\"line\">                   &#125;  </div><div class=\"line\">       &#125;);  </div><div class=\"line\">         </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//返回插入的主键  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">save5</span><span class=\"params\">(<span class=\"keyword\">final</span> User user)</span> </span>&#123;  </div><div class=\"line\">         </div><div class=\"line\">       KeyHolder keyHolder = <span class=\"keyword\">new</span> GeneratedKeyHolder();  </div><div class=\"line\"> </div><div class=\"line\">       jdbcTemplate.update(<span class=\"keyword\">new</span> PreparedStatementCreator() &#123;  </div><div class=\"line\">                     </div><div class=\"line\">                               <span class=\"meta\">@Override</span>  </div><div class=\"line\">                               <span class=\"function\"><span class=\"keyword\">public</span> PreparedStatement <span class=\"title\">createPreparedStatement</span><span class=\"params\">(Connection connection)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;  </div><div class=\"line\">                                   PreparedStatement ps = connection.prepareStatement(<span class=\"string\">\"insert into tb_test1(name,password) values(?,?)\"</span>, <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">\"id\"</span>&#125;);  </div><div class=\"line\">                                   ps.setString(<span class=\"number\">1</span>, user.getUsername());  </div><div class=\"line\">                                   ps.setString(<span class=\"number\">2</span>, user.getPassword());  </div><div class=\"line\">                                   <span class=\"keyword\">return</span> ps;  </div><div class=\"line\">                               &#125;  </div><div class=\"line\">                           &#125;,  </div><div class=\"line\">               keyHolder);  </div><div class=\"line\">         </div><div class=\"line\">       <span class=\"keyword\">return</span> keyHolder.getKeyList();  </div><div class=\"line\">   &#125; </div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span>  </div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       Assert.isNull(user, <span class=\"string\">\"user is not null\"</span>);  </div><div class=\"line\">       jdbcTemplate.update(  </div><div class=\"line\">               <span class=\"string\">\"delete from tb_test1 where id = ?\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getId()&#125;,   </div><div class=\"line\">               <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;java.sql.Types.INTEGER&#125;);  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//最全的参数3个  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">queryForInt3</span><span class=\"params\">(User user)</span></span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">return</span> jdbcTemplate.queryForInt(<span class=\"string\">\"select count(0) from tb_test1 where username = ?\"</span> ,  </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getUsername()&#125;,  </div><div class=\"line\">               <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;java.sql.Types.VARCHAR&#125;);  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">queryForObject5</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">return</span> (User) jdbcTemplate.queryForObject(  </div><div class=\"line\">               <span class=\"string\">\"select * from tb_test1 where id = ?\"</span>,   </div><div class=\"line\">               <span class=\"keyword\">new</span> Object[]&#123;user.getId()&#125;,  </div><div class=\"line\">               <span class=\"keyword\">new</span> RowMapper()&#123;  </div><div class=\"line\"> </div><div class=\"line\">                   <span class=\"meta\">@Override</span>  </div><div class=\"line\">                   <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">mapRow</span><span class=\"params\">(ResultSet rs,<span class=\"keyword\">int</span> rowNum)</span><span class=\"keyword\">throws</span> SQLException </span>&#123;  </div><div class=\"line\">                       User user  = <span class=\"keyword\">new</span> User();  </div><div class=\"line\">                       user.setId(rs.getInt(<span class=\"string\">\"id\"</span>));  </div><div class=\"line\">                       user.setUsername(rs.getString(<span class=\"string\">\"username\"</span>));  </div><div class=\"line\">                       user.setPassword(rs.getString(<span class=\"string\">\"password\"</span>));  </div><div class=\"line\">                       <span class=\"keyword\">return</span> user;  </div><div class=\"line\">                   &#125;  </div><div class=\"line\">             </div><div class=\"line\">       &#125;); <span class=\"comment\">//class是结果数据的java类型  </span></div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)  </div><div class=\"line\">   <span class=\"comment\">//最全的参数查询  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">queryForList3</span><span class=\"params\">(User user)</span> </span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">return</span> (List&lt;User&gt;) jdbcTemplate.queryForList(<span class=\"string\">\"select * from tb_test1 where username = ?\"</span>,  </div><div class=\"line\">                           <span class=\"keyword\">new</span> Object[]&#123;user.getUsername()&#125;,  </div><div class=\"line\">                           <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;java.sql.Types.VARCHAR&#125;,  </div><div class=\"line\">                           User.class);  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">//批量操作    适合于增、删、改操作  </span></div><div class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] batchUpdate(<span class=\"keyword\">final</span> List users) &#123;  </div><div class=\"line\">         </div><div class=\"line\">       <span class=\"keyword\">int</span>[] updateCounts = jdbcTemplate.batchUpdate(  </div><div class=\"line\">               <span class=\"string\">\"update tb_test1 set username = ?, password = ? where id = ?\"</span>,  </div><div class=\"line\">               <span class=\"keyword\">new</span> BatchPreparedStatementSetter() &#123;  </div><div class=\"line\">                     </div><div class=\"line\">                       <span class=\"meta\">@Override</span>  </div><div class=\"line\">                       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValues</span><span class=\"params\">(PreparedStatement ps, <span class=\"keyword\">int</span> i)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;  </div><div class=\"line\">                           ps.setString(<span class=\"number\">1</span>, ((User)users.get(i)).getUsername());  </div><div class=\"line\">                           ps.setString(<span class=\"number\">2</span>, ((User)users.get(i)).getPassword());  </div><div class=\"line\">                           ps.setLong(<span class=\"number\">3</span>, ((User)users.get(i)).getId());  </div><div class=\"line\">                       &#125;  </div><div class=\"line\">                         </div><div class=\"line\">                       <span class=\"meta\">@Override</span>  </div><div class=\"line\">                       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBatchSize</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                           <span class=\"keyword\">return</span> users.size();  </div><div class=\"line\">                       &#125;  </div><div class=\"line\">               &#125;   </div><div class=\"line\">       );  </div><div class=\"line\">         </div><div class=\"line\">       <span class=\"keyword\">return</span> updateCounts;  </div><div class=\"line\">   &#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用存储过程  </span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callProcedure</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;  </div><div class=\"line\">       <span class=\"keyword\">this</span>.jdbcTemplate.update(<span class=\"string\">\"call SUPPORT.REFRESH_USERS_SUMMARY(?)\"</span>, <span class=\"keyword\">new</span> Object[]&#123;Long.valueOf(id)&#125;);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中，batchUpdate适合于批量增、删、改操作；</p>\n<p>​         update(…)：使用于增、删、改操作；</p>\n<p>​         execute（）：执行一个独立的sql语句，包括ddl语句；</p>\n<p>​         queryForInt ：查询出一个整数值</p>\n<h1 id=\"HibernateTemplate\"><a href=\"#HibernateTemplate\" class=\"headerlink\" title=\"HibernateTemplate\"></a>HibernateTemplate</h1><p>下面是 HibernateTemplate的常用方法。</p>\n<p>delete(Object entity): 删除指定持久化实例。    </p>\n<p>deleteAll(Collection entities): 删除集合内全部持久化类实例。  </p>\n<p>find(String queryString): 根据 HQL 查询字符串来返回实例集合。 </p>\n<p>findByNamedQuery(String queryName): 根据命名查询返回实例集合。    </p>\n<p>get(Classentity Class,Serializable id): 根据主键加载特定持久化类的实例。    </p>\n<p>save(Object entity): 保存新的实例。    </p>\n<p>saveOrUpdate(Object entity): 根据实例状态，选择保存或者更新。    </p>\n<p>update(Object entity): 更新实例的状态，要求entity 是持久状态。   </p>\n<p>setMaxResults(intmax Results): 设置分页的大小。</p>\n<p>hql语句</p>\n<p>Select/update/delete…… from …… where …… group by …… having …… orderby …… asc/desc</p>"},{"title":"Spring使用容器管理beans","date":"2017-05-08T05:14:00.000Z","_content":"\n<div align=\"center\">\n\n使用容器管理beans\n\n</div>\n\n<!-- more-->\n\n# 使用容器管理beans\n\n\n\n基于Spring框架构建的应用中的对象，都由Spring容器（container）管理，如下图所示。Spring容器负责创建对象、编织对象和配置对象，负责对象的整个生命周期。\n\n\n\n![](beans.png)\n\n\n\n容器是Spring框架的核心，通过依赖注入（DI）管理构成Spring应用的组件。正是因为有容器管理各个组件之间的协作关系，使得每个Spring组件都很好理解、便于复用和单元测试。\n\nSpring容器有多种实现，可以分为两类：\n\n- *Bean factories*（由*org.springframework.beans.factory.BeanFactory*接口定义）是最简单的容器，只提供基本的依赖注入功能；\n- *Application context*（由*org.springframework.context.ApplicationContext*接口定义）在bean factory的基础上提供application-framework框架服务，例如可以从properties文件中解析配置信息、可以对外公布application events。\n\n## 应用上下文（application context）\n\nSpring提供了多种application context，**他们之间的主要的区别仅仅在于如何加载配置。**可列举如下：\n\n- *AnnotationConfigApplicationContext*——从 **Java** 配置文件中加载应用上下文；\n- *AnnotationConfigWebApplicationContext*——从Java配置文件中加载Spring web应用上下文；\n- *ClassPathXmlApplicationContext*——从classpath（resources目录）下加载 **XML** 格式的应用上下文定义文件；\n- *FileSystemXmlApplicationContext*——从指定**文件系统**目录下加载XML格式的应用上下文定义文件；\n- *XmlWebApplicationContext*——从classpath（resources目录）下加载XML格式的Spring web应用上下文。\n\n**通过应用上下文实例，可以通过*getBean()*方法获得对应的bean。**\n\n\n\n\n\n\n\n## bean的生命周期\n\n在传统的Java应用中，一个对象的生命周期非常简单：通过new创建一个对象，然后该对象就可以使用，当这个对象不再使用时，由Java垃圾回收机制进行处理和回收。\n\n在Spring应用中，bean的生命周期的控制更加精细。Spring提供了很多节点供开发人员定制某个bean的创建过程，掌握这些节点如何使用非常重要。Spring中bean的生命周期如下图所示：\n\n![](bean_life_circle.png)\n\n\n\n可以看出，bean factory负责bean创建的最初四步，然后移交给应用上下文做后续创建过程：\n\n1. Spring初始化bean\n2. Spring将值和其他bean的引用注入（inject）到当前bean的对应属性中；\n3. 如果Bean实现了*BeanNameAware*接口，Spring会传入bean的ID来调用*setBeanName*方法；\n4. 如果Bean实现了*BeanFactoryAware*接口，Spring传入bean factory的引用来调用*setBeanFactory*方法；\n5. 如果Bean实现了*ApplicationContextAware*接口，Spring将传入应用上下文的引用来调用*setApplicationContext*方法；\n6. 如果Bean实现了*BeanPostProcessor*接口，则Spring调用*postProcessBeforeInitialization*方法，这个方法在初始化和属性注入之后调用，在任何初始化代码之前调用；\n7. 如果Bean实现了*InitializingBean*接口，则需要调用该接口的*afterPropertiesSet*方法；如果在bean定义的时候设置了*init-method*属性，则需要调用该属性指定的初始化方法；\n8. 如果Bean实现了*BeanPostProcessor*接口，则Spring调用*postProcessAfterInitialization*方法\n9. 在这个时候bean就可以用于在应用上下文中使用了，当上下文退出时bean也会被销毁；\n10. 如果Bean实现了*DisposableBean*接口，Spring会调用*destroy()*方法;如果在bean定义的时候设置了*destroy-method*， 则此时需要调用指定的方法。\n\n本节主要总结了如何启动Spring容器，以及Spring应用中bean的生命周期。\n\n\n\n## Spring整体架构\n\n除了Spring的核心模块，Spring还提供了其他的工具组件，这些组件扩展了Spring的功能，例如webservice、REST、mobile和NOSQL，形成了丰富的开发生态。\n\n### 1.3.1 Spring模块\n\nSpring 4.0you 20个独立的模块，每个包含三个文件：二进制库、源文件和文档，完整的库列表如下图所示：\n\n\n\n![](spring_jar.png)\n\n\n\n按照功能划分，这些模块可以分成六组，如下图所示：\n\n![](modules.png)\n\n这些模块几乎可以满足所有企业级应用开发的需求，但是开发人员并不需要完全使用Spring的这些模块，可以自由选择符合项目需求的第三方模块——Spring为一些第三方模块提供了交互接口。\n\n#### CORE SPRING CONTAINER\n\nSpring框架的核心模块，其他所有模块都基于该模块构建。Spring容器负责管理Spring应用中bean的创建、配置和管理。在这模块中有Spring bean factory，该接口提供了最基本的依赖注入（DI）功能；基于bean factory，该模块提供了集中Spring应用上下文的实现，可以供开发人员选择。\n\n除了bean factory和application context，该模块还支持其他企业级服务，例如email、JNDI access、EJB integration和scheduling。\n\n#### SPRING's AOP MODULE\n\nSpring框架通过AOP模块提供面向切面编程的能力。通过AOP模块，一些系统层面的需求（事务、安全）可以与它们真正要作用到的模块相互解耦合。\n\n#### DATA ACCESS AND INTEGRATION\n\nSpring的JDBC和*data-access object*模块将数据库操作的一些样板式代码封装起来，免去了开发人员的很多工作量。这个模块还对数据库层的异常进行了封装，并向上提供含义更丰富的异常信息。\n\nSpring并未实现自己的ORM框架，但是它提供了跟其他几个ORM框架整合的能力，例如Hibernate、Mybatis、Java Persistence AP等等，而且这些ORM框架都支持使用Spring提供的事务管理模块。\n\n#### WEB AND REMOTING\n\nSpring提供了自己的 WEB开发框架——Spring MVC，除此之外，这个模块还提供远程调用支持：Remote Method Invocation(RMI)、Hessian、Burlap和JAX-WS。\n\n#### INSTRUMENTATION\n\n不常使用\n\n#### TESTING\n\n可以与常用的JUNIT、Mockito、Spock等测试框架整合使用。\n\n### 1.3.2 Spring portfolio\n\n如果只是学习Spring的核心模块，将会错过不少Spring社区提供的经典项目，下面介绍的这些项目使得Spring几乎可以覆盖整个Java开发（PS：带*的项目值得每位Spring用户仔细学习）。\n\n#### SPRING WEB FLOW\n\n基于Spring MVC框架拓展，利用该框架可以构建流式web应用。\n\n#### SPRING WEB SERVICE\n\n虽然核心的Spring 框架提供了将Spring Bean 以声明的方式发布为Web Service，但是这些服务基于一个具有争议性的架构（拙劣的契约置后模型）之上而构建的。这些服务的契约由Bean 的接口来决定。 Spring Web Service 提供了契约优先的Web Service模型，服务的实现都是为了满足服务的契约而编写的。\n\n#### SPRING SECURITY（*）\n\n安全对于许多应用都是一个非常关键的切面。利用Spring AOP，Spring Security为Spring 应用提供了声明式的安全机制。我们将在第9 章讲解如何为应用添加SpringSecurity。你可以在主页[http://static.springsource.org/spring-security/site](http://static.springsource.org/spring-security/site) 获得关于SpringSecurity 更多的信息。\n\n#### SPRING INTEGRATION\n\n许多企业级应用都需要与其他应用进行交互。Spring Integration 提供了几种通用的应用集成模式的Spring 声明式风格的实现。\n\n我们不会在本书覆盖Spring Integration 内容，但是如果你想了解更多关于SpringIntegration 的信息， 我推荐Mark Fisher、Jonas Partner、Marius Bogoevici 和IweinFuld 编写的《Spring Integration in Action》；或者还可以访问Spring Integration 的主页[http://www.springsource.org/spring-integration](http://www.springsource.org/spring-integration)。\n\n#### SPRING BATCH\n\n当我们需要对数据进行大量操作时，没有任何技术可以比批处理更能胜任此场景的。如果需要开发一个批处理应用，你可以借助于Spring 强大的面向POJO 的编程模型来使用Spring Batch 来实现。\n\nSpring Batch 超出了本书的范畴，但是你可以阅读Thierry Templier 和Arnaud Cogoluègnes编写的《Spring Batch in Action》，或者访问Spring Batch 的主页[http://static.springsource.org/spring-batch](http://static.springsource.org/spring-batch)。\n\n#### SPRING DATA（*）\n\nSpring Data用于简化数据库相关的开发工作。尽管多年以来关系型数据库都是企业级应用开发的主流，但是随着移动互联网的发展，对NoSQL这类菲关系型数据库的需求也越来越强。\n\n无论你选择NoSQL还是关系型数据库，Spring Datat都能提供简洁的编程模型，例如非常方便的repository机制，可以为开发人员自动创建具体的SQL实现。\n\n#### SPRING SOCIAL\n\n社交网络是互联网冉冉升起的一颗新星，越来越多的应用正在融入社交网络网站，例如Facebook 或者Twitter。如果对此感兴趣，你可以了解下Spring Social，Spring 的一个社交网络扩展模块。\n\nSpring Social 相对还比较新颖，我并没有计划将它放入本书，但是你可以访问[http://www.springsource.org/spring-social](http://www.springsource.org/spring-social) 了解Spring Social 更多的相关信息。\n\n#### SPRING MOBILE\n\n移动应用是另一个引人瞩目的软件开发领域。智能手机和平板设备已成为许多用户首选的客户端。Spring Mobile 是Spring 新的扩展模块用于支持移动Web 应用开发。\n与Spring Mobile 相关的是Spring Android 项目。这个新项目旨在通过Spring 框架为开发基于Android 设备的本地应用提供某些简单的支持。最初，这个项目提供了Spring 的RestTemplate 版本（请查看第11 章了解RestTemplete）可以用于Android 应用。\n再次声明，这两个项目已超出了本书的范围，但是如果你对这两个项目感兴趣，可以访问[http://www.springsource.org/spring-mobile](http://www.springsource.org/spring-mobile) 和[http://www.springsource.org/spring-android](http://www.springsource.org/spring-android) 了解更多相关的信息。\n\n#### SPRING BOOT（*）\n\nSpring Boot是Spring社区中发展速度最快的框架之一，它旨在简化Spring的使用，解决Spring开发时遇到的“配置地狱”问题。\n\nSpring Boot通过大量使用自动配置技术，可以取消大量的XML配置文件，同时该框架提出了starter的概念，用于简化pom文件。可以参考我的一系列博文：[《Spring Boot Cookbook》阅读笔记](http://www.jianshu.com/p/5ac18abc91f0)\n\n\n\n\n\n主要总结下Spring社区的趋势：\n\n1. 注重注解，能用注解解决的尽量用注解，尽量少写XML配置文件；\n2. Spring Boot已经是Spring社区中增长最迅速的框架，前三名是：Spring Framework，Spring Boot和Spring Security\n3. 支持Java 8，通过Java8的lambda表达式，使得一些回调接口更易使用和阅读。","source":"_drafts/Spring/2017-05-08-Spring使用容器管理beans.md","raw":"---\ntitle: Spring使用容器管理beans\ndate: 2017-05-08 13:14:00\ntags: Spring\n---\n\n<div align=\"center\">\n\n使用容器管理beans\n\n</div>\n\n<!-- more-->\n\n# 使用容器管理beans\n\n\n\n基于Spring框架构建的应用中的对象，都由Spring容器（container）管理，如下图所示。Spring容器负责创建对象、编织对象和配置对象，负责对象的整个生命周期。\n\n\n\n![](beans.png)\n\n\n\n容器是Spring框架的核心，通过依赖注入（DI）管理构成Spring应用的组件。正是因为有容器管理各个组件之间的协作关系，使得每个Spring组件都很好理解、便于复用和单元测试。\n\nSpring容器有多种实现，可以分为两类：\n\n- *Bean factories*（由*org.springframework.beans.factory.BeanFactory*接口定义）是最简单的容器，只提供基本的依赖注入功能；\n- *Application context*（由*org.springframework.context.ApplicationContext*接口定义）在bean factory的基础上提供application-framework框架服务，例如可以从properties文件中解析配置信息、可以对外公布application events。\n\n## 应用上下文（application context）\n\nSpring提供了多种application context，**他们之间的主要的区别仅仅在于如何加载配置。**可列举如下：\n\n- *AnnotationConfigApplicationContext*——从 **Java** 配置文件中加载应用上下文；\n- *AnnotationConfigWebApplicationContext*——从Java配置文件中加载Spring web应用上下文；\n- *ClassPathXmlApplicationContext*——从classpath（resources目录）下加载 **XML** 格式的应用上下文定义文件；\n- *FileSystemXmlApplicationContext*——从指定**文件系统**目录下加载XML格式的应用上下文定义文件；\n- *XmlWebApplicationContext*——从classpath（resources目录）下加载XML格式的Spring web应用上下文。\n\n**通过应用上下文实例，可以通过*getBean()*方法获得对应的bean。**\n\n\n\n\n\n\n\n## bean的生命周期\n\n在传统的Java应用中，一个对象的生命周期非常简单：通过new创建一个对象，然后该对象就可以使用，当这个对象不再使用时，由Java垃圾回收机制进行处理和回收。\n\n在Spring应用中，bean的生命周期的控制更加精细。Spring提供了很多节点供开发人员定制某个bean的创建过程，掌握这些节点如何使用非常重要。Spring中bean的生命周期如下图所示：\n\n![](bean_life_circle.png)\n\n\n\n可以看出，bean factory负责bean创建的最初四步，然后移交给应用上下文做后续创建过程：\n\n1. Spring初始化bean\n2. Spring将值和其他bean的引用注入（inject）到当前bean的对应属性中；\n3. 如果Bean实现了*BeanNameAware*接口，Spring会传入bean的ID来调用*setBeanName*方法；\n4. 如果Bean实现了*BeanFactoryAware*接口，Spring传入bean factory的引用来调用*setBeanFactory*方法；\n5. 如果Bean实现了*ApplicationContextAware*接口，Spring将传入应用上下文的引用来调用*setApplicationContext*方法；\n6. 如果Bean实现了*BeanPostProcessor*接口，则Spring调用*postProcessBeforeInitialization*方法，这个方法在初始化和属性注入之后调用，在任何初始化代码之前调用；\n7. 如果Bean实现了*InitializingBean*接口，则需要调用该接口的*afterPropertiesSet*方法；如果在bean定义的时候设置了*init-method*属性，则需要调用该属性指定的初始化方法；\n8. 如果Bean实现了*BeanPostProcessor*接口，则Spring调用*postProcessAfterInitialization*方法\n9. 在这个时候bean就可以用于在应用上下文中使用了，当上下文退出时bean也会被销毁；\n10. 如果Bean实现了*DisposableBean*接口，Spring会调用*destroy()*方法;如果在bean定义的时候设置了*destroy-method*， 则此时需要调用指定的方法。\n\n本节主要总结了如何启动Spring容器，以及Spring应用中bean的生命周期。\n\n\n\n## Spring整体架构\n\n除了Spring的核心模块，Spring还提供了其他的工具组件，这些组件扩展了Spring的功能，例如webservice、REST、mobile和NOSQL，形成了丰富的开发生态。\n\n### 1.3.1 Spring模块\n\nSpring 4.0you 20个独立的模块，每个包含三个文件：二进制库、源文件和文档，完整的库列表如下图所示：\n\n\n\n![](spring_jar.png)\n\n\n\n按照功能划分，这些模块可以分成六组，如下图所示：\n\n![](modules.png)\n\n这些模块几乎可以满足所有企业级应用开发的需求，但是开发人员并不需要完全使用Spring的这些模块，可以自由选择符合项目需求的第三方模块——Spring为一些第三方模块提供了交互接口。\n\n#### CORE SPRING CONTAINER\n\nSpring框架的核心模块，其他所有模块都基于该模块构建。Spring容器负责管理Spring应用中bean的创建、配置和管理。在这模块中有Spring bean factory，该接口提供了最基本的依赖注入（DI）功能；基于bean factory，该模块提供了集中Spring应用上下文的实现，可以供开发人员选择。\n\n除了bean factory和application context，该模块还支持其他企业级服务，例如email、JNDI access、EJB integration和scheduling。\n\n#### SPRING's AOP MODULE\n\nSpring框架通过AOP模块提供面向切面编程的能力。通过AOP模块，一些系统层面的需求（事务、安全）可以与它们真正要作用到的模块相互解耦合。\n\n#### DATA ACCESS AND INTEGRATION\n\nSpring的JDBC和*data-access object*模块将数据库操作的一些样板式代码封装起来，免去了开发人员的很多工作量。这个模块还对数据库层的异常进行了封装，并向上提供含义更丰富的异常信息。\n\nSpring并未实现自己的ORM框架，但是它提供了跟其他几个ORM框架整合的能力，例如Hibernate、Mybatis、Java Persistence AP等等，而且这些ORM框架都支持使用Spring提供的事务管理模块。\n\n#### WEB AND REMOTING\n\nSpring提供了自己的 WEB开发框架——Spring MVC，除此之外，这个模块还提供远程调用支持：Remote Method Invocation(RMI)、Hessian、Burlap和JAX-WS。\n\n#### INSTRUMENTATION\n\n不常使用\n\n#### TESTING\n\n可以与常用的JUNIT、Mockito、Spock等测试框架整合使用。\n\n### 1.3.2 Spring portfolio\n\n如果只是学习Spring的核心模块，将会错过不少Spring社区提供的经典项目，下面介绍的这些项目使得Spring几乎可以覆盖整个Java开发（PS：带*的项目值得每位Spring用户仔细学习）。\n\n#### SPRING WEB FLOW\n\n基于Spring MVC框架拓展，利用该框架可以构建流式web应用。\n\n#### SPRING WEB SERVICE\n\n虽然核心的Spring 框架提供了将Spring Bean 以声明的方式发布为Web Service，但是这些服务基于一个具有争议性的架构（拙劣的契约置后模型）之上而构建的。这些服务的契约由Bean 的接口来决定。 Spring Web Service 提供了契约优先的Web Service模型，服务的实现都是为了满足服务的契约而编写的。\n\n#### SPRING SECURITY（*）\n\n安全对于许多应用都是一个非常关键的切面。利用Spring AOP，Spring Security为Spring 应用提供了声明式的安全机制。我们将在第9 章讲解如何为应用添加SpringSecurity。你可以在主页[http://static.springsource.org/spring-security/site](http://static.springsource.org/spring-security/site) 获得关于SpringSecurity 更多的信息。\n\n#### SPRING INTEGRATION\n\n许多企业级应用都需要与其他应用进行交互。Spring Integration 提供了几种通用的应用集成模式的Spring 声明式风格的实现。\n\n我们不会在本书覆盖Spring Integration 内容，但是如果你想了解更多关于SpringIntegration 的信息， 我推荐Mark Fisher、Jonas Partner、Marius Bogoevici 和IweinFuld 编写的《Spring Integration in Action》；或者还可以访问Spring Integration 的主页[http://www.springsource.org/spring-integration](http://www.springsource.org/spring-integration)。\n\n#### SPRING BATCH\n\n当我们需要对数据进行大量操作时，没有任何技术可以比批处理更能胜任此场景的。如果需要开发一个批处理应用，你可以借助于Spring 强大的面向POJO 的编程模型来使用Spring Batch 来实现。\n\nSpring Batch 超出了本书的范畴，但是你可以阅读Thierry Templier 和Arnaud Cogoluègnes编写的《Spring Batch in Action》，或者访问Spring Batch 的主页[http://static.springsource.org/spring-batch](http://static.springsource.org/spring-batch)。\n\n#### SPRING DATA（*）\n\nSpring Data用于简化数据库相关的开发工作。尽管多年以来关系型数据库都是企业级应用开发的主流，但是随着移动互联网的发展，对NoSQL这类菲关系型数据库的需求也越来越强。\n\n无论你选择NoSQL还是关系型数据库，Spring Datat都能提供简洁的编程模型，例如非常方便的repository机制，可以为开发人员自动创建具体的SQL实现。\n\n#### SPRING SOCIAL\n\n社交网络是互联网冉冉升起的一颗新星，越来越多的应用正在融入社交网络网站，例如Facebook 或者Twitter。如果对此感兴趣，你可以了解下Spring Social，Spring 的一个社交网络扩展模块。\n\nSpring Social 相对还比较新颖，我并没有计划将它放入本书，但是你可以访问[http://www.springsource.org/spring-social](http://www.springsource.org/spring-social) 了解Spring Social 更多的相关信息。\n\n#### SPRING MOBILE\n\n移动应用是另一个引人瞩目的软件开发领域。智能手机和平板设备已成为许多用户首选的客户端。Spring Mobile 是Spring 新的扩展模块用于支持移动Web 应用开发。\n与Spring Mobile 相关的是Spring Android 项目。这个新项目旨在通过Spring 框架为开发基于Android 设备的本地应用提供某些简单的支持。最初，这个项目提供了Spring 的RestTemplate 版本（请查看第11 章了解RestTemplete）可以用于Android 应用。\n再次声明，这两个项目已超出了本书的范围，但是如果你对这两个项目感兴趣，可以访问[http://www.springsource.org/spring-mobile](http://www.springsource.org/spring-mobile) 和[http://www.springsource.org/spring-android](http://www.springsource.org/spring-android) 了解更多相关的信息。\n\n#### SPRING BOOT（*）\n\nSpring Boot是Spring社区中发展速度最快的框架之一，它旨在简化Spring的使用，解决Spring开发时遇到的“配置地狱”问题。\n\nSpring Boot通过大量使用自动配置技术，可以取消大量的XML配置文件，同时该框架提出了starter的概念，用于简化pom文件。可以参考我的一系列博文：[《Spring Boot Cookbook》阅读笔记](http://www.jianshu.com/p/5ac18abc91f0)\n\n\n\n\n\n主要总结下Spring社区的趋势：\n\n1. 注重注解，能用注解解决的尽量用注解，尽量少写XML配置文件；\n2. Spring Boot已经是Spring社区中增长最迅速的框架，前三名是：Spring Framework，Spring Boot和Spring Security\n3. 支持Java 8，通过Java8的lambda表达式，使得一些回调接口更易使用和阅读。","slug":"Spring-2017-05-08-Spring使用容器管理beans","published":0,"updated":"2017-05-24T06:19:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndn000xp5uke0mbjlbd","content":"<div align=\"center\"><br><br>使用容器管理beans<br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"使用容器管理beans\"><a href=\"#使用容器管理beans\" class=\"headerlink\" title=\"使用容器管理beans\"></a>使用容器管理beans</h1><p>基于Spring框架构建的应用中的对象，都由Spring容器（container）管理，如下图所示。Spring容器负责创建对象、编织对象和配置对象，负责对象的整个生命周期。</p>\n<p><img src=\"/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/beans.png\" alt=\"\"></p>\n<p>容器是Spring框架的核心，通过依赖注入（DI）管理构成Spring应用的组件。正是因为有容器管理各个组件之间的协作关系，使得每个Spring组件都很好理解、便于复用和单元测试。</p>\n<p>Spring容器有多种实现，可以分为两类：</p>\n<ul>\n<li><em>Bean factories</em>（由<em>org.springframework.beans.factory.BeanFactory</em>接口定义）是最简单的容器，只提供基本的依赖注入功能；</li>\n<li><em>Application context</em>（由<em>org.springframework.context.ApplicationContext</em>接口定义）在bean factory的基础上提供application-framework框架服务，例如可以从properties文件中解析配置信息、可以对外公布application events。</li>\n</ul>\n<h2 id=\"应用上下文（application-context）\"><a href=\"#应用上下文（application-context）\" class=\"headerlink\" title=\"应用上下文（application context）\"></a>应用上下文（application context）</h2><p>Spring提供了多种application context，<strong>他们之间的主要的区别仅仅在于如何加载配置。</strong>可列举如下：</p>\n<ul>\n<li><em>AnnotationConfigApplicationContext</em>——从 <strong>Java</strong> 配置文件中加载应用上下文；</li>\n<li><em>AnnotationConfigWebApplicationContext</em>——从Java配置文件中加载Spring web应用上下文；</li>\n<li><em>ClassPathXmlApplicationContext</em>——从classpath（resources目录）下加载 <strong>XML</strong> 格式的应用上下文定义文件；</li>\n<li><em>FileSystemXmlApplicationContext</em>——从指定<strong>文件系统</strong>目录下加载XML格式的应用上下文定义文件；</li>\n<li><em>XmlWebApplicationContext</em>——从classpath（resources目录）下加载XML格式的Spring web应用上下文。</li>\n</ul>\n<p><strong>通过应用上下文实例，可以通过<em>getBean()</em>方法获得对应的bean。</strong></p>\n<h2 id=\"bean的生命周期\"><a href=\"#bean的生命周期\" class=\"headerlink\" title=\"bean的生命周期\"></a>bean的生命周期</h2><p>在传统的Java应用中，一个对象的生命周期非常简单：通过new创建一个对象，然后该对象就可以使用，当这个对象不再使用时，由Java垃圾回收机制进行处理和回收。</p>\n<p>在Spring应用中，bean的生命周期的控制更加精细。Spring提供了很多节点供开发人员定制某个bean的创建过程，掌握这些节点如何使用非常重要。Spring中bean的生命周期如下图所示：</p>\n<p><img src=\"/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/bean_life_circle.png\" alt=\"\"></p>\n<p>可以看出，bean factory负责bean创建的最初四步，然后移交给应用上下文做后续创建过程：</p>\n<ol>\n<li>Spring初始化bean</li>\n<li>Spring将值和其他bean的引用注入（inject）到当前bean的对应属性中；</li>\n<li>如果Bean实现了<em>BeanNameAware</em>接口，Spring会传入bean的ID来调用<em>setBeanName</em>方法；</li>\n<li>如果Bean实现了<em>BeanFactoryAware</em>接口，Spring传入bean factory的引用来调用<em>setBeanFactory</em>方法；</li>\n<li>如果Bean实现了<em>ApplicationContextAware</em>接口，Spring将传入应用上下文的引用来调用<em>setApplicationContext</em>方法；</li>\n<li>如果Bean实现了<em>BeanPostProcessor</em>接口，则Spring调用<em>postProcessBeforeInitialization</em>方法，这个方法在初始化和属性注入之后调用，在任何初始化代码之前调用；</li>\n<li>如果Bean实现了<em>InitializingBean</em>接口，则需要调用该接口的<em>afterPropertiesSet</em>方法；如果在bean定义的时候设置了<em>init-method</em>属性，则需要调用该属性指定的初始化方法；</li>\n<li>如果Bean实现了<em>BeanPostProcessor</em>接口，则Spring调用<em>postProcessAfterInitialization</em>方法</li>\n<li>在这个时候bean就可以用于在应用上下文中使用了，当上下文退出时bean也会被销毁；</li>\n<li>如果Bean实现了<em>DisposableBean</em>接口，Spring会调用<em>destroy()</em>方法;如果在bean定义的时候设置了<em>destroy-method</em>， 则此时需要调用指定的方法。</li>\n</ol>\n<p>本节主要总结了如何启动Spring容器，以及Spring应用中bean的生命周期。</p>\n<h2 id=\"Spring整体架构\"><a href=\"#Spring整体架构\" class=\"headerlink\" title=\"Spring整体架构\"></a>Spring整体架构</h2><p>除了Spring的核心模块，Spring还提供了其他的工具组件，这些组件扩展了Spring的功能，例如webservice、REST、mobile和NOSQL，形成了丰富的开发生态。</p>\n<h3 id=\"1-3-1-Spring模块\"><a href=\"#1-3-1-Spring模块\" class=\"headerlink\" title=\"1.3.1 Spring模块\"></a>1.3.1 Spring模块</h3><p>Spring 4.0you 20个独立的模块，每个包含三个文件：二进制库、源文件和文档，完整的库列表如下图所示：</p>\n<p><img src=\"/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/spring_jar.png\" alt=\"\"></p>\n<p>按照功能划分，这些模块可以分成六组，如下图所示：</p>\n<p><img src=\"/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/modules.png\" alt=\"\"></p>\n<p>这些模块几乎可以满足所有企业级应用开发的需求，但是开发人员并不需要完全使用Spring的这些模块，可以自由选择符合项目需求的第三方模块——Spring为一些第三方模块提供了交互接口。</p>\n<h4 id=\"CORE-SPRING-CONTAINER\"><a href=\"#CORE-SPRING-CONTAINER\" class=\"headerlink\" title=\"CORE SPRING CONTAINER\"></a>CORE SPRING CONTAINER</h4><p>Spring框架的核心模块，其他所有模块都基于该模块构建。Spring容器负责管理Spring应用中bean的创建、配置和管理。在这模块中有Spring bean factory，该接口提供了最基本的依赖注入（DI）功能；基于bean factory，该模块提供了集中Spring应用上下文的实现，可以供开发人员选择。</p>\n<p>除了bean factory和application context，该模块还支持其他企业级服务，例如email、JNDI access、EJB integration和scheduling。</p>\n<h4 id=\"SPRING’s-AOP-MODULE\"><a href=\"#SPRING’s-AOP-MODULE\" class=\"headerlink\" title=\"SPRING’s AOP MODULE\"></a>SPRING’s AOP MODULE</h4><p>Spring框架通过AOP模块提供面向切面编程的能力。通过AOP模块，一些系统层面的需求（事务、安全）可以与它们真正要作用到的模块相互解耦合。</p>\n<h4 id=\"DATA-ACCESS-AND-INTEGRATION\"><a href=\"#DATA-ACCESS-AND-INTEGRATION\" class=\"headerlink\" title=\"DATA ACCESS AND INTEGRATION\"></a>DATA ACCESS AND INTEGRATION</h4><p>Spring的JDBC和<em>data-access object</em>模块将数据库操作的一些样板式代码封装起来，免去了开发人员的很多工作量。这个模块还对数据库层的异常进行了封装，并向上提供含义更丰富的异常信息。</p>\n<p>Spring并未实现自己的ORM框架，但是它提供了跟其他几个ORM框架整合的能力，例如Hibernate、Mybatis、Java Persistence AP等等，而且这些ORM框架都支持使用Spring提供的事务管理模块。</p>\n<h4 id=\"WEB-AND-REMOTING\"><a href=\"#WEB-AND-REMOTING\" class=\"headerlink\" title=\"WEB AND REMOTING\"></a>WEB AND REMOTING</h4><p>Spring提供了自己的 WEB开发框架——Spring MVC，除此之外，这个模块还提供远程调用支持：Remote Method Invocation(RMI)、Hessian、Burlap和JAX-WS。</p>\n<h4 id=\"INSTRUMENTATION\"><a href=\"#INSTRUMENTATION\" class=\"headerlink\" title=\"INSTRUMENTATION\"></a>INSTRUMENTATION</h4><p>不常使用</p>\n<h4 id=\"TESTING\"><a href=\"#TESTING\" class=\"headerlink\" title=\"TESTING\"></a>TESTING</h4><p>可以与常用的JUNIT、Mockito、Spock等测试框架整合使用。</p>\n<h3 id=\"1-3-2-Spring-portfolio\"><a href=\"#1-3-2-Spring-portfolio\" class=\"headerlink\" title=\"1.3.2 Spring portfolio\"></a>1.3.2 Spring portfolio</h3><p>如果只是学习Spring的核心模块，将会错过不少Spring社区提供的经典项目，下面介绍的这些项目使得Spring几乎可以覆盖整个Java开发（PS：带*的项目值得每位Spring用户仔细学习）。</p>\n<h4 id=\"SPRING-WEB-FLOW\"><a href=\"#SPRING-WEB-FLOW\" class=\"headerlink\" title=\"SPRING WEB FLOW\"></a>SPRING WEB FLOW</h4><p>基于Spring MVC框架拓展，利用该框架可以构建流式web应用。</p>\n<h4 id=\"SPRING-WEB-SERVICE\"><a href=\"#SPRING-WEB-SERVICE\" class=\"headerlink\" title=\"SPRING WEB SERVICE\"></a>SPRING WEB SERVICE</h4><p>虽然核心的Spring 框架提供了将Spring Bean 以声明的方式发布为Web Service，但是这些服务基于一个具有争议性的架构（拙劣的契约置后模型）之上而构建的。这些服务的契约由Bean 的接口来决定。 Spring Web Service 提供了契约优先的Web Service模型，服务的实现都是为了满足服务的契约而编写的。</p>\n<h4 id=\"SPRING-SECURITY（-）\"><a href=\"#SPRING-SECURITY（-）\" class=\"headerlink\" title=\"SPRING SECURITY（*）\"></a>SPRING SECURITY（*）</h4><p>安全对于许多应用都是一个非常关键的切面。利用Spring AOP，Spring Security为Spring 应用提供了声明式的安全机制。我们将在第9 章讲解如何为应用添加SpringSecurity。你可以在主页<a href=\"http://static.springsource.org/spring-security/site\" target=\"_blank\" rel=\"external\">http://static.springsource.org/spring-security/site</a> 获得关于SpringSecurity 更多的信息。</p>\n<h4 id=\"SPRING-INTEGRATION\"><a href=\"#SPRING-INTEGRATION\" class=\"headerlink\" title=\"SPRING INTEGRATION\"></a>SPRING INTEGRATION</h4><p>许多企业级应用都需要与其他应用进行交互。Spring Integration 提供了几种通用的应用集成模式的Spring 声明式风格的实现。</p>\n<p>我们不会在本书覆盖Spring Integration 内容，但是如果你想了解更多关于SpringIntegration 的信息， 我推荐Mark Fisher、Jonas Partner、Marius Bogoevici 和IweinFuld 编写的《Spring Integration in Action》；或者还可以访问Spring Integration 的主页<a href=\"http://www.springsource.org/spring-integration\" target=\"_blank\" rel=\"external\">http://www.springsource.org/spring-integration</a>。</p>\n<h4 id=\"SPRING-BATCH\"><a href=\"#SPRING-BATCH\" class=\"headerlink\" title=\"SPRING BATCH\"></a>SPRING BATCH</h4><p>当我们需要对数据进行大量操作时，没有任何技术可以比批处理更能胜任此场景的。如果需要开发一个批处理应用，你可以借助于Spring 强大的面向POJO 的编程模型来使用Spring Batch 来实现。</p>\n<p>Spring Batch 超出了本书的范畴，但是你可以阅读Thierry Templier 和Arnaud Cogoluègnes编写的《Spring Batch in Action》，或者访问Spring Batch 的主页<a href=\"http://static.springsource.org/spring-batch\" target=\"_blank\" rel=\"external\">http://static.springsource.org/spring-batch</a>。</p>\n<h4 id=\"SPRING-DATA（-）\"><a href=\"#SPRING-DATA（-）\" class=\"headerlink\" title=\"SPRING DATA（*）\"></a>SPRING DATA（*）</h4><p>Spring Data用于简化数据库相关的开发工作。尽管多年以来关系型数据库都是企业级应用开发的主流，但是随着移动互联网的发展，对NoSQL这类菲关系型数据库的需求也越来越强。</p>\n<p>无论你选择NoSQL还是关系型数据库，Spring Datat都能提供简洁的编程模型，例如非常方便的repository机制，可以为开发人员自动创建具体的SQL实现。</p>\n<h4 id=\"SPRING-SOCIAL\"><a href=\"#SPRING-SOCIAL\" class=\"headerlink\" title=\"SPRING SOCIAL\"></a>SPRING SOCIAL</h4><p>社交网络是互联网冉冉升起的一颗新星，越来越多的应用正在融入社交网络网站，例如Facebook 或者Twitter。如果对此感兴趣，你可以了解下Spring Social，Spring 的一个社交网络扩展模块。</p>\n<p>Spring Social 相对还比较新颖，我并没有计划将它放入本书，但是你可以访问<a href=\"http://www.springsource.org/spring-social\" target=\"_blank\" rel=\"external\">http://www.springsource.org/spring-social</a> 了解Spring Social 更多的相关信息。</p>\n<h4 id=\"SPRING-MOBILE\"><a href=\"#SPRING-MOBILE\" class=\"headerlink\" title=\"SPRING MOBILE\"></a>SPRING MOBILE</h4><p>移动应用是另一个引人瞩目的软件开发领域。智能手机和平板设备已成为许多用户首选的客户端。Spring Mobile 是Spring 新的扩展模块用于支持移动Web 应用开发。<br>与Spring Mobile 相关的是Spring Android 项目。这个新项目旨在通过Spring 框架为开发基于Android 设备的本地应用提供某些简单的支持。最初，这个项目提供了Spring 的RestTemplate 版本（请查看第11 章了解RestTemplete）可以用于Android 应用。<br>再次声明，这两个项目已超出了本书的范围，但是如果你对这两个项目感兴趣，可以访问<a href=\"http://www.springsource.org/spring-mobile\" target=\"_blank\" rel=\"external\">http://www.springsource.org/spring-mobile</a> 和<a href=\"http://www.springsource.org/spring-android\" target=\"_blank\" rel=\"external\">http://www.springsource.org/spring-android</a> 了解更多相关的信息。</p>\n<h4 id=\"SPRING-BOOT（-）\"><a href=\"#SPRING-BOOT（-）\" class=\"headerlink\" title=\"SPRING BOOT（*）\"></a>SPRING BOOT（*）</h4><p>Spring Boot是Spring社区中发展速度最快的框架之一，它旨在简化Spring的使用，解决Spring开发时遇到的“配置地狱”问题。</p>\n<p>Spring Boot通过大量使用自动配置技术，可以取消大量的XML配置文件，同时该框架提出了starter的概念，用于简化pom文件。可以参考我的一系列博文：<a href=\"http://www.jianshu.com/p/5ac18abc91f0\" target=\"_blank\" rel=\"external\">《Spring Boot Cookbook》阅读笔记</a></p>\n<p>主要总结下Spring社区的趋势：</p>\n<ol>\n<li>注重注解，能用注解解决的尽量用注解，尽量少写XML配置文件；</li>\n<li>Spring Boot已经是Spring社区中增长最迅速的框架，前三名是：Spring Framework，Spring Boot和Spring Security</li>\n<li>支持Java 8，通过Java8的lambda表达式，使得一些回调接口更易使用和阅读。</li>\n</ol>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br><br>使用容器管理beans<br><br></div>","more":"<h1 id=\"使用容器管理beans\"><a href=\"#使用容器管理beans\" class=\"headerlink\" title=\"使用容器管理beans\"></a>使用容器管理beans</h1><p>基于Spring框架构建的应用中的对象，都由Spring容器（container）管理，如下图所示。Spring容器负责创建对象、编织对象和配置对象，负责对象的整个生命周期。</p>\n<p><img src=\"/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/beans.png\" alt=\"\"></p>\n<p>容器是Spring框架的核心，通过依赖注入（DI）管理构成Spring应用的组件。正是因为有容器管理各个组件之间的协作关系，使得每个Spring组件都很好理解、便于复用和单元测试。</p>\n<p>Spring容器有多种实现，可以分为两类：</p>\n<ul>\n<li><em>Bean factories</em>（由<em>org.springframework.beans.factory.BeanFactory</em>接口定义）是最简单的容器，只提供基本的依赖注入功能；</li>\n<li><em>Application context</em>（由<em>org.springframework.context.ApplicationContext</em>接口定义）在bean factory的基础上提供application-framework框架服务，例如可以从properties文件中解析配置信息、可以对外公布application events。</li>\n</ul>\n<h2 id=\"应用上下文（application-context）\"><a href=\"#应用上下文（application-context）\" class=\"headerlink\" title=\"应用上下文（application context）\"></a>应用上下文（application context）</h2><p>Spring提供了多种application context，<strong>他们之间的主要的区别仅仅在于如何加载配置。</strong>可列举如下：</p>\n<ul>\n<li><em>AnnotationConfigApplicationContext</em>——从 <strong>Java</strong> 配置文件中加载应用上下文；</li>\n<li><em>AnnotationConfigWebApplicationContext</em>——从Java配置文件中加载Spring web应用上下文；</li>\n<li><em>ClassPathXmlApplicationContext</em>——从classpath（resources目录）下加载 <strong>XML</strong> 格式的应用上下文定义文件；</li>\n<li><em>FileSystemXmlApplicationContext</em>——从指定<strong>文件系统</strong>目录下加载XML格式的应用上下文定义文件；</li>\n<li><em>XmlWebApplicationContext</em>——从classpath（resources目录）下加载XML格式的Spring web应用上下文。</li>\n</ul>\n<p><strong>通过应用上下文实例，可以通过<em>getBean()</em>方法获得对应的bean。</strong></p>\n<h2 id=\"bean的生命周期\"><a href=\"#bean的生命周期\" class=\"headerlink\" title=\"bean的生命周期\"></a>bean的生命周期</h2><p>在传统的Java应用中，一个对象的生命周期非常简单：通过new创建一个对象，然后该对象就可以使用，当这个对象不再使用时，由Java垃圾回收机制进行处理和回收。</p>\n<p>在Spring应用中，bean的生命周期的控制更加精细。Spring提供了很多节点供开发人员定制某个bean的创建过程，掌握这些节点如何使用非常重要。Spring中bean的生命周期如下图所示：</p>\n<p><img src=\"/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/bean_life_circle.png\" alt=\"\"></p>\n<p>可以看出，bean factory负责bean创建的最初四步，然后移交给应用上下文做后续创建过程：</p>\n<ol>\n<li>Spring初始化bean</li>\n<li>Spring将值和其他bean的引用注入（inject）到当前bean的对应属性中；</li>\n<li>如果Bean实现了<em>BeanNameAware</em>接口，Spring会传入bean的ID来调用<em>setBeanName</em>方法；</li>\n<li>如果Bean实现了<em>BeanFactoryAware</em>接口，Spring传入bean factory的引用来调用<em>setBeanFactory</em>方法；</li>\n<li>如果Bean实现了<em>ApplicationContextAware</em>接口，Spring将传入应用上下文的引用来调用<em>setApplicationContext</em>方法；</li>\n<li>如果Bean实现了<em>BeanPostProcessor</em>接口，则Spring调用<em>postProcessBeforeInitialization</em>方法，这个方法在初始化和属性注入之后调用，在任何初始化代码之前调用；</li>\n<li>如果Bean实现了<em>InitializingBean</em>接口，则需要调用该接口的<em>afterPropertiesSet</em>方法；如果在bean定义的时候设置了<em>init-method</em>属性，则需要调用该属性指定的初始化方法；</li>\n<li>如果Bean实现了<em>BeanPostProcessor</em>接口，则Spring调用<em>postProcessAfterInitialization</em>方法</li>\n<li>在这个时候bean就可以用于在应用上下文中使用了，当上下文退出时bean也会被销毁；</li>\n<li>如果Bean实现了<em>DisposableBean</em>接口，Spring会调用<em>destroy()</em>方法;如果在bean定义的时候设置了<em>destroy-method</em>， 则此时需要调用指定的方法。</li>\n</ol>\n<p>本节主要总结了如何启动Spring容器，以及Spring应用中bean的生命周期。</p>\n<h2 id=\"Spring整体架构\"><a href=\"#Spring整体架构\" class=\"headerlink\" title=\"Spring整体架构\"></a>Spring整体架构</h2><p>除了Spring的核心模块，Spring还提供了其他的工具组件，这些组件扩展了Spring的功能，例如webservice、REST、mobile和NOSQL，形成了丰富的开发生态。</p>\n<h3 id=\"1-3-1-Spring模块\"><a href=\"#1-3-1-Spring模块\" class=\"headerlink\" title=\"1.3.1 Spring模块\"></a>1.3.1 Spring模块</h3><p>Spring 4.0you 20个独立的模块，每个包含三个文件：二进制库、源文件和文档，完整的库列表如下图所示：</p>\n<p><img src=\"/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/spring_jar.png\" alt=\"\"></p>\n<p>按照功能划分，这些模块可以分成六组，如下图所示：</p>\n<p><img src=\"/2017/05/08/Spring-2017-05-08-Spring使用容器管理beans/modules.png\" alt=\"\"></p>\n<p>这些模块几乎可以满足所有企业级应用开发的需求，但是开发人员并不需要完全使用Spring的这些模块，可以自由选择符合项目需求的第三方模块——Spring为一些第三方模块提供了交互接口。</p>\n<h4 id=\"CORE-SPRING-CONTAINER\"><a href=\"#CORE-SPRING-CONTAINER\" class=\"headerlink\" title=\"CORE SPRING CONTAINER\"></a>CORE SPRING CONTAINER</h4><p>Spring框架的核心模块，其他所有模块都基于该模块构建。Spring容器负责管理Spring应用中bean的创建、配置和管理。在这模块中有Spring bean factory，该接口提供了最基本的依赖注入（DI）功能；基于bean factory，该模块提供了集中Spring应用上下文的实现，可以供开发人员选择。</p>\n<p>除了bean factory和application context，该模块还支持其他企业级服务，例如email、JNDI access、EJB integration和scheduling。</p>\n<h4 id=\"SPRING’s-AOP-MODULE\"><a href=\"#SPRING’s-AOP-MODULE\" class=\"headerlink\" title=\"SPRING’s AOP MODULE\"></a>SPRING’s AOP MODULE</h4><p>Spring框架通过AOP模块提供面向切面编程的能力。通过AOP模块，一些系统层面的需求（事务、安全）可以与它们真正要作用到的模块相互解耦合。</p>\n<h4 id=\"DATA-ACCESS-AND-INTEGRATION\"><a href=\"#DATA-ACCESS-AND-INTEGRATION\" class=\"headerlink\" title=\"DATA ACCESS AND INTEGRATION\"></a>DATA ACCESS AND INTEGRATION</h4><p>Spring的JDBC和<em>data-access object</em>模块将数据库操作的一些样板式代码封装起来，免去了开发人员的很多工作量。这个模块还对数据库层的异常进行了封装，并向上提供含义更丰富的异常信息。</p>\n<p>Spring并未实现自己的ORM框架，但是它提供了跟其他几个ORM框架整合的能力，例如Hibernate、Mybatis、Java Persistence AP等等，而且这些ORM框架都支持使用Spring提供的事务管理模块。</p>\n<h4 id=\"WEB-AND-REMOTING\"><a href=\"#WEB-AND-REMOTING\" class=\"headerlink\" title=\"WEB AND REMOTING\"></a>WEB AND REMOTING</h4><p>Spring提供了自己的 WEB开发框架——Spring MVC，除此之外，这个模块还提供远程调用支持：Remote Method Invocation(RMI)、Hessian、Burlap和JAX-WS。</p>\n<h4 id=\"INSTRUMENTATION\"><a href=\"#INSTRUMENTATION\" class=\"headerlink\" title=\"INSTRUMENTATION\"></a>INSTRUMENTATION</h4><p>不常使用</p>\n<h4 id=\"TESTING\"><a href=\"#TESTING\" class=\"headerlink\" title=\"TESTING\"></a>TESTING</h4><p>可以与常用的JUNIT、Mockito、Spock等测试框架整合使用。</p>\n<h3 id=\"1-3-2-Spring-portfolio\"><a href=\"#1-3-2-Spring-portfolio\" class=\"headerlink\" title=\"1.3.2 Spring portfolio\"></a>1.3.2 Spring portfolio</h3><p>如果只是学习Spring的核心模块，将会错过不少Spring社区提供的经典项目，下面介绍的这些项目使得Spring几乎可以覆盖整个Java开发（PS：带*的项目值得每位Spring用户仔细学习）。</p>\n<h4 id=\"SPRING-WEB-FLOW\"><a href=\"#SPRING-WEB-FLOW\" class=\"headerlink\" title=\"SPRING WEB FLOW\"></a>SPRING WEB FLOW</h4><p>基于Spring MVC框架拓展，利用该框架可以构建流式web应用。</p>\n<h4 id=\"SPRING-WEB-SERVICE\"><a href=\"#SPRING-WEB-SERVICE\" class=\"headerlink\" title=\"SPRING WEB SERVICE\"></a>SPRING WEB SERVICE</h4><p>虽然核心的Spring 框架提供了将Spring Bean 以声明的方式发布为Web Service，但是这些服务基于一个具有争议性的架构（拙劣的契约置后模型）之上而构建的。这些服务的契约由Bean 的接口来决定。 Spring Web Service 提供了契约优先的Web Service模型，服务的实现都是为了满足服务的契约而编写的。</p>\n<h4 id=\"SPRING-SECURITY（-）\"><a href=\"#SPRING-SECURITY（-）\" class=\"headerlink\" title=\"SPRING SECURITY（*）\"></a>SPRING SECURITY（*）</h4><p>安全对于许多应用都是一个非常关键的切面。利用Spring AOP，Spring Security为Spring 应用提供了声明式的安全机制。我们将在第9 章讲解如何为应用添加SpringSecurity。你可以在主页<a href=\"http://static.springsource.org/spring-security/site\" target=\"_blank\" rel=\"external\">http://static.springsource.org/spring-security/site</a> 获得关于SpringSecurity 更多的信息。</p>\n<h4 id=\"SPRING-INTEGRATION\"><a href=\"#SPRING-INTEGRATION\" class=\"headerlink\" title=\"SPRING INTEGRATION\"></a>SPRING INTEGRATION</h4><p>许多企业级应用都需要与其他应用进行交互。Spring Integration 提供了几种通用的应用集成模式的Spring 声明式风格的实现。</p>\n<p>我们不会在本书覆盖Spring Integration 内容，但是如果你想了解更多关于SpringIntegration 的信息， 我推荐Mark Fisher、Jonas Partner、Marius Bogoevici 和IweinFuld 编写的《Spring Integration in Action》；或者还可以访问Spring Integration 的主页<a href=\"http://www.springsource.org/spring-integration\" target=\"_blank\" rel=\"external\">http://www.springsource.org/spring-integration</a>。</p>\n<h4 id=\"SPRING-BATCH\"><a href=\"#SPRING-BATCH\" class=\"headerlink\" title=\"SPRING BATCH\"></a>SPRING BATCH</h4><p>当我们需要对数据进行大量操作时，没有任何技术可以比批处理更能胜任此场景的。如果需要开发一个批处理应用，你可以借助于Spring 强大的面向POJO 的编程模型来使用Spring Batch 来实现。</p>\n<p>Spring Batch 超出了本书的范畴，但是你可以阅读Thierry Templier 和Arnaud Cogoluègnes编写的《Spring Batch in Action》，或者访问Spring Batch 的主页<a href=\"http://static.springsource.org/spring-batch\" target=\"_blank\" rel=\"external\">http://static.springsource.org/spring-batch</a>。</p>\n<h4 id=\"SPRING-DATA（-）\"><a href=\"#SPRING-DATA（-）\" class=\"headerlink\" title=\"SPRING DATA（*）\"></a>SPRING DATA（*）</h4><p>Spring Data用于简化数据库相关的开发工作。尽管多年以来关系型数据库都是企业级应用开发的主流，但是随着移动互联网的发展，对NoSQL这类菲关系型数据库的需求也越来越强。</p>\n<p>无论你选择NoSQL还是关系型数据库，Spring Datat都能提供简洁的编程模型，例如非常方便的repository机制，可以为开发人员自动创建具体的SQL实现。</p>\n<h4 id=\"SPRING-SOCIAL\"><a href=\"#SPRING-SOCIAL\" class=\"headerlink\" title=\"SPRING SOCIAL\"></a>SPRING SOCIAL</h4><p>社交网络是互联网冉冉升起的一颗新星，越来越多的应用正在融入社交网络网站，例如Facebook 或者Twitter。如果对此感兴趣，你可以了解下Spring Social，Spring 的一个社交网络扩展模块。</p>\n<p>Spring Social 相对还比较新颖，我并没有计划将它放入本书，但是你可以访问<a href=\"http://www.springsource.org/spring-social\" target=\"_blank\" rel=\"external\">http://www.springsource.org/spring-social</a> 了解Spring Social 更多的相关信息。</p>\n<h4 id=\"SPRING-MOBILE\"><a href=\"#SPRING-MOBILE\" class=\"headerlink\" title=\"SPRING MOBILE\"></a>SPRING MOBILE</h4><p>移动应用是另一个引人瞩目的软件开发领域。智能手机和平板设备已成为许多用户首选的客户端。Spring Mobile 是Spring 新的扩展模块用于支持移动Web 应用开发。<br>与Spring Mobile 相关的是Spring Android 项目。这个新项目旨在通过Spring 框架为开发基于Android 设备的本地应用提供某些简单的支持。最初，这个项目提供了Spring 的RestTemplate 版本（请查看第11 章了解RestTemplete）可以用于Android 应用。<br>再次声明，这两个项目已超出了本书的范围，但是如果你对这两个项目感兴趣，可以访问<a href=\"http://www.springsource.org/spring-mobile\" target=\"_blank\" rel=\"external\">http://www.springsource.org/spring-mobile</a> 和<a href=\"http://www.springsource.org/spring-android\" target=\"_blank\" rel=\"external\">http://www.springsource.org/spring-android</a> 了解更多相关的信息。</p>\n<h4 id=\"SPRING-BOOT（-）\"><a href=\"#SPRING-BOOT（-）\" class=\"headerlink\" title=\"SPRING BOOT（*）\"></a>SPRING BOOT（*）</h4><p>Spring Boot是Spring社区中发展速度最快的框架之一，它旨在简化Spring的使用，解决Spring开发时遇到的“配置地狱”问题。</p>\n<p>Spring Boot通过大量使用自动配置技术，可以取消大量的XML配置文件，同时该框架提出了starter的概念，用于简化pom文件。可以参考我的一系列博文：<a href=\"http://www.jianshu.com/p/5ac18abc91f0\" target=\"_blank\" rel=\"external\">《Spring Boot Cookbook》阅读笔记</a></p>\n<p>主要总结下Spring社区的趋势：</p>\n<ol>\n<li>注重注解，能用注解解决的尽量用注解，尽量少写XML配置文件；</li>\n<li>Spring Boot已经是Spring社区中增长最迅速的框架，前三名是：Spring Framework，Spring Boot和Spring Security</li>\n<li>支持Java 8，通过Java8的lambda表达式，使得一些回调接口更易使用和阅读。</li>\n</ol>"},{"title":"Spring注解原理总结（二）","date":"2017-05-08T01:26:13.000Z","_content":"\n\n\n<div align=\"center\">\n\nJava中如何自定义注解？\n\n</div>\n\n<!-- more-->\n\n## 之 Java中如何自定义注解\n\n###### 1.先看注解定义示例\n\n@Override 源码定义：\n\n```\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n}\n```\n\n> 使用 @interface 表示这是一个注解类。自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。\n> 标注 @Target 元注解，声明@Override 的作用地方为METHOD。\n> 标注 @Retention 元注解，指明@Override 被保留的级别-源码级别，编译的时候就被忽略。\n\n\n\n**引申1：注解定义格式：public @interface 注解名 {定义体} **\n**引申2：定义注解时，不得继承其他的注解或者接口。**\n\n\n\nSpringMVC 的 @RequestMapping 源码示例：\n\n```java\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)  // 注解一直保持到VM运行期，被反射读取。\n@Documented\n@Mapping    // SpringMVC定义的元注解，暂忽略此。\npublic @interface RequestMapping {\n    String name() default \"\";\n\n    @AliasFor(\"path\")    // SpringMVC中定义的别名注解。\n    String[] value() default {};\n\n    @AliasFor(\"value\")\n    String[] path() default {};\n\n    RequestMethod[] method() default {};\n\n    String[] params() default {};\n\n    String[] headers() default {};\n\n    String[] consumes() default {};\n\n    String[] produces() default {};\n}\n```\n\n\n\n> 用法示例：\n> @RequestMapping(value=\"/user\", methods=RequestMethod.GET)，\n> @RequestMapping可供选择的参数有：\n> name, value, path, method, params, headers, consumes, produces。\n>\n> - 注解的每个参数对应着 @RequestMapping 类中的方法名。\n> - 每个参数指定一个默认值（default）。\n\n\n\n**引申3：注解类体中，每一个方法实际上声明了一个注解参数。方法名就是参数名，返回值类型就是参数类型。**\n\n**引申4：注解参数支持的类型：8种基本类型（byte，short，int，long，float，double，char，boolean），String类型，Class类型，enum类型，Annotation类型，以上所有类型的数组。**\n\n**引申5：访问修饰权限：public或者默认default。**\n\n**引申6：注解元素必须要有默认值。在定义注解的默认值中指定，或者在使用注解的时候指定。非基本类型不能默认null。**\n\n> 当自定义注解类之后，便可以在类（ElementType.TYPE）、方法（ElementType.METHOD）上标注 @RequestMapping。\n\n\n\n\n\n那怎样做才能让注解被Java程序所运行？\n\n请参考：","source":"_drafts/Spring/2017-05-08-Spring注解原理总结（二）.md","raw":"---\ntitle: Spring注解原理总结（二）\ndate: 2017-05-08 09:26:13\ntags: Spring Annotation\n---\n\n\n\n<div align=\"center\">\n\nJava中如何自定义注解？\n\n</div>\n\n<!-- more-->\n\n## 之 Java中如何自定义注解\n\n###### 1.先看注解定义示例\n\n@Override 源码定义：\n\n```\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n}\n```\n\n> 使用 @interface 表示这是一个注解类。自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。\n> 标注 @Target 元注解，声明@Override 的作用地方为METHOD。\n> 标注 @Retention 元注解，指明@Override 被保留的级别-源码级别，编译的时候就被忽略。\n\n\n\n**引申1：注解定义格式：public @interface 注解名 {定义体} **\n**引申2：定义注解时，不得继承其他的注解或者接口。**\n\n\n\nSpringMVC 的 @RequestMapping 源码示例：\n\n```java\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)  // 注解一直保持到VM运行期，被反射读取。\n@Documented\n@Mapping    // SpringMVC定义的元注解，暂忽略此。\npublic @interface RequestMapping {\n    String name() default \"\";\n\n    @AliasFor(\"path\")    // SpringMVC中定义的别名注解。\n    String[] value() default {};\n\n    @AliasFor(\"value\")\n    String[] path() default {};\n\n    RequestMethod[] method() default {};\n\n    String[] params() default {};\n\n    String[] headers() default {};\n\n    String[] consumes() default {};\n\n    String[] produces() default {};\n}\n```\n\n\n\n> 用法示例：\n> @RequestMapping(value=\"/user\", methods=RequestMethod.GET)，\n> @RequestMapping可供选择的参数有：\n> name, value, path, method, params, headers, consumes, produces。\n>\n> - 注解的每个参数对应着 @RequestMapping 类中的方法名。\n> - 每个参数指定一个默认值（default）。\n\n\n\n**引申3：注解类体中，每一个方法实际上声明了一个注解参数。方法名就是参数名，返回值类型就是参数类型。**\n\n**引申4：注解参数支持的类型：8种基本类型（byte，short，int，long，float，double，char，boolean），String类型，Class类型，enum类型，Annotation类型，以上所有类型的数组。**\n\n**引申5：访问修饰权限：public或者默认default。**\n\n**引申6：注解元素必须要有默认值。在定义注解的默认值中指定，或者在使用注解的时候指定。非基本类型不能默认null。**\n\n> 当自定义注解类之后，便可以在类（ElementType.TYPE）、方法（ElementType.METHOD）上标注 @RequestMapping。\n\n\n\n\n\n那怎样做才能让注解被Java程序所运行？\n\n请参考：","slug":"Spring-2017-05-08-Spring注解原理总结（二）","published":0,"updated":"2017-05-08T22:42:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndo000yp5ukds9zn8i9","content":"<div align=\"center\"><br><br>Java中如何自定义注解？<br><br></div>\n\n<a id=\"more\"></a>\n<h2 id=\"之-Java中如何自定义注解\"><a href=\"#之-Java中如何自定义注解\" class=\"headerlink\" title=\"之 Java中如何自定义注解\"></a>之 Java中如何自定义注解</h2><h6 id=\"1-先看注解定义示例\"><a href=\"#1-先看注解定义示例\" class=\"headerlink\" title=\"1.先看注解定义示例\"></a>1.先看注解定义示例</h6><p>@Override 源码定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Target(ElementType.METHOD)</div><div class=\"line\">@Retention(RetentionPolicy.SOURCE)</div><div class=\"line\">public @interface Override &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 @interface 表示这是一个注解类。自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。<br>标注 @Target 元注解，声明@Override 的作用地方为METHOD。<br>标注 @Retention 元注解，指明@Override 被保留的级别-源码级别，编译的时候就被忽略。</p>\n</blockquote>\n<p><strong>引申1：注解定义格式：public @interface 注解名 {定义体} </strong><br><strong>引申2：定义注解时，不得继承其他的注解或者接口。</strong></p>\n<p>SpringMVC 的 @RequestMapping 源码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)  <span class=\"comment\">// 注解一直保持到VM运行期，被反射读取。</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Mapping</span>    <span class=\"comment\">// SpringMVC定义的元注解，暂忽略此。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RequestMapping &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@AliasFor</span>(<span class=\"string\">\"path\"</span>)    <span class=\"comment\">// SpringMVC中定义的别名注解。</span></div><div class=\"line\">    String[] value() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@AliasFor</span>(<span class=\"string\">\"value\"</span>)</div><div class=\"line\">    String[] path() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    RequestMethod[] method() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] params() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] headers() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] consumes() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] produces() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>用法示例：<br>@RequestMapping(value=”/user”, methods=RequestMethod.GET)，<br>@RequestMapping可供选择的参数有：<br>name, value, path, method, params, headers, consumes, produces。</p>\n<ul>\n<li>注解的每个参数对应着 @RequestMapping 类中的方法名。</li>\n<li>每个参数指定一个默认值（default）。</li>\n</ul>\n</blockquote>\n<p><strong>引申3：注解类体中，每一个方法实际上声明了一个注解参数。方法名就是参数名，返回值类型就是参数类型。</strong></p>\n<p><strong>引申4：注解参数支持的类型：8种基本类型（byte，short，int，long，float，double，char，boolean），String类型，Class类型，enum类型，Annotation类型，以上所有类型的数组。</strong></p>\n<p><strong>引申5：访问修饰权限：public或者默认default。</strong></p>\n<p><strong>引申6：注解元素必须要有默认值。在定义注解的默认值中指定，或者在使用注解的时候指定。非基本类型不能默认null。</strong></p>\n<blockquote>\n<p>当自定义注解类之后，便可以在类（ElementType.TYPE）、方法（ElementType.METHOD）上标注 @RequestMapping。</p>\n</blockquote>\n<p>那怎样做才能让注解被Java程序所运行？</p>\n<p>请参考：</p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br><br>Java中如何自定义注解？<br><br></div>","more":"<h2 id=\"之-Java中如何自定义注解\"><a href=\"#之-Java中如何自定义注解\" class=\"headerlink\" title=\"之 Java中如何自定义注解\"></a>之 Java中如何自定义注解</h2><h6 id=\"1-先看注解定义示例\"><a href=\"#1-先看注解定义示例\" class=\"headerlink\" title=\"1.先看注解定义示例\"></a>1.先看注解定义示例</h6><p>@Override 源码定义：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Target(ElementType.METHOD)</div><div class=\"line\">@Retention(RetentionPolicy.SOURCE)</div><div class=\"line\">public @interface Override &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 @interface 表示这是一个注解类。自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。<br>标注 @Target 元注解，声明@Override 的作用地方为METHOD。<br>标注 @Retention 元注解，指明@Override 被保留的级别-源码级别，编译的时候就被忽略。</p>\n</blockquote>\n<p><strong>引申1：注解定义格式：public @interface 注解名 {定义体} </strong><br><strong>引申2：定义注解时，不得继承其他的注解或者接口。</strong></p>\n<p>SpringMVC 的 @RequestMapping 源码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)  <span class=\"comment\">// 注解一直保持到VM运行期，被反射读取。</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Mapping</span>    <span class=\"comment\">// SpringMVC定义的元注解，暂忽略此。</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RequestMapping &#123;</div><div class=\"line\">    <span class=\"function\">String <span class=\"title\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@AliasFor</span>(<span class=\"string\">\"path\"</span>)    <span class=\"comment\">// SpringMVC中定义的别名注解。</span></div><div class=\"line\">    String[] value() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@AliasFor</span>(<span class=\"string\">\"value\"</span>)</div><div class=\"line\">    String[] path() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    RequestMethod[] method() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] params() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] headers() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] consumes() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    String[] produces() <span class=\"keyword\">default</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>用法示例：<br>@RequestMapping(value=”/user”, methods=RequestMethod.GET)，<br>@RequestMapping可供选择的参数有：<br>name, value, path, method, params, headers, consumes, produces。</p>\n<ul>\n<li>注解的每个参数对应着 @RequestMapping 类中的方法名。</li>\n<li>每个参数指定一个默认值（default）。</li>\n</ul>\n</blockquote>\n<p><strong>引申3：注解类体中，每一个方法实际上声明了一个注解参数。方法名就是参数名，返回值类型就是参数类型。</strong></p>\n<p><strong>引申4：注解参数支持的类型：8种基本类型（byte，short，int，long，float，double，char，boolean），String类型，Class类型，enum类型，Annotation类型，以上所有类型的数组。</strong></p>\n<p><strong>引申5：访问修饰权限：public或者默认default。</strong></p>\n<p><strong>引申6：注解元素必须要有默认值。在定义注解的默认值中指定，或者在使用注解的时候指定。非基本类型不能默认null。</strong></p>\n<blockquote>\n<p>当自定义注解类之后，便可以在类（ElementType.TYPE）、方法（ElementType.METHOD）上标注 @RequestMapping。</p>\n</blockquote>\n<p>那怎样做才能让注解被Java程序所运行？</p>\n<p>请参考：</p>"},{"title":"Spring整合Hibernate","date":"2017-05-07T23:55:47.000Z","_content":"\n\n\n<div align=\"center\">\n\nSpring整合Hibernate\n\n</div>\n\n<!-- more-->\n\n\n\nhibernate.cfg.xml   Hibernate配置文件\n\n```xml\n<hibernate-configuration>\n\t<session-factory>\n\t\t<!-- 第一部分： 配置数据库信息 必须的 -->\n\t \t<property name=\"hibernate.connection.driver_class\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"hibernate.connection.url\">jdbc:mysql:///spring_day04</property>\n\t\t<property name=\"hibernate.connection.username\">root</property>\n\t\t<property name=\"hibernate.connection.password\">root</property>   \n\t\t\n\t\t<!-- 第二部分： 配置hibernate信息  可选的-->\n\t\t<!-- 输出底层sql语句 -->\n\t\t<property name=\"hibernate.show_sql\">true</property>\n\t\t<!-- 输出底层sql语句格式 -->\n\t\t<property name=\"hibernate.format_sql\">true</property>\n\t\t<!-- hibernate帮创建表，需要配置之后 \n\t\t\tupdate: 如果已经有表，更新，如果没有，创建\n\t\t-->\n\t\t<property name=\"hibernate.hbm2ddl.auto\">update</property>\n\t\t<!-- 配置数据库方言\n\t\t\t在mysql里面实现分页 关键字 limit，只能使用mysql里面\n\t\t\t在oracle数据库，实现分页rownum\n\t\t\t让hibernate框架识别不同数据库的自己特有的语句\n\t\t -->\n\t\t<property name=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</property>\n\t\t\n\t\t<!-- 第三部分： 把映射文件放到核心配置文件中 必须的-->\n\t\t<mapping resource=\"cn/nini/entity/User.hbm.xml\"/>\n\t</session-factory>\n```\n\n\n\nApplicationContext.xml\n\n```Xml\n\t<bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\">\n        <!--把数据源 bean 注入到sessionFactory的dataSource属性-->\n\t\t<property name=\"dataSource\" ref=\"dataSource\"></property>\n\t\t<!-- 引入hibernate配置文件 -->\n\t\t<property name=\"configLocation\" value=\"classpath:/hibernate.cfg.xml\"></property><!-- 1 -->\n        <!-- 引入映射文件，如果有多个可以继续添加 -->\n        <property name=\"mappingResources\">     <!-- 2 -->\n            <list>\n                <value>cn/nini/entity/User.hbm.xml</value>\n            </list>\n        </property>\n\t\t</property>\n\t\t<!-- 映射文件 -->\n\t\t <property name=\"mappingLocations\" value=\"classpath:org/hhx/ssh/entities/*.hbm.xml\"></property> \n\t\t<!-- 使用注解 -->\n\t\t<property name=\"packagesToScan\" value=\"org.nan.entities\"></property>\n\t</bean>\n```\n\n\n\n优化：\n\n可以去掉这句<!-- 1 -->\n\n```Xml\n<property name=\"configLocation\" value=\"classpath:/hibernate.cfg.xml\"></property>\n```\n\n在spring的配置文件中直接添加以下配置语句\n\n```Xml\n        <property name=\"hibernateProperties\">\n            <props>\n                <prop key=\"hibernate.show_sql\">true</prop>\n                <prop key=\"hibernate.format_sql\">true</prop>\n                <prop key=\"hibernate.hbm2ddl.auto\">update</prop>\n                <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\n            </props>\n        </property>\n```\n\n\n\n\n\n如果用到映射文件\n\n可以这样写\n\n```xml\n        <property name=\"mappingResources\">     <!-- 2 -->\n            <list>\n                <value>cn/nini/entity/User.hbm.xml</value>\n            </list>\n        </property>\n\t\t</property>\n```\n\n也可以这样写\n\n```xml\n\t\t<!-- 映射文件 -->\n\t\t <property name=\"mappingLocations\" value=\"classpath:org/hhx/ssh/entities/*.hbm.xml\">\t\t\t</property> \n```\n\n\n\n\n\n如果是用注解\n\n只要在sessionFactory中添加如下代码\n\n```xml\n<property name=\"packagesToScan\" value=\"org.nan.entities\"></property>\n```\n\n","source":"_drafts/Spring/2017-05-08-Spring整合Hibernate.md","raw":"---\ntitle: Spring整合Hibernate\ndate: 2017-05-08 07:55:47\ntags: Spring\n---\n\n\n\n<div align=\"center\">\n\nSpring整合Hibernate\n\n</div>\n\n<!-- more-->\n\n\n\nhibernate.cfg.xml   Hibernate配置文件\n\n```xml\n<hibernate-configuration>\n\t<session-factory>\n\t\t<!-- 第一部分： 配置数据库信息 必须的 -->\n\t \t<property name=\"hibernate.connection.driver_class\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"hibernate.connection.url\">jdbc:mysql:///spring_day04</property>\n\t\t<property name=\"hibernate.connection.username\">root</property>\n\t\t<property name=\"hibernate.connection.password\">root</property>   \n\t\t\n\t\t<!-- 第二部分： 配置hibernate信息  可选的-->\n\t\t<!-- 输出底层sql语句 -->\n\t\t<property name=\"hibernate.show_sql\">true</property>\n\t\t<!-- 输出底层sql语句格式 -->\n\t\t<property name=\"hibernate.format_sql\">true</property>\n\t\t<!-- hibernate帮创建表，需要配置之后 \n\t\t\tupdate: 如果已经有表，更新，如果没有，创建\n\t\t-->\n\t\t<property name=\"hibernate.hbm2ddl.auto\">update</property>\n\t\t<!-- 配置数据库方言\n\t\t\t在mysql里面实现分页 关键字 limit，只能使用mysql里面\n\t\t\t在oracle数据库，实现分页rownum\n\t\t\t让hibernate框架识别不同数据库的自己特有的语句\n\t\t -->\n\t\t<property name=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</property>\n\t\t\n\t\t<!-- 第三部分： 把映射文件放到核心配置文件中 必须的-->\n\t\t<mapping resource=\"cn/nini/entity/User.hbm.xml\"/>\n\t</session-factory>\n```\n\n\n\nApplicationContext.xml\n\n```Xml\n\t<bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\">\n        <!--把数据源 bean 注入到sessionFactory的dataSource属性-->\n\t\t<property name=\"dataSource\" ref=\"dataSource\"></property>\n\t\t<!-- 引入hibernate配置文件 -->\n\t\t<property name=\"configLocation\" value=\"classpath:/hibernate.cfg.xml\"></property><!-- 1 -->\n        <!-- 引入映射文件，如果有多个可以继续添加 -->\n        <property name=\"mappingResources\">     <!-- 2 -->\n            <list>\n                <value>cn/nini/entity/User.hbm.xml</value>\n            </list>\n        </property>\n\t\t</property>\n\t\t<!-- 映射文件 -->\n\t\t <property name=\"mappingLocations\" value=\"classpath:org/hhx/ssh/entities/*.hbm.xml\"></property> \n\t\t<!-- 使用注解 -->\n\t\t<property name=\"packagesToScan\" value=\"org.nan.entities\"></property>\n\t</bean>\n```\n\n\n\n优化：\n\n可以去掉这句<!-- 1 -->\n\n```Xml\n<property name=\"configLocation\" value=\"classpath:/hibernate.cfg.xml\"></property>\n```\n\n在spring的配置文件中直接添加以下配置语句\n\n```Xml\n        <property name=\"hibernateProperties\">\n            <props>\n                <prop key=\"hibernate.show_sql\">true</prop>\n                <prop key=\"hibernate.format_sql\">true</prop>\n                <prop key=\"hibernate.hbm2ddl.auto\">update</prop>\n                <prop key=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</prop>\n            </props>\n        </property>\n```\n\n\n\n\n\n如果用到映射文件\n\n可以这样写\n\n```xml\n        <property name=\"mappingResources\">     <!-- 2 -->\n            <list>\n                <value>cn/nini/entity/User.hbm.xml</value>\n            </list>\n        </property>\n\t\t</property>\n```\n\n也可以这样写\n\n```xml\n\t\t<!-- 映射文件 -->\n\t\t <property name=\"mappingLocations\" value=\"classpath:org/hhx/ssh/entities/*.hbm.xml\">\t\t\t</property> \n```\n\n\n\n\n\n如果是用注解\n\n只要在sessionFactory中添加如下代码\n\n```xml\n<property name=\"packagesToScan\" value=\"org.nan.entities\"></property>\n```\n\n","slug":"Spring-2017-05-08-Spring整合Hibernate","published":0,"updated":"2017-05-08T22:44:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndr0011p5ukpvw82y1s","content":"<div align=\"center\"><br><br>Spring整合Hibernate<br><br></div>\n\n<a id=\"more\"></a>\n<p>hibernate.cfg.xml   Hibernate配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-configuration</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">session-factory</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 第一部分： 配置数据库信息 必须的 --&gt;</span></div><div class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.url\"</span>&gt;</span>jdbc:mysql:///spring_day04<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.username\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.password\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>   </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 第二部分： 配置hibernate信息  可选的--&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 输出底层sql语句 --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 输出底层sql语句格式 --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- hibernate帮创建表，需要配置之后 </span></div><div class=\"line\">\t\t\tupdate: 如果已经有表，更新，如果没有，创建</div><div class=\"line\">\t\t--&gt;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置数据库方言</span></div><div class=\"line\">\t\t\t在mysql里面实现分页 关键字 limit，只能使用mysql里面</div><div class=\"line\">\t\t\t在oracle数据库，实现分页rownum</div><div class=\"line\">\t\t\t让hibernate框架识别不同数据库的自己特有的语句</div><div class=\"line\">\t\t --&gt;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 第三部分： 把映射文件放到核心配置文件中 必须的--&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"cn/nini/entity/User.hbm.xml\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">session-factory</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>ApplicationContext.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!--把数据源 bean 注入到sessionFactory的dataSource属性--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 引入hibernate配置文件 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:/hibernate.cfg.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span><span class=\"comment\">&lt;!-- 1 --&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!-- 引入映射文件，如果有多个可以继续添加 --&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappingResources\"</span>&gt;</span>     <span class=\"comment\">&lt;!-- 2 --&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn/nini/entity/User.hbm.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 映射文件 --&gt;</span></div><div class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappingLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:org/hhx/ssh/entities/*.hbm.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 使用注解 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"packagesToScan\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.nan.entities\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>优化：</p>\n<p>可以去掉这句<!-- 1 --></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:/hibernate.cfg.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在spring的配置文件中直接添加以下配置语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernateProperties\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果用到映射文件</p>\n<p>可以这样写</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappingResources\"</span>&gt;</span>     <span class=\"comment\">&lt;!-- 2 --&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn/nini/entity/User.hbm.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>也可以这样写</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 映射文件 --&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappingLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:org/hhx/ssh/entities/*.hbm.xml\"</span>&gt;</span>\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果是用注解</p>\n<p>只要在sessionFactory中添加如下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"packagesToScan\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.nan.entities\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br><br>Spring整合Hibernate<br><br></div>","more":"<p>hibernate.cfg.xml   Hibernate配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hibernate-configuration</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">session-factory</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 第一部分： 配置数据库信息 必须的 --&gt;</span></div><div class=\"line\">\t \t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.driver_class\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.url\"</span>&gt;</span>jdbc:mysql:///spring_day04<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.username\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.connection.password\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>   </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 第二部分： 配置hibernate信息  可选的--&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 输出底层sql语句 --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 输出底层sql语句格式 --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- hibernate帮创建表，需要配置之后 </span></div><div class=\"line\">\t\t\tupdate: 如果已经有表，更新，如果没有，创建</div><div class=\"line\">\t\t--&gt;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置数据库方言</span></div><div class=\"line\">\t\t\t在mysql里面实现分页 关键字 limit，只能使用mysql里面</div><div class=\"line\">\t\t\t在oracle数据库，实现分页rownum</div><div class=\"line\">\t\t\t让hibernate框架识别不同数据库的自己特有的语句</div><div class=\"line\">\t\t --&gt;</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 第三部分： 把映射文件放到核心配置文件中 必须的--&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"cn/nini/entity/User.hbm.xml\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">session-factory</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>ApplicationContext.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.orm.hibernate4.LocalSessionFactoryBean\"</span>&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!--把数据源 bean 注入到sessionFactory的dataSource属性--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 引入hibernate配置文件 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:/hibernate.cfg.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span><span class=\"comment\">&lt;!-- 1 --&gt;</span></div><div class=\"line\">       <span class=\"comment\">&lt;!-- 引入映射文件，如果有多个可以继续添加 --&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappingResources\"</span>&gt;</span>     <span class=\"comment\">&lt;!-- 2 --&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn/nini/entity/User.hbm.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 映射文件 --&gt;</span></div><div class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappingLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:org/hhx/ssh/entities/*.hbm.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span> </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 使用注解 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"packagesToScan\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.nan.entities\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>优化：</p>\n<p>可以去掉这句<!-- 1 --></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:/hibernate.cfg.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在spring的配置文件中直接添加以下配置语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hibernateProperties\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果用到映射文件</p>\n<p>可以这样写</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappingResources\"</span>&gt;</span>     <span class=\"comment\">&lt;!-- 2 --&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>cn/nini/entity/User.hbm.xml<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>也可以这样写</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 映射文件 --&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappingLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:org/hhx/ssh/entities/*.hbm.xml\"</span>&gt;</span>\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果是用注解</p>\n<p>只要在sessionFactory中添加如下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"packagesToScan\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.nan.entities\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"Spring注解原理总结","date":"2017-05-08T00:35:40.000Z","_content":"\n\n\n<div align=\"center\">\n\nJava元注解释义\n\n</div>\n\n<!-- more-->\n\n转载自[ibyr](http://www.jianshu.com/p/5cb8b4c186be)\n\n## 之 Java元注解释义\n\n##### Question\n\n- 注解在Java中如何起作用？\n- Spring是如何识别注解？\n- 如何自定义注解为我所用？\n\n\n\n> - Spring注解：\n>   @Aotuwired @Required @Qualifier @Provider @Scope ...\n> - Spring MVC 注解：\n>   @Controller @Service @Repository @Component @RequestMapping @RequetBody @ResponseBody ...\n\n\n\n##### Extension\n\n##### Solution\n\nJava注解起源：JDK1.5\n常见Java注解 ：\n\n- @Override\n- @Deprecated\n- @SupressWarnings\n\n1. 从@Override说起，引出Java注解和元注解。\n\n@Override 源码如下：\n\n```\n/*If a method is annotated with this annotation type \n * compilers are required to generate an error message \n * unless at least one of the following conditions hold:\n *\n * The method does override or implement a method declared in a\n * supertype.\n * The method has a signature that is override-equivalent to that of\n * any public method declared in {@linkplain Object}.\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {    // @interface 修饰注解类\n}\n```\n\n注意@Override 源码中有3个要点：\n\n\n\n> - @interface：修饰注解类使用@interface，而不是interface。这就定义了一个注解 @Override。\n> - Java元注解：@Target, @Retention。Java元注解即：定义注解的注解（To annotate the annotation）。\n> - 元注解参数：ElementType.METHOD, RetentionPolicy.SOURCE\n\n\n\n2. @Retention源码（保留：保留，滞留之意。）\n\n   指明这个注解将保留多长时间，如果没有指定，那么默认的保留策略是 `RetentionPolicy.CLASS`\n\n   元注释类型只有直接用于注释，保留元注释才会起作用。如果元注释类型用作另一种注释类型中的成员类型，则没有效果。\n\n```Java\n/* Indicates how long annotations with the annotated type are to\n * be retained.  If no Retention annotation is present on\n * an annotation type declaration, the retention policy defaults to\n * {@code RetentionPolicy.CLASS}.\n *\n * A Retention meta-annotation has effect only if the\n * meta-annotated type is used directly for annotation.  It has no\n * effect if the meta-annotated type is used as a member type in\n * another annotation type.\n*/\n@Documented     // 表明 注解会被包含在Java API文档中。\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Retention {\n    /**\n     * Returns the retention policy.\n     * @return the retention policy.\n     */\n    RetentionPolicy value();\n}\n```\n\n```java\npublic enum RetentionPolicy {\n    /**\n     * Annotations are to be discarded by the compiler.\n     */\n    SOURCE,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     */\n    CLASS,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     *\n     * @see java.lang.reflect.AnnotatedElement\n     */\n    RUNTIME\n}\n```\n\n> RetentionPolicy.SOURCE：只保留在源码中，在编译的时候会丢失，如上面的Override\n>\n> RetentionPolicy.CLASS：注解将保留到 class 文件，但是在运行时将会丢失。\n>\n> RetentionPolicy.RUNTIME：注解将一直保留到运行时期。**可以被反射读取**。如 @Retention 元注解本身。\n\n**引申1：如果定义一个注解需要被反射读取，则在定义这个注解的时候将添加@Retention(RetentionPolicy.RUNTIME) 元注解。**\n\n\n\n\n\n3. @Target 元注解，**定义了注解应该起作用的地方**\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)   // 保留到运行时\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Target {\n    /**\n     * Returns an array of the kinds of elements an annotation type\n     * can be applied to.\n     * @return an array of the kinds of elements an annotation type\n     * can be applied to.\n     */\n    ElementType[] value();\n}\n```\n\n注解作用位置：\n\n```java\npublic enum ElementType {\n    TYPE,                             // 类，接口（包括注解），enum;\n    FIELD,                            // 属性域\n    METHOD,                           // 方法\n    PARAMETER,                        // 参数\n    CONSTRUCTOR,                      // 构造函数\n    LOCAL_VARIABLE,                   // 局部变量\n    ANNOTATION_TYPE,                  // 注解类型\n    PACKAGE,                          // 包\n\n    /**\n     * Type parameter declaration\n     * @since 1.8\n     */\n    TYPE_PARAMETER,                   // 表明可以标注 类型参数\n\n    /**\n     * Use of a type\n     * @since 1.8\n     */\n    TYPE_USE                          // 可以注解 任何类型名称\n}\n```\n\n**引申2：如果想要自定义一个注解，就必须指定注解作用的位置。作用在 类，方法，属性域，构造函数等。**\n\n\n\n\n\n*举例 SpringMVC 中的 @RequestMapping。*\n其源码定义如下：\n\n```java\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Mapping\npublic @interface RequestMapping {\n    // skip its class code.\n}\n```\n\n> @RequestMapping 的@Target元注解 表明它可以被使用在方法和类（或接口，注解，enum）上。@RequestMapping 的@Retention元注解表明它可以保留到运行时(RUNTIME)，被反射读取。\n\n\n\n**引申3：如果想要自定义注解，除了添加@interface 修饰类名，必须满足上述引申1和引申2。 **\n\n那么如何自定义注解？\n\n请参考：","source":"_drafts/Spring/2017-05-08-Spring注解原理总结（一）.md","raw":"---\ntitle: Spring注解原理总结\ndate: 2017-05-08 08:35:40\ntags: Spring 注解\n---\n\n\n\n<div align=\"center\">\n\nJava元注解释义\n\n</div>\n\n<!-- more-->\n\n转载自[ibyr](http://www.jianshu.com/p/5cb8b4c186be)\n\n## 之 Java元注解释义\n\n##### Question\n\n- 注解在Java中如何起作用？\n- Spring是如何识别注解？\n- 如何自定义注解为我所用？\n\n\n\n> - Spring注解：\n>   @Aotuwired @Required @Qualifier @Provider @Scope ...\n> - Spring MVC 注解：\n>   @Controller @Service @Repository @Component @RequestMapping @RequetBody @ResponseBody ...\n\n\n\n##### Extension\n\n##### Solution\n\nJava注解起源：JDK1.5\n常见Java注解 ：\n\n- @Override\n- @Deprecated\n- @SupressWarnings\n\n1. 从@Override说起，引出Java注解和元注解。\n\n@Override 源码如下：\n\n```\n/*If a method is annotated with this annotation type \n * compilers are required to generate an error message \n * unless at least one of the following conditions hold:\n *\n * The method does override or implement a method declared in a\n * supertype.\n * The method has a signature that is override-equivalent to that of\n * any public method declared in {@linkplain Object}.\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {    // @interface 修饰注解类\n}\n```\n\n注意@Override 源码中有3个要点：\n\n\n\n> - @interface：修饰注解类使用@interface，而不是interface。这就定义了一个注解 @Override。\n> - Java元注解：@Target, @Retention。Java元注解即：定义注解的注解（To annotate the annotation）。\n> - 元注解参数：ElementType.METHOD, RetentionPolicy.SOURCE\n\n\n\n2. @Retention源码（保留：保留，滞留之意。）\n\n   指明这个注解将保留多长时间，如果没有指定，那么默认的保留策略是 `RetentionPolicy.CLASS`\n\n   元注释类型只有直接用于注释，保留元注释才会起作用。如果元注释类型用作另一种注释类型中的成员类型，则没有效果。\n\n```Java\n/* Indicates how long annotations with the annotated type are to\n * be retained.  If no Retention annotation is present on\n * an annotation type declaration, the retention policy defaults to\n * {@code RetentionPolicy.CLASS}.\n *\n * A Retention meta-annotation has effect only if the\n * meta-annotated type is used directly for annotation.  It has no\n * effect if the meta-annotated type is used as a member type in\n * another annotation type.\n*/\n@Documented     // 表明 注解会被包含在Java API文档中。\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Retention {\n    /**\n     * Returns the retention policy.\n     * @return the retention policy.\n     */\n    RetentionPolicy value();\n}\n```\n\n```java\npublic enum RetentionPolicy {\n    /**\n     * Annotations are to be discarded by the compiler.\n     */\n    SOURCE,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     */\n    CLASS,\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     *\n     * @see java.lang.reflect.AnnotatedElement\n     */\n    RUNTIME\n}\n```\n\n> RetentionPolicy.SOURCE：只保留在源码中，在编译的时候会丢失，如上面的Override\n>\n> RetentionPolicy.CLASS：注解将保留到 class 文件，但是在运行时将会丢失。\n>\n> RetentionPolicy.RUNTIME：注解将一直保留到运行时期。**可以被反射读取**。如 @Retention 元注解本身。\n\n**引申1：如果定义一个注解需要被反射读取，则在定义这个注解的时候将添加@Retention(RetentionPolicy.RUNTIME) 元注解。**\n\n\n\n\n\n3. @Target 元注解，**定义了注解应该起作用的地方**\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)   // 保留到运行时\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Target {\n    /**\n     * Returns an array of the kinds of elements an annotation type\n     * can be applied to.\n     * @return an array of the kinds of elements an annotation type\n     * can be applied to.\n     */\n    ElementType[] value();\n}\n```\n\n注解作用位置：\n\n```java\npublic enum ElementType {\n    TYPE,                             // 类，接口（包括注解），enum;\n    FIELD,                            // 属性域\n    METHOD,                           // 方法\n    PARAMETER,                        // 参数\n    CONSTRUCTOR,                      // 构造函数\n    LOCAL_VARIABLE,                   // 局部变量\n    ANNOTATION_TYPE,                  // 注解类型\n    PACKAGE,                          // 包\n\n    /**\n     * Type parameter declaration\n     * @since 1.8\n     */\n    TYPE_PARAMETER,                   // 表明可以标注 类型参数\n\n    /**\n     * Use of a type\n     * @since 1.8\n     */\n    TYPE_USE                          // 可以注解 任何类型名称\n}\n```\n\n**引申2：如果想要自定义一个注解，就必须指定注解作用的位置。作用在 类，方法，属性域，构造函数等。**\n\n\n\n\n\n*举例 SpringMVC 中的 @RequestMapping。*\n其源码定义如下：\n\n```java\n@Target({ElementType.METHOD, ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Mapping\npublic @interface RequestMapping {\n    // skip its class code.\n}\n```\n\n> @RequestMapping 的@Target元注解 表明它可以被使用在方法和类（或接口，注解，enum）上。@RequestMapping 的@Retention元注解表明它可以保留到运行时(RUNTIME)，被反射读取。\n\n\n\n**引申3：如果想要自定义注解，除了添加@interface 修饰类名，必须满足上述引申1和引申2。 **\n\n那么如何自定义注解？\n\n请参考：","slug":"Spring-2017-05-08-Spring注解原理总结（一）","published":0,"updated":"2017-05-08T22:43:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nds0013p5ukgw4pczlf","content":"<div align=\"center\"><br><br>Java元注解释义<br><br></div>\n\n<a id=\"more\"></a>\n<p>转载自<a href=\"http://www.jianshu.com/p/5cb8b4c186be\" target=\"_blank\" rel=\"external\">ibyr</a></p>\n<h2 id=\"之-Java元注解释义\"><a href=\"#之-Java元注解释义\" class=\"headerlink\" title=\"之 Java元注解释义\"></a>之 Java元注解释义</h2><h5 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h5><ul>\n<li>注解在Java中如何起作用？</li>\n<li>Spring是如何识别注解？</li>\n<li>如何自定义注解为我所用？</li>\n</ul>\n<blockquote>\n<ul>\n<li>Spring注解：<br>@Aotuwired @Required @Qualifier @Provider @Scope …</li>\n<li>Spring MVC 注解：<br>@Controller @Service @Repository @Component @RequestMapping @RequetBody @ResponseBody …</li>\n</ul>\n</blockquote>\n<h5 id=\"Extension\"><a href=\"#Extension\" class=\"headerlink\" title=\"Extension\"></a>Extension</h5><h5 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h5><p>Java注解起源：JDK1.5<br>常见Java注解 ：</p>\n<ul>\n<li>@Override</li>\n<li>@Deprecated</li>\n<li>@SupressWarnings</li>\n</ul>\n<ol>\n<li>从@Override说起，引出Java注解和元注解。</li>\n</ol>\n<p>@Override 源码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*If a method is annotated with this annotation type </div><div class=\"line\"> * compilers are required to generate an error message </div><div class=\"line\"> * unless at least one of the following conditions hold:</div><div class=\"line\"> *</div><div class=\"line\"> * The method does override or implement a method declared in a</div><div class=\"line\"> * supertype.</div><div class=\"line\"> * The method has a signature that is override-equivalent to that of</div><div class=\"line\"> * any public method declared in &#123;@linkplain Object&#125;.</div><div class=\"line\"> */</div><div class=\"line\">@Target(ElementType.METHOD)</div><div class=\"line\">@Retention(RetentionPolicy.SOURCE)</div><div class=\"line\">public @interface Override &#123;    // @interface 修饰注解类</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意@Override 源码中有3个要点：</p>\n<blockquote>\n<ul>\n<li>@interface：修饰注解类使用@interface，而不是interface。这就定义了一个注解 @Override。</li>\n<li>Java元注解：@Target, @Retention。Java元注解即：定义注解的注解（To annotate the annotation）。</li>\n<li>元注解参数：ElementType.METHOD, RetentionPolicy.SOURCE</li>\n</ul>\n</blockquote>\n<ol>\n<li><p>@Retention源码（保留：保留，滞留之意。）</p>\n<p>指明这个注解将保留多长时间，如果没有指定，那么默认的保留策略是 <code>RetentionPolicy.CLASS</code></p>\n<p>元注释类型只有直接用于注释，保留元注释才会起作用。如果元注释类型用作另一种注释类型中的成员类型，则没有效果。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Indicates how long annotations with the annotated type are to</span></div><div class=\"line\"> * be retained.  If no Retention annotation is present on</div><div class=\"line\"> * an annotation type declaration, the retention policy defaults to</div><div class=\"line\"> * &#123;@code RetentionPolicy.CLASS&#125;.</div><div class=\"line\"> *</div><div class=\"line\"> * A Retention meta-annotation has effect only if the</div><div class=\"line\"> * meta-annotated type is used directly for annotation.  It has no</div><div class=\"line\"> * effect if the meta-annotated type is used as a member type in</div><div class=\"line\"> * another annotation type.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"meta\">@Documented</span>     <span class=\"comment\">// 表明 注解会被包含在Java API文档中。</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Retention &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Returns the retention policy.</div><div class=\"line\">     * <span class=\"doctag\">@return</span> the retention policy.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\">RetentionPolicy <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RetentionPolicy &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Annotations are to be discarded by the compiler.</div><div class=\"line\">     */</div><div class=\"line\">    SOURCE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Annotations are to be recorded in the class file by the compiler</div><div class=\"line\">     * but need not be retained by the VM at run time.  This is the default</div><div class=\"line\">     * behavior.</div><div class=\"line\">     */</div><div class=\"line\">    CLASS,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Annotations are to be recorded in the class file by the compiler and</div><div class=\"line\">     * retained by the VM at run time, so they may be read reflectively.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@see</span> java.lang.reflect.AnnotatedElement</div><div class=\"line\">     */</div><div class=\"line\">    RUNTIME</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>RetentionPolicy.SOURCE：只保留在源码中，在编译的时候会丢失，如上面的Override</p>\n<p>RetentionPolicy.CLASS：注解将保留到 class 文件，但是在运行时将会丢失。</p>\n<p>RetentionPolicy.RUNTIME：注解将一直保留到运行时期。<strong>可以被反射读取</strong>。如 @Retention 元注解本身。</p>\n</blockquote>\n<p><strong>引申1：如果定义一个注解需要被反射读取，则在定义这个注解的时候将添加@Retention(RetentionPolicy.RUNTIME) 元注解。</strong></p>\n<ol>\n<li>@Target 元注解，<strong>定义了注解应该起作用的地方</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)   <span class=\"comment\">// 保留到运行时</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Target &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Returns an array of the kinds of elements an annotation type</div><div class=\"line\">     * can be applied to.</div><div class=\"line\">     * <span class=\"doctag\">@return</span> an array of the kinds of elements an annotation type</div><div class=\"line\">     * can be applied to.</div><div class=\"line\">     */</div><div class=\"line\">    ElementType[] value();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注解作用位置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ElementType &#123;</div><div class=\"line\">    TYPE,                             <span class=\"comment\">// 类，接口（包括注解），enum;</span></div><div class=\"line\">    FIELD,                            <span class=\"comment\">// 属性域</span></div><div class=\"line\">    METHOD,                           <span class=\"comment\">// 方法</span></div><div class=\"line\">    PARAMETER,                        <span class=\"comment\">// 参数</span></div><div class=\"line\">    CONSTRUCTOR,                      <span class=\"comment\">// 构造函数</span></div><div class=\"line\">    LOCAL_VARIABLE,                   <span class=\"comment\">// 局部变量</span></div><div class=\"line\">    ANNOTATION_TYPE,                  <span class=\"comment\">// 注解类型</span></div><div class=\"line\">    PACKAGE,                          <span class=\"comment\">// 包</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Type parameter declaration</div><div class=\"line\">     * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\">     */</div><div class=\"line\">    TYPE_PARAMETER,                   <span class=\"comment\">// 表明可以标注 类型参数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Use of a type</div><div class=\"line\">     * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\">     */</div><div class=\"line\">    TYPE_USE                          <span class=\"comment\">// 可以注解 任何类型名称</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>引申2：如果想要自定义一个注解，就必须指定注解作用的位置。作用在 类，方法，属性域，构造函数等。</strong></p>\n<p><em>举例 SpringMVC 中的 @RequestMapping。</em><br>其源码定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Mapping</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RequestMapping &#123;</div><div class=\"line\">    <span class=\"comment\">// skip its class code.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>@RequestMapping 的@Target元注解 表明它可以被使用在方法和类（或接口，注解，enum）上。@RequestMapping 的@Retention元注解表明它可以保留到运行时(RUNTIME)，被反射读取。</p>\n</blockquote>\n<p><strong>引申3：如果想要自定义注解，除了添加@interface 修饰类名，必须满足上述引申1和引申2。 </strong></p>\n<p>那么如何自定义注解？</p>\n<p>请参考：</p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br><br>Java元注解释义<br><br></div>","more":"<p>转载自<a href=\"http://www.jianshu.com/p/5cb8b4c186be\" target=\"_blank\" rel=\"external\">ibyr</a></p>\n<h2 id=\"之-Java元注解释义\"><a href=\"#之-Java元注解释义\" class=\"headerlink\" title=\"之 Java元注解释义\"></a>之 Java元注解释义</h2><h5 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h5><ul>\n<li>注解在Java中如何起作用？</li>\n<li>Spring是如何识别注解？</li>\n<li>如何自定义注解为我所用？</li>\n</ul>\n<blockquote>\n<ul>\n<li>Spring注解：<br>@Aotuwired @Required @Qualifier @Provider @Scope …</li>\n<li>Spring MVC 注解：<br>@Controller @Service @Repository @Component @RequestMapping @RequetBody @ResponseBody …</li>\n</ul>\n</blockquote>\n<h5 id=\"Extension\"><a href=\"#Extension\" class=\"headerlink\" title=\"Extension\"></a>Extension</h5><h5 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h5><p>Java注解起源：JDK1.5<br>常见Java注解 ：</p>\n<ul>\n<li>@Override</li>\n<li>@Deprecated</li>\n<li>@SupressWarnings</li>\n</ul>\n<ol>\n<li>从@Override说起，引出Java注解和元注解。</li>\n</ol>\n<p>@Override 源码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*If a method is annotated with this annotation type </div><div class=\"line\"> * compilers are required to generate an error message </div><div class=\"line\"> * unless at least one of the following conditions hold:</div><div class=\"line\"> *</div><div class=\"line\"> * The method does override or implement a method declared in a</div><div class=\"line\"> * supertype.</div><div class=\"line\"> * The method has a signature that is override-equivalent to that of</div><div class=\"line\"> * any public method declared in &#123;@linkplain Object&#125;.</div><div class=\"line\"> */</div><div class=\"line\">@Target(ElementType.METHOD)</div><div class=\"line\">@Retention(RetentionPolicy.SOURCE)</div><div class=\"line\">public @interface Override &#123;    // @interface 修饰注解类</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意@Override 源码中有3个要点：</p>\n<blockquote>\n<ul>\n<li>@interface：修饰注解类使用@interface，而不是interface。这就定义了一个注解 @Override。</li>\n<li>Java元注解：@Target, @Retention。Java元注解即：定义注解的注解（To annotate the annotation）。</li>\n<li>元注解参数：ElementType.METHOD, RetentionPolicy.SOURCE</li>\n</ul>\n</blockquote>\n<ol>\n<li><p>@Retention源码（保留：保留，滞留之意。）</p>\n<p>指明这个注解将保留多长时间，如果没有指定，那么默认的保留策略是 <code>RetentionPolicy.CLASS</code></p>\n<p>元注释类型只有直接用于注释，保留元注释才会起作用。如果元注释类型用作另一种注释类型中的成员类型，则没有效果。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* Indicates how long annotations with the annotated type are to</span></div><div class=\"line\"> * be retained.  If no Retention annotation is present on</div><div class=\"line\"> * an annotation type declaration, the retention policy defaults to</div><div class=\"line\"> * &#123;@code RetentionPolicy.CLASS&#125;.</div><div class=\"line\"> *</div><div class=\"line\"> * A Retention meta-annotation has effect only if the</div><div class=\"line\"> * meta-annotated type is used directly for annotation.  It has no</div><div class=\"line\"> * effect if the meta-annotated type is used as a member type in</div><div class=\"line\"> * another annotation type.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"meta\">@Documented</span>     <span class=\"comment\">// 表明 注解会被包含在Java API文档中。</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Retention &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Returns the retention policy.</div><div class=\"line\">     * <span class=\"doctag\">@return</span> the retention policy.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\">RetentionPolicy <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RetentionPolicy &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Annotations are to be discarded by the compiler.</div><div class=\"line\">     */</div><div class=\"line\">    SOURCE,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Annotations are to be recorded in the class file by the compiler</div><div class=\"line\">     * but need not be retained by the VM at run time.  This is the default</div><div class=\"line\">     * behavior.</div><div class=\"line\">     */</div><div class=\"line\">    CLASS,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Annotations are to be recorded in the class file by the compiler and</div><div class=\"line\">     * retained by the VM at run time, so they may be read reflectively.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@see</span> java.lang.reflect.AnnotatedElement</div><div class=\"line\">     */</div><div class=\"line\">    RUNTIME</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>RetentionPolicy.SOURCE：只保留在源码中，在编译的时候会丢失，如上面的Override</p>\n<p>RetentionPolicy.CLASS：注解将保留到 class 文件，但是在运行时将会丢失。</p>\n<p>RetentionPolicy.RUNTIME：注解将一直保留到运行时期。<strong>可以被反射读取</strong>。如 @Retention 元注解本身。</p>\n</blockquote>\n<p><strong>引申1：如果定义一个注解需要被反射读取，则在定义这个注解的时候将添加@Retention(RetentionPolicy.RUNTIME) 元注解。</strong></p>\n<ol>\n<li>@Target 元注解，<strong>定义了注解应该起作用的地方</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)   <span class=\"comment\">// 保留到运行时</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.ANNOTATION_TYPE)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Target &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Returns an array of the kinds of elements an annotation type</div><div class=\"line\">     * can be applied to.</div><div class=\"line\">     * <span class=\"doctag\">@return</span> an array of the kinds of elements an annotation type</div><div class=\"line\">     * can be applied to.</div><div class=\"line\">     */</div><div class=\"line\">    ElementType[] value();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注解作用位置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ElementType &#123;</div><div class=\"line\">    TYPE,                             <span class=\"comment\">// 类，接口（包括注解），enum;</span></div><div class=\"line\">    FIELD,                            <span class=\"comment\">// 属性域</span></div><div class=\"line\">    METHOD,                           <span class=\"comment\">// 方法</span></div><div class=\"line\">    PARAMETER,                        <span class=\"comment\">// 参数</span></div><div class=\"line\">    CONSTRUCTOR,                      <span class=\"comment\">// 构造函数</span></div><div class=\"line\">    LOCAL_VARIABLE,                   <span class=\"comment\">// 局部变量</span></div><div class=\"line\">    ANNOTATION_TYPE,                  <span class=\"comment\">// 注解类型</span></div><div class=\"line\">    PACKAGE,                          <span class=\"comment\">// 包</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Type parameter declaration</div><div class=\"line\">     * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\">     */</div><div class=\"line\">    TYPE_PARAMETER,                   <span class=\"comment\">// 表明可以标注 类型参数</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Use of a type</div><div class=\"line\">     * <span class=\"doctag\">@since</span> 1.8</div><div class=\"line\">     */</div><div class=\"line\">    TYPE_USE                          <span class=\"comment\">// 可以注解 任何类型名称</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>引申2：如果想要自定义一个注解，就必须指定注解作用的位置。作用在 类，方法，属性域，构造函数等。</strong></p>\n<p><em>举例 SpringMVC 中的 @RequestMapping。</em><br>其源码定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Mapping</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> RequestMapping &#123;</div><div class=\"line\">    <span class=\"comment\">// skip its class code.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>@RequestMapping 的@Target元注解 表明它可以被使用在方法和类（或接口，注解，enum）上。@RequestMapping 的@Retention元注解表明它可以保留到运行时(RUNTIME)，被反射读取。</p>\n</blockquote>\n<p><strong>引申3：如果想要自定义注解，除了添加@interface 修饰类名，必须满足上述引申1和引申2。 </strong></p>\n<p>那么如何自定义注解？</p>\n<p>请参考：</p>"},{"title":"老司机的踩坑提醒","updated":"2017-05-08T22:38:43.000Z","date":"2017-05-04T12:46:25.000Z","_content":"\n<div align=\"center\">\n 错误和问题？在所难免，来和我一起看看吧！\n</div>\n\n<!-- more -->\n\n## 第一篇 ##\n\n#### 1. \n\ntomcat报\n\n\tPort already in use: xxxx\n\n问题原因：当前有程序占用xxxx端口，需要将它结束进程。\n​\t\n\tlsof -i:8087  \n用以显示符合条件的进程情况\n\n\tkill *pid*\t\n\n\n#### 2. \n\n在执行`hexo -s`时，如果\n\n```\nERROR Plugin load failed: hexo-renderer-sass\n```\n\n>  npm rebuild node-sass --force\n\n使用上面这句可以解决问题。\n\n\n\n如果\n\n```\n Error: Cannot find module './build/Release/DTraceProviderBindings'\n```\n\n>   npm install hexo --no-optional \n\n\n\n\n\n如果\n\n```shell\nFATAL Cannot read property 'replace' of null hexo\n```\n\n原因： 删除了站点配置文件中的 url后面的地址。\n\n\n\n#### 4.\n\n如果出现\n\n\twarning: LF will be replaced by CRLF in 2017/04/28/firstBlog/index.html.\n\tThe file will have its original line endings in your working directory.\n原因分析：\n\nCRLF -- Carriage-Return Line-Feed 回车换行，回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)\n\n\tgit config --gobal core.autocrlf false  \n\n就可以解决这个问题了\n\n\n\n#### 5.\n\n如果更新了css文件，那么需要把public的css文件删除，然后\n\n```\n$ hexo deploy --generate\n```\n\n\n\n\n\n#### 6. \n\n```\nERROR Deployer not found: git\n```\n\n试试\n\n```Shell\n$ npm install hexo-deployer-git --save\n$ npm install hexo --save\n```\n\n\n\n\n\n#### 7. Spring\n\n> BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext\n\n\n\n原因是\n\n```\n ApplicationContext context = new ClassPathXmlApplicationContext();\n```\n\n没有指定路径。\n\n#### 8. spring \n\n ```Java\nWrite operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.\n ```\n\n\n\n\n\n```xml\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <tx:method name=\"save*\" read-only=\"false\" propagation=\"REQUIRED\"\n                       rollback-for=\"Exception\"/>\n        </tx:attributes>\n    </tx:advice>\n    <aop:config>\n        <aop:pointcut id=\"pointcut1\" expression=\"execution(* me.nini.*.*.*(..))\"/>\n        <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut1\"/>\n    </aop:config>\n\n```\n\n\n\n\n\n#### 9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略\n\n```java\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n```\n\n\n\n#### 10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\n\n在注入bean的时候，类中的bean的字段名可以和xml文件中配置的bean的id不一致。不然就会报\n\n\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n​\t\t\n那么如何解决呢？\n\n只要在具有相同父类型的组件前加上 @Component(\"标识符\")\n\n\n​\t\t\t\n\n> 注意 1 ： 在组件类前加上 @Component(\" 标识符 \") 的作用与在配置文件中配置是一样的。\n\n\n\n> 注意 2 ： 如果不指定 @Qualifier(\" 标识符 \") 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(\" 标识符 \")  的标识符相同。\n>\n> 不然会出错     \n\n\n```Java\n Injection of autowired dependencies failed\n\n Could not autowire field\n```\n\n\n> 注意 3 ： 如果@Component(\" 标识符 \")，重复定义了，那么会出现以下异常\n\n```Java\njava.lang.IllegalStateException: Failed to load ApplicationContext\n\nCaused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]\n\n```\n\n> 注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n\n","source":"_drafts/Spring In Action/老司机的踩坑提醒.md","raw":"---\ntitle: 老司机的踩坑提醒\ntags: 技术\nupdated : 2017年5月5日 19:46:16\ndate : 2017/5/4 20:46:25\ncategories:\n- 技术\n---\n\n<div align=\"center\">\n 错误和问题？在所难免，来和我一起看看吧！\n</div>\n\n<!-- more -->\n\n## 第一篇 ##\n\n#### 1. \n\ntomcat报\n\n\tPort already in use: xxxx\n\n问题原因：当前有程序占用xxxx端口，需要将它结束进程。\n​\t\n\tlsof -i:8087  \n用以显示符合条件的进程情况\n\n\tkill *pid*\t\n\n\n#### 2. \n\n在执行`hexo -s`时，如果\n\n```\nERROR Plugin load failed: hexo-renderer-sass\n```\n\n>  npm rebuild node-sass --force\n\n使用上面这句可以解决问题。\n\n\n\n如果\n\n```\n Error: Cannot find module './build/Release/DTraceProviderBindings'\n```\n\n>   npm install hexo --no-optional \n\n\n\n\n\n如果\n\n```shell\nFATAL Cannot read property 'replace' of null hexo\n```\n\n原因： 删除了站点配置文件中的 url后面的地址。\n\n\n\n#### 4.\n\n如果出现\n\n\twarning: LF will be replaced by CRLF in 2017/04/28/firstBlog/index.html.\n\tThe file will have its original line endings in your working directory.\n原因分析：\n\nCRLF -- Carriage-Return Line-Feed 回车换行，回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)\n\n\tgit config --gobal core.autocrlf false  \n\n就可以解决这个问题了\n\n\n\n#### 5.\n\n如果更新了css文件，那么需要把public的css文件删除，然后\n\n```\n$ hexo deploy --generate\n```\n\n\n\n\n\n#### 6. \n\n```\nERROR Deployer not found: git\n```\n\n试试\n\n```Shell\n$ npm install hexo-deployer-git --save\n$ npm install hexo --save\n```\n\n\n\n\n\n#### 7. Spring\n\n> BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext\n\n\n\n原因是\n\n```\n ApplicationContext context = new ClassPathXmlApplicationContext();\n```\n\n没有指定路径。\n\n#### 8. spring \n\n ```Java\nWrite operations are not allowed in read-only mode (FlushMode.MANUAL): Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.\n ```\n\n\n\n\n\n```xml\n<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <tx:method name=\"save*\" read-only=\"false\" propagation=\"REQUIRED\"\n                       rollback-for=\"Exception\"/>\n        </tx:attributes>\n    </tx:advice>\n    <aop:config>\n        <aop:pointcut id=\"pointcut1\" expression=\"execution(* me.nini.*.*.*(..))\"/>\n        <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"pointcut1\"/>\n    </aop:config>\n\n```\n\n\n\n\n\n#### 9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略\n\n```java\n    @Id\n    @GeneratedValue(strategy= GenerationType.IDENTITY)\n```\n\n\n\n#### 10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\n\n在注入bean的时候，类中的bean的字段名可以和xml文件中配置的bean的id不一致。不然就会报\n\n\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n​\t\t\n那么如何解决呢？\n\n只要在具有相同父类型的组件前加上 @Component(\"标识符\")\n\n\n​\t\t\t\n\n> 注意 1 ： 在组件类前加上 @Component(\" 标识符 \") 的作用与在配置文件中配置是一样的。\n\n\n\n> 注意 2 ： 如果不指定 @Qualifier(\" 标识符 \") 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(\" 标识符 \")  的标识符相同。\n>\n> 不然会出错     \n\n\n```Java\n Injection of autowired dependencies failed\n\n Could not autowire field\n```\n\n\n> 注意 3 ： 如果@Component(\" 标识符 \")，重复定义了，那么会出现以下异常\n\n```Java\njava.lang.IllegalStateException: Failed to load ApplicationContext\n\nCaused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]\n\n```\n\n> 注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误\n\n```\nNoUniqueBeanDefinitionException\nNo qualifying bean of type [me.nini.dao.BaseDao] is defined\nexpected single matching bean but found 2\n```\n\n\n\n","slug":"Spring-In-Action-老司机的踩坑提醒","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndt0016p5uks0wjyuaa","content":"<div align=\"center\"><br> 错误和问题？在所难免，来和我一起看看吧！<br></div>\n\n<a id=\"more\"></a>\n<h2 id=\"第一篇\"><a href=\"#第一篇\" class=\"headerlink\" title=\"第一篇\"></a>第一篇</h2><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><p>tomcat报</p>\n<pre><code>Port already in use: xxxx\n</code></pre><p>问题原因：当前有程序占用xxxx端口，需要将它结束进程。<br>​<br>    lsof -i:8087<br>用以显示符合条件的进程情况</p>\n<pre><code>kill *pid*    \n</code></pre><h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><p>在执行<code>hexo -s</code>时，如果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Plugin load failed: hexo-renderer-sass</div></pre></td></tr></table></figure>\n<blockquote>\n<p> npm rebuild node-sass –force</p>\n</blockquote>\n<p>使用上面这句可以解决问题。</p>\n<p>如果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>  npm install hexo –no-optional </p>\n</blockquote>\n<p>如果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">FATAL Cannot read property 'replace' of null hexo</div></pre></td></tr></table></figure>\n<p>原因： 删除了站点配置文件中的 url后面的地址。</p>\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h4><p>如果出现</p>\n<pre><code>warning: LF will be replaced by CRLF in 2017/04/28/firstBlog/index.html.\nThe file will have its original line endings in your working directory.\n</code></pre><p>原因分析：</p>\n<p>CRLF – Carriage-Return Line-Feed 回车换行，回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)</p>\n<pre><code>git config --gobal core.autocrlf false  \n</code></pre><p>就可以解决这个问题了</p>\n<h4 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h4><p>如果更新了css文件，那么需要把public的css文件删除，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy --generate</div></pre></td></tr></table></figure>\n<h4 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a>6.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Deployer not found: git</div></pre></td></tr></table></figure>\n<p>试试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</div><div class=\"line\"><span class=\"meta\">$</span> npm install hexo --save</div></pre></td></tr></table></figure>\n<h4 id=\"7-Spring\"><a href=\"#7-Spring\" class=\"headerlink\" title=\"7. Spring\"></a>7. Spring</h4><blockquote>\n<p>BeanFactory not initialized or already closed - call ‘refresh’ before accessing beans via the ApplicationContext</p>\n</blockquote>\n<p>原因是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ApplicationContext context = new ClassPathXmlApplicationContext();</div></pre></td></tr></table></figure>\n<p>没有指定路径。</p>\n<h4 id=\"8-spring\"><a href=\"#8-spring\" class=\"headerlink\" title=\"8. spring\"></a>8. spring</h4> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Write operations are not allowed in read-<span class=\"function\">only <span class=\"title\">mode</span> <span class=\"params\">(FlushMode.MANUAL)</span>: Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span></span></div><div class=\"line\">                       <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pointcut1\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* me.nini.*.*.*(..))\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointcut1\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略\"><a href=\"#9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略\" class=\"headerlink\" title=\"9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略\"></a>9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Id</span></div><div class=\"line\"><span class=\"meta\">@GeneratedValue</span>(strategy= GenerationType.IDENTITY)</div></pre></td></tr></table></figure>\n<h4 id=\"10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\"><a href=\"#10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\" class=\"headerlink\" title=\"10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\"></a>10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误</h4><p>在注入bean的时候，类中的bean的字段名可以和xml文件中配置的bean的id不一致。不然就会报</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>\n<p>​<br>那么如何解决呢？</p>\n<p>只要在具有相同父类型的组件前加上 @Component(“标识符”)</p>\n<p>​            </p>\n<blockquote>\n<p>注意 1 ： 在组件类前加上 @Component(“ 标识符 “) 的作用与在配置文件中配置是一样的。</p>\n<p>注意 2 ： 如果不指定 @Qualifier(“ 标识符 “) 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(“ 标识符 “)  的标识符相同。</p>\n<p>不然会出错     </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Injection of autowired dependencies failed</div><div class=\"line\"></div><div class=\"line\">Could not autowire field</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 3 ： 如果@Component(“ 标识符 “)，重复定义了，那么会出现以下异常</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.IllegalStateException: Failed to load ApplicationContext</div><div class=\"line\"></div><div class=\"line\">Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br> 错误和问题？在所难免，来和我一起看看吧！<br></div>","more":"<h2 id=\"第一篇\"><a href=\"#第一篇\" class=\"headerlink\" title=\"第一篇\"></a>第一篇</h2><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><p>tomcat报</p>\n<pre><code>Port already in use: xxxx\n</code></pre><p>问题原因：当前有程序占用xxxx端口，需要将它结束进程。<br>​<br>    lsof -i:8087<br>用以显示符合条件的进程情况</p>\n<pre><code>kill *pid*    \n</code></pre><h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><p>在执行<code>hexo -s</code>时，如果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Plugin load failed: hexo-renderer-sass</div></pre></td></tr></table></figure>\n<blockquote>\n<p> npm rebuild node-sass –force</p>\n</blockquote>\n<p>使用上面这句可以解决问题。</p>\n<p>如果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>  npm install hexo –no-optional </p>\n</blockquote>\n<p>如果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">FATAL Cannot read property 'replace' of null hexo</div></pre></td></tr></table></figure>\n<p>原因： 删除了站点配置文件中的 url后面的地址。</p>\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h4><p>如果出现</p>\n<pre><code>warning: LF will be replaced by CRLF in 2017/04/28/firstBlog/index.html.\nThe file will have its original line endings in your working directory.\n</code></pre><p>原因分析：</p>\n<p>CRLF – Carriage-Return Line-Feed 回车换行，回车(CR, ASCII 13, \\r) 换行(LF, ASCII 10, \\n)</p>\n<pre><code>git config --gobal core.autocrlf false  \n</code></pre><p>就可以解决这个问题了</p>\n<h4 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h4><p>如果更新了css文件，那么需要把public的css文件删除，然后</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy --generate</div></pre></td></tr></table></figure>\n<h4 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a>6.</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Deployer not found: git</div></pre></td></tr></table></figure>\n<p>试试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</div><div class=\"line\"><span class=\"meta\">$</span> npm install hexo --save</div></pre></td></tr></table></figure>\n<h4 id=\"7-Spring\"><a href=\"#7-Spring\" class=\"headerlink\" title=\"7. Spring\"></a>7. Spring</h4><blockquote>\n<p>BeanFactory not initialized or already closed - call ‘refresh’ before accessing beans via the ApplicationContext</p>\n</blockquote>\n<p>原因是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ApplicationContext context = new ClassPathXmlApplicationContext();</div></pre></td></tr></table></figure>\n<p>没有指定路径。</p>\n<h4 id=\"8-spring\"><a href=\"#8-spring\" class=\"headerlink\" title=\"8. spring\"></a>8. spring</h4> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Write operations are not allowed in read-<span class=\"function\">only <span class=\"title\">mode</span> <span class=\"params\">(FlushMode.MANUAL)</span>: Turn your Session into FlushMode.COMMIT/AUTO or remove 'readOnly' marker from transaction definition.</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span></span></div><div class=\"line\">                       <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"Exception\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pointcut1\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* me.nini.*.*.*(..))\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointcut1\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略\"><a href=\"#9-如果出现sequence这个表，原因是没有指定数据库主键的生成策略\" class=\"headerlink\" title=\"9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略\"></a>9. 如果出现sequence这个表，原因是没有指定数据库主键的生成策略</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Id</span></div><div class=\"line\"><span class=\"meta\">@GeneratedValue</span>(strategy= GenerationType.IDENTITY)</div></pre></td></tr></table></figure>\n<h4 id=\"10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\"><a href=\"#10-在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\" class=\"headerlink\" title=\"10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误\"></a>10. 在定义bean的时候，如果定义了多个bean继承或者实现同一个类或者接口，那么会报以下错误</h4><p>在注入bean的时候，类中的bean的字段名可以和xml文件中配置的bean的id不一致。不然就会报</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>\n<p>​<br>那么如何解决呢？</p>\n<p>只要在具有相同父类型的组件前加上 @Component(“标识符”)</p>\n<p>​            </p>\n<blockquote>\n<p>注意 1 ： 在组件类前加上 @Component(“ 标识符 “) 的作用与在配置文件中配置是一样的。</p>\n<p>注意 2 ： 如果不指定 @Qualifier(“ 标识符 “) 的话，那么在类中注入bean的时候字段的名称必须和配置文件中bean的id、或者组件类前 @Component(“ 标识符 “)  的标识符相同。</p>\n<p>不然会出错     </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Injection of autowired dependencies failed</div><div class=\"line\"></div><div class=\"line\">Could not autowire field</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 3 ： 如果@Component(“ 标识符 “)，重复定义了，那么会出现以下异常</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java.lang.IllegalStateException: Failed to load ApplicationContext</div><div class=\"line\"></div><div class=\"line\">Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'dao2' for bean class [me.nini.dao.UserDaoImpl3] conflicts with existing, non-compatible bean definition of same name and class [me.nini.dao.UserDaoImpl2]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意 4 ：即使组件类没有显式实现接口，但是注入的属性中可能实现的同一接口，这时如果只用 @AutoWired 的话也会报以下错误</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NoUniqueBeanDefinitionException</div><div class=\"line\">No qualifying bean of type [me.nini.dao.BaseDao] is defined</div><div class=\"line\">expected single matching bean but found 2</div></pre></td></tr></table></figure>"},{"title":"Spring注解原理总结","date":"2017-05-08T00:35:40.000Z","_content":"\n\n\n<div align=\"center\">\n\nSpring AOP\n\n</div>\n\n<!-- more-->\n\nDI 能让相互协作的软件组件保持松散耦合，而 AOP 允许你把遍布应用各处的功能分离出来形成可重用的组件。\n\nAOP 能够确保 POJO 的简单性。","source":"_drafts/Spring/浅谈Spring AOP.md","raw":"---\ntitle: Spring注解原理总结\ndate: 2017-05-08 08:35:40\ntags: Spring 注解\n---\n\n\n\n<div align=\"center\">\n\nSpring AOP\n\n</div>\n\n<!-- more-->\n\nDI 能让相互协作的软件组件保持松散耦合，而 AOP 允许你把遍布应用各处的功能分离出来形成可重用的组件。\n\nAOP 能够确保 POJO 的简单性。","slug":"Spring-浅谈Spring-AOP","published":0,"updated":"2017-05-24T07:58:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndu0018p5ukufizmb0h","content":"<div align=\"center\"><br><br>Spring AOP<br><br></div>\n\n<a id=\"more\"></a>\n<p>DI 能让相互协作的软件组件保持松散耦合，而 AOP 允许你把遍布应用各处的功能分离出来形成可重用的组件。</p>\n<p>AOP 能够确保 POJO 的简单性。</p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br><br>Spring AOP<br><br></div>","more":"<p>DI 能让相互协作的软件组件保持松散耦合，而 AOP 允许你把遍布应用各处的功能分离出来形成可重用的组件。</p>\n<p>AOP 能够确保 POJO 的简单性。</p>"},{"title":"maven","_content":"\n <div align=\"center\">\n Spring之控制反转和容器\n\n</div>\n\n<!-- more -->\n\n# 控制反转 IoC\n\nIoC (Inversion of Control, 控制反转)的设计原则，这一原则被许多容器用来解耦组件之间的依赖关系。Spring Framework提供了一个强大、可扩展的IoC容器来管理组件，这个容器就是Spring Framework的核心，同时也于Spring的其他模块紧密的集成在一起。\n\n\n\nIoc 是一个通用的设计原则，相比之下，DI（Dependency Injection，依赖注入）则是具体的设计模式，它体现了IoC 的设计原则。因为 DI 是 IoC 最典型的实现（但不是唯一的实现），所以属于 IoC 和 DI 经常混用。                                     \n\n\n\n\n\n![IoC例子](IoC例子.png)\n\n\n\n使用setter方式注入。\n\nCarService.java\n\n```java\npublic class CarService{\n  \n  private CarDao carDao;\n  \n  public void setCarDao(CarDao carDao){\n    this.carDao = carDao;\n  }\n  \n  public void runFast(){\n    ...\n  }\n  \n  public void runSlow(){\n    ...\n  }\n}\n```\n\n\n\n其中 Container的代码如下：\n\n```Java\npublic class Container{\n  \n  private Map<String,Object> components;\n  \n  public Container(){\n    Components = new HashMap<String,Object>();\n    \n    CarDao carDao = new TruckDao();\n    components.put(\"carDao\",carDao);\n    \n    CarService carService = new CarService();\n    carService.setCarDao(carDao);\n    components.put(\"carService\",carService);\n  }\n  public Object getComponents(String id){\n    return components.get(id);\n  }\n}\n```\n\n\n\n# spring中的Bean配置\n\n\n\n## 依赖注入的不同方式\n\n通过setter方法注入依赖并不是实现DI的唯一方法。有四种DI\n\n- setter注入\n- 构造器注入\n- 静态工厂注入\n- 实例工厂注入\n\n\n\n其中setter方式就是前面的例子中使用的方法。\n\n\n\n- 构造器注入方式\n\n```Java\npublic class CarService{\n  \n  private CarDao carDao;\n  \n  public CarService(){}\n  public CarService(CarDao carDao){\n    this.carDao = carDao;\n  }\n  ...\n}\n```\n\n```java\npublic class Container{\n  \n  private Map<String,Object> components;\n  \n  public Container(){\n    Components = new HashMap<String,Object>();\n    \n    CarDao carDao = new TruckDao();\n    components.put(\"carDao\",carDao);\n    \n    //使用构造器注入。\n    CarService carService = new CarService(carDao);\n    //carService.setCarDao(carDao);\n    components.put(\"carService\",carService);\n  }\n  public Object getComponents(String id){\n    return components.get(id);\n  }\n}\n```\n\n- 静态工厂注入方式\n\nBeanFactory.java\n```Java\npublic class BeanFactory{\n  \n  //静态的方法\n  public static Bean getBean(){\n    return new Bean();\n  }\n}\n```\n\nspring.xml\n\n```xml\n...\n<bean id=\"bean\" class=\"com.ninom.bean.BeanFactory\" factory-method=\"getBean\"/>\n...\n```\n\n\n\n- 实例工厂注入方式\n  BeanFactory.java\n```Java\npublic class BeanFactory{\n  \n  //普通的方法\n  public  Bean getBean(){\n    return new Bean();\n  }\n}\n```\n\nspring.xml\n\n```xml\n...\n<bean id=\"beanFactory\" class=\"com.ninom.bean.BeanFactory\" factory-method=\"getBean\"/>\n<bean id=\"bean\" factory-bean=\"beanFactory\" factory-method=\"getBean\"/>\n...\n```\n\n\n\n> bean标签的常用属性\n\n（1）id属性：起名称，id属性值名称任意命名，不能包含特殊符号,根据id值得到配置对象\n\n（2）class属性：创建对象所在类的全路径\n\n（3）name属性：功能和id属性一样的，id属性值不能包含特殊符号，但是在name属性值里面可以包含特殊符号\n\n（4）scope属性\n\n​\t\tsingleton：默认值，单例\n\n​\t\tprototype：多例\n\n## 实例化Spring Ioc容器\n\n### 问题描述\n\n只有在容器实例化之后，才可以从IoC容器中获取Bean实例并使用他们。\n\n### 解决方案\n\nSpring提供了两种类型的IoC容器实现，基础的实现是Bean Factory，高级的实现是 ApplicationContext，其中后者是对前者的兼容扩展，两者的配置文件都是相同的。\n\n\n\nApplication Context 兼容基础特性的同事还提供了很多高级的特性，建议为每个应用程序都使用 Application Context。\n\n\n\n### 实现方法\n\n1. 实例化Bean Factory\n\n   要实例化Bean Factory，首先必须将Bean配置文件加载到Resource对象中。\n\n   ```Java\n   Resource resource= new Resource(\"beans.xml\");\n   ```\n\n   ​","source":"_drafts/我的草稿/spring日常札记.md","raw":"---\ntitle: maven\ntags: maven\n\n---\n\n <div align=\"center\">\n Spring之控制反转和容器\n\n</div>\n\n<!-- more -->\n\n# 控制反转 IoC\n\nIoC (Inversion of Control, 控制反转)的设计原则，这一原则被许多容器用来解耦组件之间的依赖关系。Spring Framework提供了一个强大、可扩展的IoC容器来管理组件，这个容器就是Spring Framework的核心，同时也于Spring的其他模块紧密的集成在一起。\n\n\n\nIoc 是一个通用的设计原则，相比之下，DI（Dependency Injection，依赖注入）则是具体的设计模式，它体现了IoC 的设计原则。因为 DI 是 IoC 最典型的实现（但不是唯一的实现），所以属于 IoC 和 DI 经常混用。                                     \n\n\n\n\n\n![IoC例子](IoC例子.png)\n\n\n\n使用setter方式注入。\n\nCarService.java\n\n```java\npublic class CarService{\n  \n  private CarDao carDao;\n  \n  public void setCarDao(CarDao carDao){\n    this.carDao = carDao;\n  }\n  \n  public void runFast(){\n    ...\n  }\n  \n  public void runSlow(){\n    ...\n  }\n}\n```\n\n\n\n其中 Container的代码如下：\n\n```Java\npublic class Container{\n  \n  private Map<String,Object> components;\n  \n  public Container(){\n    Components = new HashMap<String,Object>();\n    \n    CarDao carDao = new TruckDao();\n    components.put(\"carDao\",carDao);\n    \n    CarService carService = new CarService();\n    carService.setCarDao(carDao);\n    components.put(\"carService\",carService);\n  }\n  public Object getComponents(String id){\n    return components.get(id);\n  }\n}\n```\n\n\n\n# spring中的Bean配置\n\n\n\n## 依赖注入的不同方式\n\n通过setter方法注入依赖并不是实现DI的唯一方法。有四种DI\n\n- setter注入\n- 构造器注入\n- 静态工厂注入\n- 实例工厂注入\n\n\n\n其中setter方式就是前面的例子中使用的方法。\n\n\n\n- 构造器注入方式\n\n```Java\npublic class CarService{\n  \n  private CarDao carDao;\n  \n  public CarService(){}\n  public CarService(CarDao carDao){\n    this.carDao = carDao;\n  }\n  ...\n}\n```\n\n```java\npublic class Container{\n  \n  private Map<String,Object> components;\n  \n  public Container(){\n    Components = new HashMap<String,Object>();\n    \n    CarDao carDao = new TruckDao();\n    components.put(\"carDao\",carDao);\n    \n    //使用构造器注入。\n    CarService carService = new CarService(carDao);\n    //carService.setCarDao(carDao);\n    components.put(\"carService\",carService);\n  }\n  public Object getComponents(String id){\n    return components.get(id);\n  }\n}\n```\n\n- 静态工厂注入方式\n\nBeanFactory.java\n```Java\npublic class BeanFactory{\n  \n  //静态的方法\n  public static Bean getBean(){\n    return new Bean();\n  }\n}\n```\n\nspring.xml\n\n```xml\n...\n<bean id=\"bean\" class=\"com.ninom.bean.BeanFactory\" factory-method=\"getBean\"/>\n...\n```\n\n\n\n- 实例工厂注入方式\n  BeanFactory.java\n```Java\npublic class BeanFactory{\n  \n  //普通的方法\n  public  Bean getBean(){\n    return new Bean();\n  }\n}\n```\n\nspring.xml\n\n```xml\n...\n<bean id=\"beanFactory\" class=\"com.ninom.bean.BeanFactory\" factory-method=\"getBean\"/>\n<bean id=\"bean\" factory-bean=\"beanFactory\" factory-method=\"getBean\"/>\n...\n```\n\n\n\n> bean标签的常用属性\n\n（1）id属性：起名称，id属性值名称任意命名，不能包含特殊符号,根据id值得到配置对象\n\n（2）class属性：创建对象所在类的全路径\n\n（3）name属性：功能和id属性一样的，id属性值不能包含特殊符号，但是在name属性值里面可以包含特殊符号\n\n（4）scope属性\n\n​\t\tsingleton：默认值，单例\n\n​\t\tprototype：多例\n\n## 实例化Spring Ioc容器\n\n### 问题描述\n\n只有在容器实例化之后，才可以从IoC容器中获取Bean实例并使用他们。\n\n### 解决方案\n\nSpring提供了两种类型的IoC容器实现，基础的实现是Bean Factory，高级的实现是 ApplicationContext，其中后者是对前者的兼容扩展，两者的配置文件都是相同的。\n\n\n\nApplication Context 兼容基础特性的同事还提供了很多高级的特性，建议为每个应用程序都使用 Application Context。\n\n\n\n### 实现方法\n\n1. 实例化Bean Factory\n\n   要实例化Bean Factory，首先必须将Bean配置文件加载到Resource对象中。\n\n   ```Java\n   Resource resource= new Resource(\"beans.xml\");\n   ```\n\n   ​","slug":"我的草稿-spring日常札记","published":0,"date":"2017-05-10T12:37:07.000Z","updated":"2017-05-15T07:31:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndw001bp5ukxdjtsz81","content":" <div align=\"center\"><br> Spring之控制反转和容器<br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"控制反转-IoC\"><a href=\"#控制反转-IoC\" class=\"headerlink\" title=\"控制反转 IoC\"></a>控制反转 IoC</h1><p>IoC (Inversion of Control, 控制反转)的设计原则，这一原则被许多容器用来解耦组件之间的依赖关系。Spring Framework提供了一个强大、可扩展的IoC容器来管理组件，这个容器就是Spring Framework的核心，同时也于Spring的其他模块紧密的集成在一起。</p>\n<p>Ioc 是一个通用的设计原则，相比之下，DI（Dependency Injection，依赖注入）则是具体的设计模式，它体现了IoC 的设计原则。因为 DI 是 IoC 最典型的实现（但不是唯一的实现），所以属于 IoC 和 DI 经常混用。                                     </p>\n<p><img src=\"/2017/05/10/我的草稿-spring日常札记/IoC例子.png\" alt=\"IoC例子\"></p>\n<p>使用setter方式注入。</p>\n<p>CarService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarService</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> CarDao carDao;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCarDao</span><span class=\"params\">(CarDao carDao)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.carDao = carDao;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runFast</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runSlow</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中 Container的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> Map&lt;String,Object&gt; components;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Container</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    Components = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    </div><div class=\"line\">    CarDao carDao = <span class=\"keyword\">new</span> TruckDao();</div><div class=\"line\">    components.put(<span class=\"string\">\"carDao\"</span>,carDao);</div><div class=\"line\">    </div><div class=\"line\">    CarService carService = <span class=\"keyword\">new</span> CarService();</div><div class=\"line\">    carService.setCarDao(carDao);</div><div class=\"line\">    components.put(<span class=\"string\">\"carService\"</span>,carService);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getComponents</span><span class=\"params\">(String id)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> components.get(id);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"spring中的Bean配置\"><a href=\"#spring中的Bean配置\" class=\"headerlink\" title=\"spring中的Bean配置\"></a>spring中的Bean配置</h1><h2 id=\"依赖注入的不同方式\"><a href=\"#依赖注入的不同方式\" class=\"headerlink\" title=\"依赖注入的不同方式\"></a>依赖注入的不同方式</h2><p>通过setter方法注入依赖并不是实现DI的唯一方法。有四种DI</p>\n<ul>\n<li>setter注入</li>\n<li>构造器注入</li>\n<li>静态工厂注入</li>\n<li>实例工厂注入</li>\n</ul>\n<p>其中setter方式就是前面的例子中使用的方法。</p>\n<ul>\n<li>构造器注入方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarService</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> CarDao carDao;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarService</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarService</span><span class=\"params\">(CarDao carDao)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.carDao = carDao;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> Map&lt;String,Object&gt; components;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Container</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    Components = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    </div><div class=\"line\">    CarDao carDao = <span class=\"keyword\">new</span> TruckDao();</div><div class=\"line\">    components.put(<span class=\"string\">\"carDao\"</span>,carDao);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//使用构造器注入。</span></div><div class=\"line\">    CarService carService = <span class=\"keyword\">new</span> CarService(carDao);</div><div class=\"line\">    <span class=\"comment\">//carService.setCarDao(carDao);</span></div><div class=\"line\">    components.put(<span class=\"string\">\"carService\"</span>,carService);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getComponents</span><span class=\"params\">(String id)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> components.get(id);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>静态工厂注入方式</li>\n</ul>\n<p>BeanFactory.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//静态的方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bean <span class=\"title\">getBean</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Bean();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>spring.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ninom.bean.BeanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getBean\"</span>/&gt;</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<ul>\n<li>实例工厂注入方式<br>BeanFactory.java<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//普通的方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span>  Bean <span class=\"title\">getBean</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Bean();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>spring.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"beanFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ninom.bean.BeanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getBean\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bean\"</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">\"beanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getBean\"</span>/&gt;</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<blockquote>\n<p>bean标签的常用属性</p>\n</blockquote>\n<p>（1）id属性：起名称，id属性值名称任意命名，不能包含特殊符号,根据id值得到配置对象</p>\n<p>（2）class属性：创建对象所在类的全路径</p>\n<p>（3）name属性：功能和id属性一样的，id属性值不能包含特殊符号，但是在name属性值里面可以包含特殊符号</p>\n<p>（4）scope属性</p>\n<p>​        singleton：默认值，单例</p>\n<p>​        prototype：多例</p>\n<h2 id=\"实例化Spring-Ioc容器\"><a href=\"#实例化Spring-Ioc容器\" class=\"headerlink\" title=\"实例化Spring Ioc容器\"></a>实例化Spring Ioc容器</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>只有在容器实例化之后，才可以从IoC容器中获取Bean实例并使用他们。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>Spring提供了两种类型的IoC容器实现，基础的实现是Bean Factory，高级的实现是 ApplicationContext，其中后者是对前者的兼容扩展，两者的配置文件都是相同的。</p>\n<p>Application Context 兼容基础特性的同事还提供了很多高级的特性，建议为每个应用程序都使用 Application Context。</p>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><ol>\n<li><p>实例化Bean Factory</p>\n<p>要实例化Bean Factory，首先必须将Bean配置文件加载到Resource对象中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Resource resource= <span class=\"keyword\">new</span> Resource(<span class=\"string\">\"beans.xml\"</span>);</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br> Spring之控制反转和容器<br><br></div>","more":"<h1 id=\"控制反转-IoC\"><a href=\"#控制反转-IoC\" class=\"headerlink\" title=\"控制反转 IoC\"></a>控制反转 IoC</h1><p>IoC (Inversion of Control, 控制反转)的设计原则，这一原则被许多容器用来解耦组件之间的依赖关系。Spring Framework提供了一个强大、可扩展的IoC容器来管理组件，这个容器就是Spring Framework的核心，同时也于Spring的其他模块紧密的集成在一起。</p>\n<p>Ioc 是一个通用的设计原则，相比之下，DI（Dependency Injection，依赖注入）则是具体的设计模式，它体现了IoC 的设计原则。因为 DI 是 IoC 最典型的实现（但不是唯一的实现），所以属于 IoC 和 DI 经常混用。                                     </p>\n<p><img src=\"/2017/05/10/我的草稿-spring日常札记/IoC例子.png\" alt=\"IoC例子\"></p>\n<p>使用setter方式注入。</p>\n<p>CarService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarService</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> CarDao carDao;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCarDao</span><span class=\"params\">(CarDao carDao)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.carDao = carDao;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runFast</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runSlow</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中 Container的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> Map&lt;String,Object&gt; components;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Container</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    Components = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    </div><div class=\"line\">    CarDao carDao = <span class=\"keyword\">new</span> TruckDao();</div><div class=\"line\">    components.put(<span class=\"string\">\"carDao\"</span>,carDao);</div><div class=\"line\">    </div><div class=\"line\">    CarService carService = <span class=\"keyword\">new</span> CarService();</div><div class=\"line\">    carService.setCarDao(carDao);</div><div class=\"line\">    components.put(<span class=\"string\">\"carService\"</span>,carService);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getComponents</span><span class=\"params\">(String id)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> components.get(id);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"spring中的Bean配置\"><a href=\"#spring中的Bean配置\" class=\"headerlink\" title=\"spring中的Bean配置\"></a>spring中的Bean配置</h1><h2 id=\"依赖注入的不同方式\"><a href=\"#依赖注入的不同方式\" class=\"headerlink\" title=\"依赖注入的不同方式\"></a>依赖注入的不同方式</h2><p>通过setter方法注入依赖并不是实现DI的唯一方法。有四种DI</p>\n<ul>\n<li>setter注入</li>\n<li>构造器注入</li>\n<li>静态工厂注入</li>\n<li>实例工厂注入</li>\n</ul>\n<p>其中setter方式就是前面的例子中使用的方法。</p>\n<ul>\n<li>构造器注入方式</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarService</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> CarDao carDao;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarService</span><span class=\"params\">()</span></span>&#123;&#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarService</span><span class=\"params\">(CarDao carDao)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.carDao = carDao;</div><div class=\"line\">  &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">private</span> Map&lt;String,Object&gt; components;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Container</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    Components = <span class=\"keyword\">new</span> HashMap&lt;String,Object&gt;();</div><div class=\"line\">    </div><div class=\"line\">    CarDao carDao = <span class=\"keyword\">new</span> TruckDao();</div><div class=\"line\">    components.put(<span class=\"string\">\"carDao\"</span>,carDao);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//使用构造器注入。</span></div><div class=\"line\">    CarService carService = <span class=\"keyword\">new</span> CarService(carDao);</div><div class=\"line\">    <span class=\"comment\">//carService.setCarDao(carDao);</span></div><div class=\"line\">    components.put(<span class=\"string\">\"carService\"</span>,carService);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getComponents</span><span class=\"params\">(String id)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> components.get(id);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>静态工厂注入方式</li>\n</ul>\n<p>BeanFactory.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//静态的方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bean <span class=\"title\">getBean</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Bean();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>spring.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ninom.bean.BeanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getBean\"</span>/&gt;</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<ul>\n<li>实例工厂注入方式<br>BeanFactory.java<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//普通的方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span>  Bean <span class=\"title\">getBean</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Bean();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>spring.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"beanFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.ninom.bean.BeanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getBean\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bean\"</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">\"beanFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getBean\"</span>/&gt;</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<blockquote>\n<p>bean标签的常用属性</p>\n</blockquote>\n<p>（1）id属性：起名称，id属性值名称任意命名，不能包含特殊符号,根据id值得到配置对象</p>\n<p>（2）class属性：创建对象所在类的全路径</p>\n<p>（3）name属性：功能和id属性一样的，id属性值不能包含特殊符号，但是在name属性值里面可以包含特殊符号</p>\n<p>（4）scope属性</p>\n<p>​        singleton：默认值，单例</p>\n<p>​        prototype：多例</p>\n<h2 id=\"实例化Spring-Ioc容器\"><a href=\"#实例化Spring-Ioc容器\" class=\"headerlink\" title=\"实例化Spring Ioc容器\"></a>实例化Spring Ioc容器</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>只有在容器实例化之后，才可以从IoC容器中获取Bean实例并使用他们。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>Spring提供了两种类型的IoC容器实现，基础的实现是Bean Factory，高级的实现是 ApplicationContext，其中后者是对前者的兼容扩展，两者的配置文件都是相同的。</p>\n<p>Application Context 兼容基础特性的同事还提供了很多高级的特性，建议为每个应用程序都使用 Application Context。</p>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><ol>\n<li><p>实例化Bean Factory</p>\n<p>要实例化Bean Factory，首先必须将Bean配置文件加载到Resource对象中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Resource resource= <span class=\"keyword\">new</span> Resource(<span class=\"string\">\"beans.xml\"</span>);</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>"},{"title":"maven","_content":"\n <div align=\"center\">\n  博客优化日常札记\n\n</div>\n\n<!-- more -->\n\n\n\n# 添加背景特效\n\n## 第一种方法\n\n[传送门](http://cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js)。由于害怕未来这个地址失效，所以我们可以保存在本地。\n\n\n\n1. 在我们的`next\\source\\js\\src`下，添加文件`canvas-nest.min.js`，将上述地址的内容拷贝进去\n\n\n\n2. 然后打开`next\\layout\\_layout.swig`，在之前添加如下代码\n\n```Xml\n{% if theme.canvas_nest %}\n    <script type=\"text/javascript\" src=\"{{ url_for(theme.js) }}/src/canvas-nest.min.js\"></script>\n  {% endif %}\n```\n\n3. 打开`\\next\\_config.yml`，加入下面的代码：\n\n   ```yaml\n   # --------------------------------------------------------------\n   # background settings\n   # --------------------------------------------------------------\n   # add canvas-nest effect\n   # see detail from https://github.com/hustcc/canvas-nest.js\n   canvas_nest: true\n   ```\n\n   4. 此时我们在重新部署打开，就能看到最终效果啦。\n\n\n\n## 第二种方法\n\n加入了特效后，发现很多部分都被白色内容挡住了，把他们都移走！\n\n\n\n打开`next\\source\\css\\_schemes\\Pisces\\_layout.styl`（这里你要是其他的主题，就把地址里的`Pisces`换成对应主题名）\n\n\n\n找到\n\n```css\n.content-wrap {\n  float: right;\n  box-sizing: border-box;\n  padding: $content-desktop-padding;\n  width: $content-desktop;\n  background: white;\n  min-height: 700px;\n  box-shadow: $box-shadow-inner;\n  border-radius: $border-radius-inner;\n}\n```\n\n将`background: white;`去掉，加入如下内容：\n\n\n\n```Css\nbackground:rgba(255, 255, 255, 0) none repeat scroll 0 0 !important;\nbackground-color:#000000;\nfilter:Alpha(opacity=50);\nposition:static; \n*zoom:1;\n```\n\n\n\n## 第三种方法\n\n在` themes/next/layout/_layout.swig` 中添加\n\n```xml\n<div class=\"bg_content\">\n    <canvas id=\"canvas\"></canvas>\n</div>\n```\n\njs原生代码\n\n```javascript\n <script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n\n然后在 `themes/next/source/css/_custom/custom.styl` 中，添加\n\n```Css\n\nbody{\n  z-index:9;\n}\n/*\n.post {\n  margin-bottom: 100px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 14px rgba(202,203,203,1);\n  -moz-box-shadow: 0 0 14px rgba(202,203,204,1);\n  background: #fff;\n}\n*/\n\n.posts-expand .post-eof {\n  display: block;\n  margin: 0px auto 60px;\n  width: 8%;\n  height: 1px;\n  background: #ccc;\n  text-align: center;\n}\n\n/*首页点击出现下划线*/\n.posts-expand .post-title-link:hover::before {\n  visibility: visible;\n  -webkit-transform: scaleX(1);\n  -moz-transform: scaleX(1);\n  -ms-transform: scaleX(1);\n  -o-transform: scaleX(1);\n  transform: scaleX(1);\n}\n\n\n.posts-expand .post-title-link{\n  margin-bottom 20px;\n  display: inline-block;\n  position: relative;\n  color: #555;\n  border-bottom: none;\n  line-height: 2.2;\n  vertical-align: top;\n}\n/*侧边栏博客链接前面小圆圈颜色*/\n.links-of-author a:before{\n  color:#fff;\n}\n\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n@media (max-width: 767px){\n  .menu {\n    text-align: right;\n  }\n}\n\n/*头像改为圆形，hover转动*/\n.site-author-image {\n  display: block;\n  margin: 15px auto;\n  /*padding: $site-author-image-padding;*/\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  /*\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n  */\n  border-radius:50%;\n  -webkit-transition: all 0.5s;\n  -moz-transition: all 0.5s;\n  -ms-transition: all 0.5s;\n  -o-transition: all 0.5s;\n  transition: all 0.5s;\n}\n.site-author-image:hover{\n  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.5);\n  -moz-box-shadow:0 0 10px rgba(0,0,0,0.5);\n  box-shadow:0 0 10px rgba(0,0,0,0.5);\n  webkit-transform: rotate(360deg) scale(1.1);\n  moz-transform: rotate(360deg) scale(1.1);\n  ms-transform: rotate(360deg) scale(1.1);\n  transform: rotate(360deg) scale(1.1);\n\n}\n@media (max-width: 767px) {\n\n  .site-nav-toggle {\n    display: none;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n  }\n}\n```\n\n\n\n\n\n# 添加博客底部的访问次数\n\n在`themes/next/layout/_partials/footer.swig` 中\n\n将\n\n```Xml\n<div class=\"theme-info\">\n  {{ __('footer.theme') }} -\n  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n    NexT.{{ theme.scheme }}\n  </a>\n </div>\n```\n\n替换成\n\n```Xml\n<div class=\"theme-info\">\n  {{ __('footer.theme') }} -\n  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n    NexT.{{ theme.scheme }}\n  </a>\n\n\n<!--2017年5月14日16:46:55  添加 浏览次数pv -->\n&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n<span id=\"busuanzi_container_site_pv\">\n<i class=\"fa fa-user\" aria-hidden=\"true\"></i>\n<span id=\"busuanzi_value_site_pv\"></span>\n</span>\n\n&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n<span id=\"busuanzi_container_site_uv\">\n  <i class=\"fa fa-eye\" aria-hidden=\"true\"></i>\n  <span id=\"busuanzi_value_site_uv\"></span>\n</span>\n</div>\n\n<!--2017年5月14日16:46:55  添加 浏览次数pv -->\n```\n\n\n\n# 打赏\n\n`themes/next/layout/_macro/reward.swig` 这个文件可以修改页面上的内容\n\n# 网易云音乐\n\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放， 我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器 \n\n\n\n在`themes/next/layout/_macro/sidebar.swig`中\n\n```Xml\n\t{# Blogroll #}\n        {% if theme.links %}\n          <div class=\"links-of-blogroll motion-element {{ \"links-of-blogroll-\" + theme.links_layout | default('inline') }}\">\n            <div class=\"links-of-blogroll-title\">\n              <i class=\"fa  fa-fw fa-{{ theme.links_icon | default('globe') | lower }}\"></i>\n              {{ theme.links_title }}\n            </div>\n            <ul class=\"links-of-blogroll-list\">\n              {% for name, link in theme.links %}\n                <li class=\"links-of-blogroll-item\">\n                  <a href=\"{{ link }}\" title=\"{{ name }}\" target=\"_blank\">{{ name }}</a>\n                </li>\n              {% endfor %}\n            </ul>\n          </div>\n        {% endif %}\n```\n\n这些代码的下方加入，网易云音乐的链接\n\n```xml\n {# Blogroll #}\n        {% if theme.links %}\n          <div class=\"links-of-blogroll motion-element {{ \"links-of-blogroll-\" + theme.links_layout | default('inline') }}\">\n            <div class=\"links-of-blogroll-title\">\n              <i class=\"fa  fa-fw fa-{{ theme.links_icon | default('globe') | lower }}\"></i>\n              {{ theme.links_title }}\n            </div>\n            <ul class=\"links-of-blogroll-list\">\n              {% for name, link in theme.links %}\n                <li class=\"links-of-blogroll-item\">\n                  <a href=\"{{ link }}\" title=\"{{ name }}\" target=\"_blank\">{{ name }}</a>\n                </li>\n              {% endfor %}\n            </ul>\n          </div>\n        {% endif %}\n\n\t<!--网易云音乐 2017年05月14日18:49:16 -->\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=16426514&auto=0&height=66\"></iframe>\n\n \t<!--网易云音乐 2017年05月14日18:49:16 -->\n```\n\n\n\n\n\n# Fork me on Github\n\n[官方地址](https://github.com/blog/273-github-ribbons)\n\n\n\n在官方地址中选取自己喜欢的绸带样式之后，找到 `/themes/next/layout/_layout.swig` 文件的body标签之内即可 \n记得把里面的url换成自己的\n\n```xml\n <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <a href=\"https://github.com/SimpleLifee\">\n      <img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\"></a>\n      <div class=\"header-inner\"> {%- include '_partials/header.swig' %} </div>\n </header>\n```\n\n\n\n# 查找`FontAwsome` icon\n\n\n\n这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的 `主题配置文件` 中的menu_icon字段中就可以啦~ \n\n\n\n![](fontawsome.png)\n\n\n\ntips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“\n\n\n\n\n\n# 为主页文章添加阴影效果\n\n打开`themes/next/source/css/_schemes/Mist/_posts-expanded.styl`文件\n找到类.posts-expand下面的.post\n\n\n\n```javascript\n.posts-expand {\n  ...\n  .post {\n    margin-top: 120px;\n   }\n  ...\n }\n```\n\n修改后\n\n```javascript\n.posts-expand {\n  ...\n\n  .post {\n    margin-top: 60px;\n    margin-bottom: 60px;\n    padding: 25px;\n    -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n    -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n   }\n   ...   \n }\n```\n\n","source":"_drafts/我的草稿/博客的日常札记.md","raw":"---\ntitle: maven\ntags: maven\n\n---\n\n <div align=\"center\">\n  博客优化日常札记\n\n</div>\n\n<!-- more -->\n\n\n\n# 添加背景特效\n\n## 第一种方法\n\n[传送门](http://cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js)。由于害怕未来这个地址失效，所以我们可以保存在本地。\n\n\n\n1. 在我们的`next\\source\\js\\src`下，添加文件`canvas-nest.min.js`，将上述地址的内容拷贝进去\n\n\n\n2. 然后打开`next\\layout\\_layout.swig`，在之前添加如下代码\n\n```Xml\n{% if theme.canvas_nest %}\n    <script type=\"text/javascript\" src=\"{{ url_for(theme.js) }}/src/canvas-nest.min.js\"></script>\n  {% endif %}\n```\n\n3. 打开`\\next\\_config.yml`，加入下面的代码：\n\n   ```yaml\n   # --------------------------------------------------------------\n   # background settings\n   # --------------------------------------------------------------\n   # add canvas-nest effect\n   # see detail from https://github.com/hustcc/canvas-nest.js\n   canvas_nest: true\n   ```\n\n   4. 此时我们在重新部署打开，就能看到最终效果啦。\n\n\n\n## 第二种方法\n\n加入了特效后，发现很多部分都被白色内容挡住了，把他们都移走！\n\n\n\n打开`next\\source\\css\\_schemes\\Pisces\\_layout.styl`（这里你要是其他的主题，就把地址里的`Pisces`换成对应主题名）\n\n\n\n找到\n\n```css\n.content-wrap {\n  float: right;\n  box-sizing: border-box;\n  padding: $content-desktop-padding;\n  width: $content-desktop;\n  background: white;\n  min-height: 700px;\n  box-shadow: $box-shadow-inner;\n  border-radius: $border-radius-inner;\n}\n```\n\n将`background: white;`去掉，加入如下内容：\n\n\n\n```Css\nbackground:rgba(255, 255, 255, 0) none repeat scroll 0 0 !important;\nbackground-color:#000000;\nfilter:Alpha(opacity=50);\nposition:static; \n*zoom:1;\n```\n\n\n\n## 第三种方法\n\n在` themes/next/layout/_layout.swig` 中添加\n\n```xml\n<div class=\"bg_content\">\n    <canvas id=\"canvas\"></canvas>\n</div>\n```\n\njs原生代码\n\n```javascript\n <script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n\n然后在 `themes/next/source/css/_custom/custom.styl` 中，添加\n\n```Css\n\nbody{\n  z-index:9;\n}\n/*\n.post {\n  margin-bottom: 100px;\n  padding: 25px;\n  -webkit-box-shadow: 0 0 14px rgba(202,203,203,1);\n  -moz-box-shadow: 0 0 14px rgba(202,203,204,1);\n  background: #fff;\n}\n*/\n\n.posts-expand .post-eof {\n  display: block;\n  margin: 0px auto 60px;\n  width: 8%;\n  height: 1px;\n  background: #ccc;\n  text-align: center;\n}\n\n/*首页点击出现下划线*/\n.posts-expand .post-title-link:hover::before {\n  visibility: visible;\n  -webkit-transform: scaleX(1);\n  -moz-transform: scaleX(1);\n  -ms-transform: scaleX(1);\n  -o-transform: scaleX(1);\n  transform: scaleX(1);\n}\n\n\n.posts-expand .post-title-link{\n  margin-bottom 20px;\n  display: inline-block;\n  position: relative;\n  color: #555;\n  border-bottom: none;\n  line-height: 2.2;\n  vertical-align: top;\n}\n/*侧边栏博客链接前面小圆圈颜色*/\n.links-of-author a:before{\n  color:#fff;\n}\n\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n@media (max-width: 767px){\n  .menu {\n    text-align: right;\n  }\n}\n\n/*头像改为圆形，hover转动*/\n.site-author-image {\n  display: block;\n  margin: 15px auto;\n  /*padding: $site-author-image-padding;*/\n  max-width: $site-author-image-width;\n  height: $site-author-image-height;\n  /*\n  border: $site-author-image-border-width solid $site-author-image-border-color;\n  */\n  border-radius:50%;\n  -webkit-transition: all 0.5s;\n  -moz-transition: all 0.5s;\n  -ms-transition: all 0.5s;\n  -o-transition: all 0.5s;\n  transition: all 0.5s;\n}\n.site-author-image:hover{\n  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.5);\n  -moz-box-shadow:0 0 10px rgba(0,0,0,0.5);\n  box-shadow:0 0 10px rgba(0,0,0,0.5);\n  webkit-transform: rotate(360deg) scale(1.1);\n  moz-transform: rotate(360deg) scale(1.1);\n  ms-transform: rotate(360deg) scale(1.1);\n  transform: rotate(360deg) scale(1.1);\n\n}\n@media (max-width: 767px) {\n\n  .site-nav-toggle {\n    display: none;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n  }\n}\n```\n\n\n\n\n\n# 添加博客底部的访问次数\n\n在`themes/next/layout/_partials/footer.swig` 中\n\n将\n\n```Xml\n<div class=\"theme-info\">\n  {{ __('footer.theme') }} -\n  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n    NexT.{{ theme.scheme }}\n  </a>\n </div>\n```\n\n替换成\n\n```Xml\n<div class=\"theme-info\">\n  {{ __('footer.theme') }} -\n  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n    NexT.{{ theme.scheme }}\n  </a>\n\n\n<!--2017年5月14日16:46:55  添加 浏览次数pv -->\n&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n<span id=\"busuanzi_container_site_pv\">\n<i class=\"fa fa-user\" aria-hidden=\"true\"></i>\n<span id=\"busuanzi_value_site_pv\"></span>\n</span>\n\n&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n<span id=\"busuanzi_container_site_uv\">\n  <i class=\"fa fa-eye\" aria-hidden=\"true\"></i>\n  <span id=\"busuanzi_value_site_uv\"></span>\n</span>\n</div>\n\n<!--2017年5月14日16:46:55  添加 浏览次数pv -->\n```\n\n\n\n# 打赏\n\n`themes/next/layout/_macro/reward.swig` 这个文件可以修改页面上的内容\n\n# 网易云音乐\n\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放， 我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器 \n\n\n\n在`themes/next/layout/_macro/sidebar.swig`中\n\n```Xml\n\t{# Blogroll #}\n        {% if theme.links %}\n          <div class=\"links-of-blogroll motion-element {{ \"links-of-blogroll-\" + theme.links_layout | default('inline') }}\">\n            <div class=\"links-of-blogroll-title\">\n              <i class=\"fa  fa-fw fa-{{ theme.links_icon | default('globe') | lower }}\"></i>\n              {{ theme.links_title }}\n            </div>\n            <ul class=\"links-of-blogroll-list\">\n              {% for name, link in theme.links %}\n                <li class=\"links-of-blogroll-item\">\n                  <a href=\"{{ link }}\" title=\"{{ name }}\" target=\"_blank\">{{ name }}</a>\n                </li>\n              {% endfor %}\n            </ul>\n          </div>\n        {% endif %}\n```\n\n这些代码的下方加入，网易云音乐的链接\n\n```xml\n {# Blogroll #}\n        {% if theme.links %}\n          <div class=\"links-of-blogroll motion-element {{ \"links-of-blogroll-\" + theme.links_layout | default('inline') }}\">\n            <div class=\"links-of-blogroll-title\">\n              <i class=\"fa  fa-fw fa-{{ theme.links_icon | default('globe') | lower }}\"></i>\n              {{ theme.links_title }}\n            </div>\n            <ul class=\"links-of-blogroll-list\">\n              {% for name, link in theme.links %}\n                <li class=\"links-of-blogroll-item\">\n                  <a href=\"{{ link }}\" title=\"{{ name }}\" target=\"_blank\">{{ name }}</a>\n                </li>\n              {% endfor %}\n            </ul>\n          </div>\n        {% endif %}\n\n\t<!--网易云音乐 2017年05月14日18:49:16 -->\n\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=16426514&auto=0&height=66\"></iframe>\n\n \t<!--网易云音乐 2017年05月14日18:49:16 -->\n```\n\n\n\n\n\n# Fork me on Github\n\n[官方地址](https://github.com/blog/273-github-ribbons)\n\n\n\n在官方地址中选取自己喜欢的绸带样式之后，找到 `/themes/next/layout/_layout.swig` 文件的body标签之内即可 \n记得把里面的url换成自己的\n\n```xml\n <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n      <a href=\"https://github.com/SimpleLifee\">\n      <img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\"></a>\n      <div class=\"header-inner\"> {%- include '_partials/header.swig' %} </div>\n </header>\n```\n\n\n\n# 查找`FontAwsome` icon\n\n\n\n这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的 `主题配置文件` 中的menu_icon字段中就可以啦~ \n\n\n\n![](fontawsome.png)\n\n\n\ntips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“\n\n\n\n\n\n# 为主页文章添加阴影效果\n\n打开`themes/next/source/css/_schemes/Mist/_posts-expanded.styl`文件\n找到类.posts-expand下面的.post\n\n\n\n```javascript\n.posts-expand {\n  ...\n  .post {\n    margin-top: 120px;\n   }\n  ...\n }\n```\n\n修改后\n\n```javascript\n.posts-expand {\n  ...\n\n  .post {\n    margin-top: 60px;\n    margin-bottom: 60px;\n    padding: 25px;\n    -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);\n    -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);\n   }\n   ...   \n }\n```\n\n","slug":"我的草稿-博客的日常札记","published":0,"date":"2017-05-10T12:37:07.000Z","updated":"2017-05-14T11:37:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndx001ep5uknw77oz65","content":" <div align=\"center\"><br>  博客优化日常札记<br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"添加背景特效\"><a href=\"#添加背景特效\" class=\"headerlink\" title=\"添加背景特效\"></a>添加背景特效</h1><h2 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h2><p><a href=\"http://cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\" target=\"_blank\" rel=\"external\">传送门</a>。由于害怕未来这个地址失效，所以我们可以保存在本地。</p>\n<ol>\n<li>在我们的<code>next\\source\\js\\src</code>下，添加文件<code>canvas-nest.min.js</code>，将上述地址的内容拷贝进去</li>\n</ol>\n<ol>\n<li>然后打开<code>next\\layout\\_layout.swig</code>，在之前添加如下代码</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.canvas_nest %&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; url_for(theme.js) &#125;&#125;/src/canvas-nest.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  &#123;% endif %&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>打开<code>\\next\\_config.yml</code>，加入下面的代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># --------------------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># background settings</span></div><div class=\"line\"><span class=\"comment\"># --------------------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># add canvas-nest effect</span></div><div class=\"line\"><span class=\"comment\"># see detail from https://github.com/hustcc/canvas-nest.js</span></div><div class=\"line\"><span class=\"attr\">canvas_nest:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<ol>\n<li>此时我们在重新部署打开，就能看到最终效果啦。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h2><p>加入了特效后，发现很多部分都被白色内容挡住了，把他们都移走！</p>\n<p>打开<code>next\\source\\css\\_schemes\\Pisces\\_layout.styl</code>（这里你要是其他的主题，就把地址里的<code>Pisces</code>换成对应主题名）</p>\n<p>找到</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.content-wrap</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: right;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: $content-desktop-padding;</div><div class=\"line\">  <span class=\"attribute\">width</span>: $content-desktop;</div><div class=\"line\">  <span class=\"attribute\">background</span>: white;</div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">700px</span>;</div><div class=\"line\">  <span class=\"attribute\">box-shadow</span>: $box-shadow-inner;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: $border-radius-inner;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将<code>background: white;</code>去掉，加入如下内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">background:rgba(255, 255, 255, 0) none repeat scroll 0 0 !important;</div><div class=\"line\">background-color:#000000;</div><div class=\"line\">filter:Alpha(opacity=50);</div><div class=\"line\">position:static; </div><div class=\"line\">*zoom:1;</div></pre></td></tr></table></figure>\n<h2 id=\"第三种方法\"><a href=\"#第三种方法\" class=\"headerlink\" title=\"第三种方法\"></a>第三种方法</h2><p>在<code>themes/next/layout/_layout.swig</code> 中添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg_content\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>js原生代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;script&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//创建对象</span></div><div class=\"line\">    <span class=\"comment\">//以一个圆为对象</span></div><div class=\"line\">    <span class=\"comment\">//设置随机的 x，y坐标，r半径，_mx，_my移动的距离</span></div><div class=\"line\">    <span class=\"comment\">//this.r是创建圆的半径，参数越大半径越大</span></div><div class=\"line\">    <span class=\"comment\">//this._mx,this._my是移动的距离，参数越大移动</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">        <span class=\"keyword\">this</span>.r = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span> ;</div><div class=\"line\">        <span class=\"keyword\">this</span>._mx = <span class=\"built_in\">Math</span>.random() ;</div><div class=\"line\">        <span class=\"keyword\">this</span>._my = <span class=\"built_in\">Math</span>.random() ;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//canvas 画圆和画直线</span></div><div class=\"line\">    <span class=\"comment\">//画圆就是正常的用canvas画一个圆</span></div><div class=\"line\">    <span class=\"comment\">//画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</span></div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        <span class=\"comment\">//arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</span></div><div class=\"line\">        ctx.arc(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y, <span class=\"keyword\">this</span>.r, <span class=\"number\">0</span>, <span class=\"number\">360</span>)</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        ctx.fillStyle = <span class=\"string\">'rgba(204, 204, 204, 0.3)'</span>;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawLine(ctx, _circle) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> dx = <span class=\"keyword\">this</span>.x - _circle.x;</div><div class=\"line\">        <span class=\"keyword\">let</span> dy = <span class=\"keyword\">this</span>.y - _circle.y;</div><div class=\"line\">        <span class=\"keyword\">let</span> d = <span class=\"built_in\">Math</span>.sqrt(dx * dx + dy * dy)</div><div class=\"line\">        <span class=\"keyword\">if</span> (d &lt; <span class=\"number\">150</span>) &#123;</div><div class=\"line\">            ctx.beginPath();</div><div class=\"line\">            <span class=\"comment\">//开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</span></div><div class=\"line\">            ctx.moveTo(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);   <span class=\"comment\">//起始点</span></div><div class=\"line\">            ctx.lineTo(_circle.x, _circle.y);   <span class=\"comment\">//终点</span></div><div class=\"line\">            ctx.closePath();</div><div class=\"line\">            ctx.strokeStyle = <span class=\"string\">'rgba(204, 204, 204, 0.3)'</span>;</div><div class=\"line\">            ctx.stroke();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 圆圈移动</span></div><div class=\"line\">    <span class=\"comment\">// 圆圈移动的距离必须在屏幕范围内</span></div><div class=\"line\">    move(w, h) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._mx = (<span class=\"keyword\">this</span>.x &lt; w &amp;&amp; <span class=\"keyword\">this</span>.x &gt; <span class=\"number\">0</span>) ? <span class=\"keyword\">this</span>._mx : (-<span class=\"keyword\">this</span>._mx);</div><div class=\"line\">        <span class=\"keyword\">this</span>._my = (<span class=\"keyword\">this</span>.y &lt; h &amp;&amp; <span class=\"keyword\">this</span>.y &gt; <span class=\"number\">0</span>) ? <span class=\"keyword\">this</span>._my : (-<span class=\"keyword\">this</span>._my);</div><div class=\"line\">        <span class=\"keyword\">this</span>.x += <span class=\"keyword\">this</span>._mx / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y += <span class=\"keyword\">this</span>._my / <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//鼠标点画圆闪烁变动</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">currentCirle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(x, y)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        <span class=\"comment\">//注释内容为鼠标焦点的地方圆圈半径变化</span></div><div class=\"line\">        <span class=\"comment\">//this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.r = <span class=\"number\">8</span>;</div><div class=\"line\">        ctx.arc(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y, <span class=\"keyword\">this</span>.r, <span class=\"number\">0</span>, <span class=\"number\">360</span>);</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        <span class=\"comment\">//ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'</span></div><div class=\"line\">        ctx.fillStyle = <span class=\"string\">'rgba(255, 77, 54, 0.3)'</span></div><div class=\"line\">        ctx.fill();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//更新页面用requestAnimationFrame替代setTimeout</span></div><div class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame = <span class=\"built_in\">window</span>.requestAnimationFrame || <span class=\"built_in\">window</span>.mozRequestAnimationFrame || <span class=\"built_in\">window</span>.webkitRequestAnimationFrame || <span class=\"built_in\">window</span>.msRequestAnimationFrame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> w = canvas.width = canvas.offsetWidth;</div><div class=\"line\"><span class=\"keyword\">let</span> h = canvas.height = canvas.offsetHeight;</div><div class=\"line\"><span class=\"keyword\">let</span> circles = [];</div><div class=\"line\"><span class=\"keyword\">let</span> current_circle = <span class=\"keyword\">new</span> currentCirle(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> draw = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; circles.length; i++) &#123;</div><div class=\"line\">        circles[i].move(w, h);</div><div class=\"line\">        circles[i].drawCircle(ctx);</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; circles.length; j++) &#123;</div><div class=\"line\">            circles[i].drawLine(ctx, circles[j])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (current_circle.x) &#123;</div><div class=\"line\">        current_circle.drawCircle(ctx);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">1</span>; k &lt; circles.length; k++) &#123;</div><div class=\"line\">            current_circle.drawLine(ctx, circles[k])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    requestAnimationFrame(draw)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</div><div class=\"line\">        circles.push(<span class=\"keyword\">new</span> Circle(<span class=\"built_in\">Math</span>.random() * w, <span class=\"built_in\">Math</span>.random() * h));</div><div class=\"line\">    &#125;</div><div class=\"line\">    draw();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, init(<span class=\"number\">60</span>));</div><div class=\"line\"><span class=\"built_in\">window</span>.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">    current_circle.x = e.clientX;</div><div class=\"line\">    current_circle.y = e.clientY;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">window</span>.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    current_circle.x = <span class=\"literal\">null</span>;</div><div class=\"line\">    current_circle.y = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>然后在 <code>themes/next/source/css/_custom/custom.styl</code> 中，添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">body&#123;</div><div class=\"line\">  z-index:9;</div><div class=\"line\">&#125;</div><div class=\"line\">/*</div><div class=\"line\">.post &#123;</div><div class=\"line\">  margin-bottom: 100px;</div><div class=\"line\">  padding: 25px;</div><div class=\"line\">  -webkit-box-shadow: 0 0 14px rgba(202,203,203,1);</div><div class=\"line\">  -moz-box-shadow: 0 0 14px rgba(202,203,204,1);</div><div class=\"line\">  background: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">.posts-expand .post-eof &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  margin: 0px auto 60px;</div><div class=\"line\">  width: 8%;</div><div class=\"line\">  height: 1px;</div><div class=\"line\">  background: #ccc;</div><div class=\"line\">  text-align: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*首页点击出现下划线*/</div><div class=\"line\">.posts-expand .post-title-link:hover::before &#123;</div><div class=\"line\">  visibility: visible;</div><div class=\"line\">  -webkit-transform: scaleX(1);</div><div class=\"line\">  -moz-transform: scaleX(1);</div><div class=\"line\">  -ms-transform: scaleX(1);</div><div class=\"line\">  -o-transform: scaleX(1);</div><div class=\"line\">  transform: scaleX(1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">.posts-expand .post-title-link&#123;</div><div class=\"line\">  margin-bottom 20px;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  position: relative;</div><div class=\"line\">  color: #555;</div><div class=\"line\">  border-bottom: none;</div><div class=\"line\">  line-height: 2.2;</div><div class=\"line\">  vertical-align: top;</div><div class=\"line\">&#125;</div><div class=\"line\">/*侧边栏博客链接前面小圆圈颜色*/</div><div class=\"line\">.links-of-author a:before&#123;</div><div class=\"line\">  color:#fff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.bg_content&#123;</div><div class=\"line\">  position: fixed;</div><div class=\"line\">  top: 0;</div><div class=\"line\">  z-index: -1;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#canvas&#123;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height:100%;</div><div class=\"line\">&#125;</div><div class=\"line\">/*将头部背景变为透明*/</div><div class=\"line\">.header&#123;</div><div class=\"line\">  background: transparent ;</div><div class=\"line\">&#125;</div><div class=\"line\">@media (max-width: 767px)&#123;</div><div class=\"line\">  .menu &#123;</div><div class=\"line\">    text-align: right;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*头像改为圆形，hover转动*/</div><div class=\"line\">.site-author-image &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  margin: 15px auto;</div><div class=\"line\">  /*padding: $site-author-image-padding;*/</div><div class=\"line\">  max-width: $site-author-image-width;</div><div class=\"line\">  height: $site-author-image-height;</div><div class=\"line\">  /*</div><div class=\"line\">  border: $site-author-image-border-width solid $site-author-image-border-color;</div><div class=\"line\">  */</div><div class=\"line\">  border-radius:50%;</div><div class=\"line\">  -webkit-transition: all 0.5s;</div><div class=\"line\">  -moz-transition: all 0.5s;</div><div class=\"line\">  -ms-transition: all 0.5s;</div><div class=\"line\">  -o-transition: all 0.5s;</div><div class=\"line\">  transition: all 0.5s;</div><div class=\"line\">&#125;</div><div class=\"line\">.site-author-image:hover&#123;</div><div class=\"line\">  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.5);</div><div class=\"line\">  -moz-box-shadow:0 0 10px rgba(0,0,0,0.5);</div><div class=\"line\">  box-shadow:0 0 10px rgba(0,0,0,0.5);</div><div class=\"line\">  webkit-transform: rotate(360deg) scale(1.1);</div><div class=\"line\">  moz-transform: rotate(360deg) scale(1.1);</div><div class=\"line\">  ms-transform: rotate(360deg) scale(1.1);</div><div class=\"line\">  transform: rotate(360deg) scale(1.1);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">@media (max-width: 767px) &#123;</div><div class=\"line\"></div><div class=\"line\">  .site-nav-toggle &#123;</div><div class=\"line\">    display: none;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    top: 10px;</div><div class=\"line\">    right: 10px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"添加博客底部的访问次数\"><a href=\"#添加博客底部的访问次数\" class=\"headerlink\" title=\"添加博客底部的访问次数\"></a>添加博客底部的访问次数</h1><p>在<code>themes/next/layout/_partials/footer.swig</code> 中</p>\n<p>将</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"theme-info\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; __('footer.theme') &#125;&#125; -</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"theme-link\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/iissnan/hexo-theme-next\"</span>&gt;</span></div><div class=\"line\">    NexT.&#123;&#123; theme.scheme &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>替换成</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"theme-info\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; __('footer.theme') &#125;&#125; -</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"theme-link\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/iissnan/hexo-theme-next\"</span>&gt;</span></div><div class=\"line\">    NexT.&#123;&#123; theme.scheme &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--2017年5月14日16:46:55  添加 浏览次数pv --&gt;</span></div><div class=\"line\">&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_container_site_pv\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_container_site_uv\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-eye\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_uv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--2017年5月14日16:46:55  添加 浏览次数pv --&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"打赏\"><a href=\"#打赏\" class=\"headerlink\" title=\"打赏\"></a>打赏</h1><p><code>themes/next/layout/_macro/reward.swig</code> 这个文件可以修改页面上的内容</p>\n<h1 id=\"网易云音乐\"><a href=\"#网易云音乐\" class=\"headerlink\" title=\"网易云音乐\"></a>网易云音乐</h1><p>在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放， 我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器 </p>\n<p>在<code>themes/next/layout/_macro/sidebar.swig</code>中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;# Blogroll #&#125;</div><div class=\"line\">       &#123;% if theme.links %&#125;</div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll motion-element &#123;&#123; \"</span><span class=\"attr\">links-of-blogroll-</span>\" + <span class=\"attr\">theme.links_layout</span> | <span class=\"attr\">default</span>('<span class=\"attr\">inline</span>') &#125;&#125;\"&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-title\"</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa  fa-fw fa-&#123;&#123; theme.links_icon | default('globe') | lower &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">             &#123;&#123; theme.links_title &#125;&#125;</div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-list\"</span>&gt;</span></div><div class=\"line\">             &#123;% for name, link in theme.links %&#125;</div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-item\"</span>&gt;</span></div><div class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; link &#125;&#125;\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">             &#123;% endfor %&#125;</div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       &#123;% endif %&#125;</div></pre></td></tr></table></figure>\n<p>这些代码的下方加入，网易云音乐的链接</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &#123;# Blogroll #&#125;</div><div class=\"line\">        &#123;% if theme.links %&#125;</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll motion-element &#123;&#123; \"</span><span class=\"attr\">links-of-blogroll-</span>\" + <span class=\"attr\">theme.links_layout</span> | <span class=\"attr\">default</span>('<span class=\"attr\">inline</span>') &#125;&#125;\"&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-title\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa  fa-fw fa-&#123;&#123; theme.links_icon | default('globe') | lower &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">              &#123;&#123; theme.links_title &#125;&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-list\"</span>&gt;</span></div><div class=\"line\">              &#123;% for name, link in theme.links %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-item\"</span>&gt;</span></div><div class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; link &#125;&#125;\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">              &#123;% endfor %&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        &#123;% endif %&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!--网易云音乐 2017年05月14日18:49:16 --&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">marginwidth</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">marginheight</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">330</span> <span class=\"attr\">height</span>=<span class=\"string\">86</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//music.163.com/outchain/player?type=2&amp;id=16426514&amp;auto=0&amp;height=66\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"comment\">&lt;!--网易云音乐 2017年05月14日18:49:16 --&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"Fork-me-on-Github\"><a href=\"#Fork-me-on-Github\" class=\"headerlink\" title=\"Fork me on Github\"></a>Fork me on Github</h1><p><a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">官方地址</a></p>\n<p>在官方地址中选取自己喜欢的绸带样式之后，找到 <code>/themes/next/layout/_layout.swig</code> 文件的body标签之内即可<br>记得把里面的url换成自己的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">itemscope</span> <span class=\"attr\">itemtype</span>=<span class=\"string\">\"http://schema.org/WPHeader\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/SimpleLifee\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: absolute; top: 0; left: 0; border: 0;\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Fork me on GitHub\"</span> <span class=\"attr\">data-canonical-src</span>=<span class=\"string\">\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-inner\"</span>&gt;</span> &#123;%- include '_partials/header.swig' %&#125; <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"查找FontAwsome-icon\"><a href=\"#查找FontAwsome-icon\" class=\"headerlink\" title=\"查找FontAwsome icon\"></a>查找<code>FontAwsome</code> icon</h1><p>这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到<a href=\"http://www.bootcss.com/p/font-awesome/#\" target=\"_blank\" rel=\"external\">FontAwsome官网</a>，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的 <code>主题配置文件</code> 中的menu_icon字段中就可以啦~ </p>\n<p><img src=\"/2017/05/10/我的草稿-博客的日常札记/fontawsome.png\" alt=\"\"></p>\n<p>tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“</p>\n<h1 id=\"为主页文章添加阴影效果\"><a href=\"#为主页文章添加阴影效果\" class=\"headerlink\" title=\"为主页文章添加阴影效果\"></a>为主页文章添加阴影效果</h1><p>打开<code>themes/next/source/css/_schemes/Mist/_posts-expanded.styl</code>文件<br>找到类.posts-expand下面的.post</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.posts-expand &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  .post &#123;</div><div class=\"line\">    margin-top: <span class=\"number\">120</span>px;</div><div class=\"line\">   &#125;</div><div class=\"line\">  ...</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>修改后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.posts-expand &#123;</div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  .post &#123;</div><div class=\"line\">    margin-top: <span class=\"number\">60</span>px;</div><div class=\"line\">    margin-bottom: <span class=\"number\">60</span>px;</div><div class=\"line\">    padding: <span class=\"number\">25</span>px;</div><div class=\"line\">    -webkit-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, <span class=\"number\">.5</span>);</div><div class=\"line\">    -moz-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">.5</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   ...   </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br>  博客优化日常札记<br><br></div>","more":"<h1 id=\"添加背景特效\"><a href=\"#添加背景特效\" class=\"headerlink\" title=\"添加背景特效\"></a>添加背景特效</h1><h2 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h2><p><a href=\"http://cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\" target=\"_blank\" rel=\"external\">传送门</a>。由于害怕未来这个地址失效，所以我们可以保存在本地。</p>\n<ol>\n<li>在我们的<code>next\\source\\js\\src</code>下，添加文件<code>canvas-nest.min.js</code>，将上述地址的内容拷贝进去</li>\n</ol>\n<ol>\n<li>然后打开<code>next\\layout\\_layout.swig</code>，在之前添加如下代码</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.canvas_nest %&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; url_for(theme.js) &#125;&#125;/src/canvas-nest.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  &#123;% endif %&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>打开<code>\\next\\_config.yml</code>，加入下面的代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># --------------------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># background settings</span></div><div class=\"line\"><span class=\"comment\"># --------------------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># add canvas-nest effect</span></div><div class=\"line\"><span class=\"comment\"># see detail from https://github.com/hustcc/canvas-nest.js</span></div><div class=\"line\"><span class=\"attr\">canvas_nest:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<ol>\n<li>此时我们在重新部署打开，就能看到最终效果啦。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h2><p>加入了特效后，发现很多部分都被白色内容挡住了，把他们都移走！</p>\n<p>打开<code>next\\source\\css\\_schemes\\Pisces\\_layout.styl</code>（这里你要是其他的主题，就把地址里的<code>Pisces</code>换成对应主题名）</p>\n<p>找到</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.content-wrap</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: right;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: $content-desktop-padding;</div><div class=\"line\">  <span class=\"attribute\">width</span>: $content-desktop;</div><div class=\"line\">  <span class=\"attribute\">background</span>: white;</div><div class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">700px</span>;</div><div class=\"line\">  <span class=\"attribute\">box-shadow</span>: $box-shadow-inner;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: $border-radius-inner;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将<code>background: white;</code>去掉，加入如下内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">background:rgba(255, 255, 255, 0) none repeat scroll 0 0 !important;</div><div class=\"line\">background-color:#000000;</div><div class=\"line\">filter:Alpha(opacity=50);</div><div class=\"line\">position:static; </div><div class=\"line\">*zoom:1;</div></pre></td></tr></table></figure>\n<h2 id=\"第三种方法\"><a href=\"#第三种方法\" class=\"headerlink\" title=\"第三种方法\"></a>第三种方法</h2><p>在<code>themes/next/layout/_layout.swig</code> 中添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bg_content\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>js原生代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;script&gt;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//创建对象</span></div><div class=\"line\">    <span class=\"comment\">//以一个圆为对象</span></div><div class=\"line\">    <span class=\"comment\">//设置随机的 x，y坐标，r半径，_mx，_my移动的距离</span></div><div class=\"line\">    <span class=\"comment\">//this.r是创建圆的半径，参数越大半径越大</span></div><div class=\"line\">    <span class=\"comment\">//this._mx,this._my是移动的距离，参数越大移动</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">        <span class=\"keyword\">this</span>.r = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span> ;</div><div class=\"line\">        <span class=\"keyword\">this</span>._mx = <span class=\"built_in\">Math</span>.random() ;</div><div class=\"line\">        <span class=\"keyword\">this</span>._my = <span class=\"built_in\">Math</span>.random() ;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//canvas 画圆和画直线</span></div><div class=\"line\">    <span class=\"comment\">//画圆就是正常的用canvas画一个圆</span></div><div class=\"line\">    <span class=\"comment\">//画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</span></div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        <span class=\"comment\">//arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</span></div><div class=\"line\">        ctx.arc(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y, <span class=\"keyword\">this</span>.r, <span class=\"number\">0</span>, <span class=\"number\">360</span>)</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        ctx.fillStyle = <span class=\"string\">'rgba(204, 204, 204, 0.3)'</span>;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawLine(ctx, _circle) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> dx = <span class=\"keyword\">this</span>.x - _circle.x;</div><div class=\"line\">        <span class=\"keyword\">let</span> dy = <span class=\"keyword\">this</span>.y - _circle.y;</div><div class=\"line\">        <span class=\"keyword\">let</span> d = <span class=\"built_in\">Math</span>.sqrt(dx * dx + dy * dy)</div><div class=\"line\">        <span class=\"keyword\">if</span> (d &lt; <span class=\"number\">150</span>) &#123;</div><div class=\"line\">            ctx.beginPath();</div><div class=\"line\">            <span class=\"comment\">//开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</span></div><div class=\"line\">            ctx.moveTo(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);   <span class=\"comment\">//起始点</span></div><div class=\"line\">            ctx.lineTo(_circle.x, _circle.y);   <span class=\"comment\">//终点</span></div><div class=\"line\">            ctx.closePath();</div><div class=\"line\">            ctx.strokeStyle = <span class=\"string\">'rgba(204, 204, 204, 0.3)'</span>;</div><div class=\"line\">            ctx.stroke();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 圆圈移动</span></div><div class=\"line\">    <span class=\"comment\">// 圆圈移动的距离必须在屏幕范围内</span></div><div class=\"line\">    move(w, h) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._mx = (<span class=\"keyword\">this</span>.x &lt; w &amp;&amp; <span class=\"keyword\">this</span>.x &gt; <span class=\"number\">0</span>) ? <span class=\"keyword\">this</span>._mx : (-<span class=\"keyword\">this</span>._mx);</div><div class=\"line\">        <span class=\"keyword\">this</span>._my = (<span class=\"keyword\">this</span>.y &lt; h &amp;&amp; <span class=\"keyword\">this</span>.y &gt; <span class=\"number\">0</span>) ? <span class=\"keyword\">this</span>._my : (-<span class=\"keyword\">this</span>._my);</div><div class=\"line\">        <span class=\"keyword\">this</span>.x += <span class=\"keyword\">this</span>._mx / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y += <span class=\"keyword\">this</span>._my / <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//鼠标点画圆闪烁变动</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">currentCirle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Circle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(x, y)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        <span class=\"comment\">//注释内容为鼠标焦点的地方圆圈半径变化</span></div><div class=\"line\">        <span class=\"comment\">//this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.r = <span class=\"number\">8</span>;</div><div class=\"line\">        ctx.arc(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y, <span class=\"keyword\">this</span>.r, <span class=\"number\">0</span>, <span class=\"number\">360</span>);</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        <span class=\"comment\">//ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'</span></div><div class=\"line\">        ctx.fillStyle = <span class=\"string\">'rgba(255, 77, 54, 0.3)'</span></div><div class=\"line\">        ctx.fill();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//更新页面用requestAnimationFrame替代setTimeout</span></div><div class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame = <span class=\"built_in\">window</span>.requestAnimationFrame || <span class=\"built_in\">window</span>.mozRequestAnimationFrame || <span class=\"built_in\">window</span>.webkitRequestAnimationFrame || <span class=\"built_in\">window</span>.msRequestAnimationFrame;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'canvas'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> ctx = canvas.getContext(<span class=\"string\">'2d'</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> w = canvas.width = canvas.offsetWidth;</div><div class=\"line\"><span class=\"keyword\">let</span> h = canvas.height = canvas.offsetHeight;</div><div class=\"line\"><span class=\"keyword\">let</span> circles = [];</div><div class=\"line\"><span class=\"keyword\">let</span> current_circle = <span class=\"keyword\">new</span> currentCirle(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> draw = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; circles.length; i++) &#123;</div><div class=\"line\">        circles[i].move(w, h);</div><div class=\"line\">        circles[i].drawCircle(ctx);</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = i + <span class=\"number\">1</span>; j &lt; circles.length; j++) &#123;</div><div class=\"line\">            circles[i].drawLine(ctx, circles[j])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (current_circle.x) &#123;</div><div class=\"line\">        current_circle.drawCircle(ctx);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">1</span>; k &lt; circles.length; k++) &#123;</div><div class=\"line\">            current_circle.drawLine(ctx, circles[k])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    requestAnimationFrame(draw)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> init = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</div><div class=\"line\">        circles.push(<span class=\"keyword\">new</span> Circle(<span class=\"built_in\">Math</span>.random() * w, <span class=\"built_in\">Math</span>.random() * h));</div><div class=\"line\">    &#125;</div><div class=\"line\">    draw();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, init(<span class=\"number\">60</span>));</div><div class=\"line\"><span class=\"built_in\">window</span>.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    e = e || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">    current_circle.x = e.clientX;</div><div class=\"line\">    current_circle.y = e.clientY;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">window</span>.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    current_circle.x = <span class=\"literal\">null</span>;</div><div class=\"line\">    current_circle.y = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>然后在 <code>themes/next/source/css/_custom/custom.styl</code> 中，添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">body&#123;</div><div class=\"line\">  z-index:9;</div><div class=\"line\">&#125;</div><div class=\"line\">/*</div><div class=\"line\">.post &#123;</div><div class=\"line\">  margin-bottom: 100px;</div><div class=\"line\">  padding: 25px;</div><div class=\"line\">  -webkit-box-shadow: 0 0 14px rgba(202,203,203,1);</div><div class=\"line\">  -moz-box-shadow: 0 0 14px rgba(202,203,204,1);</div><div class=\"line\">  background: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\">.posts-expand .post-eof &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  margin: 0px auto 60px;</div><div class=\"line\">  width: 8%;</div><div class=\"line\">  height: 1px;</div><div class=\"line\">  background: #ccc;</div><div class=\"line\">  text-align: center;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*首页点击出现下划线*/</div><div class=\"line\">.posts-expand .post-title-link:hover::before &#123;</div><div class=\"line\">  visibility: visible;</div><div class=\"line\">  -webkit-transform: scaleX(1);</div><div class=\"line\">  -moz-transform: scaleX(1);</div><div class=\"line\">  -ms-transform: scaleX(1);</div><div class=\"line\">  -o-transform: scaleX(1);</div><div class=\"line\">  transform: scaleX(1);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">.posts-expand .post-title-link&#123;</div><div class=\"line\">  margin-bottom 20px;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  position: relative;</div><div class=\"line\">  color: #555;</div><div class=\"line\">  border-bottom: none;</div><div class=\"line\">  line-height: 2.2;</div><div class=\"line\">  vertical-align: top;</div><div class=\"line\">&#125;</div><div class=\"line\">/*侧边栏博客链接前面小圆圈颜色*/</div><div class=\"line\">.links-of-author a:before&#123;</div><div class=\"line\">  color:#fff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.bg_content&#123;</div><div class=\"line\">  position: fixed;</div><div class=\"line\">  top: 0;</div><div class=\"line\">  z-index: -1;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#canvas&#123;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height:100%;</div><div class=\"line\">&#125;</div><div class=\"line\">/*将头部背景变为透明*/</div><div class=\"line\">.header&#123;</div><div class=\"line\">  background: transparent ;</div><div class=\"line\">&#125;</div><div class=\"line\">@media (max-width: 767px)&#123;</div><div class=\"line\">  .menu &#123;</div><div class=\"line\">    text-align: right;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*头像改为圆形，hover转动*/</div><div class=\"line\">.site-author-image &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  margin: 15px auto;</div><div class=\"line\">  /*padding: $site-author-image-padding;*/</div><div class=\"line\">  max-width: $site-author-image-width;</div><div class=\"line\">  height: $site-author-image-height;</div><div class=\"line\">  /*</div><div class=\"line\">  border: $site-author-image-border-width solid $site-author-image-border-color;</div><div class=\"line\">  */</div><div class=\"line\">  border-radius:50%;</div><div class=\"line\">  -webkit-transition: all 0.5s;</div><div class=\"line\">  -moz-transition: all 0.5s;</div><div class=\"line\">  -ms-transition: all 0.5s;</div><div class=\"line\">  -o-transition: all 0.5s;</div><div class=\"line\">  transition: all 0.5s;</div><div class=\"line\">&#125;</div><div class=\"line\">.site-author-image:hover&#123;</div><div class=\"line\">  -webkit-box-shadow:0 0 10px rgba(0,0,0,0.5);</div><div class=\"line\">  -moz-box-shadow:0 0 10px rgba(0,0,0,0.5);</div><div class=\"line\">  box-shadow:0 0 10px rgba(0,0,0,0.5);</div><div class=\"line\">  webkit-transform: rotate(360deg) scale(1.1);</div><div class=\"line\">  moz-transform: rotate(360deg) scale(1.1);</div><div class=\"line\">  ms-transform: rotate(360deg) scale(1.1);</div><div class=\"line\">  transform: rotate(360deg) scale(1.1);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">@media (max-width: 767px) &#123;</div><div class=\"line\"></div><div class=\"line\">  .site-nav-toggle &#123;</div><div class=\"line\">    display: none;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    top: 10px;</div><div class=\"line\">    right: 10px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"添加博客底部的访问次数\"><a href=\"#添加博客底部的访问次数\" class=\"headerlink\" title=\"添加博客底部的访问次数\"></a>添加博客底部的访问次数</h1><p>在<code>themes/next/layout/_partials/footer.swig</code> 中</p>\n<p>将</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"theme-info\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; __('footer.theme') &#125;&#125; -</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"theme-link\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/iissnan/hexo-theme-next\"</span>&gt;</span></div><div class=\"line\">    NexT.&#123;&#123; theme.scheme &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>替换成</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"theme-info\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123; __('footer.theme') &#125;&#125; -</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"theme-link\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/iissnan/hexo-theme-next\"</span>&gt;</span></div><div class=\"line\">    NexT.&#123;&#123; theme.scheme &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--2017年5月14日16:46:55  添加 浏览次数pv --&gt;</span></div><div class=\"line\">&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_container_site_pv\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;&amp;nbsp;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_container_site_uv\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-eye\"</span> <span class=\"attr\">aria-hidden</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_uv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!--2017年5月14日16:46:55  添加 浏览次数pv --&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"打赏\"><a href=\"#打赏\" class=\"headerlink\" title=\"打赏\"></a>打赏</h1><p><code>themes/next/layout/_macro/reward.swig</code> 这个文件可以修改页面上的内容</p>\n<h1 id=\"网易云音乐\"><a href=\"#网易云音乐\" class=\"headerlink\" title=\"网易云音乐\"></a>网易云音乐</h1><p>在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放， 我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器 </p>\n<p>在<code>themes/next/layout/_macro/sidebar.swig</code>中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;# Blogroll #&#125;</div><div class=\"line\">       &#123;% if theme.links %&#125;</div><div class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll motion-element &#123;&#123; \"</span><span class=\"attr\">links-of-blogroll-</span>\" + <span class=\"attr\">theme.links_layout</span> | <span class=\"attr\">default</span>('<span class=\"attr\">inline</span>') &#125;&#125;\"&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-title\"</span>&gt;</span></div><div class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa  fa-fw fa-&#123;&#123; theme.links_icon | default('globe') | lower &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">             &#123;&#123; theme.links_title &#125;&#125;</div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-list\"</span>&gt;</span></div><div class=\"line\">             &#123;% for name, link in theme.links %&#125;</div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-item\"</span>&gt;</span></div><div class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; link &#125;&#125;\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">             &#123;% endfor %&#125;</div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">       &#123;% endif %&#125;</div></pre></td></tr></table></figure>\n<p>这些代码的下方加入，网易云音乐的链接</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &#123;# Blogroll #&#125;</div><div class=\"line\">        &#123;% if theme.links %&#125;</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll motion-element &#123;&#123; \"</span><span class=\"attr\">links-of-blogroll-</span>\" + <span class=\"attr\">theme.links_layout</span> | <span class=\"attr\">default</span>('<span class=\"attr\">inline</span>') &#125;&#125;\"&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-title\"</span>&gt;</span></div><div class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa  fa-fw fa-&#123;&#123; theme.links_icon | default('globe') | lower &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></div><div class=\"line\">              &#123;&#123; theme.links_title &#125;&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-list\"</span>&gt;</span></div><div class=\"line\">              &#123;% for name, link in theme.links %&#125;</div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links-of-blogroll-item\"</span>&gt;</span></div><div class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; link &#125;&#125;\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"&#123;&#123; name &#125;&#125;\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">              &#123;% endfor %&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        &#123;% endif %&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!--网易云音乐 2017年05月14日18:49:16 --&gt;</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"no\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">marginwidth</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">marginheight</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">width</span>=<span class=\"string\">330</span> <span class=\"attr\">height</span>=<span class=\"string\">86</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//music.163.com/outchain/player?type=2&amp;id=16426514&amp;auto=0&amp;height=66\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"> \t<span class=\"comment\">&lt;!--网易云音乐 2017年05月14日18:49:16 --&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"Fork-me-on-Github\"><a href=\"#Fork-me-on-Github\" class=\"headerlink\" title=\"Fork me on Github\"></a>Fork me on Github</h1><p><a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">官方地址</a></p>\n<p>在官方地址中选取自己喜欢的绸带样式之后，找到 <code>/themes/next/layout/_layout.swig</code> 文件的body标签之内即可<br>记得把里面的url换成自己的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span> <span class=\"attr\">itemscope</span> <span class=\"attr\">itemtype</span>=<span class=\"string\">\"http://schema.org/WPHeader\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://github.com/SimpleLifee\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">style</span>=<span class=\"string\">\"position: absolute; top: 0; left: 0; border: 0;\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Fork me on GitHub\"</span> <span class=\"attr\">data-canonical-src</span>=<span class=\"string\">\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header-inner\"</span>&gt;</span> &#123;%- include '_partials/header.swig' %&#125; <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"查找FontAwsome-icon\"><a href=\"#查找FontAwsome-icon\" class=\"headerlink\" title=\"查找FontAwsome icon\"></a>查找<code>FontAwsome</code> icon</h1><p>这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到<a href=\"http://www.bootcss.com/p/font-awesome/#\" target=\"_blank\" rel=\"external\">FontAwsome官网</a>，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的 <code>主题配置文件</code> 中的menu_icon字段中就可以啦~ </p>\n<p><img src=\"/2017/05/10/我的草稿-博客的日常札记/fontawsome.png\" alt=\"\"></p>\n<p>tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“</p>\n<h1 id=\"为主页文章添加阴影效果\"><a href=\"#为主页文章添加阴影效果\" class=\"headerlink\" title=\"为主页文章添加阴影效果\"></a>为主页文章添加阴影效果</h1><p>打开<code>themes/next/source/css/_schemes/Mist/_posts-expanded.styl</code>文件<br>找到类.posts-expand下面的.post</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.posts-expand &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  .post &#123;</div><div class=\"line\">    margin-top: <span class=\"number\">120</span>px;</div><div class=\"line\">   &#125;</div><div class=\"line\">  ...</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>修改后</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">.posts-expand &#123;</div><div class=\"line\">  ...</div><div class=\"line\"></div><div class=\"line\">  .post &#123;</div><div class=\"line\">    margin-top: <span class=\"number\">60</span>px;</div><div class=\"line\">    margin-bottom: <span class=\"number\">60</span>px;</div><div class=\"line\">    padding: <span class=\"number\">25</span>px;</div><div class=\"line\">    -webkit-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">203</span>, <span class=\"number\">.5</span>);</div><div class=\"line\">    -moz-box-shadow: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5</span>px rgba(<span class=\"number\">202</span>, <span class=\"number\">203</span>, <span class=\"number\">204</span>, <span class=\"number\">.5</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">   ...   </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>"},{"title":"git cherry pick","_content":"\n <div align=\"center\">\n git cherry pick 的用法\n\n</div>\n\n<!-- more -->\n\n\n\n参考自：[元](http://www.jianshu.com/p/d577dcc36a08)\n\n[hudashi](http://blog.csdn.net/hudashi/article/details/7669462)\n\n","source":"_drafts/我的草稿/（WIP）git cherry-pick介绍.md","raw":"---\ntitle: git cherry pick\ntags: Git\n---\n\n <div align=\"center\">\n git cherry pick 的用法\n\n</div>\n\n<!-- more -->\n\n\n\n参考自：[元](http://www.jianshu.com/p/d577dcc36a08)\n\n[hudashi](http://blog.csdn.net/hudashi/article/details/7669462)\n\n","slug":"我的草稿-（WIP）git-cherry-pick介绍","published":0,"date":"2017-05-22T00:02:36.000Z","updated":"2017-05-22T00:07:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ndz001hp5ukcde4xjga","content":" <div align=\"center\"><br> git cherry pick 的用法<br><br></div>\n\n<a id=\"more\"></a>\n<p>参考自：<a href=\"http://www.jianshu.com/p/d577dcc36a08\" target=\"_blank\" rel=\"external\">元</a></p>\n<p><a href=\"http://blog.csdn.net/hudashi/article/details/7669462\" target=\"_blank\" rel=\"external\">hudashi</a></p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br> git cherry pick 的用法<br><br></div>","more":"<p>参考自：<a href=\"http://www.jianshu.com/p/d577dcc36a08\" target=\"_blank\" rel=\"external\">元</a></p>\n<p><a href=\"http://blog.csdn.net/hudashi/article/details/7669462\" target=\"_blank\" rel=\"external\">hudashi</a></p>"},{"title":"POJO和javabean的异同","_content":"\n <div align=\"center\">\n\nPOJO和javabean的异同\n\n</div>\n\n<!-- more -->\n\n**什么是POJO**\n\n 按照Martin Fowler的解释是“Plain Old [Java ](http://lib.csdn.net/base/java)Object”，从字面上翻译为“纯洁老式的[Java](http://lib.csdn.net/base/javase)对象”，但大家都使用“简单java对象”来称呼它。POJO的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。\n\n**pojo和javabean的比较**\n\npojo的格式是用于数据的临时传递，它只能装载数据， 作为数据存储的载体，而不具有业务逻辑处理的能力。\n\n而javabean虽然数据的获取与pojo一样，但是javabean当中可以有其它的方法。\n\nJavaBean 是一种JAVA语言写成的可重用组件。它的方法命名，构造及行为必须符合特定的约定：\n\n1. 这个类必须有一个公共的缺省构造函数。\n2. 这个类的属性使用getter和setter来访问，其他方法遵从标准命名规范。\n3. 这个类应是可序列化的。 ","source":"_drafts/面试题总结/POJO和javabean的异同.md","raw":"---\ntitle: POJO和javabean的异同\ntags: java基础\n\n---\n\n <div align=\"center\">\n\nPOJO和javabean的异同\n\n</div>\n\n<!-- more -->\n\n**什么是POJO**\n\n 按照Martin Fowler的解释是“Plain Old [Java ](http://lib.csdn.net/base/java)Object”，从字面上翻译为“纯洁老式的[Java](http://lib.csdn.net/base/javase)对象”，但大家都使用“简单java对象”来称呼它。POJO的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。\n\n**pojo和javabean的比较**\n\npojo的格式是用于数据的临时传递，它只能装载数据， 作为数据存储的载体，而不具有业务逻辑处理的能力。\n\n而javabean虽然数据的获取与pojo一样，但是javabean当中可以有其它的方法。\n\nJavaBean 是一种JAVA语言写成的可重用组件。它的方法命名，构造及行为必须符合特定的约定：\n\n1. 这个类必须有一个公共的缺省构造函数。\n2. 这个类的属性使用getter和setter来访问，其他方法遵从标准命名规范。\n3. 这个类应是可序列化的。 ","slug":"面试题总结-POJO和javabean的异同","published":0,"date":"2017-05-10T12:37:07.000Z","updated":"2017-05-24T07:59:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ne0001jp5uk4xsp5ejd","content":" <div align=\"center\"><br><br>POJO和javabean的异同<br><br></div>\n\n<a id=\"more\"></a>\n<p><strong>什么是POJO</strong></p>\n<p> 按照Martin Fowler的解释是“Plain Old <a href=\"http://lib.csdn.net/base/java\" target=\"_blank\" rel=\"external\">Java </a>Object”，从字面上翻译为“纯洁老式的<a href=\"http://lib.csdn.net/base/javase\" target=\"_blank\" rel=\"external\">Java</a>对象”，但大家都使用“简单java对象”来称呼它。POJO的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。</p>\n<p><strong>pojo和javabean的比较</strong></p>\n<p>pojo的格式是用于数据的临时传递，它只能装载数据， 作为数据存储的载体，而不具有业务逻辑处理的能力。</p>\n<p>而javabean虽然数据的获取与pojo一样，但是javabean当中可以有其它的方法。</p>\n<p>JavaBean 是一种JAVA语言写成的可重用组件。它的方法命名，构造及行为必须符合特定的约定：</p>\n<ol>\n<li>这个类必须有一个公共的缺省构造函数。</li>\n<li>这个类的属性使用getter和setter来访问，其他方法遵从标准命名规范。</li>\n<li>这个类应是可序列化的。 </li>\n</ol>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br><br>POJO和javabean的异同<br><br></div>","more":"<p><strong>什么是POJO</strong></p>\n<p> 按照Martin Fowler的解释是“Plain Old <a href=\"http://lib.csdn.net/base/java\" target=\"_blank\" rel=\"external\">Java </a>Object”，从字面上翻译为“纯洁老式的<a href=\"http://lib.csdn.net/base/javase\" target=\"_blank\" rel=\"external\">Java</a>对象”，但大家都使用“简单java对象”来称呼它。POJO的内在含义是指那些没有从任何类继承、也没有实现任何接口，更没有被其它框架侵入的java对象。</p>\n<p><strong>pojo和javabean的比较</strong></p>\n<p>pojo的格式是用于数据的临时传递，它只能装载数据， 作为数据存储的载体，而不具有业务逻辑处理的能力。</p>\n<p>而javabean虽然数据的获取与pojo一样，但是javabean当中可以有其它的方法。</p>\n<p>JavaBean 是一种JAVA语言写成的可重用组件。它的方法命名，构造及行为必须符合特定的约定：</p>\n<ol>\n<li>这个类必须有一个公共的缺省构造函数。</li>\n<li>这个类的属性使用getter和setter来访问，其他方法遵从标准命名规范。</li>\n<li>这个类应是可序列化的。 </li>\n</ol>"},{"title":"浅谈HTTP的无状态性和Cookie、Session来源","_content":"\n <div align=\"center\">\n 浅谈HTTP的无状态性和Cookie、Session来源\n\n</div>\n\n<!-- more -->\n\n# **一、HTTP是什么**\n\nHTTP是Hyper Text Transfer Protocol的缩写，顾名思义，这个协议支持着超文本的传输。那么什么是超文本呢？说白了就是使用HTML编写的页面。通常，我们使用客户端浏览器访问服务器的资源，最常见的URL也是以html为后缀的文件。因此，我们可以说超文本是网络上最主要的资源。\n\n# **二、什么是HTTP无状态**\n\n既然HTTP协议的目的在于支持超文本的传输，更加广义一些就是支持资源的传输，那么在客户端浏览器向HTTP服务器发送请求，继而HTTP服务器将相应的资源发回给客户端这样一个过程中，无论对于客户端还是服务器，都没有必要记录这个过程，因为每一次请求和响应都是相对独立的，就好像你在自动售货机前投下硬币购买商品一样，谁都不会也不需要记住这样一个交易过程。一般而言，一个URL对应着唯一的超文本，而HTTP服务器也绝对公平公正，不管你是Michael，还是Jordon，它都会根据接收到的URL请求返回相同的超文本。正是因为这样的唯一性，使得记录用户的行为状态变得毫无意义，所以，HTTP协议被设计为无状态的连接协议符合它本身的需求。\n\n# **三、为什么出现Cookie和Session**\n\n然而，随着时间的推移，人们发现静态的HTML着实无聊而乏味，增加动态生成的内容才会令Web应用程序变得更加有用。于是乎，HTML的语法在不断膨胀，其中最重要的是增加了表单（Form）；客户端也增加了诸如脚本处理、DOM处理等功能；对于服务器，则相应的出现了CGI（Common Gateway Interface）以处理包含表单提交在内的动态请求。在这种客户端与服务器进行动态交互的Web应用程序出现之后，HTTP无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的，简单的购物车程序也要知道用户到底在之前选择了什么商品。于是，两种用于保持HTTP连接状态的技术就应运而生了，一个是Cookie，而另一个则是Session。\n\n# **四、Cookie和Session本质是什么**\n\n Cookie是通过客户端保持状态的解决方案。从定义上来说，Cookie就是由服务器发给客户端的特殊信息，而这些信息以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。让我们说得更具体一些：当用户使用浏览器访问一个支持Cookie的网站的时候，用户会提供包括用户名在内的个人信息并且提交至服务器；接着，服务器在向客户端回传相应的超文本的同时也会发回这些个人信息，当然这些信息并不是存放在HTTP响应体（Response Body）中的，而是存放于HTTP响应头（Response Header）；当客户端浏览器接收到来自服务器的响应之后，浏览器会将这些信息存放在一个统一的位置，对于Windows操作系统而言，我们可以从：[系统盘]:/Documents and Settings/[用户名]/Cookies目录中找到存储的Cookie；自此，客户端再向服务器发送请求的时候，都会把相应的Cookie再次发回至服务器。而这次，Cookie信息则存放在HTTP请求头（Request Header）了。\n​        有了Cookie这样的技术实现，服务器在接收到来自客户端浏览器的请求之后，就能够通过分析存放于请求头的Cookie得到客户端特有的信息，从而动态生成与该客户端相对应的内容。通常，我们可以从很多网站的登录界面中看到“请记住我”这样的选项，如果你勾选了它之后再登录，那么在下一次访问该网站的时候就不需要进行重复而繁琐的登录动作了，而这个功能就是通过Cookie实现的。\n​        与Cookie相对的一个解决方案是Session，它是通过服务器来保持状态的。由于Session这个词汇包含的语义很多，因此需要在这里明确一下Session的含义。首先，我们通常都会把Session翻译成会话，因此我们可以把客户端浏览器与服务器之间一系列交互的动作称为一个Session。从这个语义出发，我们会提到Session持续的时间，会提到在Session过程中进行了什么操作等等；其次，Session指的是服务器端为客户端所开辟的存储空间，在其中保存的信息就是用于保持状态。从这个语义出发，我们则会提到往Session中存放什么内容，如何根据键值从Session中获取匹配的内容等。\n​        要使用Session，第一步当然是创建Session了。那么Session在何时创建呢？当然还是在服务器端程序运行的过程中创建的，不同语言实现的应用程序有不同创建Session的方法，而在Java中是通过调用HttpServletRequest的getSession方法（使用true作为参数）创建的。在创建了Session的同时，服务器会为该Session生成唯一的Session id，而这个Session id在随后的请求中会被用来重新获得已经创建的Session；在Session被创建之后，就可以调用Session相关的方法往Session中增加内容了，而这些内容只会保存在服务器中，发到客户端的只有Session id；当客户端再次发送请求的时候，会将这个Session id带上，服务器接受到请求之后就会依据Session id找到相应的Session，从而再次使用之。正式这样一个过程，用户的状态也就得以保持了。有关Session的内容还比较多，在以后的Post中，我还将继续讲述。\n\n# **五、总结**\n\n 综上所述，HTTP本身是一个无状态的连接协议，为了支持客户端与服务器之间的交互，我们就需要通过不同的技术为交互存储状态，而这些不同的技术就是Cookie和Session了。 ","source":"_drafts/面试题总结/浅谈HTTP的无状态性和Cookie、Session来源.md","raw":"---\ntitle: 浅谈HTTP的无状态性和Cookie、Session来源\ntags: web基础\n\n---\n\n <div align=\"center\">\n 浅谈HTTP的无状态性和Cookie、Session来源\n\n</div>\n\n<!-- more -->\n\n# **一、HTTP是什么**\n\nHTTP是Hyper Text Transfer Protocol的缩写，顾名思义，这个协议支持着超文本的传输。那么什么是超文本呢？说白了就是使用HTML编写的页面。通常，我们使用客户端浏览器访问服务器的资源，最常见的URL也是以html为后缀的文件。因此，我们可以说超文本是网络上最主要的资源。\n\n# **二、什么是HTTP无状态**\n\n既然HTTP协议的目的在于支持超文本的传输，更加广义一些就是支持资源的传输，那么在客户端浏览器向HTTP服务器发送请求，继而HTTP服务器将相应的资源发回给客户端这样一个过程中，无论对于客户端还是服务器，都没有必要记录这个过程，因为每一次请求和响应都是相对独立的，就好像你在自动售货机前投下硬币购买商品一样，谁都不会也不需要记住这样一个交易过程。一般而言，一个URL对应着唯一的超文本，而HTTP服务器也绝对公平公正，不管你是Michael，还是Jordon，它都会根据接收到的URL请求返回相同的超文本。正是因为这样的唯一性，使得记录用户的行为状态变得毫无意义，所以，HTTP协议被设计为无状态的连接协议符合它本身的需求。\n\n# **三、为什么出现Cookie和Session**\n\n然而，随着时间的推移，人们发现静态的HTML着实无聊而乏味，增加动态生成的内容才会令Web应用程序变得更加有用。于是乎，HTML的语法在不断膨胀，其中最重要的是增加了表单（Form）；客户端也增加了诸如脚本处理、DOM处理等功能；对于服务器，则相应的出现了CGI（Common Gateway Interface）以处理包含表单提交在内的动态请求。在这种客户端与服务器进行动态交互的Web应用程序出现之后，HTTP无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的，简单的购物车程序也要知道用户到底在之前选择了什么商品。于是，两种用于保持HTTP连接状态的技术就应运而生了，一个是Cookie，而另一个则是Session。\n\n# **四、Cookie和Session本质是什么**\n\n Cookie是通过客户端保持状态的解决方案。从定义上来说，Cookie就是由服务器发给客户端的特殊信息，而这些信息以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。让我们说得更具体一些：当用户使用浏览器访问一个支持Cookie的网站的时候，用户会提供包括用户名在内的个人信息并且提交至服务器；接着，服务器在向客户端回传相应的超文本的同时也会发回这些个人信息，当然这些信息并不是存放在HTTP响应体（Response Body）中的，而是存放于HTTP响应头（Response Header）；当客户端浏览器接收到来自服务器的响应之后，浏览器会将这些信息存放在一个统一的位置，对于Windows操作系统而言，我们可以从：[系统盘]:/Documents and Settings/[用户名]/Cookies目录中找到存储的Cookie；自此，客户端再向服务器发送请求的时候，都会把相应的Cookie再次发回至服务器。而这次，Cookie信息则存放在HTTP请求头（Request Header）了。\n​        有了Cookie这样的技术实现，服务器在接收到来自客户端浏览器的请求之后，就能够通过分析存放于请求头的Cookie得到客户端特有的信息，从而动态生成与该客户端相对应的内容。通常，我们可以从很多网站的登录界面中看到“请记住我”这样的选项，如果你勾选了它之后再登录，那么在下一次访问该网站的时候就不需要进行重复而繁琐的登录动作了，而这个功能就是通过Cookie实现的。\n​        与Cookie相对的一个解决方案是Session，它是通过服务器来保持状态的。由于Session这个词汇包含的语义很多，因此需要在这里明确一下Session的含义。首先，我们通常都会把Session翻译成会话，因此我们可以把客户端浏览器与服务器之间一系列交互的动作称为一个Session。从这个语义出发，我们会提到Session持续的时间，会提到在Session过程中进行了什么操作等等；其次，Session指的是服务器端为客户端所开辟的存储空间，在其中保存的信息就是用于保持状态。从这个语义出发，我们则会提到往Session中存放什么内容，如何根据键值从Session中获取匹配的内容等。\n​        要使用Session，第一步当然是创建Session了。那么Session在何时创建呢？当然还是在服务器端程序运行的过程中创建的，不同语言实现的应用程序有不同创建Session的方法，而在Java中是通过调用HttpServletRequest的getSession方法（使用true作为参数）创建的。在创建了Session的同时，服务器会为该Session生成唯一的Session id，而这个Session id在随后的请求中会被用来重新获得已经创建的Session；在Session被创建之后，就可以调用Session相关的方法往Session中增加内容了，而这些内容只会保存在服务器中，发到客户端的只有Session id；当客户端再次发送请求的时候，会将这个Session id带上，服务器接受到请求之后就会依据Session id找到相应的Session，从而再次使用之。正式这样一个过程，用户的状态也就得以保持了。有关Session的内容还比较多，在以后的Post中，我还将继续讲述。\n\n# **五、总结**\n\n 综上所述，HTTP本身是一个无状态的连接协议，为了支持客户端与服务器之间的交互，我们就需要通过不同的技术为交互存储状态，而这些不同的技术就是Cookie和Session了。 ","slug":"面试题总结-浅谈HTTP的无状态性和Cookie、Session来源","published":0,"date":"2017-05-10T12:37:07.000Z","updated":"2017-05-24T07:58:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ne3001mp5ukcxz3nn80","content":" <div align=\"center\"><br> 浅谈HTTP的无状态性和Cookie、Session来源<br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"一、HTTP是什么\"><a href=\"#一、HTTP是什么\" class=\"headerlink\" title=\"一、HTTP是什么\"></a><strong>一、HTTP是什么</strong></h1><p>HTTP是Hyper Text Transfer Protocol的缩写，顾名思义，这个协议支持着超文本的传输。那么什么是超文本呢？说白了就是使用HTML编写的页面。通常，我们使用客户端浏览器访问服务器的资源，最常见的URL也是以html为后缀的文件。因此，我们可以说超文本是网络上最主要的资源。</p>\n<h1 id=\"二、什么是HTTP无状态\"><a href=\"#二、什么是HTTP无状态\" class=\"headerlink\" title=\"二、什么是HTTP无状态\"></a><strong>二、什么是HTTP无状态</strong></h1><p>既然HTTP协议的目的在于支持超文本的传输，更加广义一些就是支持资源的传输，那么在客户端浏览器向HTTP服务器发送请求，继而HTTP服务器将相应的资源发回给客户端这样一个过程中，无论对于客户端还是服务器，都没有必要记录这个过程，因为每一次请求和响应都是相对独立的，就好像你在自动售货机前投下硬币购买商品一样，谁都不会也不需要记住这样一个交易过程。一般而言，一个URL对应着唯一的超文本，而HTTP服务器也绝对公平公正，不管你是Michael，还是Jordon，它都会根据接收到的URL请求返回相同的超文本。正是因为这样的唯一性，使得记录用户的行为状态变得毫无意义，所以，HTTP协议被设计为无状态的连接协议符合它本身的需求。</p>\n<h1 id=\"三、为什么出现Cookie和Session\"><a href=\"#三、为什么出现Cookie和Session\" class=\"headerlink\" title=\"三、为什么出现Cookie和Session\"></a><strong>三、为什么出现Cookie和Session</strong></h1><p>然而，随着时间的推移，人们发现静态的HTML着实无聊而乏味，增加动态生成的内容才会令Web应用程序变得更加有用。于是乎，HTML的语法在不断膨胀，其中最重要的是增加了表单（Form）；客户端也增加了诸如脚本处理、DOM处理等功能；对于服务器，则相应的出现了CGI（Common Gateway Interface）以处理包含表单提交在内的动态请求。在这种客户端与服务器进行动态交互的Web应用程序出现之后，HTTP无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的，简单的购物车程序也要知道用户到底在之前选择了什么商品。于是，两种用于保持HTTP连接状态的技术就应运而生了，一个是Cookie，而另一个则是Session。</p>\n<h1 id=\"四、Cookie和Session本质是什么\"><a href=\"#四、Cookie和Session本质是什么\" class=\"headerlink\" title=\"四、Cookie和Session本质是什么\"></a><strong>四、Cookie和Session本质是什么</strong></h1><p> Cookie是通过客户端保持状态的解决方案。从定义上来说，Cookie就是由服务器发给客户端的特殊信息，而这些信息以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。让我们说得更具体一些：当用户使用浏览器访问一个支持Cookie的网站的时候，用户会提供包括用户名在内的个人信息并且提交至服务器；接着，服务器在向客户端回传相应的超文本的同时也会发回这些个人信息，当然这些信息并不是存放在HTTP响应体（Response Body）中的，而是存放于HTTP响应头（Response Header）；当客户端浏览器接收到来自服务器的响应之后，浏览器会将这些信息存放在一个统一的位置，对于Windows操作系统而言，我们可以从：[系统盘]:/Documents and Settings/[用户名]/Cookies目录中找到存储的Cookie；自此，客户端再向服务器发送请求的时候，都会把相应的Cookie再次发回至服务器。而这次，Cookie信息则存放在HTTP请求头（Request Header）了。<br>​        有了Cookie这样的技术实现，服务器在接收到来自客户端浏览器的请求之后，就能够通过分析存放于请求头的Cookie得到客户端特有的信息，从而动态生成与该客户端相对应的内容。通常，我们可以从很多网站的登录界面中看到“请记住我”这样的选项，如果你勾选了它之后再登录，那么在下一次访问该网站的时候就不需要进行重复而繁琐的登录动作了，而这个功能就是通过Cookie实现的。<br>​        与Cookie相对的一个解决方案是Session，它是通过服务器来保持状态的。由于Session这个词汇包含的语义很多，因此需要在这里明确一下Session的含义。首先，我们通常都会把Session翻译成会话，因此我们可以把客户端浏览器与服务器之间一系列交互的动作称为一个Session。从这个语义出发，我们会提到Session持续的时间，会提到在Session过程中进行了什么操作等等；其次，Session指的是服务器端为客户端所开辟的存储空间，在其中保存的信息就是用于保持状态。从这个语义出发，我们则会提到往Session中存放什么内容，如何根据键值从Session中获取匹配的内容等。<br>​        要使用Session，第一步当然是创建Session了。那么Session在何时创建呢？当然还是在服务器端程序运行的过程中创建的，不同语言实现的应用程序有不同创建Session的方法，而在Java中是通过调用HttpServletRequest的getSession方法（使用true作为参数）创建的。在创建了Session的同时，服务器会为该Session生成唯一的Session id，而这个Session id在随后的请求中会被用来重新获得已经创建的Session；在Session被创建之后，就可以调用Session相关的方法往Session中增加内容了，而这些内容只会保存在服务器中，发到客户端的只有Session id；当客户端再次发送请求的时候，会将这个Session id带上，服务器接受到请求之后就会依据Session id找到相应的Session，从而再次使用之。正式这样一个过程，用户的状态也就得以保持了。有关Session的内容还比较多，在以后的Post中，我还将继续讲述。</p>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a><strong>五、总结</strong></h1><p> 综上所述，HTTP本身是一个无状态的连接协议，为了支持客户端与服务器之间的交互，我们就需要通过不同的技术为交互存储状态，而这些不同的技术就是Cookie和Session了。 </p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br> 浅谈HTTP的无状态性和Cookie、Session来源<br><br></div>","more":"<h1 id=\"一、HTTP是什么\"><a href=\"#一、HTTP是什么\" class=\"headerlink\" title=\"一、HTTP是什么\"></a><strong>一、HTTP是什么</strong></h1><p>HTTP是Hyper Text Transfer Protocol的缩写，顾名思义，这个协议支持着超文本的传输。那么什么是超文本呢？说白了就是使用HTML编写的页面。通常，我们使用客户端浏览器访问服务器的资源，最常见的URL也是以html为后缀的文件。因此，我们可以说超文本是网络上最主要的资源。</p>\n<h1 id=\"二、什么是HTTP无状态\"><a href=\"#二、什么是HTTP无状态\" class=\"headerlink\" title=\"二、什么是HTTP无状态\"></a><strong>二、什么是HTTP无状态</strong></h1><p>既然HTTP协议的目的在于支持超文本的传输，更加广义一些就是支持资源的传输，那么在客户端浏览器向HTTP服务器发送请求，继而HTTP服务器将相应的资源发回给客户端这样一个过程中，无论对于客户端还是服务器，都没有必要记录这个过程，因为每一次请求和响应都是相对独立的，就好像你在自动售货机前投下硬币购买商品一样，谁都不会也不需要记住这样一个交易过程。一般而言，一个URL对应着唯一的超文本，而HTTP服务器也绝对公平公正，不管你是Michael，还是Jordon，它都会根据接收到的URL请求返回相同的超文本。正是因为这样的唯一性，使得记录用户的行为状态变得毫无意义，所以，HTTP协议被设计为无状态的连接协议符合它本身的需求。</p>\n<h1 id=\"三、为什么出现Cookie和Session\"><a href=\"#三、为什么出现Cookie和Session\" class=\"headerlink\" title=\"三、为什么出现Cookie和Session\"></a><strong>三、为什么出现Cookie和Session</strong></h1><p>然而，随着时间的推移，人们发现静态的HTML着实无聊而乏味，增加动态生成的内容才会令Web应用程序变得更加有用。于是乎，HTML的语法在不断膨胀，其中最重要的是增加了表单（Form）；客户端也增加了诸如脚本处理、DOM处理等功能；对于服务器，则相应的出现了CGI（Common Gateway Interface）以处理包含表单提交在内的动态请求。在这种客户端与服务器进行动态交互的Web应用程序出现之后，HTTP无状态的特性严重阻碍了这些应用程序的实现，毕竟交互是需要承前启后的，简单的购物车程序也要知道用户到底在之前选择了什么商品。于是，两种用于保持HTTP连接状态的技术就应运而生了，一个是Cookie，而另一个则是Session。</p>\n<h1 id=\"四、Cookie和Session本质是什么\"><a href=\"#四、Cookie和Session本质是什么\" class=\"headerlink\" title=\"四、Cookie和Session本质是什么\"></a><strong>四、Cookie和Session本质是什么</strong></h1><p> Cookie是通过客户端保持状态的解决方案。从定义上来说，Cookie就是由服务器发给客户端的特殊信息，而这些信息以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。让我们说得更具体一些：当用户使用浏览器访问一个支持Cookie的网站的时候，用户会提供包括用户名在内的个人信息并且提交至服务器；接着，服务器在向客户端回传相应的超文本的同时也会发回这些个人信息，当然这些信息并不是存放在HTTP响应体（Response Body）中的，而是存放于HTTP响应头（Response Header）；当客户端浏览器接收到来自服务器的响应之后，浏览器会将这些信息存放在一个统一的位置，对于Windows操作系统而言，我们可以从：[系统盘]:/Documents and Settings/[用户名]/Cookies目录中找到存储的Cookie；自此，客户端再向服务器发送请求的时候，都会把相应的Cookie再次发回至服务器。而这次，Cookie信息则存放在HTTP请求头（Request Header）了。<br>​        有了Cookie这样的技术实现，服务器在接收到来自客户端浏览器的请求之后，就能够通过分析存放于请求头的Cookie得到客户端特有的信息，从而动态生成与该客户端相对应的内容。通常，我们可以从很多网站的登录界面中看到“请记住我”这样的选项，如果你勾选了它之后再登录，那么在下一次访问该网站的时候就不需要进行重复而繁琐的登录动作了，而这个功能就是通过Cookie实现的。<br>​        与Cookie相对的一个解决方案是Session，它是通过服务器来保持状态的。由于Session这个词汇包含的语义很多，因此需要在这里明确一下Session的含义。首先，我们通常都会把Session翻译成会话，因此我们可以把客户端浏览器与服务器之间一系列交互的动作称为一个Session。从这个语义出发，我们会提到Session持续的时间，会提到在Session过程中进行了什么操作等等；其次，Session指的是服务器端为客户端所开辟的存储空间，在其中保存的信息就是用于保持状态。从这个语义出发，我们则会提到往Session中存放什么内容，如何根据键值从Session中获取匹配的内容等。<br>​        要使用Session，第一步当然是创建Session了。那么Session在何时创建呢？当然还是在服务器端程序运行的过程中创建的，不同语言实现的应用程序有不同创建Session的方法，而在Java中是通过调用HttpServletRequest的getSession方法（使用true作为参数）创建的。在创建了Session的同时，服务器会为该Session生成唯一的Session id，而这个Session id在随后的请求中会被用来重新获得已经创建的Session；在Session被创建之后，就可以调用Session相关的方法往Session中增加内容了，而这些内容只会保存在服务器中，发到客户端的只有Session id；当客户端再次发送请求的时候，会将这个Session id带上，服务器接受到请求之后就会依据Session id找到相应的Session，从而再次使用之。正式这样一个过程，用户的状态也就得以保持了。有关Session的内容还比较多，在以后的Post中，我还将继续讲述。</p>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a><strong>五、总结</strong></h1><p> 综上所述，HTTP本身是一个无状态的连接协议，为了支持客户端与服务器之间的交互，我们就需要通过不同的技术为交互存储状态，而这些不同的技术就是Cookie和Session了。 </p>"},{"title":"浅谈HTTP的无状态性和Cookie、Session来源的副本","_content":"\n <div align=\"center\">\n\n浅谈HTTP中Get与Post的区别\n\n</div>\n\n<!-- more -->\n\nHttp定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。\n\n# GET用于信息获取，而且应该是安全的和幂等的。\n\n　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。\n\n* 注意：这里安全的含义仅仅是指是非修改信息。\n\n　　(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下**幂等**这个概念：\n\n　　**幂等**（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。\n　　幂等有一下几种定义：\n　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。\n　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。\n\n看完上述解释后，应该可以理解GET幂等的含义了。\n\n　　但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。\n\n# POST表示可能修改变服务器上的资源的请求。\n\n继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。\n\n \n\n　　上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：\n\n　　**1**.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。\n\n　　**2**.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。\n\n　　**3**.另外一个是，早期的Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。\n\n* 简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。\n\n　　以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTful Web Services》。\n\n \n\n　　说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：\n\n　　**1**.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&相连，如：login.action?name=hyddd&password=idontknow&verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。\n\n　　POST把提交的数据则放置在是HTTP包的包体中。\n\n　　**2**.\"GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB\"？？！\n\n　　以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：\n\n　　(1).首先是\"GET方式提交的数据最多只能是1024字节\"，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。\n\n　　注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。[见参考资料5]\n\n　　(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。\n\n　　对于ASP程序，Request对象处理每个表单域时存在100K的数据长度限制。但如果使用Request.BinaryRead则没有这个限制。\n\n　　由这个延伸出去，对于IIS 6.0，微软出于安全考虑，加大了限制。我们还需要注意：\n\n　　　　 1).IIS 6.0默认ASP POST数据量最大为200KB，每个表单域限制是100KB。\n　　　　 2).IIS 6.0默认上传文件的最大大小是4MB。\n　　　　 3).IIS 6.0默认最大请求头是16KB。\n　　IIS 6.0之前没有这些限制。[见参考资料5]\n\n　　所以上面的80K，100K可能只是默认值而已(注：关于IIS4和IIS5的参数，我还没有确认)，但肯定是可以自己设置的。由于每个版本的IIS对这些参数的默认值都不一样，具体请参考相关的IIS配置文档。\n\n　　**3**.在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。在JSP中，用request.getParameter(\\\"XXXX\\\")来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个test.jsp?name=hyddd&password=hyddd，用request.getQueryString()得到的是：name=hyddd&password=hyddd。在PHP中，可以用$_GET和$_POST分别获取GET和POST中的数据，而$_REQUEST则可以获取GET和POST两种请求中的数据。值得注意的是，JSP中使用request和PHP中使用$_REQUEST都会有隐患，这个下次再写个文章总结。\n\n　　**4**.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。\n\n　　总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为\"GET\"，实质上，GET和POST只是发送机制不同，并不是一个取一个发！","source":"_drafts/面试题总结/浅谈HTTP的无状态性和Cookie、Session来源的副本.md","raw":"---\ntitle: 浅谈HTTP的无状态性和Cookie、Session来源的副本\ntags: web基础\n\n---\n\n <div align=\"center\">\n\n浅谈HTTP中Get与Post的区别\n\n</div>\n\n<!-- more -->\n\nHttp定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。\n\n# GET用于信息获取，而且应该是安全的和幂等的。\n\n　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。\n\n* 注意：这里安全的含义仅仅是指是非修改信息。\n\n　　(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下**幂等**这个概念：\n\n　　**幂等**（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。\n　　幂等有一下几种定义：\n　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。\n　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。\n\n看完上述解释后，应该可以理解GET幂等的含义了。\n\n　　但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。\n\n# POST表示可能修改变服务器上的资源的请求。\n\n继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。\n\n \n\n　　上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：\n\n　　**1**.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。\n\n　　**2**.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。\n\n　　**3**.另外一个是，早期的Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。\n\n* 简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。\n\n　　以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTful Web Services》。\n\n \n\n　　说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：\n\n　　**1**.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&相连，如：login.action?name=hyddd&password=idontknow&verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。\n\n　　POST把提交的数据则放置在是HTTP包的包体中。\n\n　　**2**.\"GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB\"？？！\n\n　　以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：\n\n　　(1).首先是\"GET方式提交的数据最多只能是1024字节\"，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。\n\n　　注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。[见参考资料5]\n\n　　(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。\n\n　　对于ASP程序，Request对象处理每个表单域时存在100K的数据长度限制。但如果使用Request.BinaryRead则没有这个限制。\n\n　　由这个延伸出去，对于IIS 6.0，微软出于安全考虑，加大了限制。我们还需要注意：\n\n　　　　 1).IIS 6.0默认ASP POST数据量最大为200KB，每个表单域限制是100KB。\n　　　　 2).IIS 6.0默认上传文件的最大大小是4MB。\n　　　　 3).IIS 6.0默认最大请求头是16KB。\n　　IIS 6.0之前没有这些限制。[见参考资料5]\n\n　　所以上面的80K，100K可能只是默认值而已(注：关于IIS4和IIS5的参数，我还没有确认)，但肯定是可以自己设置的。由于每个版本的IIS对这些参数的默认值都不一样，具体请参考相关的IIS配置文档。\n\n　　**3**.在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。在JSP中，用request.getParameter(\\\"XXXX\\\")来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个test.jsp?name=hyddd&password=hyddd，用request.getQueryString()得到的是：name=hyddd&password=hyddd。在PHP中，可以用$_GET和$_POST分别获取GET和POST中的数据，而$_REQUEST则可以获取GET和POST两种请求中的数据。值得注意的是，JSP中使用request和PHP中使用$_REQUEST都会有隐患，这个下次再写个文章总结。\n\n　　**4**.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。\n\n　　总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为\"GET\"，实质上，GET和POST只是发送机制不同，并不是一个取一个发！","slug":"面试题总结-浅谈HTTP的无状态性和Cookie、Session来源的副本","published":0,"date":"2017-05-10T12:37:07.000Z","updated":"2017-05-24T07:59:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64ne9001op5uka8n8fsr2","content":" <div align=\"center\"><br><br>浅谈HTTP中Get与Post的区别<br><br></div>\n\n<a id=\"more\"></a>\n<p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p>\n<h1 id=\"GET用于信息获取，而且应该是安全的和幂等的。\"><a href=\"#GET用于信息获取，而且应该是安全的和幂等的。\" class=\"headerlink\" title=\"GET用于信息获取，而且应该是安全的和幂等的。\"></a>GET用于信息获取，而且应该是安全的和幂等的。</h1><p>　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p>\n<ul>\n<li>注意：这里安全的含义仅仅是指是非修改信息。</li>\n</ul>\n<p>　　(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下<strong>幂等</strong>这个概念：</p>\n<p>　　<strong>幂等</strong>（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br>　　幂等有一下几种定义：<br>　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。<br>　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。</p>\n<p>看完上述解释后，应该可以理解GET幂等的含义了。</p>\n<p>　　但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p>\n<h1 id=\"POST表示可能修改变服务器上的资源的请求。\"><a href=\"#POST表示可能修改变服务器上的资源的请求。\" class=\"headerlink\" title=\"POST表示可能修改变服务器上的资源的请求。\"></a>POST表示可能修改变服务器上的资源的请求。</h1><p>继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</p>\n<p>　　上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p>\n<p>　　<strong>1</strong>.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。</p>\n<p>　　<strong>2</strong>.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。</p>\n<p>　　<strong>3</strong>.另外一个是，早期的Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</p>\n<ul>\n<li>简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</li>\n</ul>\n<p>　　以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTful Web Services》。</p>\n<p>　　说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：</p>\n<p>　　<strong>1</strong>.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p>\n<p>　　POST把提交的数据则放置在是HTTP包的包体中。</p>\n<p>　　<strong>2</strong>.”GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB”？？！</p>\n<p>　　以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：</p>\n<p>　　(1).首先是”GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p>\n<p>　　注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。[见参考资料5]</p>\n<p>　　(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。</p>\n<p>　　对于ASP程序，Request对象处理每个表单域时存在100K的数据长度限制。但如果使用Request.BinaryRead则没有这个限制。</p>\n<p>　　由这个延伸出去，对于IIS 6.0，微软出于安全考虑，加大了限制。我们还需要注意：</p>\n<p>　　　　 1).IIS 6.0默认ASP POST数据量最大为200KB，每个表单域限制是100KB。<br>　　　　 2).IIS 6.0默认上传文件的最大大小是4MB。<br>　　　　 3).IIS 6.0默认最大请求头是16KB。<br>　　IIS 6.0之前没有这些限制。[见参考资料5]</p>\n<p>　　所以上面的80K，100K可能只是默认值而已(注：关于IIS4和IIS5的参数，我还没有确认)，但肯定是可以自己设置的。由于每个版本的IIS对这些参数的默认值都不一样，具体请参考相关的IIS配置文档。</p>\n<p>　　<strong>3</strong>.在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。在JSP中，用request.getParameter(\\”XXXX\\”)来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个test.jsp?name=hyddd&amp;password=hyddd，用request.getQueryString()得到的是：name=hyddd&amp;password=hyddd。在PHP中，可以用$_GET和$_POST分别获取GET和POST中的数据，而$_REQUEST则可以获取GET和POST两种请求中的数据。值得注意的是，JSP中使用request和PHP中使用$_REQUEST都会有隐患，这个下次再写个文章总结。</p>\n<p>　　<strong>4</strong>.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</p>\n<p>　　总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发！</p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<div align=\"center\"><br><br>浅谈HTTP中Get与Post的区别<br><br></div>","more":"<p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p>\n<h1 id=\"GET用于信息获取，而且应该是安全的和幂等的。\"><a href=\"#GET用于信息获取，而且应该是安全的和幂等的。\" class=\"headerlink\" title=\"GET用于信息获取，而且应该是安全的和幂等的。\"></a>GET用于信息获取，而且应该是安全的和幂等的。</h1><p>　　(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p>\n<ul>\n<li>注意：这里安全的含义仅仅是指是非修改信息。</li>\n</ul>\n<p>　　(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下<strong>幂等</strong>这个概念：</p>\n<p>　　<strong>幂等</strong>（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br>　　幂等有一下几种定义：<br>　　对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。<br>　　对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。</p>\n<p>看完上述解释后，应该可以理解GET幂等的含义了。</p>\n<p>　　但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p>\n<h1 id=\"POST表示可能修改变服务器上的资源的请求。\"><a href=\"#POST表示可能修改变服务器上的资源的请求。\" class=\"headerlink\" title=\"POST表示可能修改变服务器上的资源的请求。\"></a>POST表示可能修改变服务器上的资源的请求。</h1><p>继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</p>\n<p>　　上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p>\n<p>　　<strong>1</strong>.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。</p>\n<p>　　<strong>2</strong>.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。</p>\n<p>　　<strong>3</strong>.另外一个是，早期的Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</p>\n<ul>\n<li>简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</li>\n</ul>\n<p>　　以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(Representational State Transfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTful Web Services》。</p>\n<p>　　说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：</p>\n<p>　　<strong>1</strong>.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p>\n<p>　　POST把提交的数据则放置在是HTTP包的包体中。</p>\n<p>　　<strong>2</strong>.”GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB”？？！</p>\n<p>　　以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：</p>\n<p>　　(1).首先是”GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p>\n<p>　　注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。[见参考资料5]</p>\n<p>　　(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。</p>\n<p>　　对于ASP程序，Request对象处理每个表单域时存在100K的数据长度限制。但如果使用Request.BinaryRead则没有这个限制。</p>\n<p>　　由这个延伸出去，对于IIS 6.0，微软出于安全考虑，加大了限制。我们还需要注意：</p>\n<p>　　　　 1).IIS 6.0默认ASP POST数据量最大为200KB，每个表单域限制是100KB。<br>　　　　 2).IIS 6.0默认上传文件的最大大小是4MB。<br>　　　　 3).IIS 6.0默认最大请求头是16KB。<br>　　IIS 6.0之前没有这些限制。[见参考资料5]</p>\n<p>　　所以上面的80K，100K可能只是默认值而已(注：关于IIS4和IIS5的参数，我还没有确认)，但肯定是可以自己设置的。由于每个版本的IIS对这些参数的默认值都不一样，具体请参考相关的IIS配置文档。</p>\n<p>　　<strong>3</strong>.在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。在JSP中，用request.getParameter(\\”XXXX\\”)来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个test.jsp?name=hyddd&amp;password=hyddd，用request.getQueryString()得到的是：name=hyddd&amp;password=hyddd。在PHP中，可以用$_GET和$_POST分别获取GET和POST中的数据，而$_REQUEST则可以获取GET和POST两种请求中的数据。值得注意的是，JSP中使用request和PHP中使用$_REQUEST都会有隐患，这个下次再写个文章总结。</p>\n<p>　　<strong>4</strong>.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。</p>\n<p>　　总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发！</p>"},{"title":"一些mac端好用端插件分享","date":"2017-05-05T05:28:27.000Z","_content":"<div align=\"center\">\n想要生活变得更好？来看看这些插件吧！\n</div>\n![](muhammad.jpg)\n<!-- more -->\n\n\n\n[TOC]\n\n\n\n-----\n\n# 百度云限速？试试Mac神器Aria2\n\n<br/>\n使用Tampermonkey插件 + “百度网盘直接下载助手”脚本（2017-03-20更新）\n\n在Chrome上安装Tampermonkey插件。\n\n安装“百度网盘直接下载助手”脚本。\n\n# 会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。\n\n\n\n点击“直接下载”会使用浏览器默认下载器进行下载。点击“显示链接”，可复制链接放入aria2进行下载。\n\n------\n\n# 添加sitemap和feed插件\n<br/>\n\n\n\n\n切换到你本地的hexo，\n\n```\nnpm install hexo-generator-feed -save\nnpm install hexo-generator-sitemap -save\n```\n\n修改_config.yml，增加以下内容\n\n```\n# ExtensionsPlugins:\n- hexo-generator-feed\n- hexo-generator-sitemap\n\n #Feed Atomfeed:\n  type: atom\n  path: atom.xml\n  limit: 20#sitemapsitemap:\n  path: sitemap.xml\n```\n\n\n再执行以下命令，部署服务端\nhexo d -g\n\n配完之后，就可以访问 https://gdutxiaoxu.github.io/atom.xml 和 https://gdutxiaoxu.github.io/sitemap.xml ，发现这两个文件已经成功生成了。\n\n\n\n\n\n\n\n\n\n------\n\n# 制作404页面\n\n<br/>\n\n\n\n{% codeblock  404.html lang:html  http://www.runoob.com/java/java-tutorial.html html%}<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n{% endcodeblock  %}\n\n\n\n\n\n# 其他一些好用的插件\n\n{% blockquote %}\nhexo可视化后台管理，很方便 - [hexo-hey](https://github.com/nihgwu/hexo-hey)  \n在 hexo 中无痛使用本地图片 - [hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n备份整个博客包括主题 - [hexo-git-backup](https://github.com/coneycode/hexo-git-backup)\n\n\n{% endblockquote %}\n\n","source":"_posts/00001/Blog/2017-05-05-一些mac端好用端插件分享.md","raw":"---\ntitle: 一些mac端好用端插件分享\ndate: 2017-05-05 13:28:27\ntags:\n---\n<div align=\"center\">\n想要生活变得更好？来看看这些插件吧！\n</div>\n![](muhammad.jpg)\n<!-- more -->\n\n\n\n[TOC]\n\n\n\n-----\n\n# 百度云限速？试试Mac神器Aria2\n\n<br/>\n使用Tampermonkey插件 + “百度网盘直接下载助手”脚本（2017-03-20更新）\n\n在Chrome上安装Tampermonkey插件。\n\n安装“百度网盘直接下载助手”脚本。\n\n# 会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。\n\n\n\n点击“直接下载”会使用浏览器默认下载器进行下载。点击“显示链接”，可复制链接放入aria2进行下载。\n\n------\n\n# 添加sitemap和feed插件\n<br/>\n\n\n\n\n切换到你本地的hexo，\n\n```\nnpm install hexo-generator-feed -save\nnpm install hexo-generator-sitemap -save\n```\n\n修改_config.yml，增加以下内容\n\n```\n# ExtensionsPlugins:\n- hexo-generator-feed\n- hexo-generator-sitemap\n\n #Feed Atomfeed:\n  type: atom\n  path: atom.xml\n  limit: 20#sitemapsitemap:\n  path: sitemap.xml\n```\n\n\n再执行以下命令，部署服务端\nhexo d -g\n\n配完之后，就可以访问 https://gdutxiaoxu.github.io/atom.xml 和 https://gdutxiaoxu.github.io/sitemap.xml ，发现这两个文件已经成功生成了。\n\n\n\n\n\n\n\n\n\n------\n\n# 制作404页面\n\n<br/>\n\n\n\n{% codeblock  404.html lang:html  http://www.runoob.com/java/java-tutorial.html html%}<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n{% endcodeblock  %}\n\n\n\n\n\n# 其他一些好用的插件\n\n{% blockquote %}\nhexo可视化后台管理，很方便 - [hexo-hey](https://github.com/nihgwu/hexo-hey)  \n在 hexo 中无痛使用本地图片 - [hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n备份整个博客包括主题 - [hexo-git-backup](https://github.com/coneycode/hexo-git-backup)\n\n\n{% endblockquote %}\n\n","slug":"00001-Blog-2017-05-05-一些mac端好用端插件分享","published":1,"updated":"2017-05-13T23:56:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64net001wp5ukrndhj7in","content":"<p><div align=\"center\"><br>想要生活变得更好？来看看这些插件吧！<br></div><br><img src=\"/2017/05/05/00001-Blog-2017-05-05-一些mac端好用端插件分享/muhammad.jpg\" alt=\"\"><br><a id=\"more\"></a></p>\n<p>[TOC]</p>\n<hr>\n<h1 id=\"百度云限速？试试Mac神器Aria2\"><a href=\"#百度云限速？试试Mac神器Aria2\" class=\"headerlink\" title=\"百度云限速？试试Mac神器Aria2\"></a>百度云限速？试试Mac神器Aria2</h1><p><br><br>使用Tampermonkey插件 + “百度网盘直接下载助手”脚本（2017-03-20更新）</p>\n<p>在Chrome上安装Tampermonkey插件。</p>\n<p>安装“百度网盘直接下载助手”脚本。</p>\n<h1 id=\"会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。\"><a href=\"#会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。\" class=\"headerlink\" title=\"会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。\"></a>会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。</h1><p>点击“直接下载”会使用浏览器默认下载器进行下载。点击“显示链接”，可复制链接放入aria2进行下载。</p>\n<hr>\n<h1 id=\"添加sitemap和feed插件\"><a href=\"#添加sitemap和feed插件\" class=\"headerlink\" title=\"添加sitemap和feed插件\"></a>添加sitemap和feed插件</h1><p><br></p>\n<p>切换到你本地的hexo，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-feed -save</div><div class=\"line\">npm install hexo-generator-sitemap -save</div></pre></td></tr></table></figure>\n<p>修改_config.yml，增加以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ExtensionsPlugins:</div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\">- hexo-generator-sitemap</div><div class=\"line\"></div><div class=\"line\"> #Feed Atomfeed:</div><div class=\"line\">  type: atom</div><div class=\"line\">  path: atom.xml</div><div class=\"line\">  limit: 20#sitemapsitemap:</div><div class=\"line\">  path: sitemap.xml</div></pre></td></tr></table></figure>\n<p>再执行以下命令，部署服务端<br>hexo d -g</p>\n<p>配完之后，就可以访问 <a href=\"https://gdutxiaoxu.github.io/atom.xml\" target=\"_blank\" rel=\"external\">https://gdutxiaoxu.github.io/atom.xml</a> 和 <a href=\"https://gdutxiaoxu.github.io/sitemap.xml\" target=\"_blank\" rel=\"external\">https://gdutxiaoxu.github.io/sitemap.xml</a> ，发现这两个文件已经成功生成了。</p>\n<hr>\n<h1 id=\"制作404页面\"><a href=\"#制作404页面\" class=\"headerlink\" title=\"制作404页面\"></a>制作404页面</h1><p><br></p>\n<figure class=\"highlight html\"><figcaption><span>404.html</span><a href=\"http://www.runoob.com/java/java-tutorial.html\" target=\"_blank\" rel=\"external\">html</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8;\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"all\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.qq.com/404/search_children.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> <span class=\"attr\">homePageUrl</span>=<span class=\"string\">\"your site url \"</span> <span class=\"attr\">homePageName</span>=<span class=\"string\">\"回到我的主页\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"其他一些好用的插件\"><a href=\"#其他一些好用的插件\" class=\"headerlink\" title=\"其他一些好用的插件\"></a>其他一些好用的插件</h1><blockquote><p>hexo可视化后台管理，很方便 - <a href=\"https://github.com/nihgwu/hexo-hey\" target=\"_blank\" rel=\"external\">hexo-hey</a><br>在 hexo 中无痛使用本地图片 - <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">hexo-asset-image</a><br>备份整个博客包括主题 - <a href=\"https://github.com/coneycode/hexo-git-backup\" target=\"_blank\" rel=\"external\">hexo-git-backup</a></p>\n</blockquote>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<p><div align=\"center\"><br>想要生活变得更好？来看看这些插件吧！<br></div><br><img src=\"/2017/05/05/00001-Blog-2017-05-05-一些mac端好用端插件分享/muhammad.jpg\" alt=\"\"><br></p>","more":"<p></p>\n<p>[TOC]</p>\n<hr>\n<h1 id=\"百度云限速？试试Mac神器Aria2\"><a href=\"#百度云限速？试试Mac神器Aria2\" class=\"headerlink\" title=\"百度云限速？试试Mac神器Aria2\"></a>百度云限速？试试Mac神器Aria2</h1><p><br><br>使用Tampermonkey插件 + “百度网盘直接下载助手”脚本（2017-03-20更新）</p>\n<p>在Chrome上安装Tampermonkey插件。</p>\n<p>安装“百度网盘直接下载助手”脚本。</p>\n<h1 id=\"会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。\"><a href=\"#会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。\" class=\"headerlink\" title=\"会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。\"></a>会在百度云下载页面原来”下载”按钮旁边多出一个”下载助手”的按钮。</h1><p>点击“直接下载”会使用浏览器默认下载器进行下载。点击“显示链接”，可复制链接放入aria2进行下载。</p>\n<hr>\n<h1 id=\"添加sitemap和feed插件\"><a href=\"#添加sitemap和feed插件\" class=\"headerlink\" title=\"添加sitemap和feed插件\"></a>添加sitemap和feed插件</h1><p><br></p>\n<p>切换到你本地的hexo，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-feed -save</div><div class=\"line\">npm install hexo-generator-sitemap -save</div></pre></td></tr></table></figure>\n<p>修改_config.yml，增加以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># ExtensionsPlugins:</div><div class=\"line\">- hexo-generator-feed</div><div class=\"line\">- hexo-generator-sitemap</div><div class=\"line\"></div><div class=\"line\"> #Feed Atomfeed:</div><div class=\"line\">  type: atom</div><div class=\"line\">  path: atom.xml</div><div class=\"line\">  limit: 20#sitemapsitemap:</div><div class=\"line\">  path: sitemap.xml</div></pre></td></tr></table></figure>\n<p>再执行以下命令，部署服务端<br>hexo d -g</p>\n<p>配完之后，就可以访问 <a href=\"https://gdutxiaoxu.github.io/atom.xml\" target=\"_blank\" rel=\"external\">https://gdutxiaoxu.github.io/atom.xml</a> 和 <a href=\"https://gdutxiaoxu.github.io/sitemap.xml\" target=\"_blank\" rel=\"external\">https://gdutxiaoxu.github.io/sitemap.xml</a> ，发现这两个文件已经成功生成了。</p>\n<hr>\n<h1 id=\"制作404页面\"><a href=\"#制作404页面\" class=\"headerlink\" title=\"制作404页面\"></a>制作404页面</h1><p><br></p>\n<figure class=\"highlight html\"><figcaption><span>404.html</span><a href=\"http://www.runoob.com/java/java-tutorial.html\" target=\"_blank\" rel=\"external\">html</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html;charset=utf-8;\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"all\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index,follow\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.qq.com/404/search_children.js\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> <span class=\"attr\">homePageUrl</span>=<span class=\"string\">\"your site url \"</span> <span class=\"attr\">homePageName</span>=<span class=\"string\">\"回到我的主页\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"其他一些好用的插件\"><a href=\"#其他一些好用的插件\" class=\"headerlink\" title=\"其他一些好用的插件\"></a>其他一些好用的插件</h1><blockquote><p>hexo可视化后台管理，很方便 - <a href=\"https://github.com/nihgwu/hexo-hey\" target=\"_blank\" rel=\"external\">hexo-hey</a><br>在 hexo 中无痛使用本地图片 - <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">hexo-asset-image</a><br>备份整个博客包括主题 - <a href=\"https://github.com/coneycode/hexo-git-backup\" target=\"_blank\" rel=\"external\">hexo-git-backup</a></p>\n</blockquote>"},{"title":"自己动手搭建个人博客到优化","updated":"2017-05-13T23:51:38.000Z","date":"2017-05-05T14:07:56.000Z","_content":"\n![](avatar.jpg)\n\n <div align=\"center\">\n  今天，是你未来所有剩余的日子中，最早的一天\n\n</div>\n\n<div align=\"right\">——**stormzhang**      </div>\n\n\n\n[TOC]\n\n\n\n\n\n\n# 背景 #\n<br/>\n\n\n\n我为什么要写这篇文章？是因为大学三年了，感觉学了这么多知识，但是并没有真正地去消化和总结过，最近又看到了[stormzhang](http://www.baidu.com \"stormzhang\")大神写的这篇[我为什么坚持写博客？](http://stormzhang.com/android/2016/03/04/why-i-keep-writing-blog/ \"stormzhang\")。我真的感触很深，以前花了很多时间学的东西，不久之后便会印象模糊，想要回忆的时候，又不能快速找到。所以我决定从今天开始写博客，总结和梳理自己的知识。\n\n\n\n<!-- more -->\n\nstormzhang在他的文章里推荐了hexo，基于Node框架，可以和Github Pages结合起来搭建个人博客。而且主题样式非常多，可以自己选择搭配的东西很多。当我第一次把博客跑起来的时候，真的惊呆了，没想到个人博客也可以这么轻松的搭建。我用了五一这个假期，自己动手搭建了现在您正看到的这个博客，虽然现在很粗糙，但是我会不断的学习和优化它的。\n\n## Hexo##\n### 什么是Hexo###\nHexo是一个快速，简单和强大的博客框架。可以使用Markdown进行写作，Hexo会在几秒钟内生成具有美丽主题的静态文件。\n\n### 安装要求 ###\n这里具体的操作步骤可以到[hexo官网](https://hexo.io/)。\n\n- [Node.js](https://nodejs.org)\n- [Git](https://git-scm.com/)\n\n如果已经装好了这些，那么我们现在就开始吧！\n#### 第一步 ####\n一旦安装了所有要求，可以用npm安装Hexo。\n```Shell\n$ npm install hexo-cli -g  //在本地安装hexo的环境 \n```\n#### 第二步 ####\n首先选择一个目录作为hexo博客的根目录，使用git bash cd到这个目录，然后输入  \n```Shell\n$ hexo init <folder>   //推荐 ，这里的folder参数如果指定，便会在终端当前的资料夹建立一个名为 folder 的新资料夹；\n$ hexo init  //直接使用当前目录初始化\n```\n完成后\n```Shell\n   $ cd folder\n   $ npm install  //在当前目录下安装hexo核心文件\n```\n这样就安装完成了。这时候可以看到`floder`文件夹下具有这些子目录\n```Yaml\n    .\n    ├── _config.yml   站点配置文件\n    ├── package.json\n    ├── scaffolds    存放模板的地方\n    ├── source       原文件夹，存放网站内容\n    |   ├── _drafts  存放临时草稿文件的地方\n    |   └── _posts   已经发布的文章\n    └── themes       主题文件夹\n```\n`source`中带有前缀_(下划线)的文件夹，在`generate`的时候会渲染到`public`目录中，其他的文件夹和文件仅仅被简单地复制到`public`中。\n\n\n在`floder`目录下，有一个`_config.yml`，这个文件是整个网站的核心配置文件，由于后面主题文件夹中也有一个同名的配置文件，为了区分，网站的核心配置文件就叫做`站点配置文件`，主题中的叫做`主题配置文件`。\n\n打开`站点配置文件`,可以看到`Site`标签，这是我的配置。\n```Yaml\n\t# Site\n\ttitle: SimpleLifee  #网站标题\n\tsubtitle: code, mylife   #网站副标题\n\tdescription: start from zero     #网站描述\n\tauthor: Nimon        #你的名字\n\tlanguage: zh-Hans    #语言，\n\ttimezone: Asia/Shanghai  #时区\n```\n还有`Deployment`标签，与Github Pages进行关联\n```Yaml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n\t type: git\n\t repo: git@github.com:SimpleLifee/SimpleLifee.github.io.git \n\t branch: master\n```\n其中`type`必须填git，`repo`填写你在git上创建的库的`ssh`地址，或者`https`地址。`注意`如果是https的那么以后每次`deploy`的时候都要求你输入用户名和密码,如果改成`ssh`并且你没有给你的id_rsa设置密码（空密码也一样）的话，就不用每次都输入密码了。\n```Shell\n$ ssh-keygen -p -f /root/.ssh/id_dsa -N '' \n```\n如果你之前设置了密码，那么使用这条命令就可以更改你的私钥的密码了。参考[superuser](https://superuser.com/questions/508408/public-key-always-asking-for-password-and-keyphrase)\n\n\n\n\n## 命令 ##\n\n### 写作 ###\n```Shell\n$ hexo new [layout] <title>  \n```\n创建一个新文章，`layout`可以有三个参数`post`、`page`、`draft`, hexo 会在 `Scaffold` 文件夹下寻找你写的 `layout.md` 文件模板来建立文件。如果 `title` 包含空格，请用引号括起来。\n\n#### 文件名称  ####\n\n在站点配置文件中`Writing` 标签下添加\n```Yaml\nnew_post_name: :year-:month-:day-:title.md\n```\n其中 `:month` 和 `:i_month` 的区别在于 前者有前导零 （比如 `04` ）\n\n#### 草稿 ####\n\n如果创建新文章的时候，指定了 `draft` 参数，那么就是保存到 `source/_drafts` 文件夹中，可以使用下面的语句，将草稿移动到 `source/_posts`文件中。\n```Shell\n$ hexo publish [layout] <filename>\n```\n发布草稿变成正式文章。一般`filename`写你的草稿文件的名字，`layout`写`post`\n\n#### 模版（Scaffold）####\n\n在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：\n```Shell\n$ hexo new photo \"My Gallery\"\n```\n\n在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章\n\n| 变量       | 描述     |\n| -------- | ------ |\n| `layout` | 布局     |\n| `title`  | 标题     |\n| `date`   | 文件建立日期 |\n\n\n### 布局（Layout）###\nHexo 有三种默认布局：`post`、`page`、`draft`，它们分别对应不同的路径，自定义的其他布局和 `post` 相同，都将储存到 `source/_posts` 文件夹。\n\n| 布局    | 路径             |\n| :---- | :------------- |\n| post  | source/_posts  |\n| page  | source         |\n| draft | source/_drafts |\n\n>不要处理我的文章  \n>可以在Front-Matter 中的layout: 设为 false。\n\n \n\n### Front-matter  ###\nFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，例如\n```\ntitle: Hello World\ndate: 2017/5/1 20:46:25\n---\n```\n\n也可以使用JSON 格式，只需要把 --- 换成 ;;;\n```\n\"title\": \"Hello World\",\n\"date\": \"2017/5/1 20:46:25\"\n;;;\n```\n\nFront-matter的参数列表\n\n| 参数            | 描述         | 默认值    |\n| ------------- | ---------- | ------ |\n| `layout`      | 布局         |        |\n| `title`       | 标题         |        |\n| `date`        | 建立日期       | 文件建立日期 |\n| `updated`     | 更新日期       | 文件更新日期 |\n| `comments`    | 开启文章的评论功能  | true   |\n| `description` | 文章的描述      |        |\n| `tags`        | 标签（不适用于分页） |        |\n| `categories`  | 分类（不适用于分页） |        |\n| `permalink`   | 覆盖文章网址     |        |\n\n\n#### 分类和标签 ####\n\n```Yaml\ntags:\n  - List\n  - Dictionary\n  - ArraryList\n  - hashtable\n  - Stack\n  - Queue\n```\n或者\n```Yaml\n tags:\n [Python, Javascript, Hexo]\n```\n\n#### 引用块（Block Quote）####\n\n模板如下\n```\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n\n例如\n```\n{% blockquote stormzhang %}\n今天，是你未来所有剩余的日子中，最早的一天\n{% endblockquote %}\n```\n\n{% blockquote stormzhang %}\n今天，是你未来所有剩余的日子中，最早的一天\n{% endblockquote %}\n\n\n#### 代码块（Code Block）####\n\n模板如下\n```\n{% codeblock [title] [lang:language] [url] [link text]%}\ncode snippet\n{% endcodeblock %}\n```\n\n例如：\n```\n{% codeblock  main.java lang:java  http://www.runoob.com/java/java-tutorial.html Java%}\npublic static void main(String []args){\n}\n{% endcodeblock  %}\n```\n\n{% codeblock  main.java lang:java  http://www.runoob.com/java/java-tutorial.html Java%}\npublic static void main(String []args){\n}\n{% endcodeblock  %}\n\n\n#### 醒目引文（Pull Quote）####\n```Java\n{% pullquote [class] %}\nsomething important\n{% endpullquote %}\n```\n\n如下\n\n{% pullquote [class] %}\nsomething important\n{% endpullquote %}\n\n#### 图片（Image） ####\n\n有两种方式，一种是markdown格式的\n```\n![](/images/avatar.jpg)\n```\n\n另一种是hexo支持的格式\n\n\n```\n{% img [class names] /path/to/image [width] [height][title text [alt text]] %}\n```\n\n\n#### 链接（Link） ####\n\n在文章中插入链接，并自动给外部链接添加 target=\"_blank\" 属性。\n\n\t{% link text url [external] [title] %}\n\n\t{% link 谷歌 http://www.google.com google %}\n\n\n如{% link 谷歌 http://www.google.com google %}\n\n\n\n\n\n#### 外部引用（Include Code） ####\n可以引入其他文件中的代码，例如下面语句\n```\n{% include_code [title][lang:language] path/to/file %}\n```\n\n\n> hexo支持的语法还有很多，如\n> **jsFiddle**、**Gist**、**iframe**、**Youtube**、**Vimeo**等等，有需要的建议自行查阅[官方文档](https://hexo.io/zh-cn/docs/tag-plugins.html)\n\n\n\n### 服务器 ###\n\n#### 安装与使用 ####\n要使用hexo的服务器，首先要安装\n\n\n{% blockquote  %}\nnpm install hexo-server --save\n{% endblockquote %}\n\n\n安装完成后，默认在 [http://localhost:4000](http://localhost:4000) 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。\n\n\n\n>  $ hexo server -p 5000 //启动服务器， 可以简写 hexo s\n\n\n参数 `-p` 覆盖默认端口，参数 `-w` 查看文件改动\n看到下面的信息，说明已经成功，可以查看你的博客了。\n![](http://i.imgur.com/qqg116z.png)\n\n#### 静态模式 ####\n\n在静态模式下，服务器只处理 public 文件夹内的文件，而不会处理文件变动，一般性用于你正在写博客的情况下。\n\n```Shell\n$ hexo server -s\n```\n\n\n\n### 生成文件(Generating) ###\n\n```Shell\n$ hexo generate \n```\n\n生成静态文件，参数 `-d` 生成完成后部署，参数 `-w` 查看文件改动，下面两种写法都一样\n\n```Shell\n$ hexo g -d\n$ hexo d -g\n```\n\n\n#### 监视文件变动 ####\n\n```Shell\n$ hexo generate --watch\n```\nHexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。\n\n\n### 部署（Deployment） ###\n\n```Shell\n$ hexo deploy\n```\n\n部署你的网站，在使用之前，需要在`站点配置文件` 进行配置。可以有多个deployer\n\n\n```Yaml\ndeploy:\n- type: git\n  repo:\n- type: heroku    \n  repo:\n```\n\n\n\n\n> 缩进\n>\n> YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。\n\n \n\n#### Git ####\n\n部署提示找不到Git , 直接使用这个命令从 [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git) 上安装git的部署插件\n\n```shell\n$ npm install hexo-deployer-git --save\n```\n\n\n修改配置。\n{% codeblock    lang:yaml%}\ndeploy:\ntype: git\nrepo: <repository url>  \nbranch: [branch]  \nmessage: [message]\n{% endcodeblock  %}\n​\t\n\n| 参数        | 描述                                       |\n| --------- | ---------------------------------------- |\n| `repo`    | 库（Repository）地址                          |\n| `branch`  | 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\t\t\t\t\t最好填ssh，这样就每次deploy的时候都要输入密码了。 |\n| `message` | 自定义提交信息 (默认为 `Site updated: { { now('YYYY-MM-DD HH:mm:ss') }}`) |\n\n\n\n#### 其他 ####\n\n其他部署方案，可以参见[官方文档](https://hexo.io/zh-cn/docs/tag-plugins.html)\n```shell\n$ hexo clean\n```\n清除缓存文件（db.json）和生成的文件（public）\n```shell\n$ hexo list <type>\n```\n`type` 可以是`page`, `post`,`route`, `tag`, `category`\n```shell\n$ hexo version\n```\n显示版本信息\n```shell\n$ hexo --config custom.yml\n$ hexo --config custom.yml，custom2.json\n```\n使用自定义配置文件（而不是_config.yml），还可以接受将文件合并为一个的JSON或YAML配置文件的逗号分隔列表（无空格）\n\n\n\n\n自动更新文件\n```shell\n$ hexo g     //也可以这样写hexo generate \n```\n部署到git\n```shell\n$ hexo d\n```\n\n一般可以这样简写，就是说在部署到git之前，先进行更新\n```shell\n$ hexo d -g\n```\n可以查看hexo的版本\n```shell\nhexo -v\n```\n\n这时候万一遇到这个错误\n```\nERROR Deployer not found: git\n```\n\n试试\n\n```Shell\n$ npm install hexo-deployer-git --save\n$ npm install hexo --save\n```\n\n\n\n\n\n\n\n#NexT\n\n如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。\n\n1. 下载主题\n\n\n\n​```shell\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n\n\n2. 启用主题\n   与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 `站点配置文件`， 找到` theme `字段，并将其值更改为` next`。\n```\n   theme: next\n```\n\n   到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 `$ hexo clean` 来清除 Hexo 的缓存。\n\n\n\n\n\n### 一些好用的插件 ###\n\n{% blockquote %}\nhexo可视化后台管理，很方便 - [hexo-hey](https://github.com/nihgwu/hexo-hey)  \n在 hexo 中无痛使用本地图片 - [hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n备份整个博客包括主题 - [hexo-git-backup](https://github.com/coneycode/hexo-git-backup)\n\n\n{% endblockquote %}\n\n### 参考 ###\n\n{% blockquote %}\n网易云音乐 - [Hexo中播放网易云音乐的实践](http://weqeo.com/2016/10/11/Hexo中播放网易云音乐的实践)  \n网易云音乐 - [GitHub Ribbons](https://github.com/blog/273-github-ribbons)  \n字数统计WordCount 、阅读时长预计Min2Read、总字数统计TotalCount - [hexo-wordcount](https://github.com/willin/hexo-wordcount)  \n\n{% endblockquote %}\n```","source":"_posts/00001/Blog/2017-05-05-自己动手搭建个人博客到优化.md","raw":"---\ntitle : 自己动手搭建个人博客到优化\ntags: 技术\nupdated : 2017年5月5日 23:46:16\ndate: 2017-05-05 22:07:56\ncategories:\n- 技术\n---\n\n![](avatar.jpg)\n\n <div align=\"center\">\n  今天，是你未来所有剩余的日子中，最早的一天\n\n</div>\n\n<div align=\"right\">——**stormzhang**      </div>\n\n\n\n[TOC]\n\n\n\n\n\n\n# 背景 #\n<br/>\n\n\n\n我为什么要写这篇文章？是因为大学三年了，感觉学了这么多知识，但是并没有真正地去消化和总结过，最近又看到了[stormzhang](http://www.baidu.com \"stormzhang\")大神写的这篇[我为什么坚持写博客？](http://stormzhang.com/android/2016/03/04/why-i-keep-writing-blog/ \"stormzhang\")。我真的感触很深，以前花了很多时间学的东西，不久之后便会印象模糊，想要回忆的时候，又不能快速找到。所以我决定从今天开始写博客，总结和梳理自己的知识。\n\n\n\n<!-- more -->\n\nstormzhang在他的文章里推荐了hexo，基于Node框架，可以和Github Pages结合起来搭建个人博客。而且主题样式非常多，可以自己选择搭配的东西很多。当我第一次把博客跑起来的时候，真的惊呆了，没想到个人博客也可以这么轻松的搭建。我用了五一这个假期，自己动手搭建了现在您正看到的这个博客，虽然现在很粗糙，但是我会不断的学习和优化它的。\n\n## Hexo##\n### 什么是Hexo###\nHexo是一个快速，简单和强大的博客框架。可以使用Markdown进行写作，Hexo会在几秒钟内生成具有美丽主题的静态文件。\n\n### 安装要求 ###\n这里具体的操作步骤可以到[hexo官网](https://hexo.io/)。\n\n- [Node.js](https://nodejs.org)\n- [Git](https://git-scm.com/)\n\n如果已经装好了这些，那么我们现在就开始吧！\n#### 第一步 ####\n一旦安装了所有要求，可以用npm安装Hexo。\n```Shell\n$ npm install hexo-cli -g  //在本地安装hexo的环境 \n```\n#### 第二步 ####\n首先选择一个目录作为hexo博客的根目录，使用git bash cd到这个目录，然后输入  \n```Shell\n$ hexo init <folder>   //推荐 ，这里的folder参数如果指定，便会在终端当前的资料夹建立一个名为 folder 的新资料夹；\n$ hexo init  //直接使用当前目录初始化\n```\n完成后\n```Shell\n   $ cd folder\n   $ npm install  //在当前目录下安装hexo核心文件\n```\n这样就安装完成了。这时候可以看到`floder`文件夹下具有这些子目录\n```Yaml\n    .\n    ├── _config.yml   站点配置文件\n    ├── package.json\n    ├── scaffolds    存放模板的地方\n    ├── source       原文件夹，存放网站内容\n    |   ├── _drafts  存放临时草稿文件的地方\n    |   └── _posts   已经发布的文章\n    └── themes       主题文件夹\n```\n`source`中带有前缀_(下划线)的文件夹，在`generate`的时候会渲染到`public`目录中，其他的文件夹和文件仅仅被简单地复制到`public`中。\n\n\n在`floder`目录下，有一个`_config.yml`，这个文件是整个网站的核心配置文件，由于后面主题文件夹中也有一个同名的配置文件，为了区分，网站的核心配置文件就叫做`站点配置文件`，主题中的叫做`主题配置文件`。\n\n打开`站点配置文件`,可以看到`Site`标签，这是我的配置。\n```Yaml\n\t# Site\n\ttitle: SimpleLifee  #网站标题\n\tsubtitle: code, mylife   #网站副标题\n\tdescription: start from zero     #网站描述\n\tauthor: Nimon        #你的名字\n\tlanguage: zh-Hans    #语言，\n\ttimezone: Asia/Shanghai  #时区\n```\n还有`Deployment`标签，与Github Pages进行关联\n```Yaml\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n\t type: git\n\t repo: git@github.com:SimpleLifee/SimpleLifee.github.io.git \n\t branch: master\n```\n其中`type`必须填git，`repo`填写你在git上创建的库的`ssh`地址，或者`https`地址。`注意`如果是https的那么以后每次`deploy`的时候都要求你输入用户名和密码,如果改成`ssh`并且你没有给你的id_rsa设置密码（空密码也一样）的话，就不用每次都输入密码了。\n```Shell\n$ ssh-keygen -p -f /root/.ssh/id_dsa -N '' \n```\n如果你之前设置了密码，那么使用这条命令就可以更改你的私钥的密码了。参考[superuser](https://superuser.com/questions/508408/public-key-always-asking-for-password-and-keyphrase)\n\n\n\n\n## 命令 ##\n\n### 写作 ###\n```Shell\n$ hexo new [layout] <title>  \n```\n创建一个新文章，`layout`可以有三个参数`post`、`page`、`draft`, hexo 会在 `Scaffold` 文件夹下寻找你写的 `layout.md` 文件模板来建立文件。如果 `title` 包含空格，请用引号括起来。\n\n#### 文件名称  ####\n\n在站点配置文件中`Writing` 标签下添加\n```Yaml\nnew_post_name: :year-:month-:day-:title.md\n```\n其中 `:month` 和 `:i_month` 的区别在于 前者有前导零 （比如 `04` ）\n\n#### 草稿 ####\n\n如果创建新文章的时候，指定了 `draft` 参数，那么就是保存到 `source/_drafts` 文件夹中，可以使用下面的语句，将草稿移动到 `source/_posts`文件中。\n```Shell\n$ hexo publish [layout] <filename>\n```\n发布草稿变成正式文章。一般`filename`写你的草稿文件的名字，`layout`写`post`\n\n#### 模版（Scaffold）####\n\n在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：\n```Shell\n$ hexo new photo \"My Gallery\"\n```\n\n在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章\n\n| 变量       | 描述     |\n| -------- | ------ |\n| `layout` | 布局     |\n| `title`  | 标题     |\n| `date`   | 文件建立日期 |\n\n\n### 布局（Layout）###\nHexo 有三种默认布局：`post`、`page`、`draft`，它们分别对应不同的路径，自定义的其他布局和 `post` 相同，都将储存到 `source/_posts` 文件夹。\n\n| 布局    | 路径             |\n| :---- | :------------- |\n| post  | source/_posts  |\n| page  | source         |\n| draft | source/_drafts |\n\n>不要处理我的文章  \n>可以在Front-Matter 中的layout: 设为 false。\n\n \n\n### Front-matter  ###\nFront-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，例如\n```\ntitle: Hello World\ndate: 2017/5/1 20:46:25\n---\n```\n\n也可以使用JSON 格式，只需要把 --- 换成 ;;;\n```\n\"title\": \"Hello World\",\n\"date\": \"2017/5/1 20:46:25\"\n;;;\n```\n\nFront-matter的参数列表\n\n| 参数            | 描述         | 默认值    |\n| ------------- | ---------- | ------ |\n| `layout`      | 布局         |        |\n| `title`       | 标题         |        |\n| `date`        | 建立日期       | 文件建立日期 |\n| `updated`     | 更新日期       | 文件更新日期 |\n| `comments`    | 开启文章的评论功能  | true   |\n| `description` | 文章的描述      |        |\n| `tags`        | 标签（不适用于分页） |        |\n| `categories`  | 分类（不适用于分页） |        |\n| `permalink`   | 覆盖文章网址     |        |\n\n\n#### 分类和标签 ####\n\n```Yaml\ntags:\n  - List\n  - Dictionary\n  - ArraryList\n  - hashtable\n  - Stack\n  - Queue\n```\n或者\n```Yaml\n tags:\n [Python, Javascript, Hexo]\n```\n\n#### 引用块（Block Quote）####\n\n模板如下\n```\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n\n例如\n```\n{% blockquote stormzhang %}\n今天，是你未来所有剩余的日子中，最早的一天\n{% endblockquote %}\n```\n\n{% blockquote stormzhang %}\n今天，是你未来所有剩余的日子中，最早的一天\n{% endblockquote %}\n\n\n#### 代码块（Code Block）####\n\n模板如下\n```\n{% codeblock [title] [lang:language] [url] [link text]%}\ncode snippet\n{% endcodeblock %}\n```\n\n例如：\n```\n{% codeblock  main.java lang:java  http://www.runoob.com/java/java-tutorial.html Java%}\npublic static void main(String []args){\n}\n{% endcodeblock  %}\n```\n\n{% codeblock  main.java lang:java  http://www.runoob.com/java/java-tutorial.html Java%}\npublic static void main(String []args){\n}\n{% endcodeblock  %}\n\n\n#### 醒目引文（Pull Quote）####\n```Java\n{% pullquote [class] %}\nsomething important\n{% endpullquote %}\n```\n\n如下\n\n{% pullquote [class] %}\nsomething important\n{% endpullquote %}\n\n#### 图片（Image） ####\n\n有两种方式，一种是markdown格式的\n```\n![](/images/avatar.jpg)\n```\n\n另一种是hexo支持的格式\n\n\n```\n{% img [class names] /path/to/image [width] [height][title text [alt text]] %}\n```\n\n\n#### 链接（Link） ####\n\n在文章中插入链接，并自动给外部链接添加 target=\"_blank\" 属性。\n\n\t{% link text url [external] [title] %}\n\n\t{% link 谷歌 http://www.google.com google %}\n\n\n如{% link 谷歌 http://www.google.com google %}\n\n\n\n\n\n#### 外部引用（Include Code） ####\n可以引入其他文件中的代码，例如下面语句\n```\n{% include_code [title][lang:language] path/to/file %}\n```\n\n\n> hexo支持的语法还有很多，如\n> **jsFiddle**、**Gist**、**iframe**、**Youtube**、**Vimeo**等等，有需要的建议自行查阅[官方文档](https://hexo.io/zh-cn/docs/tag-plugins.html)\n\n\n\n### 服务器 ###\n\n#### 安装与使用 ####\n要使用hexo的服务器，首先要安装\n\n\n{% blockquote  %}\nnpm install hexo-server --save\n{% endblockquote %}\n\n\n安装完成后，默认在 [http://localhost:4000](http://localhost:4000) 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。\n\n\n\n>  $ hexo server -p 5000 //启动服务器， 可以简写 hexo s\n\n\n参数 `-p` 覆盖默认端口，参数 `-w` 查看文件改动\n看到下面的信息，说明已经成功，可以查看你的博客了。\n![](http://i.imgur.com/qqg116z.png)\n\n#### 静态模式 ####\n\n在静态模式下，服务器只处理 public 文件夹内的文件，而不会处理文件变动，一般性用于你正在写博客的情况下。\n\n```Shell\n$ hexo server -s\n```\n\n\n\n### 生成文件(Generating) ###\n\n```Shell\n$ hexo generate \n```\n\n生成静态文件，参数 `-d` 生成完成后部署，参数 `-w` 查看文件改动，下面两种写法都一样\n\n```Shell\n$ hexo g -d\n$ hexo d -g\n```\n\n\n#### 监视文件变动 ####\n\n```Shell\n$ hexo generate --watch\n```\nHexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。\n\n\n### 部署（Deployment） ###\n\n```Shell\n$ hexo deploy\n```\n\n部署你的网站，在使用之前，需要在`站点配置文件` 进行配置。可以有多个deployer\n\n\n```Yaml\ndeploy:\n- type: git\n  repo:\n- type: heroku    \n  repo:\n```\n\n\n\n\n> 缩进\n>\n> YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。\n\n \n\n#### Git ####\n\n部署提示找不到Git , 直接使用这个命令从 [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git) 上安装git的部署插件\n\n```shell\n$ npm install hexo-deployer-git --save\n```\n\n\n修改配置。\n{% codeblock    lang:yaml%}\ndeploy:\ntype: git\nrepo: <repository url>  \nbranch: [branch]  \nmessage: [message]\n{% endcodeblock  %}\n​\t\n\n| 参数        | 描述                                       |\n| --------- | ---------------------------------------- |\n| `repo`    | 库（Repository）地址                          |\n| `branch`  | 分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。\t\t\t\t\t最好填ssh，这样就每次deploy的时候都要输入密码了。 |\n| `message` | 自定义提交信息 (默认为 `Site updated: { { now('YYYY-MM-DD HH:mm:ss') }}`) |\n\n\n\n#### 其他 ####\n\n其他部署方案，可以参见[官方文档](https://hexo.io/zh-cn/docs/tag-plugins.html)\n```shell\n$ hexo clean\n```\n清除缓存文件（db.json）和生成的文件（public）\n```shell\n$ hexo list <type>\n```\n`type` 可以是`page`, `post`,`route`, `tag`, `category`\n```shell\n$ hexo version\n```\n显示版本信息\n```shell\n$ hexo --config custom.yml\n$ hexo --config custom.yml，custom2.json\n```\n使用自定义配置文件（而不是_config.yml），还可以接受将文件合并为一个的JSON或YAML配置文件的逗号分隔列表（无空格）\n\n\n\n\n自动更新文件\n```shell\n$ hexo g     //也可以这样写hexo generate \n```\n部署到git\n```shell\n$ hexo d\n```\n\n一般可以这样简写，就是说在部署到git之前，先进行更新\n```shell\n$ hexo d -g\n```\n可以查看hexo的版本\n```shell\nhexo -v\n```\n\n这时候万一遇到这个错误\n```\nERROR Deployer not found: git\n```\n\n试试\n\n```Shell\n$ npm install hexo-deployer-git --save\n$ npm install hexo --save\n```\n\n\n\n\n\n\n\n#NexT\n\n如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。\n\n1. 下载主题\n\n\n\n​```shell\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n\n\n2. 启用主题\n   与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 `站点配置文件`， 找到` theme `字段，并将其值更改为` next`。\n```\n   theme: next\n```\n\n   到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 `$ hexo clean` 来清除 Hexo 的缓存。\n\n\n\n\n\n### 一些好用的插件 ###\n\n{% blockquote %}\nhexo可视化后台管理，很方便 - [hexo-hey](https://github.com/nihgwu/hexo-hey)  \n在 hexo 中无痛使用本地图片 - [hexo-asset-image](https://github.com/CodeFalling/hexo-asset-image)\n备份整个博客包括主题 - [hexo-git-backup](https://github.com/coneycode/hexo-git-backup)\n\n\n{% endblockquote %}\n\n### 参考 ###\n\n{% blockquote %}\n网易云音乐 - [Hexo中播放网易云音乐的实践](http://weqeo.com/2016/10/11/Hexo中播放网易云音乐的实践)  \n网易云音乐 - [GitHub Ribbons](https://github.com/blog/273-github-ribbons)  \n字数统计WordCount 、阅读时长预计Min2Read、总字数统计TotalCount - [hexo-wordcount](https://github.com/willin/hexo-wordcount)  \n\n{% endblockquote %}\n```","slug":"00001-Blog-2017-05-05-自己动手搭建个人博客到优化","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64neu001xp5ukb6rh3zgl","content":"<p><img src=\"/2017/05/05/00001-Blog-2017-05-05-自己动手搭建个人博客到优化/avatar.jpg\" alt=\"\"></p>\n <div align=\"center\"><br>  今天，是你未来所有剩余的日子中，最早的一天<br><br></div>\n\n<div align=\"right\">——<strong>stormzhang</strong>      </div>\n\n\n\n<p>[TOC]</p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p><br></p>\n<p>我为什么要写这篇文章？是因为大学三年了，感觉学了这么多知识，但是并没有真正地去消化和总结过，最近又看到了<a href=\"http://www.baidu.com\" title=\"stormzhang\" target=\"_blank\" rel=\"external\">stormzhang</a>大神写的这篇<a href=\"http://stormzhang.com/android/2016/03/04/why-i-keep-writing-blog/\" title=\"stormzhang\" target=\"_blank\" rel=\"external\">我为什么坚持写博客？</a>。我真的感触很深，以前花了很多时间学的东西，不久之后便会印象模糊，想要回忆的时候，又不能快速找到。所以我决定从今天开始写博客，总结和梳理自己的知识。</p>\n<a id=\"more\"></a>\n<p>stormzhang在他的文章里推荐了hexo，基于Node框架，可以和Github Pages结合起来搭建个人博客。而且主题样式非常多，可以自己选择搭配的东西很多。当我第一次把博客跑起来的时候，真的惊呆了，没想到个人博客也可以这么轻松的搭建。我用了五一这个假期，自己动手搭建了现在您正看到的这个博客，虽然现在很粗糙，但是我会不断的学习和优化它的。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><h3 id=\"什么是Hexo\"><a href=\"#什么是Hexo\" class=\"headerlink\" title=\"什么是Hexo\"></a>什么是Hexo</h3><p>Hexo是一个快速，简单和强大的博客框架。可以使用Markdown进行写作，Hexo会在几秒钟内生成具有美丽主题的静态文件。</p>\n<h3 id=\"安装要求\"><a href=\"#安装要求\" class=\"headerlink\" title=\"安装要求\"></a>安装要求</h3><p>这里具体的操作步骤可以到<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">hexo官网</a>。</p>\n<ul>\n<li><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a></li>\n</ul>\n<p>如果已经装好了这些，那么我们现在就开始吧！</p>\n<h4 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h4><p>一旦安装了所有要求，可以用npm安装Hexo。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-cli -g  //在本地安装hexo的环境</div></pre></td></tr></table></figure></p>\n<h4 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h4><p>首先选择一个目录作为hexo博客的根目录，使用git bash cd到这个目录，然后输入<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo init &lt;folder&gt;   //推荐 ，这里的folder参数如果指定，便会在终端当前的资料夹建立一个名为 folder 的新资料夹；</div><div class=\"line\"><span class=\"meta\">$</span> hexo init  //直接使用当前目录初始化</div></pre></td></tr></table></figure></p>\n<p>完成后<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> cd folder</div><div class=\"line\"><span class=\"meta\">$</span> npm install  //在当前目录下安装hexo核心文件</div></pre></td></tr></table></figure></p>\n<p>这样就安装完成了。这时候可以看到<code>floder</code>文件夹下具有这些子目录<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">.</span></div><div class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">_config.yml</span>   <span class=\"string\">站点配置文件</span></div><div class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">package.json</span></div><div class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">scaffolds</span>    <span class=\"string\">存放模板的地方</span></div><div class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">source</span>       <span class=\"string\">原文件夹，存放网站内容</span></div><div class=\"line\"><span class=\"string\">|   ├── _drafts  存放临时草稿文件的地方</span></div><div class=\"line\">|   └── _posts   已经发布的文章</div><div class=\"line\">└── themes       主题文件夹</div></pre></td></tr></table></figure></p>\n<p><code>source</code>中带有前缀_(下划线)的文件夹，在<code>generate</code>的时候会渲染到<code>public</code>目录中，其他的文件夹和文件仅仅被简单地复制到<code>public</code>中。</p>\n<p>在<code>floder</code>目录下，有一个<code>_config.yml</code>，这个文件是整个网站的核心配置文件，由于后面主题文件夹中也有一个同名的配置文件，为了区分，网站的核心配置文件就叫做<code>站点配置文件</code>，主题中的叫做<code>主题配置文件</code>。</p>\n<p>打开<code>站点配置文件</code>,可以看到<code>Site</code>标签，这是我的配置。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">SimpleLifee</span>  <span class=\"comment\">#网站标题</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">code,</span> <span class=\"string\">mylife</span>   <span class=\"comment\">#网站副标题</span></div><div class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">start</span> <span class=\"string\">from</span> <span class=\"string\">zero</span>     <span class=\"comment\">#网站描述</span></div><div class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Nimon</span>        <span class=\"comment\">#你的名字</span></div><div class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-Hans</span>    <span class=\"comment\">#语言，</span></div><div class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span>  <span class=\"comment\">#时区</span></div></pre></td></tr></table></figure></p>\n<p>还有<code>Deployment</code>标签，与Github Pages进行关联<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\">\t <span class=\"attr\">type:</span> <span class=\"string\">git</span></div><div class=\"line\">\t <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:SimpleLifee/SimpleLifee.github.io.git</span> </div><div class=\"line\">\t <span class=\"attr\">branch:</span> <span class=\"string\">master</span></div></pre></td></tr></table></figure></p>\n<p>其中<code>type</code>必须填git，<code>repo</code>填写你在git上创建的库的<code>ssh</code>地址，或者<code>https</code>地址。<code>注意</code>如果是https的那么以后每次<code>deploy</code>的时候都要求你输入用户名和密码,如果改成<code>ssh</code>并且你没有给你的id_rsa设置密码（空密码也一样）的话，就不用每次都输入密码了。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-keygen -p -f /root/.ssh/id_dsa -N ''</div></pre></td></tr></table></figure></p>\n<p>如果你之前设置了密码，那么使用这条命令就可以更改你的私钥的密码了。参考<a href=\"https://superuser.com/questions/508408/public-key-always-asking-for-password-and-keyphrase\" target=\"_blank\" rel=\"external\">superuser</a></p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>创建一个新文章，<code>layout</code>可以有三个参数<code>post</code>、<code>page</code>、<code>draft</code>, hexo 会在 <code>Scaffold</code> 文件夹下寻找你写的 <code>layout.md</code> 文件模板来建立文件。如果 <code>title</code> 包含空格，请用引号括起来。</p>\n<h4 id=\"文件名称\"><a href=\"#文件名称\" class=\"headerlink\" title=\"文件名称\"></a>文件名称</h4><p>在站点配置文件中<code>Writing</code> 标签下添加<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:year-:month-:day-:title.md</span></div></pre></td></tr></table></figure></p>\n<p>其中 <code>:month</code> 和 <code>:i_month</code> 的区别在于 前者有前导零 （比如 <code>04</code> ）</p>\n<h4 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h4><p>如果创建新文章的时候，指定了 <code>draft</code> 参数，那么就是保存到 <code>source/_drafts</code> 文件夹中，可以使用下面的语句，将草稿移动到 <code>source/_posts</code>文件中。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure></p>\n<p>发布草稿变成正式文章。一般<code>filename</code>写你的草稿文件的名字，<code>layout</code>写<code>post</code></p>\n<h4 id=\"模版（Scaffold）\"><a href=\"#模版（Scaffold）\" class=\"headerlink\" title=\"模版（Scaffold）\"></a>模版（Scaffold）</h4><p>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo new photo \"My Gallery\"</div></pre></td></tr></table></figure></p>\n<p>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"布局（Layout）\"><a href=\"#布局（Layout）\" class=\"headerlink\" title=\"布局（Layout）\"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code>、<code>draft</code>，它们分别对应不同的路径，自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">布局</th>\n<th style=\"text-align:left\">路径</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">post</td>\n<td style=\"text-align:left\">source/_posts</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">page</td>\n<td style=\"text-align:left\">source</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">draft</td>\n<td style=\"text-align:left\">source/_drafts</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>不要处理我的文章<br>可以在Front-Matter 中的layout: 设为 false。</p>\n</blockquote>\n<h3 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h3><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2017/5/1 20:46:25</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>也可以使用JSON 格式，只需要把 — 换成 ;;;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;title&quot;: &quot;Hello World&quot;,</div><div class=\"line\">&quot;date&quot;: &quot;2017/5/1 20:46:25&quot;</div><div class=\"line\">;;;</div></pre></td></tr></table></figure></p>\n<p>Front-matter的参数列表</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td>文章的描述</td>\n<td></td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">tags:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">List</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Dictionary</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">ArraryList</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">hashtable</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Stack</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Queue</span></div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">tags:</span></div><div class=\"line\"><span class=\"string\">[Python,</span> <span class=\"string\">Javascript,</span> <span class=\"string\">Hexo]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"引用块（Block-Quote）\"><a href=\"#引用块（Block-Quote）\" class=\"headerlink\" title=\"引用块（Block Quote）\"></a>引用块（Block Quote）</h4><p>模板如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class=\"line\">content</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure></p>\n<p>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote stormzhang %&#125;</div><div class=\"line\">今天，是你未来所有剩余的日子中，最早的一天</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure></p>\n<blockquote><p>今天，是你未来所有剩余的日子中，最早的一天</p>\n<footer><strong>stormzhang</strong></footer></blockquote>\n<h4 id=\"代码块（Code-Block）\"><a href=\"#代码块（Code-Block）\" class=\"headerlink\" title=\"代码块（Code Block）\"></a>代码块（Code Block）</h4><p>模板如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text]%&#125;</div><div class=\"line\">code snippet</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock  main.java lang:java  http://www.runoob.com/java/java-tutorial.html Java%&#125;</div><div class=\"line\">public static void main(String []args)&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;% endcodeblock  %&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>main.java</span><a href=\"http://www.runoob.com/java/java-tutorial.html\" target=\"_blank\" rel=\"external\">Java</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"醒目引文（Pull-Quote）\"><a href=\"#醒目引文（Pull-Quote）\" class=\"headerlink\" title=\"醒目引文（Pull Quote）\"></a>醒目引文（Pull Quote）</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% pullquote [class] %&#125;</div><div class=\"line\">something important</div><div class=\"line\">&#123;% endpullquote %&#125;</div></pre></td></tr></table></figure>\n<p>如下</p>\n<blockquote class=\"pullquote [class]\"><p>something important</p>\n</blockquote>\n<h4 id=\"图片（Image）\"><a href=\"#图片（Image）\" class=\"headerlink\" title=\"图片（Image）\"></a>图片（Image）</h4><p>有两种方式，一种是markdown格式的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![](/images/avatar.jpg)</div></pre></td></tr></table></figure></p>\n<p>另一种是hexo支持的格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% img [class names] /path/to/image [width] [height][title text [alt text]] %&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"链接（Link）\"><a href=\"#链接（Link）\" class=\"headerlink\" title=\"链接（Link）\"></a>链接（Link）</h4><p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。</p>\n<pre><code>{% link text url [external] [title] %}\n\n{% link 谷歌 http://www.google.com google %}\n</code></pre><p>如<a href=\"http://www.google.com\" title=\"google\" target=\"_blank\" rel=\"external\">谷歌</a></p>\n<h4 id=\"外部引用（Include-Code）\"><a href=\"#外部引用（Include-Code）\" class=\"headerlink\" title=\"外部引用（Include Code）\"></a>外部引用（Include Code）</h4><p>可以引入其他文件中的代码，例如下面语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% include_code [title][lang:language] path/to/file %&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>hexo支持的语法还有很多，如<br><strong>jsFiddle</strong>、<strong>Gist</strong>、<strong>iframe</strong>、<strong>Youtube</strong>、<strong>Vimeo</strong>等等，有需要的建议自行查阅<a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n</blockquote>\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><h4 id=\"安装与使用\"><a href=\"#安装与使用\" class=\"headerlink\" title=\"安装与使用\"></a>安装与使用</h4><p>要使用hexo的服务器，首先要安装</p>\n<blockquote><p>npm install hexo-server –save</p>\n</blockquote>\n<p>安装完成后，默认在 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。</p>\n<blockquote>\n<p> $ hexo server -p 5000 //启动服务器， 可以简写 hexo s</p>\n</blockquote>\n<p>参数 <code>-p</code> 覆盖默认端口，参数 <code>-w</code> 查看文件改动<br>看到下面的信息，说明已经成功，可以查看你的博客了。<br><img src=\"http://i.imgur.com/qqg116z.png\" alt=\"\"></p>\n<h4 id=\"静态模式\"><a href=\"#静态模式\" class=\"headerlink\" title=\"静态模式\"></a>静态模式</h4><p>在静态模式下，服务器只处理 public 文件夹内的文件，而不会处理文件变动，一般性用于你正在写博客的情况下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo server -s</div></pre></td></tr></table></figure>\n<h3 id=\"生成文件-Generating\"><a href=\"#生成文件-Generating\" class=\"headerlink\" title=\"生成文件(Generating)\"></a>生成文件(Generating)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo generate</div></pre></td></tr></table></figure>\n<p>生成静态文件，参数 <code>-d</code> 生成完成后部署，参数 <code>-w</code> 查看文件改动，下面两种写法都一样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo g -d</div><div class=\"line\"><span class=\"meta\">$</span> hexo d -g</div></pre></td></tr></table></figure>\n<h4 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo generate --watch</div></pre></td></tr></table></figure>\n<p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p>\n<h3 id=\"部署（Deployment）\"><a href=\"#部署（Deployment）\" class=\"headerlink\" title=\"部署（Deployment）\"></a>部署（Deployment）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo deploy</div></pre></td></tr></table></figure>\n<p>部署你的网站，在使用之前，需要在<code>站点配置文件</code> 进行配置。可以有多个deployer</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></div><div class=\"line\"><span class=\"attr\">  repo:</span></div><div class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">heroku</span>    </div><div class=\"line\"><span class=\"attr\">  repo:</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>缩进</p>\n<p>YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</p>\n</blockquote>\n<h4 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h4><p>部署提示找不到Git , 直接使用这个命令从 <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"external\">hexo-deployer-git</a> 上安装git的部署插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>修改配置。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">git</span></div><div class=\"line\"><span class=\"attr\">repo:</span> <span class=\"string\">&lt;repository</span> <span class=\"string\">url&gt;</span>  </div><div class=\"line\"><span class=\"attr\">branch:</span> <span class=\"string\">[branch]</span>  </div><div class=\"line\"><span class=\"attr\">message:</span> <span class=\"string\">[message]</span></div></pre></td></tr></table></figure><br>​    </p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>repo</code></td>\n<td>库（Repository）地址</td>\n</tr>\n<tr>\n<td><code>branch</code></td>\n<td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。                    最好填ssh，这样就每次deploy的时候都要输入密码了。</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>自定义提交信息 (默认为 <code>Site updated: { { now(&#39;YYYY-MM-DD HH:mm:ss&#39;) }}</code>)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>其他部署方案，可以参见<a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"external\">官方文档</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo clean</div></pre></td></tr></table></figure></p>\n<p>清除缓存文件（db.json）和生成的文件（public）<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo list &lt;type&gt;</div></pre></td></tr></table></figure></p>\n<p><code>type</code> 可以是<code>page</code>, <code>post</code>,<code>route</code>, <code>tag</code>, <code>category</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo version</div></pre></td></tr></table></figure></p>\n<p>显示版本信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo --config custom.yml</div><div class=\"line\"><span class=\"meta\">$</span> hexo --config custom.yml，custom2.json</div></pre></td></tr></table></figure></p>\n<p>使用自定义配置文件（而不是_config.yml），还可以接受将文件合并为一个的JSON或YAML配置文件的逗号分隔列表（无空格）</p>\n<p>自动更新文件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo g     //也可以这样写hexo generate</div></pre></td></tr></table></figure></p>\n<p>部署到git<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo d</div></pre></td></tr></table></figure></p>\n<p>一般可以这样简写，就是说在部署到git之前，先进行更新<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo d -g</div></pre></td></tr></table></figure></p>\n<p>可以查看hexo的版本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure></p>\n<p>这时候万一遇到这个错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Deployer not found: git</div></pre></td></tr></table></figure></p>\n<p>试试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</div><div class=\"line\"><span class=\"meta\">$</span> npm install hexo --save</div></pre></td></tr></table></figure>\n<p>#NexT</p>\n<p>如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。</p>\n<ol>\n<li>下载主题</li>\n</ol>\n<p>​<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> cd your-hexo-site</div><div class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>启用主题<br>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <code>站点配置文件</code>， 找到<code>theme</code>字段，并将其值更改为<code>next</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: next</div></pre></td></tr></table></figure>\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>$ hexo clean</code> 来清除 Hexo 的缓存。</p>\n</li>\n</ol>\n<h3 id=\"一些好用的插件\"><a href=\"#一些好用的插件\" class=\"headerlink\" title=\"一些好用的插件\"></a>一些好用的插件</h3><blockquote><p>hexo可视化后台管理，很方便 - <a href=\"https://github.com/nihgwu/hexo-hey\" target=\"_blank\" rel=\"external\">hexo-hey</a><br>在 hexo 中无痛使用本地图片 - <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">hexo-asset-image</a><br>备份整个博客包括主题 - <a href=\"https://github.com/coneycode/hexo-git-backup\" target=\"_blank\" rel=\"external\">hexo-git-backup</a></p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote><p>网易云音乐 - <a href=\"http://weqeo.com/2016/10/11/Hexo中播放网易云音乐的实践\" target=\"_blank\" rel=\"external\">Hexo中播放网易云音乐的实践</a><br>网易云音乐 - <a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">GitHub Ribbons</a><br>字数统计WordCount 、阅读时长预计Min2Read、总字数统计TotalCount - <a href=\"https://github.com/willin/hexo-wordcount\" target=\"_blank\" rel=\"external\">hexo-wordcount</a>  </p>\n</blockquote>\n<p>```</p>\n","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<p><img src=\"/2017/05/05/00001-Blog-2017-05-05-自己动手搭建个人博客到优化/avatar.jpg\" alt=\"\"></p>\n <div align=\"center\"><br>  今天，是你未来所有剩余的日子中，最早的一天<br><br></div>\n\n<div align=\"right\">——<strong>stormzhang</strong>      </div>\n\n\n\n<p>[TOC]</p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p><br></p>\n<p>我为什么要写这篇文章？是因为大学三年了，感觉学了这么多知识，但是并没有真正地去消化和总结过，最近又看到了<a href=\"http://www.baidu.com\" title=\"stormzhang\" target=\"_blank\" rel=\"external\">stormzhang</a>大神写的这篇<a href=\"http://stormzhang.com/android/2016/03/04/why-i-keep-writing-blog/\" title=\"stormzhang\" target=\"_blank\" rel=\"external\">我为什么坚持写博客？</a>。我真的感触很深，以前花了很多时间学的东西，不久之后便会印象模糊，想要回忆的时候，又不能快速找到。所以我决定从今天开始写博客，总结和梳理自己的知识。</p>","more":"<p>stormzhang在他的文章里推荐了hexo，基于Node框架，可以和Github Pages结合起来搭建个人博客。而且主题样式非常多，可以自己选择搭配的东西很多。当我第一次把博客跑起来的时候，真的惊呆了，没想到个人博客也可以这么轻松的搭建。我用了五一这个假期，自己动手搭建了现在您正看到的这个博客，虽然现在很粗糙，但是我会不断的学习和优化它的。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><h3 id=\"什么是Hexo\"><a href=\"#什么是Hexo\" class=\"headerlink\" title=\"什么是Hexo\"></a>什么是Hexo</h3><p>Hexo是一个快速，简单和强大的博客框架。可以使用Markdown进行写作，Hexo会在几秒钟内生成具有美丽主题的静态文件。</p>\n<h3 id=\"安装要求\"><a href=\"#安装要求\" class=\"headerlink\" title=\"安装要求\"></a>安装要求</h3><p>这里具体的操作步骤可以到<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">hexo官网</a>。</p>\n<ul>\n<li><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a></li>\n</ul>\n<p>如果已经装好了这些，那么我们现在就开始吧！</p>\n<h4 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h4><p>一旦安装了所有要求，可以用npm安装Hexo。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-cli -g  //在本地安装hexo的环境</div></pre></td></tr></table></figure></p>\n<h4 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h4><p>首先选择一个目录作为hexo博客的根目录，使用git bash cd到这个目录，然后输入<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo init &lt;folder&gt;   //推荐 ，这里的folder参数如果指定，便会在终端当前的资料夹建立一个名为 folder 的新资料夹；</div><div class=\"line\"><span class=\"meta\">$</span> hexo init  //直接使用当前目录初始化</div></pre></td></tr></table></figure></p>\n<p>完成后<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> cd folder</div><div class=\"line\"><span class=\"meta\">$</span> npm install  //在当前目录下安装hexo核心文件</div></pre></td></tr></table></figure></p>\n<p>这样就安装完成了。这时候可以看到<code>floder</code>文件夹下具有这些子目录<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">.</span></div><div class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">_config.yml</span>   <span class=\"string\">站点配置文件</span></div><div class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">package.json</span></div><div class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">scaffolds</span>    <span class=\"string\">存放模板的地方</span></div><div class=\"line\"><span class=\"string\">├──</span> <span class=\"string\">source</span>       <span class=\"string\">原文件夹，存放网站内容</span></div><div class=\"line\"><span class=\"string\">|   ├── _drafts  存放临时草稿文件的地方</span></div><div class=\"line\">|   └── _posts   已经发布的文章</div><div class=\"line\">└── themes       主题文件夹</div></pre></td></tr></table></figure></p>\n<p><code>source</code>中带有前缀_(下划线)的文件夹，在<code>generate</code>的时候会渲染到<code>public</code>目录中，其他的文件夹和文件仅仅被简单地复制到<code>public</code>中。</p>\n<p>在<code>floder</code>目录下，有一个<code>_config.yml</code>，这个文件是整个网站的核心配置文件，由于后面主题文件夹中也有一个同名的配置文件，为了区分，网站的核心配置文件就叫做<code>站点配置文件</code>，主题中的叫做<code>主题配置文件</code>。</p>\n<p>打开<code>站点配置文件</code>,可以看到<code>Site</code>标签，这是我的配置。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">SimpleLifee</span>  <span class=\"comment\">#网站标题</span></div><div class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">code,</span> <span class=\"string\">mylife</span>   <span class=\"comment\">#网站副标题</span></div><div class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">start</span> <span class=\"string\">from</span> <span class=\"string\">zero</span>     <span class=\"comment\">#网站描述</span></div><div class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">Nimon</span>        <span class=\"comment\">#你的名字</span></div><div class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-Hans</span>    <span class=\"comment\">#语言，</span></div><div class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span>  <span class=\"comment\">#时区</span></div></pre></td></tr></table></figure></p>\n<p>还有<code>Deployment</code>标签，与Github Pages进行关联<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\">\t <span class=\"attr\">type:</span> <span class=\"string\">git</span></div><div class=\"line\">\t <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:SimpleLifee/SimpleLifee.github.io.git</span> </div><div class=\"line\">\t <span class=\"attr\">branch:</span> <span class=\"string\">master</span></div></pre></td></tr></table></figure></p>\n<p>其中<code>type</code>必须填git，<code>repo</code>填写你在git上创建的库的<code>ssh</code>地址，或者<code>https</code>地址。<code>注意</code>如果是https的那么以后每次<code>deploy</code>的时候都要求你输入用户名和密码,如果改成<code>ssh</code>并且你没有给你的id_rsa设置密码（空密码也一样）的话，就不用每次都输入密码了。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-keygen -p -f /root/.ssh/id_dsa -N ''</div></pre></td></tr></table></figure></p>\n<p>如果你之前设置了密码，那么使用这条命令就可以更改你的私钥的密码了。参考<a href=\"https://superuser.com/questions/508408/public-key-always-asking-for-password-and-keyphrase\" target=\"_blank\" rel=\"external\">superuser</a></p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"写作\"><a href=\"#写作\" class=\"headerlink\" title=\"写作\"></a>写作</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>\n<p>创建一个新文章，<code>layout</code>可以有三个参数<code>post</code>、<code>page</code>、<code>draft</code>, hexo 会在 <code>Scaffold</code> 文件夹下寻找你写的 <code>layout.md</code> 文件模板来建立文件。如果 <code>title</code> 包含空格，请用引号括起来。</p>\n<h4 id=\"文件名称\"><a href=\"#文件名称\" class=\"headerlink\" title=\"文件名称\"></a>文件名称</h4><p>在站点配置文件中<code>Writing</code> 标签下添加<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">new_post_name:</span> <span class=\"string\">:year-:month-:day-:title.md</span></div></pre></td></tr></table></figure></p>\n<p>其中 <code>:month</code> 和 <code>:i_month</code> 的区别在于 前者有前导零 （比如 <code>04</code> ）</p>\n<h4 id=\"草稿\"><a href=\"#草稿\" class=\"headerlink\" title=\"草稿\"></a>草稿</h4><p>如果创建新文章的时候，指定了 <code>draft</code> 参数，那么就是保存到 <code>source/_drafts</code> 文件夹中，可以使用下面的语句，将草稿移动到 <code>source/_posts</code>文件中。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure></p>\n<p>发布草稿变成正式文章。一般<code>filename</code>写你的草稿文件的名字，<code>layout</code>写<code>post</code></p>\n<h4 id=\"模版（Scaffold）\"><a href=\"#模版（Scaffold）\" class=\"headerlink\" title=\"模版（Scaffold）\"></a>模版（Scaffold）</h4><p>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo new photo \"My Gallery\"</div></pre></td></tr></table></figure></p>\n<p>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>文件建立日期</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"布局（Layout）\"><a href=\"#布局（Layout）\" class=\"headerlink\" title=\"布局（Layout）\"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code>、<code>draft</code>，它们分别对应不同的路径，自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">布局</th>\n<th style=\"text-align:left\">路径</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">post</td>\n<td style=\"text-align:left\">source/_posts</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">page</td>\n<td style=\"text-align:left\">source</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">draft</td>\n<td style=\"text-align:left\">source/_drafts</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>不要处理我的文章<br>可以在Front-Matter 中的layout: 设为 false。</p>\n</blockquote>\n<h3 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h3><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2017/5/1 20:46:25</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>也可以使用JSON 格式，只需要把 — 换成 ;;;<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;title&quot;: &quot;Hello World&quot;,</div><div class=\"line\">&quot;date&quot;: &quot;2017/5/1 20:46:25&quot;</div><div class=\"line\">;;;</div></pre></td></tr></table></figure></p>\n<p>Front-matter的参数列表</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>layout</code></td>\n<td>布局</td>\n<td></td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td><code>date</code></td>\n<td>建立日期</td>\n<td>文件建立日期</td>\n</tr>\n<tr>\n<td><code>updated</code></td>\n<td>更新日期</td>\n<td>文件更新日期</td>\n</tr>\n<tr>\n<td><code>comments</code></td>\n<td>开启文章的评论功能</td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>description</code></td>\n<td>文章的描述</td>\n<td></td>\n</tr>\n<tr>\n<td><code>tags</code></td>\n<td>标签（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>categories</code></td>\n<td>分类（不适用于分页）</td>\n<td></td>\n</tr>\n<tr>\n<td><code>permalink</code></td>\n<td>覆盖文章网址</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">tags:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">List</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Dictionary</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">ArraryList</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">hashtable</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Stack</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">Queue</span></div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">tags:</span></div><div class=\"line\"><span class=\"string\">[Python,</span> <span class=\"string\">Javascript,</span> <span class=\"string\">Hexo]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"引用块（Block-Quote）\"><a href=\"#引用块（Block-Quote）\" class=\"headerlink\" title=\"引用块（Block Quote）\"></a>引用块（Block Quote）</h4><p>模板如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class=\"line\">content</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure></p>\n<p>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% blockquote stormzhang %&#125;</div><div class=\"line\">今天，是你未来所有剩余的日子中，最早的一天</div><div class=\"line\">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure></p>\n<blockquote><p>今天，是你未来所有剩余的日子中，最早的一天</p>\n<footer><strong>stormzhang</strong></footer></blockquote>\n<h4 id=\"代码块（Code-Block）\"><a href=\"#代码块（Code-Block）\" class=\"headerlink\" title=\"代码块（Code Block）\"></a>代码块（Code Block）</h4><p>模板如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock [title] [lang:language] [url] [link text]%&#125;</div><div class=\"line\">code snippet</div><div class=\"line\">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure></p>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% codeblock  main.java lang:java  http://www.runoob.com/java/java-tutorial.html Java%&#125;</div><div class=\"line\">public static void main(String []args)&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;% endcodeblock  %&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><figcaption><span>main.java</span><a href=\"http://www.runoob.com/java/java-tutorial.html\" target=\"_blank\" rel=\"external\">Java</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []args)</span></span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"醒目引文（Pull-Quote）\"><a href=\"#醒目引文（Pull-Quote）\" class=\"headerlink\" title=\"醒目引文（Pull Quote）\"></a>醒目引文（Pull Quote）</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% pullquote [class] %&#125;</div><div class=\"line\">something important</div><div class=\"line\">&#123;% endpullquote %&#125;</div></pre></td></tr></table></figure>\n<p>如下</p>\n<blockquote class=\"pullquote [class]\"><p>something important</p>\n</blockquote>\n<h4 id=\"图片（Image）\"><a href=\"#图片（Image）\" class=\"headerlink\" title=\"图片（Image）\"></a>图片（Image）</h4><p>有两种方式，一种是markdown格式的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![](/images/avatar.jpg)</div></pre></td></tr></table></figure></p>\n<p>另一种是hexo支持的格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% img [class names] /path/to/image [width] [height][title text [alt text]] %&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"链接（Link）\"><a href=\"#链接（Link）\" class=\"headerlink\" title=\"链接（Link）\"></a>链接（Link）</h4><p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。</p>\n<pre><code>{% link text url [external] [title] %}\n\n{% link 谷歌 http://www.google.com google %}\n</code></pre><p>如<a href=\"http://www.google.com\" title=\"google\" target=\"_blank\" rel=\"external\">谷歌</a></p>\n<h4 id=\"外部引用（Include-Code）\"><a href=\"#外部引用（Include-Code）\" class=\"headerlink\" title=\"外部引用（Include Code）\"></a>外部引用（Include Code）</h4><p>可以引入其他文件中的代码，例如下面语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% include_code [title][lang:language] path/to/file %&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>hexo支持的语法还有很多，如<br><strong>jsFiddle</strong>、<strong>Gist</strong>、<strong>iframe</strong>、<strong>Youtube</strong>、<strong>Vimeo</strong>等等，有需要的建议自行查阅<a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n</blockquote>\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><h4 id=\"安装与使用\"><a href=\"#安装与使用\" class=\"headerlink\" title=\"安装与使用\"></a>安装与使用</h4><p>要使用hexo的服务器，首先要安装</p>\n<blockquote><p>npm install hexo-server –save</p>\n</blockquote>\n<p>安装完成后，默认在 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。</p>\n<blockquote>\n<p> $ hexo server -p 5000 //启动服务器， 可以简写 hexo s</p>\n</blockquote>\n<p>参数 <code>-p</code> 覆盖默认端口，参数 <code>-w</code> 查看文件改动<br>看到下面的信息，说明已经成功，可以查看你的博客了。<br><img src=\"http://i.imgur.com/qqg116z.png\" alt=\"\"></p>\n<h4 id=\"静态模式\"><a href=\"#静态模式\" class=\"headerlink\" title=\"静态模式\"></a>静态模式</h4><p>在静态模式下，服务器只处理 public 文件夹内的文件，而不会处理文件变动，一般性用于你正在写博客的情况下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo server -s</div></pre></td></tr></table></figure>\n<h3 id=\"生成文件-Generating\"><a href=\"#生成文件-Generating\" class=\"headerlink\" title=\"生成文件(Generating)\"></a>生成文件(Generating)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo generate</div></pre></td></tr></table></figure>\n<p>生成静态文件，参数 <code>-d</code> 生成完成后部署，参数 <code>-w</code> 查看文件改动，下面两种写法都一样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo g -d</div><div class=\"line\"><span class=\"meta\">$</span> hexo d -g</div></pre></td></tr></table></figure>\n<h4 id=\"监视文件变动\"><a href=\"#监视文件变动\" class=\"headerlink\" title=\"监视文件变动\"></a>监视文件变动</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo generate --watch</div></pre></td></tr></table></figure>\n<p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p>\n<h3 id=\"部署（Deployment）\"><a href=\"#部署（Deployment）\" class=\"headerlink\" title=\"部署（Deployment）\"></a>部署（Deployment）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo deploy</div></pre></td></tr></table></figure>\n<p>部署你的网站，在使用之前，需要在<code>站点配置文件</code> 进行配置。可以有多个deployer</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></div><div class=\"line\"><span class=\"attr\">  repo:</span></div><div class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">heroku</span>    </div><div class=\"line\"><span class=\"attr\">  repo:</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>缩进</p>\n<p>YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</p>\n</blockquote>\n<h4 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h4><p>部署提示找不到Git , 直接使用这个命令从 <a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"external\">hexo-deployer-git</a> 上安装git的部署插件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>修改配置。<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">git</span></div><div class=\"line\"><span class=\"attr\">repo:</span> <span class=\"string\">&lt;repository</span> <span class=\"string\">url&gt;</span>  </div><div class=\"line\"><span class=\"attr\">branch:</span> <span class=\"string\">[branch]</span>  </div><div class=\"line\"><span class=\"attr\">message:</span> <span class=\"string\">[message]</span></div></pre></td></tr></table></figure><br>​    </p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>repo</code></td>\n<td>库（Repository）地址</td>\n</tr>\n<tr>\n<td><code>branch</code></td>\n<td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。                    最好填ssh，这样就每次deploy的时候都要输入密码了。</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>自定义提交信息 (默认为 <code>Site updated: { { now(&#39;YYYY-MM-DD HH:mm:ss&#39;) }}</code>)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>其他部署方案，可以参见<a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"external\">官方文档</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo clean</div></pre></td></tr></table></figure></p>\n<p>清除缓存文件（db.json）和生成的文件（public）<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo list &lt;type&gt;</div></pre></td></tr></table></figure></p>\n<p><code>type</code> 可以是<code>page</code>, <code>post</code>,<code>route</code>, <code>tag</code>, <code>category</code><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo version</div></pre></td></tr></table></figure></p>\n<p>显示版本信息<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo --config custom.yml</div><div class=\"line\"><span class=\"meta\">$</span> hexo --config custom.yml，custom2.json</div></pre></td></tr></table></figure></p>\n<p>使用自定义配置文件（而不是_config.yml），还可以接受将文件合并为一个的JSON或YAML配置文件的逗号分隔列表（无空格）</p>\n<p>自动更新文件<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo g     //也可以这样写hexo generate</div></pre></td></tr></table></figure></p>\n<p>部署到git<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo d</div></pre></td></tr></table></figure></p>\n<p>一般可以这样简写，就是说在部署到git之前，先进行更新<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hexo d -g</div></pre></td></tr></table></figure></p>\n<p>可以查看hexo的版本<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure></p>\n<p>这时候万一遇到这个错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Deployer not found: git</div></pre></td></tr></table></figure></p>\n<p>试试</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> npm install hexo-deployer-git --save</div><div class=\"line\"><span class=\"meta\">$</span> npm install hexo --save</div></pre></td></tr></table></figure>\n<p>#NexT</p>\n<p>如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。</p>\n<ol>\n<li>下载主题</li>\n</ol>\n<p>​<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> cd your-hexo-site</div><div class=\"line\"><span class=\"meta\">$</span> git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>启用主题<br>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <code>站点配置文件</code>， 找到<code>theme</code>字段，并将其值更改为<code>next</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: next</div></pre></td></tr></table></figure>\n<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>$ hexo clean</code> 来清除 Hexo 的缓存。</p>\n</li>\n</ol>\n<h3 id=\"一些好用的插件\"><a href=\"#一些好用的插件\" class=\"headerlink\" title=\"一些好用的插件\"></a>一些好用的插件</h3><blockquote><p>hexo可视化后台管理，很方便 - <a href=\"https://github.com/nihgwu/hexo-hey\" target=\"_blank\" rel=\"external\">hexo-hey</a><br>在 hexo 中无痛使用本地图片 - <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">hexo-asset-image</a><br>备份整个博客包括主题 - <a href=\"https://github.com/coneycode/hexo-git-backup\" target=\"_blank\" rel=\"external\">hexo-git-backup</a></p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote><p>网易云音乐 - <a href=\"http://weqeo.com/2016/10/11/Hexo中播放网易云音乐的实践\" target=\"_blank\" rel=\"external\">Hexo中播放网易云音乐的实践</a><br>网易云音乐 - <a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">GitHub Ribbons</a><br>字数统计WordCount 、阅读时长预计Min2Read、总字数统计TotalCount - <a href=\"https://github.com/willin/hexo-wordcount\" target=\"_blank\" rel=\"external\">hexo-wordcount</a>  </p>\n</blockquote>\n<p>```</p>"},{"title":"GitHub 学习之路","date":"2017-05-05T13:55:29.000Z","thumbnail":"/images/github.png","_content":"\n\n\n\n\n![](github.png)\n\n<div align=\"center\">\n\n自学 Git 的一些总结\n\n</div>\n\n<!-- more -->\n\n\n\n> 成大事不在于力量的大小，而在于能坚持多久。  \t\t\t——约翰生\n\n# Git配置多个SSH\n\n在日常开发中，我们可能会使用多个帐号以及多个  SSH-Key ，可能是 [码云](https://git.oschina.net/)，也可能是 [GitHub](https://github.com/) ，如果你的电脑中只配置了一个 SSH-Key ，那到时候另一个或多个帐号在使用上，就会带来些许不便。（你能忍受每次 push 都要求你输入密码吗？或者每次切换帐号都需要重新配置 SSH-Key 吗？因为每次使用默认配置的方法都会将前一次配置覆盖。），作为程序员，怎么能让这种事情发生呢，我们需要一种一劳永逸的解决办法。经过上网搜索及筛选，我找到一种比较简单方便的方法。\n\n## 1. 生成并添加第一个SSH\n\n首先你得安装 [git](https://git-scm.com/) 客户端。Windows 平台，安装完后，在桌面右键选择 git bash 打开。Mac 平台安装好，打开 Terminal 或者 iTerm 输入以下命令。\n\n```Java\n$ ssh-keygen -t rsa -C \"youremail@xxx.com\"  \n```\n\n在 Git Bash 中执行命令一路回车，会在 ~/.ssh/ 目录下生成 id_rsa 和 id_rsa.pub 两个文件用文本编辑器打开 id_rsa.pub 里的内容，在 Github 中添加 SSH Keys\n\n\n\n## 2. 生成并添加第二个SSH\n\n接着上一步，为了区分开不同的 SSH-Key，我在生成文件的时候用了不同的名称来区分。 输入你要配置的另一个 SSH-Key 的邮箱。\n\n```shell\n$ ssh-keygen -t rsa -C \"otheremail@xxx.com\"  \n```\n\n这次不要一路回车，请输入这个文件的名字，见下面的第三行。\n\n```Shell\n$ ssh-keygen -t rsa -C \"824291045@qq.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/nimon/.ssh/id_rsa): other\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in other.\nYour public key has been saved in other.pub.\nThe key fingerprint is:\nSHA256:tlHc9GiN8cLngDw8QmomMlxmc+2odsRciMjIu6ljjzQ 824291045@qq.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n|.o .=..o.   o    |\n|.oo+.o.oo+ = B   |\n```\n\n如上输入 `other`  之后会在.ssh目录下生成两个文件 `other` 和 `other.pub` ，原理同步骤1。\n\n\n\n## 3.创建config文件\n\n因为 SSH-Key 有一个默认的配置，如果我们还是按照默认配置，那么注定是不会成功的。\n\n我们需要在 ~/.ssh 目录下添加 config 配置文件用于区分多个 SSH-Key 。\n\n```tex\nHost github.com  \n    HostName github.com  \n    PreferredAuthentications publickey  \n    IdentityFile ~/.ssh/id_rsa  \n  \nHost other.github.com  \n    HostName github.com  \n    PreferredAuthentications publickey  \n    IdentityFile ~/.ssh/other\n```\n\n之后保存并推出编辑器。\n\n- Host : 代表一个映射的域名地址，可以自己取。\n- HostName ： 是实际的域名地址，一般是代码托管平台的域名。\n- PreferredAuthentications ： 配置登录时用什么权限认证，可设为`publickey,password publickey,keyboard-interactive`，在这里使用 publickey 即可。\n- IdentityFile ： 就是更改生成的两个 Key 文件的地址，这里只需填写对应的文件名即可。\n\n\n\n## 测试\n\n以上完成之后，在命令行中输入 `ssh -T git@xxx.com` （xxx 就写刚才在配置文件中 Host 后面的名字）与远程进行验证，验证成功就会显示如下信息。\n\n```shell\n$ ssh -T git@github.com\nHi SmartJunNi! You've successfully authenticated, but GitHub does not provide shell access.\n\n$ ssh -T git@other.github.com\nssh git@github.com\nHi junoni! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n\n\n## 可能出现的问题\n\n如果在项目中使用 `git push ` 时提示` [remote reject]   (Permission denied)` 。如下所示\n\n```shell\nCounting objects: 3, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 252 bytes | 0 bytes/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo other.github.com:junoni/nimon.git\n ! [remote rejected] master -> master (permission denied)\nerror: failed to push some refs to 'git@other.github.com:junoni/nimon.git'\n```\n\n我花了一个半小时从 google 到 stackoverflow 查了个边，就差没有百度一下了，就是没有找到可以解决的办法。这时我发现最后一行的`git@other.github.com:junoni/nimon.git ` 这个地址，我想了想，刚刚配置了 config 这个文件，其中`Host `   使用的是 `other.github.com`，我用 `git remote -v` 查看了当前远程仓库的 origin 。\n\n```shell\n$ git remote -v\norigin\tgit@github.com:junoni/nimon.git (fetch)\norigin\tgit@github.com:junoni/nimon.git (push)\n```\n\n可以看到，fetch 和 push 的 origin 地址都是 git@github.com ，而不是 git@other.github.com ，我就抱着试试的心态，改成了 git@other.github.com。还有一个步骤，将 `other` 加入到密钥列表中。\n\n```shell\n$ ssh-add ~/.ssh/other\n```\n\n 再尝试 push 一下，没想到成功了。如迈克尔•乔丹所说：“我可以接受失败，但我不能接受放弃。”\n\n\n\n当然，添加之后我们还可以查看当前密钥列表。也可以删除密钥。\n\n```shell\n$ ssh-add -l\n$ ssh-add -d ~/.ssh/other\n```\n\n\n\n类似debug，查看与远程连接情况。\n\n```Shell\n$ ssh -v git@github.com\n```\n\n\n\n总结：我们设置的远程仓库的地址必须和 config 文件中设置的域名映射地址相同，不然就会出现错误。\n\n# 总览\n\n\n\n\n\n## 查看全局config信息\n\nmac 下在~/.gitconfig 文件中配置 git 的全局信息。使用 `git config --list` 可以列出全局配置信息。\n\n```shell\n$ git config --list\n```\n\n\n\n**用户信息**\n配置你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：\n\n```\n$ git config --global user.name “youname”\n$ git config --global user.email “12345@example.com”\n```\n\n如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。\n\n\n\n## GIT总结\n\n**查看配置信息**\n查看已有的配置信息\n\n```\n$ git config --list\n$ git config -l\n\n```\n\n**获取帮助**\n例如想获取config命令的帮助信息\n\n```\n$ git help config \n$ git config --help\n\n```\n\n**初始化新仓库**\n\n```\n$ git init\n\n```\n\n初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。\n\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n**跟踪文件：**（将文件加到暂存区域）\n\n```\n$ git add readme.txt\n\n```\n\n**跟踪全部文件**\n\n```\n$ git add .\n\n```\n\n**提交更新**\n\n```\n$ git commit -m “first version”\n\n```\n\n**上传（推送）到github**\n\n```\n$ git push origin master\n\n```\n\n**从现有仓库克隆**\n\n```\n$ git clone git://github.com/youname/project.git\n$ git clone git@github.com:youname/project.git\n$ git clone https://github.com/youname/project.git\n\n```\n\n**检查当前文件状态**\n\n```\n$ git status\n\n```\n\n**创建.gitignore文件**\n\n```\n$ touch .gitignore\n\n```\n\n**查看修改之后没有暂存起来的内容**\n\n```\n$ git diff\n\n```\n\n**移除文件**\n\n```\n$ git rm readme.txt\n\n```\n\n**重命名文件**\n\n```\n$ git mv oldname.txt newname.txt\n\n```\n\n**查看提交历史**\n\n```\n$ git log\n\n```\n\n**取消暂存**\n\n```\n$ git reset HEAD readme.txt\n\n```\n\n**添加远程仓库**（远程仓库必须先在github上建好）\n\n```\n$ git remote add [shortname] [url]\n\n```\n\n**实例：**\n\n```\n$ git remote add origin git@github.com:youname/yourRepo.git\n\n```\n\n**推送数据到仓库**\n\n```\n$ git push [remote-name] [branch-name]\n\n```\n\n如果要把本地的 master 分支推送到origin服务器上（再次说明下，克隆操作会自动使用默认的master 和origin 名字），可以运行下面的命令：\n\n```\n$ git push origin master\n\n```\n\n**从远程仓库抓取数据**\n\n```\n$ git fetch [remote-name]\n\n```\n\n碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库\n**远程仓库的删除**\n\n```\n$ git remote rm origin\n\n```\n\n**远程仓库重命名**(此处命名的是上文添加远程仓库中的shortname)\n\n```\n$ git remote rename origin origin2\n\n```\n\n**自动补全**\n输入命令后按tab键，就会看到列出所有匹配的可用命令建议：\n\n```\n$ git co<tab>\n\n```\n\n## GIT分支\n\n**创建一个名为“testing”的分支**\n\n```\n$ git branch testing\n\n```\n\n切换到“testing”分支(默认为master分支)\n\n```\n$ git checkout testing\n\n```\n\n**新建并切换到该分支**\n\n```\n$ git checkout -b iss53\n\n```\n\n这条命令相当于执行下面这两条命令\n\n```\n$ git branch iss53\n$ git checkout iss53\n\n```\n\n**删除hotfix分支**（如果该分支还未被合并则会提示错误，因为这样会丢失数据）\n\n```\n$ git branch -d hotfix\n\n```\n\n**强制删除hotfix分支**（强制删除，不会提示错误）\n\n```\n$ git branch -D hotfix\n\n```\n\n**合并iss53分支**（先切换到master分支）\n\n```\n$ git checkout master\n$ git merge iss53\n\n```\n\n**查看当前所有分支**\n\n```\n$ git branch\n\n```\n\n**查看各个分支最后一个提交对象的信息**\n\n```\n$ git branch -v\n\n```\n\n**查看已经与当前分支合并的分支**（已经合并的查出来后可以删掉）\n\n```\n$ git branch --merge\n\n```\n\n**查看未与当前分支合并的分支**\n\n```\n$ git branch --no-merged\n\n```\n\n**同步远程服务器数据到本地**\n\n```\n$ git fetch origin\n\n```\n\n**从新添加的远程仓库下载数据**\n\n```\n$ git remote add teamone git://git.team1.ourcompany.com\n$ git fetch teamone\n\n```\n\n**分化一个新的分支**(使用这个命令会从服务器上下载master最新的版本，所以如果当前本地版本不是最新的，新的分支和本地分支会不同)\n\n```\n$ git checkout -b test1 origin/master\n\n```\n\n假如你用这个新的分支进行git push，并且通过了合并，那么会在远程仓库建立一个新的同名分支\n删除该分支的方法\n\n```\n$ git push origin :test1\n\n```\n\n**分支的衍合：**将test1分支衍合到master主分支\n\n```\n$ git checkout test1\n$ git rebase master\n\n```\n\n另一种方法，直接衍合，不用再先切换到test1\n\n```\n$ git rebase master test1\n\n```\n\n**快进master分支**\n\n```\n$ git checkout master\n$ git merge client\n```\n\n\n\n\n\n\n# 多人协作 \n\n- 查看远程库信息，使用`git remote -v`；\n- 本地新建的分支如果不推送到远程，对其他人就是不可见的；\n- 从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；\n- 在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n- 建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n- 从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n\n\n\n**找到历史提交的commit ID**\n\n```\ngit log  --graph --pretty=oneline --abbrev-commit\n```\n\n\n\n\n\n# 创建标签\n\n **小结**\n\n- 命令`git tag <name>`用于新建一个标签，默认为`HEAD`，也可以指定一个commit id；\n- `git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；\n- `git tag -s <tagname> -m \"blablabla...\"`可以用PGP签名标签；\n- 命令`git tag`可以查看所有标签。\n- `git show <tagname>`可以查看标签的详情\n\n\n\n# 操作标签\n\n**小结**\n\n- 命令`git push origin <tagname>`可以推送一个本地标签；\n- 命令`git push origin --tags`可以推送全部未推送过的本地标签；\n- 命令`git tag -d <tagname>`可以删除一个本地标签；\n- 命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签\n\n\n\n\n\n\n\n```shell\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n\n\ntouch readme.md\n\n# 基本操作\n\n刚开始，你需要选择一个目录，开始一个新的 repository。使用以下命令可以在当前目录下初始化 Git 。\n\n**git init **\n\ngit status  查看仓库的状态\n\ngit add 向暂存区中添加文件\n\ngit commit 保存仓库的历史记录\n\n记录一行提交信息\n\n```shell\n$ git commit -m \"First Commit\"\n```\n\n## 记录详细提交信息\n\n请不要加-m，直接执行 git commit 命令。\n\n```shell\n$ git commit \n+git tracks changes of files.\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch dev\n# Your branch is ahead of 'origin/dev' by 3 commits.\n#   (use \"git push\" to publish your local commits)\n#\n# Changes to be committed:\n#       modified:   readme.md\n#\n```\n\n在编辑器中记录提交信息\n\n- 第一行：用一行文件简述提交的更改内容\n- 第二行：空行\n- 第三行：记录更改的原因和详细内容\n\n在以 # 标位注释的 Changes to be committed 可以查看本次提交中包含的文件。其他信息不必修改。\n\n## 终止提交\n\n请将提交信息留空并直接关闭编译器，随后提交就会被中止。\n\n```shell\nAborting commit due to empty commit message.\n```\n\n\n\n##查看提交后的状态\n\n执行完git commit 命令后再来查看当前状态\n\n```shell\n$ git status\nOn branch dev\nnothing to commit, working tree clean\n```\n\n当前工作树处于刚刚提交的最新状态，所以结果显示没有更改。\n\n\n\n\n\n## git log 查看提交日志\n\n可以查看以往仓库中提交的日志。包括什么人在什么时候进行了提交或合并，以及操作后有怎样的差别。\n\n```shell\n$ git log\ncommit d97ade219a7f50f61790a14aa40f3142a07f49ba\nAuthor: SimpleLifee <824291045@qq.com>\nDate:   Sat May 20 16:47:09 2017 +0800\n\n    First Commit\n```\n\nCommit 旁边显示的是这个提交的哈希值。这个值很重要，在后面会讲到。\n\nAuthor 栏中显示的是我们给 Git 设置的用户名和邮箱。\n\nDate 栏显示的是提交的日期和时间。\n\n最后是提交信息。\n\n\n\n## 只显示提交信息的第一行\n\n在 ` git log`  后面加上 `--pretty=short  `\n\n```shell\n$ git log --pretty=short\n\ncommit d97ade219a7f50f61790a14aa40f3142a07f49ba\nAuthor: SimpleLifee <824291045@qq.com>\n\n    First Commit\n```\n\n\n\n## 只显示指定目录、文件的日志\n\n在 `git log ` 后加上文件名或者目录名即可。\n\n\n\n## 显示改动的文件\n\n如果想查看提交所带来的改动，可以加上 `-p` 参数，文件的前后差别就会显示在提交信息之后。\n\n```Shell\n$ git log -p\n```\n\n只查看某个文件提交前和提交后的差别\n\n```shell\n$ git log -p README.md\n```\n\n如上， 我们不必依次记下全部参数，每当有想查看的日志就积极去查，慢慢就能得心应手了。\n\n## 简要列出每个commit的内容变化\n\n```shell\n$ git log --stat\n```\n\n\n\n\n\n\n\n##git diff 查看更改前后的差别\n\n`git diff` 可以查看工作树、暂存区、最新提交之间的差别。\n\n注意暂存区是指 `git add` 之后，但未 `git commit`  时保存在暂存区的内容。这个时候可以使用 `git diff` 来查看工作树和暂存区的差别。\n\n```shell\n$ git diff readme.md\ndiff --git a/readme.md b/readme.md\nindex 7f612d5..c4123d2 100644\n--- a/readme.md\n+++ b/readme.md\n@@ -11,5 +11,5 @@ dev: other\n something happend.\n i will be fine.\n hah\n-\n+hey! Git!\n```\n\n注意，这里的 `+`  标出的是新添加的行，被删除的行则用 `-` 标出。\n\n这时候如果使用 `git add` 将 `README.md` 加入暂存区后。工作树和正常启动内容并无差别，结果什么都不会显示。\n\n```shell\n$ git add README.md \n```\n\n\n\n## 查看工作树和最新提交的差别\n\n 当使用`git add` 将 `README.md` 加入暂存区后，要查看工作树与最新提交的差别，请使用以下命令。\n\n```shell\n$ git diff HEAD\ndiff --git a/readme.md b/readme.md\nindex 7f612d5..c4123d2 100644\n--- a/readme.md\n+++ b/readme.md\n@@ -11,5 +11,5 @@ dev: other\n something happend.\n i will be fine.\n hah\n-\n+hey! Git!\n```\n\n不妨养成这样一个好习惯，在执行 `git commit` 命令之前先执行 `git diff HEAD ` 查看本次提交与上次提交之间有什么差别，等确认完毕再进行提交。这里的 `HEAD` 指当前分支中最新的一次提交的指针。\n\n \n\n\n# 分支的操作\n\n## git branch 显示分支一览表\n\n这个命令会将本地的分支名列表显示，* 表示当前所在分支。\n\n```shell\n$ git branch\n* master\n```\n\n\n\n## git checkout -b 创建、切换分支\n\n以当前分支为基础创建新的分支，可以使用 `git checkout -b`命令\n\n## 切换到 feature-A 分支并进行提交\n\n执行下面的命令，创建名为 `feature-A`\n\n```shell\n$ git checkout -b feature-A\nSwitched to a new branch 'feature-A'\n```\n\n实际上，以上语句等同于\n\n```shell\n$ git branch feature-A\n$ git checkout feature-A\n```\n\n\n\n## 切换分支\n\n```shell\n$ git checkout master\n```\n\n##切换回上一个分支\n\n```Shell\n$ git checkout -\n```\n\n使用 `-` （连字符） 代替分支名。\n\n\n\n\n\n## 特性分支\n\n顾名思义，特性分支是集中实现单一特性（主题），除此之外不进行任何作业的分支。在日常开发中，往往会创建数个特性分支，同时再保留一个随时可以发布软件的稳定分支。稳定分支一般由 `master`  分支担当。\n\n只要保持这样一个开发流程，就能保证master分支可以随时供人查看。其他开发者也可以放心大胆从master分支创建新的特性分支。\n\n\n\n##主干分支\n\n特性分支的原点，也是合并的终点。主干分支没有开发到一半的代码，可以随时供人查看。\n\n主干分支可以有多个，使用 Tag 标签创建版本信息。\n\n\n\n## git merge 合并分支\n\n先切换到master，然后与 `feature-A` 合并\n\n```shell\n$ git merge --no-ff feature-A\n```\n\n\n\n## 以图表形式查看分支\n\n可以直观地用图表形式输出提交的日志。\n\n```shell\n$ git log --graph\n*   commit 685c45a39c33a4777d14fb29f6f0bfb9b9920c49\n|\\  Merge: 6b15d42 40befaa\n| | Author: SimpleLifee <824291045@qq.com>\n| | Date:   Sat May 20 18:04:48 2017 +0800\n| |\n| |     merge\n| |\n| *   commit 40befaab3f0db6fd47e2d553b88428a4ca39e670\n| |\\  Merge: a0b10f9 6b15d42\n| |/  Author: SimpleLifee <824291045@qq.com>\n|/|   Date:   Sat May 20 17:51:52 2017 +0800\n| |\n| |       fix\n| |\n```\n\n\n\n# 更改提交的操作\n\n## git reset 回溯历史版本\n\n\n\n**回溯到创建 `feature-A` 分支前**\n\n让仓库的HEAD、暂存区、当前的工作树回溯到指定状态。\n\n```shell\n$ git reset --hard <哈希值>\n```\n\n\n\n **创建 fix-B 分支**\n\n\n\n **推进至feature-A分支合并后的状态**\n\n首先回复到feature-A分支合并后的状态，可以称之为“推进历史”。\n\n`git log` 只能查看以当前状态为终点的历史日志。\n\n所以这里要使用`git reflog` 查看当前仓库的操作历史， 可以看到commit、checkout、reset、merge等Git命令的执行记录。\n\n\n\n## 消除冲突\n\n如果系统提示我们文件发生了冲突，那么不解决冲突就无法完成合并，所以需要我们手动来解决冲突。解决完冲突文件后再执行`git add` 和`git commit` 。\n\n\n\n## 修改提交信息\n\n```\ngit commit --amend \n```\n\n##  git rebase -i 压缩历史\n\n在合并特性分支之前，如果发现已提交的内容中有些拼写错误，不妨提交一个修改，然后**将这个修改包含到前一个提交之中**，压缩成一个历史记录。这是个会经常用到的技巧。\n\n\n\n###  创建 feature-C 分支\n\n首先创建 feature-C 分支，然后 add 和 commit命令。\n\n但是没必要每次这么麻烦。\n\n```Shell\n$ git commit -am \"Add feature-C\"\n```\n\n> 执行上面语句的前提是，当前工作树中没有新增的Untracked  的文件。\n\n###  修正拼写错误\n\n修改错误之后，使用`git diff` 来查看差别。\n\n```Shell\n$ git diff\ndiff --git a/readme.md b/readme.md\nindex 10f9ebb..3bbe2d0 100644\n--- a/readme.md\n+++ b/readme.md\n@@ -1,2 +1,3 @@\n C\n C\n+fix C\n```\n\n然后进行提交\n\n```Shell\n$ git commit -am \"Fix Typo\"\n[C c3955c1] Fix Typo\n 1 file changed, 1 insertion(+)\n```\n\n错字漏字等失误称作typo，但是我们不希望在历史记录中看到这类提交，因为健全的历史记录不需要它们。\n\n\n\n### 更改历史\n\n我们将修正的内容与之前的一次提交合并，在历史记录中合并为一次完美的提交。\n\n```Shell\n$ git rebase -i HEAD~2\n```\n\n上面的命令，可以选定当前分支中包含HEAD ( 最新提交 ) 在内的两个最新历史记录为对象，并在编辑器中打开。\n\n```shell\npick 695471a Add C\npick 2f8a965 fix typo\n\n# Rebase 1db92da..2f8a965 onto 1db92da (2 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n695471a我们将 `2f8a965` 的 `fix typo` 的历史记录压缩到 `695471a` 的 `Add C`里。按照下图所示，将`2f8a965`左侧的 `pick` 部分删除，改写为 `fixup` 。\n\n```Shell\npick 695471a Add C\nfixup 2f8a965 fix typo\n```\n\n保存编译器里的内容，关闭编辑器\n\n```Shell\n[detached HEAD 5f770a9] nnnnnnnn\n Date: Sat May 20 22:07:28 2017 +0800\n 1 file changed, 1 insertion(+)\nSuccessfully rebased and updated refs/heads/C.\n```\n\n系统显示 rebase 成功，也就是以下面这两个提交作为对象，将 `fix typo` 的内容合并到了上一个提交`Add C` 之中，改写成一个新的提交。\n\n-  695471a Add C\n-  2f8a965 fix typo\n\n现在查看提交日志时会发现 `Add C` 的哈希值以及不再是 `695471a` ，这证明提交已经被更改了。\n\n```shell\n$ git log --graph --oneline\n* 5f770a9 Add C\n* 1db92da haha\n* c1aabf4 Add B\n... \n```\n\n这样，`fix typo`就从历史中被抹去了，也相当于 `Add C`从来没有出现过拼写错误。这算是一种良性的历史改写。\n\n\n\n### 合并至master分支\n\nC 分支的使命告一段落，我们将它与master分支合并。\n\n```Shell\n$ git checkout master\nSwitched to branch 'master'\n\n$ git merge --no-ff feature-C\nMerge made by the 'recursive' strategy.\n a         | 2 ++\n readme.md | 2 ++\n 2 files changed, 4 insertions(+)\n create mode 100644 a\n create mode 100644 readme.md\n```\n\n按照递归策略合并。\n\n\n\n# 推送至远程仓库\n\n> 建议在新建远程仓库的时候不要勾选自动生成README文件的选项。\n\n\n\n##  添加远程仓库\n\n我们用 `git remote add` 命令将它设置成本地仓库的远程仓库。\n\n```Shell\n$ git remote add origin git@github.com:9981NAN/9981NAN.git\n```\n\n这样，Git会自动将 `git@github.com:9981NAN/9981NAN.git` 远程仓库名称设置为 origin （ 标识符 ）\n\n## 添加多个 URL 地址\n\n像上面 `git remote add origin <url1> ` 添加第一个URL之后，如果想要添加多个 URL 地址，那么可以使用` git remote set-url --add origin <url2>` 添加第二个URL。 \n\n```shell\n$ git remote set-url --add origin git@github.com:9981NAN/9981NAN.git\n```\n\n这样一来，以后每次 `git push origin master`  的时候，就会自动向多个远程仓库中推送了。 \n\n> 但是使用 git pull 时，只能拉取origin里的一个URL地址（即fetch-url，如上），这个 fetch-url 默认是你添加到origin 的第一个地址。\n>\n> 如果你想更改，只需要更改 config 文件里，那几个url的顺序即可。 fetch-url 会直接对应排行第一的那个url 链接。\n\n\n## 推送至master分支\n\n\n\n如果想把当前分支下本地仓库的内容推送给远程仓库，需要用到 `git push `，假定我们在master分支下\n\n```Shell\n$ git push -u origin master\n```\n\n`-u`参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的 upstream（上游）。这样一来，下次运行 `git pull`命令从远程仓库获取内容时，本地仓库这个分支就可以直接从origin 的master 分支获取内容，省去了另外添加参数的麻烦。\n\n\n\n## 推送至master以外的分支\n\n创建其他分支\n\n```Shell\n$ git checkout -b feature-D\n```\n将它push给远程仓库，并保持分支名不变\n\n```shell\n$ git push -u origin feature-D\n```\n\n\n\n\n\n# 从远程仓库获取\n\n假设现在有另一名开发者要来共同开发，在另一个目录下新建本地仓库。\n\n## git clone 获取远程仓库\n\n```shell\n$ git clone git@github.com:9981NAN/9981NAN.git\n```\n\n> 注意clone的目录不要与之前操作的仓库在同一目录下\n\n执行 `git clone`命令后我们会默认处于master分支下，同时系统会自动将origin设置成该远程仓库的标识符。\n\n我们可以使用下面的命令查看本地仓库和远程仓库的分支信息。\n\n```shell\n$ git branch -a \n```\n\n\n\n## 获取远程的feature-D分支\n\n我们试着将feature-D分支获取至本地仓库。\n\n```shell\n$ git checkout -b feature-D origin/feature-D\n```\n\n`-b` 参数后面是本地仓库中新建分支的名称，可以与远程仓库不同名，但是建议同名，便于理解。\n\n\n\n## 向本地的feature-D分支提交更改\n\n假定我们是另一位开发者，要做一个新的提交。在修改文件内容后进行查看和提交。\n\n```shell\n$ git diff\n\n$ git commit -am \"Add feature-D\"\n```\n\n\n\n## 推送至feature-D分支\n\n在`feature-D`分支下直接使用 `git push` 即可\n\n```shell\n$ git diff\n```\n\n\n\n## git pull 获取最新的远程仓库分支\n\n回到我们刚刚放下操作的目录，这边的本地仓库中只是创建了feature-D分支，并没有在feature-D进行任何提交，而远程仓库已经有了我们刚刚推送的提交。这时候就可以用`git pull` ，将本地的 feature-D 分支更新到最新状态。\n\n```shell\n$ git pull origin feature-D\n```\n\n> 如果两人同时修改了同一部分的源代码，push时就很容易发生冲突。所以多名开发者在同一个分支中进行作业时，为了减少冲突的情况，建议更频繁地进行push和pull操作。\n\n\n\n\n\n# GitHub功能\n\n## 通过部分名称搜索文件\n\n在仓库页面按下键盘T 键，然后输入要找的文件或者目录。速度非常快。\n\n\n\n## 查看差别\n\n### 查看分支间的差别\n\n以我的9981NAN项目为例，要比较nimon分支和yong分支的差别，可以直接在浏览器URL中输入：\n\n```\nhttps://github.com/9981NAN/9981NAN/compare/nimon...yong\n```\n\n这样就可以查看两个分支间的差别了。\n\n\n\n### 查看与几天前的差别\n\n输入下面的URL就可以查看nimon分支最近7天内的差别了。\n\n```\nhttps://github.com/9981NAN/9981NAN/compare/nimon@{7.day.ago}...nimon\n```\n\n类似的还有\n\n- day\n- week\n- month\n- year\n- hour\n\n\n\n### 查看指定日期之间的差别\n\n```\nhttps://github.com/9981NAN/9981NAN/compare/nimon@{2017-05-19}...nimon\n```\n\n\n\n\n\n## Issue\n\n### 通过提交信息操作Issue\n\n在项目的Issue一览表中，每一个Issue标题的下面部分都分配 “#18” 的编号。我们只要在描述信息中加入 “#18” ，就可以在Issue中显示该提交的相关信息，使关联的提交一目了然。\n\n\n\n### Close Issue\n\n如果一个处于 Open 状态的 Issue 已经处理完毕，只要在该提交中以下列任意一种格式描述提交信息，对应的 Issue 就会被 close 。\n\n- fix #18\n- fixes #18\n- fixed #18\n- close #18\n- closes #18\n- closed #18\n- resolve #18\n- resolves #18\n- resloved #18\n\n这样我们每次提交并push之后，就不必每次都到 Issue 中寻找相应的 Issue 再手动关闭了。这是一项很实用的功能。\n\n\n\n> Issue 和 Pull Request 的编号通用。\n\n\n\n## Pull Request\n\n##### conversation\n\n> 引用评论，选中别人的评论后按 R 键。\n\n> 在评论中应用表情，输入 “ ：” 即可选择。\n\n\n\n### Files Changed\n\n默认情况下，系统会将空格的不同也高亮显示，想要关闭之？ 在URL 的末尾添加 “ ?w=1 ” 就可以不显示空格的差异了。\n\n将鼠标放到被更改行号的左侧，可以看到一个加号，我们可以点击这个加号在代码中插入评论。这样评论是针对哪行代码就一目了然了\n\n\n\n\n\n## Pulse\n\nPulse是体现该仓库软件开发活跃度的功能，近期仓库创建了多个pull request 或 Issue，有多少人参与了这个仓库的开发。用户可以判断目前这个人间是否正在积极开发，在挑选GitHub上开发的软件时，可以作为一个重要的衡量标准。\n\n\n\n# 发送Pull Request\n\n\n\n## 基本步骤\n\n### Fork \n\n\n\n### clone\n\n\n\n### branch\n\n前面两步完成之后，我们需要在特性分支中进行开发\n\n\n\n#### 确认分支\n\n```shell\n$ git br -a\n* master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/master\n```\n\n\n\n#### 创建特性分支\n\n在 `work` 之后加上 `master` 表明在 `master` 分支的基础上创建 `work` 分支。\n\n```shell\n$ git checkout -b work master\nSwitched to a new branch 'work'\n```\n\n\n\n### 添加代码\n\n在 `readme.md` 文件中添加要增加的代码。\n\n\n\n### 提交修改\n\n```shell\n$ git commit -am \"Add pull request\"\n[work f3d798e] Add pull request\n 1 file changed, 1 insertion(+), 2 deletions(-)\n```\n\n\n\n### 创建远程分支\n\n把在本地创建的分支推送到远程仓库，如果远程仓库没有该分支，那么就创建之。\n\n```shell\n$ git push origin work\nCounting objects: 3, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 283 bytes | 0 bytes/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo github.com:junoni/nimon.git\n * [new branch]      work -> work\n```\n\n\n\n### 在GitHub页面上创建Pull Request\n\n\n\n### 不进行Fork直接从分支发送Pull Request\n\n前提是拥有这个仓库编辑的权限\n\n\n\n\n\n\n\n## 仓库的维护\n\nFork 或者 clone 来的仓库，一旦放置不管就会离最新的源代码越来越远。这时候我们需要让本地仓库与源代码保持最新状态。\n\n我们需要将原仓库设置为远程仓库，从该仓库获取`fetch` 数据与本地仓库进行合并 `merge`  。\n\n\n\n### Fork 与 clone\n\n\n\n### 给原仓库设置名称\n\n```shell\n$ git remote add upstream git@github.com:SimpleLifee/nimon.git\n```\n\n这样，我们这个仓库将以upstream作为原仓库的标识符。这个环境下只需要设定一次。\n\n可以下面的命令查看\n\n```shell\n$ git remote -v\norigin\tgit@github.com:junoni/nimon.git (fetch)\norigin\tgit@github.com:junoni/nimon.git (push)\nupstream\tgit@github.com:SimpleLifee/nimon.git (fetch)\nupstream\tgit@github.com:SimpleLifee/nimon.git (push)\n```\n\n\n\n### 获取最新数据\n\n要让仓库维持最新状态，只需要重复这一工作即可。\n\n```shell\n$ git fetch upstream\nremote: Counting objects: 14, done.\nremote: Compressing objects: 100% (7/7), done.\nremote: Total 14 (delta 3), reused 14 (delta 3), pack-reused 0\nUnpacking objects: 100% (14/14), done.\nFrom github.com:SimpleLifee/nimon\n * [new branch]      dev        -> upstream/dev\n * [new branch]      feature-A  -> upstream/feature-A\n * [new branch]      master     -> upstream/master\n```\n\n\n\n\n\n# 接受  Pull Request\n\n\n\n## 采纳 Pull Request 之前的准备\n\n\n\n### 将接受方的本地仓库更新至最新状态\n\n\n\n### 获取发送方的远程仓库\n\n```shell\n$ git remote add PR发送者 git@github.com:junoni/nimon.git\n```\n\n查看添加后的情况\n\n```Shell\n$ git remote -v\nPR发送者\tgit@github.com:junoni/nimon.git (fetch)\nPR发送者\tgit@github.com:junoni/nimon.git (push)\norigin\tgit@github.com:SimpleLifee/nimon.git (fetch)\norigin\tgit@github.com:SimpleLifee/nimon.git (push)\n```\n\n接着进行fetch\n\n```shell\n$ git fetch PR发送者\nremote: Counting objects: 32, done.\nremote: Compressing objects: 100% (18/18), done.\nremote: Total 32 (delta 14), reused 26 (delta 8), pack-reused 0\nUnpacking objects: 100% (32/32), done.\nFrom github.com:junoni/nimon\n * [new branch]      dev        -> PR发送者/dev\n * [new branch]      master     -> PR发送者/master\n * [new branch]      work       -> PR发送者/work\n```\n\n现在我们获取了Pull Request 发送仓库以及分支的数据（PR发送者/work）\n\n\n\n### 创建用于检查的分支\n\n前面我们只获取了远程仓库的数据，这些数据尚未反映在任何一个分支中。因此我们需要创建一个分支，用于模拟采纳 Pull Request 后的状态。由于这是我们第一个 Pull Request ，分支名就叫 `pr1` 。\n\n```shell\n$ git checkout -b pr1\nSwitched to a new branch 'pr1'\n```\n\n\n\n### 合并\n\n下面要将已经 fetch 完毕的 “PR发送者/work ” 的修改内容与 `pr1` 分支进行合并\n\n```shell\n$ git merge PR发送者/work\n```\n\n这时候我们需要检查一下合并的情况。\n\n\n\n### 删除分支\n\n检查结束后`pr1` 分支就没用了，可以直接删除。我们需要先切换到 `pr1` 之外，例如 `master`\n\n```shell\n$ git checkout master\nPrevious HEAD position was f3d798e... Add pull request\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 12 commits.\n  (use \"git push\" to publish your local commits)\n```\n\n这时候，Git 提醒我们当前 `master` 分支已经比远程仓库多出 12 个新提交了，并建议我们使用 `git push` 向远程仓库推送新的提交。 \n\n之后我们进行删除分支。\n\n```Shell\n$ git branch -D pr1\nDeleted branch pr1 (was 685c45a).\n```\n\n\n\n\n\n## 采纳 Pull Request\n\n我们可以打开浏览器找到相应的 Pull Request 页面，点击 merge pull request按钮，随后Pull Request的内容就会自动合并至仓库。\n\n不过我们已经在本地构筑了相同的环境，只要通过 CLI 进行合并操作后再 push 至 Github，就可以完成Pull Request。\n\n\n\n### 合并到主分支\n\n首先我们切换到 `master` 分支上\n\n```Shell\n$ git checkout master\n```\n\n然后合并 `PR发送者/work`\n\n```Shell\n$ git merge PR发送者/work\n```\n\n\n\n### Push 修改内容\n\n先查看本地仓库和远程 GitHub端仓库库代码的差别\n\n```Shell\n$ git diff origin/master\n```\n\n确认没有目的之外的差别后，进行push\n\n```shell\n$ git push\nCounting objects: 10, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (7/7), done.\nWriting objects: 100% (10/10), 1.05 KiB | 0 bytes/s, done.\nTotal 10 (delta 3), reused 0 (delta 0)\nremote: Resolving deltas: 100% (3/3), completed with 1 local object.\nTo github.com:SimpleLifee/nimon.git\n   8caf54d..067a3c8  master -> master\n```\n\n这样，仓库的 `Pull Request`会自动从 `Open` 状态变为 `Close` 状态。\n\n至此，Pull Request 的操作都介绍完了。\n\n\n\n# Hub命令\n\n\n\n### 安装\n\n如果使用Homebrew\n\n```Shell\n$ brew install hub\n```\n\n然后，在shell的环境路径后面添加 `~/bin` 。\n\n```shell\n$ echo 'export PATH=\"~/bin:$PATH\"' >> ~/.bash_profile\n```\n\n重新启动shell，就可以使用hub命令了。\n\n#### 确认运行情况\n\n```Shell\n$ hub --version\ngit version 2.11.0 (Apple Git-81)\nhub version 2.2.9\n```\n\n\n\n#### 设置别名\n\n使用hub命令的最佳实践是将相应的 git 设置成 hub 的别名。hub 命令可以完成 git 命令的所有操作，只需要在 shell 的配置文件中（.bash_profile） 添加下面一句即可。\n\n```\neval \"$(hub alias -s)\"\n```\n\n\n\n#### ~/.config/hub\n\nhub 命令在初次访问 GitHub 的 API 的时候会询问用户名和密码。\n\n```Shell\n$ cat ~/.config/hub\ngithub.com:\n- user: SimpleLifee\n  oauth_token: 5cb6fb57b65693dac153bf2c61dd642a916b268b\n  protocol: https\n```\n\n\n\n\n\n### 命令\n\n\n\n#### hub clone\n\n使用 `hub clone` 命令，可以省去指定 `GitHub` 端仓库的部分\n\n```shell\n$ hub clone nimon\n```\n\n上面这个命令与下面的命令效果相同。\n\n```shell\n$ git clone git@github.com/SimpleLifee/nimon.git\n```\n\n\n\n如果要指定用户，可以输入以下命令。\n\n```Shell\n$ hub clone junoni/nimon\n```\n\n上面这个命令与下面的命令效果相同。\n\n```\n$ git clone git@github.com/junoni/nimon.git\n```\n\n\n\n#### hub remote add\n\n```shell\n$ hub remote add junoni\n```\n\n等同于\n\n```shell\n$ git remote add junoni git://github.com/junoni/nimon.git\n```\n\n\n\n#### hub fetch\n\n类似于 `hub remote add`\n\n\n\n#### hub cherry-pick\n\n`hub cherry-pick` 只需要输入 URL 就可以获取对应的修改并应用到当前分支。\n\n```Shell\n$ hub cherry-pick https://github.com/SimpleLifee/SimpleLifee.github.io/commit/647c558f5b3767c2995dda5ddd5663d0466ed4dd\n```\n\n这个命令可以将下面两个命令的效果一次性执行\n\n```Shell\n$ git remote add -f SimpleLifee git@github.com:SimpleLifee/SimpleLifee.github.io.git\n$ git cherry-pick 647c558f5b3767c2995dda5ddd5663d0466ed4dd\n```\n\n\n\n#### hub fork\n\n`hub fork` 命令的功能与 GitHub 页面的 Fork 按钮相同，比如我们 clone 了其他用户的仓库，现在想 Fork 成自己的仓库，只需要执行\n\n```shell\n$ hub fork\n```\n\n这一命令，就可获得与下面这一系列操作相同的效果\n\n```shell\n(在 GitHub 对仓库做 Fork 处理)\n$ git remote add -f 用户名 git@github.com:当前操作仓库的名字.git\n```\n\n执行完毕后，Fork 出的仓库会被设置成当前本地仓库的远程仓库（以用户名为标识符）\n\n\n\n#### hub pull-request\n\n\n\n\n\n","source":"_posts/00001/Git/2017-05-05-GitHub 学习之路.md","raw":"---\ntitle: GitHub 学习之路\ndate: 2017-05-05 21:55:29\ntags: git\nthumbnail: /images/github.png\n---\n\n\n\n\n\n![](github.png)\n\n<div align=\"center\">\n\n自学 Git 的一些总结\n\n</div>\n\n<!-- more -->\n\n\n\n> 成大事不在于力量的大小，而在于能坚持多久。  \t\t\t——约翰生\n\n# Git配置多个SSH\n\n在日常开发中，我们可能会使用多个帐号以及多个  SSH-Key ，可能是 [码云](https://git.oschina.net/)，也可能是 [GitHub](https://github.com/) ，如果你的电脑中只配置了一个 SSH-Key ，那到时候另一个或多个帐号在使用上，就会带来些许不便。（你能忍受每次 push 都要求你输入密码吗？或者每次切换帐号都需要重新配置 SSH-Key 吗？因为每次使用默认配置的方法都会将前一次配置覆盖。），作为程序员，怎么能让这种事情发生呢，我们需要一种一劳永逸的解决办法。经过上网搜索及筛选，我找到一种比较简单方便的方法。\n\n## 1. 生成并添加第一个SSH\n\n首先你得安装 [git](https://git-scm.com/) 客户端。Windows 平台，安装完后，在桌面右键选择 git bash 打开。Mac 平台安装好，打开 Terminal 或者 iTerm 输入以下命令。\n\n```Java\n$ ssh-keygen -t rsa -C \"youremail@xxx.com\"  \n```\n\n在 Git Bash 中执行命令一路回车，会在 ~/.ssh/ 目录下生成 id_rsa 和 id_rsa.pub 两个文件用文本编辑器打开 id_rsa.pub 里的内容，在 Github 中添加 SSH Keys\n\n\n\n## 2. 生成并添加第二个SSH\n\n接着上一步，为了区分开不同的 SSH-Key，我在生成文件的时候用了不同的名称来区分。 输入你要配置的另一个 SSH-Key 的邮箱。\n\n```shell\n$ ssh-keygen -t rsa -C \"otheremail@xxx.com\"  \n```\n\n这次不要一路回车，请输入这个文件的名字，见下面的第三行。\n\n```Shell\n$ ssh-keygen -t rsa -C \"824291045@qq.com\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/nimon/.ssh/id_rsa): other\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in other.\nYour public key has been saved in other.pub.\nThe key fingerprint is:\nSHA256:tlHc9GiN8cLngDw8QmomMlxmc+2odsRciMjIu6ljjzQ 824291045@qq.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n|.o .=..o.   o    |\n|.oo+.o.oo+ = B   |\n```\n\n如上输入 `other`  之后会在.ssh目录下生成两个文件 `other` 和 `other.pub` ，原理同步骤1。\n\n\n\n## 3.创建config文件\n\n因为 SSH-Key 有一个默认的配置，如果我们还是按照默认配置，那么注定是不会成功的。\n\n我们需要在 ~/.ssh 目录下添加 config 配置文件用于区分多个 SSH-Key 。\n\n```tex\nHost github.com  \n    HostName github.com  \n    PreferredAuthentications publickey  \n    IdentityFile ~/.ssh/id_rsa  \n  \nHost other.github.com  \n    HostName github.com  \n    PreferredAuthentications publickey  \n    IdentityFile ~/.ssh/other\n```\n\n之后保存并推出编辑器。\n\n- Host : 代表一个映射的域名地址，可以自己取。\n- HostName ： 是实际的域名地址，一般是代码托管平台的域名。\n- PreferredAuthentications ： 配置登录时用什么权限认证，可设为`publickey,password publickey,keyboard-interactive`，在这里使用 publickey 即可。\n- IdentityFile ： 就是更改生成的两个 Key 文件的地址，这里只需填写对应的文件名即可。\n\n\n\n## 测试\n\n以上完成之后，在命令行中输入 `ssh -T git@xxx.com` （xxx 就写刚才在配置文件中 Host 后面的名字）与远程进行验证，验证成功就会显示如下信息。\n\n```shell\n$ ssh -T git@github.com\nHi SmartJunNi! You've successfully authenticated, but GitHub does not provide shell access.\n\n$ ssh -T git@other.github.com\nssh git@github.com\nHi junoni! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n\n\n## 可能出现的问题\n\n如果在项目中使用 `git push ` 时提示` [remote reject]   (Permission denied)` 。如下所示\n\n```shell\nCounting objects: 3, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 252 bytes | 0 bytes/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo other.github.com:junoni/nimon.git\n ! [remote rejected] master -> master (permission denied)\nerror: failed to push some refs to 'git@other.github.com:junoni/nimon.git'\n```\n\n我花了一个半小时从 google 到 stackoverflow 查了个边，就差没有百度一下了，就是没有找到可以解决的办法。这时我发现最后一行的`git@other.github.com:junoni/nimon.git ` 这个地址，我想了想，刚刚配置了 config 这个文件，其中`Host `   使用的是 `other.github.com`，我用 `git remote -v` 查看了当前远程仓库的 origin 。\n\n```shell\n$ git remote -v\norigin\tgit@github.com:junoni/nimon.git (fetch)\norigin\tgit@github.com:junoni/nimon.git (push)\n```\n\n可以看到，fetch 和 push 的 origin 地址都是 git@github.com ，而不是 git@other.github.com ，我就抱着试试的心态，改成了 git@other.github.com。还有一个步骤，将 `other` 加入到密钥列表中。\n\n```shell\n$ ssh-add ~/.ssh/other\n```\n\n 再尝试 push 一下，没想到成功了。如迈克尔•乔丹所说：“我可以接受失败，但我不能接受放弃。”\n\n\n\n当然，添加之后我们还可以查看当前密钥列表。也可以删除密钥。\n\n```shell\n$ ssh-add -l\n$ ssh-add -d ~/.ssh/other\n```\n\n\n\n类似debug，查看与远程连接情况。\n\n```Shell\n$ ssh -v git@github.com\n```\n\n\n\n总结：我们设置的远程仓库的地址必须和 config 文件中设置的域名映射地址相同，不然就会出现错误。\n\n# 总览\n\n\n\n\n\n## 查看全局config信息\n\nmac 下在~/.gitconfig 文件中配置 git 的全局信息。使用 `git config --list` 可以列出全局配置信息。\n\n```shell\n$ git config --list\n```\n\n\n\n**用户信息**\n配置你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：\n\n```\n$ git config --global user.name “youname”\n$ git config --global user.email “12345@example.com”\n```\n\n如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。\n\n\n\n## GIT总结\n\n**查看配置信息**\n查看已有的配置信息\n\n```\n$ git config --list\n$ git config -l\n\n```\n\n**获取帮助**\n例如想获取config命令的帮助信息\n\n```\n$ git help config \n$ git config --help\n\n```\n\n**初始化新仓库**\n\n```\n$ git init\n\n```\n\n初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。\n\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n**跟踪文件：**（将文件加到暂存区域）\n\n```\n$ git add readme.txt\n\n```\n\n**跟踪全部文件**\n\n```\n$ git add .\n\n```\n\n**提交更新**\n\n```\n$ git commit -m “first version”\n\n```\n\n**上传（推送）到github**\n\n```\n$ git push origin master\n\n```\n\n**从现有仓库克隆**\n\n```\n$ git clone git://github.com/youname/project.git\n$ git clone git@github.com:youname/project.git\n$ git clone https://github.com/youname/project.git\n\n```\n\n**检查当前文件状态**\n\n```\n$ git status\n\n```\n\n**创建.gitignore文件**\n\n```\n$ touch .gitignore\n\n```\n\n**查看修改之后没有暂存起来的内容**\n\n```\n$ git diff\n\n```\n\n**移除文件**\n\n```\n$ git rm readme.txt\n\n```\n\n**重命名文件**\n\n```\n$ git mv oldname.txt newname.txt\n\n```\n\n**查看提交历史**\n\n```\n$ git log\n\n```\n\n**取消暂存**\n\n```\n$ git reset HEAD readme.txt\n\n```\n\n**添加远程仓库**（远程仓库必须先在github上建好）\n\n```\n$ git remote add [shortname] [url]\n\n```\n\n**实例：**\n\n```\n$ git remote add origin git@github.com:youname/yourRepo.git\n\n```\n\n**推送数据到仓库**\n\n```\n$ git push [remote-name] [branch-name]\n\n```\n\n如果要把本地的 master 分支推送到origin服务器上（再次说明下，克隆操作会自动使用默认的master 和origin 名字），可以运行下面的命令：\n\n```\n$ git push origin master\n\n```\n\n**从远程仓库抓取数据**\n\n```\n$ git fetch [remote-name]\n\n```\n\n碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库\n**远程仓库的删除**\n\n```\n$ git remote rm origin\n\n```\n\n**远程仓库重命名**(此处命名的是上文添加远程仓库中的shortname)\n\n```\n$ git remote rename origin origin2\n\n```\n\n**自动补全**\n输入命令后按tab键，就会看到列出所有匹配的可用命令建议：\n\n```\n$ git co<tab>\n\n```\n\n## GIT分支\n\n**创建一个名为“testing”的分支**\n\n```\n$ git branch testing\n\n```\n\n切换到“testing”分支(默认为master分支)\n\n```\n$ git checkout testing\n\n```\n\n**新建并切换到该分支**\n\n```\n$ git checkout -b iss53\n\n```\n\n这条命令相当于执行下面这两条命令\n\n```\n$ git branch iss53\n$ git checkout iss53\n\n```\n\n**删除hotfix分支**（如果该分支还未被合并则会提示错误，因为这样会丢失数据）\n\n```\n$ git branch -d hotfix\n\n```\n\n**强制删除hotfix分支**（强制删除，不会提示错误）\n\n```\n$ git branch -D hotfix\n\n```\n\n**合并iss53分支**（先切换到master分支）\n\n```\n$ git checkout master\n$ git merge iss53\n\n```\n\n**查看当前所有分支**\n\n```\n$ git branch\n\n```\n\n**查看各个分支最后一个提交对象的信息**\n\n```\n$ git branch -v\n\n```\n\n**查看已经与当前分支合并的分支**（已经合并的查出来后可以删掉）\n\n```\n$ git branch --merge\n\n```\n\n**查看未与当前分支合并的分支**\n\n```\n$ git branch --no-merged\n\n```\n\n**同步远程服务器数据到本地**\n\n```\n$ git fetch origin\n\n```\n\n**从新添加的远程仓库下载数据**\n\n```\n$ git remote add teamone git://git.team1.ourcompany.com\n$ git fetch teamone\n\n```\n\n**分化一个新的分支**(使用这个命令会从服务器上下载master最新的版本，所以如果当前本地版本不是最新的，新的分支和本地分支会不同)\n\n```\n$ git checkout -b test1 origin/master\n\n```\n\n假如你用这个新的分支进行git push，并且通过了合并，那么会在远程仓库建立一个新的同名分支\n删除该分支的方法\n\n```\n$ git push origin :test1\n\n```\n\n**分支的衍合：**将test1分支衍合到master主分支\n\n```\n$ git checkout test1\n$ git rebase master\n\n```\n\n另一种方法，直接衍合，不用再先切换到test1\n\n```\n$ git rebase master test1\n\n```\n\n**快进master分支**\n\n```\n$ git checkout master\n$ git merge client\n```\n\n\n\n\n\n\n# 多人协作 \n\n- 查看远程库信息，使用`git remote -v`；\n- 本地新建的分支如果不推送到远程，对其他人就是不可见的；\n- 从本地推送分支，使用`git push origin branch-name`，如果推送失败，先用`git pull`抓取远程的新提交；\n- 在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n- 建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n- 从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。\n\n\n\n**找到历史提交的commit ID**\n\n```\ngit log  --graph --pretty=oneline --abbrev-commit\n```\n\n\n\n\n\n# 创建标签\n\n **小结**\n\n- 命令`git tag <name>`用于新建一个标签，默认为`HEAD`，也可以指定一个commit id；\n- `git tag -a <tagname> -m \"blablabla...\"`可以指定标签信息；\n- `git tag -s <tagname> -m \"blablabla...\"`可以用PGP签名标签；\n- 命令`git tag`可以查看所有标签。\n- `git show <tagname>`可以查看标签的详情\n\n\n\n# 操作标签\n\n**小结**\n\n- 命令`git push origin <tagname>`可以推送一个本地标签；\n- 命令`git push origin --tags`可以推送全部未推送过的本地标签；\n- 命令`git tag -d <tagname>`可以删除一个本地标签；\n- 命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签\n\n\n\n\n\n\n\n```shell\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n\n\n\ntouch readme.md\n\n# 基本操作\n\n刚开始，你需要选择一个目录，开始一个新的 repository。使用以下命令可以在当前目录下初始化 Git 。\n\n**git init **\n\ngit status  查看仓库的状态\n\ngit add 向暂存区中添加文件\n\ngit commit 保存仓库的历史记录\n\n记录一行提交信息\n\n```shell\n$ git commit -m \"First Commit\"\n```\n\n## 记录详细提交信息\n\n请不要加-m，直接执行 git commit 命令。\n\n```shell\n$ git commit \n+git tracks changes of files.\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch dev\n# Your branch is ahead of 'origin/dev' by 3 commits.\n#   (use \"git push\" to publish your local commits)\n#\n# Changes to be committed:\n#       modified:   readme.md\n#\n```\n\n在编辑器中记录提交信息\n\n- 第一行：用一行文件简述提交的更改内容\n- 第二行：空行\n- 第三行：记录更改的原因和详细内容\n\n在以 # 标位注释的 Changes to be committed 可以查看本次提交中包含的文件。其他信息不必修改。\n\n## 终止提交\n\n请将提交信息留空并直接关闭编译器，随后提交就会被中止。\n\n```shell\nAborting commit due to empty commit message.\n```\n\n\n\n##查看提交后的状态\n\n执行完git commit 命令后再来查看当前状态\n\n```shell\n$ git status\nOn branch dev\nnothing to commit, working tree clean\n```\n\n当前工作树处于刚刚提交的最新状态，所以结果显示没有更改。\n\n\n\n\n\n## git log 查看提交日志\n\n可以查看以往仓库中提交的日志。包括什么人在什么时候进行了提交或合并，以及操作后有怎样的差别。\n\n```shell\n$ git log\ncommit d97ade219a7f50f61790a14aa40f3142a07f49ba\nAuthor: SimpleLifee <824291045@qq.com>\nDate:   Sat May 20 16:47:09 2017 +0800\n\n    First Commit\n```\n\nCommit 旁边显示的是这个提交的哈希值。这个值很重要，在后面会讲到。\n\nAuthor 栏中显示的是我们给 Git 设置的用户名和邮箱。\n\nDate 栏显示的是提交的日期和时间。\n\n最后是提交信息。\n\n\n\n## 只显示提交信息的第一行\n\n在 ` git log`  后面加上 `--pretty=short  `\n\n```shell\n$ git log --pretty=short\n\ncommit d97ade219a7f50f61790a14aa40f3142a07f49ba\nAuthor: SimpleLifee <824291045@qq.com>\n\n    First Commit\n```\n\n\n\n## 只显示指定目录、文件的日志\n\n在 `git log ` 后加上文件名或者目录名即可。\n\n\n\n## 显示改动的文件\n\n如果想查看提交所带来的改动，可以加上 `-p` 参数，文件的前后差别就会显示在提交信息之后。\n\n```Shell\n$ git log -p\n```\n\n只查看某个文件提交前和提交后的差别\n\n```shell\n$ git log -p README.md\n```\n\n如上， 我们不必依次记下全部参数，每当有想查看的日志就积极去查，慢慢就能得心应手了。\n\n## 简要列出每个commit的内容变化\n\n```shell\n$ git log --stat\n```\n\n\n\n\n\n\n\n##git diff 查看更改前后的差别\n\n`git diff` 可以查看工作树、暂存区、最新提交之间的差别。\n\n注意暂存区是指 `git add` 之后，但未 `git commit`  时保存在暂存区的内容。这个时候可以使用 `git diff` 来查看工作树和暂存区的差别。\n\n```shell\n$ git diff readme.md\ndiff --git a/readme.md b/readme.md\nindex 7f612d5..c4123d2 100644\n--- a/readme.md\n+++ b/readme.md\n@@ -11,5 +11,5 @@ dev: other\n something happend.\n i will be fine.\n hah\n-\n+hey! Git!\n```\n\n注意，这里的 `+`  标出的是新添加的行，被删除的行则用 `-` 标出。\n\n这时候如果使用 `git add` 将 `README.md` 加入暂存区后。工作树和正常启动内容并无差别，结果什么都不会显示。\n\n```shell\n$ git add README.md \n```\n\n\n\n## 查看工作树和最新提交的差别\n\n 当使用`git add` 将 `README.md` 加入暂存区后，要查看工作树与最新提交的差别，请使用以下命令。\n\n```shell\n$ git diff HEAD\ndiff --git a/readme.md b/readme.md\nindex 7f612d5..c4123d2 100644\n--- a/readme.md\n+++ b/readme.md\n@@ -11,5 +11,5 @@ dev: other\n something happend.\n i will be fine.\n hah\n-\n+hey! Git!\n```\n\n不妨养成这样一个好习惯，在执行 `git commit` 命令之前先执行 `git diff HEAD ` 查看本次提交与上次提交之间有什么差别，等确认完毕再进行提交。这里的 `HEAD` 指当前分支中最新的一次提交的指针。\n\n \n\n\n# 分支的操作\n\n## git branch 显示分支一览表\n\n这个命令会将本地的分支名列表显示，* 表示当前所在分支。\n\n```shell\n$ git branch\n* master\n```\n\n\n\n## git checkout -b 创建、切换分支\n\n以当前分支为基础创建新的分支，可以使用 `git checkout -b`命令\n\n## 切换到 feature-A 分支并进行提交\n\n执行下面的命令，创建名为 `feature-A`\n\n```shell\n$ git checkout -b feature-A\nSwitched to a new branch 'feature-A'\n```\n\n实际上，以上语句等同于\n\n```shell\n$ git branch feature-A\n$ git checkout feature-A\n```\n\n\n\n## 切换分支\n\n```shell\n$ git checkout master\n```\n\n##切换回上一个分支\n\n```Shell\n$ git checkout -\n```\n\n使用 `-` （连字符） 代替分支名。\n\n\n\n\n\n## 特性分支\n\n顾名思义，特性分支是集中实现单一特性（主题），除此之外不进行任何作业的分支。在日常开发中，往往会创建数个特性分支，同时再保留一个随时可以发布软件的稳定分支。稳定分支一般由 `master`  分支担当。\n\n只要保持这样一个开发流程，就能保证master分支可以随时供人查看。其他开发者也可以放心大胆从master分支创建新的特性分支。\n\n\n\n##主干分支\n\n特性分支的原点，也是合并的终点。主干分支没有开发到一半的代码，可以随时供人查看。\n\n主干分支可以有多个，使用 Tag 标签创建版本信息。\n\n\n\n## git merge 合并分支\n\n先切换到master，然后与 `feature-A` 合并\n\n```shell\n$ git merge --no-ff feature-A\n```\n\n\n\n## 以图表形式查看分支\n\n可以直观地用图表形式输出提交的日志。\n\n```shell\n$ git log --graph\n*   commit 685c45a39c33a4777d14fb29f6f0bfb9b9920c49\n|\\  Merge: 6b15d42 40befaa\n| | Author: SimpleLifee <824291045@qq.com>\n| | Date:   Sat May 20 18:04:48 2017 +0800\n| |\n| |     merge\n| |\n| *   commit 40befaab3f0db6fd47e2d553b88428a4ca39e670\n| |\\  Merge: a0b10f9 6b15d42\n| |/  Author: SimpleLifee <824291045@qq.com>\n|/|   Date:   Sat May 20 17:51:52 2017 +0800\n| |\n| |       fix\n| |\n```\n\n\n\n# 更改提交的操作\n\n## git reset 回溯历史版本\n\n\n\n**回溯到创建 `feature-A` 分支前**\n\n让仓库的HEAD、暂存区、当前的工作树回溯到指定状态。\n\n```shell\n$ git reset --hard <哈希值>\n```\n\n\n\n **创建 fix-B 分支**\n\n\n\n **推进至feature-A分支合并后的状态**\n\n首先回复到feature-A分支合并后的状态，可以称之为“推进历史”。\n\n`git log` 只能查看以当前状态为终点的历史日志。\n\n所以这里要使用`git reflog` 查看当前仓库的操作历史， 可以看到commit、checkout、reset、merge等Git命令的执行记录。\n\n\n\n## 消除冲突\n\n如果系统提示我们文件发生了冲突，那么不解决冲突就无法完成合并，所以需要我们手动来解决冲突。解决完冲突文件后再执行`git add` 和`git commit` 。\n\n\n\n## 修改提交信息\n\n```\ngit commit --amend \n```\n\n##  git rebase -i 压缩历史\n\n在合并特性分支之前，如果发现已提交的内容中有些拼写错误，不妨提交一个修改，然后**将这个修改包含到前一个提交之中**，压缩成一个历史记录。这是个会经常用到的技巧。\n\n\n\n###  创建 feature-C 分支\n\n首先创建 feature-C 分支，然后 add 和 commit命令。\n\n但是没必要每次这么麻烦。\n\n```Shell\n$ git commit -am \"Add feature-C\"\n```\n\n> 执行上面语句的前提是，当前工作树中没有新增的Untracked  的文件。\n\n###  修正拼写错误\n\n修改错误之后，使用`git diff` 来查看差别。\n\n```Shell\n$ git diff\ndiff --git a/readme.md b/readme.md\nindex 10f9ebb..3bbe2d0 100644\n--- a/readme.md\n+++ b/readme.md\n@@ -1,2 +1,3 @@\n C\n C\n+fix C\n```\n\n然后进行提交\n\n```Shell\n$ git commit -am \"Fix Typo\"\n[C c3955c1] Fix Typo\n 1 file changed, 1 insertion(+)\n```\n\n错字漏字等失误称作typo，但是我们不希望在历史记录中看到这类提交，因为健全的历史记录不需要它们。\n\n\n\n### 更改历史\n\n我们将修正的内容与之前的一次提交合并，在历史记录中合并为一次完美的提交。\n\n```Shell\n$ git rebase -i HEAD~2\n```\n\n上面的命令，可以选定当前分支中包含HEAD ( 最新提交 ) 在内的两个最新历史记录为对象，并在编辑器中打开。\n\n```shell\npick 695471a Add C\npick 2f8a965 fix typo\n\n# Rebase 1db92da..2f8a965 onto 1db92da (2 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n```\n\n695471a我们将 `2f8a965` 的 `fix typo` 的历史记录压缩到 `695471a` 的 `Add C`里。按照下图所示，将`2f8a965`左侧的 `pick` 部分删除，改写为 `fixup` 。\n\n```Shell\npick 695471a Add C\nfixup 2f8a965 fix typo\n```\n\n保存编译器里的内容，关闭编辑器\n\n```Shell\n[detached HEAD 5f770a9] nnnnnnnn\n Date: Sat May 20 22:07:28 2017 +0800\n 1 file changed, 1 insertion(+)\nSuccessfully rebased and updated refs/heads/C.\n```\n\n系统显示 rebase 成功，也就是以下面这两个提交作为对象，将 `fix typo` 的内容合并到了上一个提交`Add C` 之中，改写成一个新的提交。\n\n-  695471a Add C\n-  2f8a965 fix typo\n\n现在查看提交日志时会发现 `Add C` 的哈希值以及不再是 `695471a` ，这证明提交已经被更改了。\n\n```shell\n$ git log --graph --oneline\n* 5f770a9 Add C\n* 1db92da haha\n* c1aabf4 Add B\n... \n```\n\n这样，`fix typo`就从历史中被抹去了，也相当于 `Add C`从来没有出现过拼写错误。这算是一种良性的历史改写。\n\n\n\n### 合并至master分支\n\nC 分支的使命告一段落，我们将它与master分支合并。\n\n```Shell\n$ git checkout master\nSwitched to branch 'master'\n\n$ git merge --no-ff feature-C\nMerge made by the 'recursive' strategy.\n a         | 2 ++\n readme.md | 2 ++\n 2 files changed, 4 insertions(+)\n create mode 100644 a\n create mode 100644 readme.md\n```\n\n按照递归策略合并。\n\n\n\n# 推送至远程仓库\n\n> 建议在新建远程仓库的时候不要勾选自动生成README文件的选项。\n\n\n\n##  添加远程仓库\n\n我们用 `git remote add` 命令将它设置成本地仓库的远程仓库。\n\n```Shell\n$ git remote add origin git@github.com:9981NAN/9981NAN.git\n```\n\n这样，Git会自动将 `git@github.com:9981NAN/9981NAN.git` 远程仓库名称设置为 origin （ 标识符 ）\n\n## 添加多个 URL 地址\n\n像上面 `git remote add origin <url1> ` 添加第一个URL之后，如果想要添加多个 URL 地址，那么可以使用` git remote set-url --add origin <url2>` 添加第二个URL。 \n\n```shell\n$ git remote set-url --add origin git@github.com:9981NAN/9981NAN.git\n```\n\n这样一来，以后每次 `git push origin master`  的时候，就会自动向多个远程仓库中推送了。 \n\n> 但是使用 git pull 时，只能拉取origin里的一个URL地址（即fetch-url，如上），这个 fetch-url 默认是你添加到origin 的第一个地址。\n>\n> 如果你想更改，只需要更改 config 文件里，那几个url的顺序即可。 fetch-url 会直接对应排行第一的那个url 链接。\n\n\n## 推送至master分支\n\n\n\n如果想把当前分支下本地仓库的内容推送给远程仓库，需要用到 `git push `，假定我们在master分支下\n\n```Shell\n$ git push -u origin master\n```\n\n`-u`参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的 upstream（上游）。这样一来，下次运行 `git pull`命令从远程仓库获取内容时，本地仓库这个分支就可以直接从origin 的master 分支获取内容，省去了另外添加参数的麻烦。\n\n\n\n## 推送至master以外的分支\n\n创建其他分支\n\n```Shell\n$ git checkout -b feature-D\n```\n将它push给远程仓库，并保持分支名不变\n\n```shell\n$ git push -u origin feature-D\n```\n\n\n\n\n\n# 从远程仓库获取\n\n假设现在有另一名开发者要来共同开发，在另一个目录下新建本地仓库。\n\n## git clone 获取远程仓库\n\n```shell\n$ git clone git@github.com:9981NAN/9981NAN.git\n```\n\n> 注意clone的目录不要与之前操作的仓库在同一目录下\n\n执行 `git clone`命令后我们会默认处于master分支下，同时系统会自动将origin设置成该远程仓库的标识符。\n\n我们可以使用下面的命令查看本地仓库和远程仓库的分支信息。\n\n```shell\n$ git branch -a \n```\n\n\n\n## 获取远程的feature-D分支\n\n我们试着将feature-D分支获取至本地仓库。\n\n```shell\n$ git checkout -b feature-D origin/feature-D\n```\n\n`-b` 参数后面是本地仓库中新建分支的名称，可以与远程仓库不同名，但是建议同名，便于理解。\n\n\n\n## 向本地的feature-D分支提交更改\n\n假定我们是另一位开发者，要做一个新的提交。在修改文件内容后进行查看和提交。\n\n```shell\n$ git diff\n\n$ git commit -am \"Add feature-D\"\n```\n\n\n\n## 推送至feature-D分支\n\n在`feature-D`分支下直接使用 `git push` 即可\n\n```shell\n$ git diff\n```\n\n\n\n## git pull 获取最新的远程仓库分支\n\n回到我们刚刚放下操作的目录，这边的本地仓库中只是创建了feature-D分支，并没有在feature-D进行任何提交，而远程仓库已经有了我们刚刚推送的提交。这时候就可以用`git pull` ，将本地的 feature-D 分支更新到最新状态。\n\n```shell\n$ git pull origin feature-D\n```\n\n> 如果两人同时修改了同一部分的源代码，push时就很容易发生冲突。所以多名开发者在同一个分支中进行作业时，为了减少冲突的情况，建议更频繁地进行push和pull操作。\n\n\n\n\n\n# GitHub功能\n\n## 通过部分名称搜索文件\n\n在仓库页面按下键盘T 键，然后输入要找的文件或者目录。速度非常快。\n\n\n\n## 查看差别\n\n### 查看分支间的差别\n\n以我的9981NAN项目为例，要比较nimon分支和yong分支的差别，可以直接在浏览器URL中输入：\n\n```\nhttps://github.com/9981NAN/9981NAN/compare/nimon...yong\n```\n\n这样就可以查看两个分支间的差别了。\n\n\n\n### 查看与几天前的差别\n\n输入下面的URL就可以查看nimon分支最近7天内的差别了。\n\n```\nhttps://github.com/9981NAN/9981NAN/compare/nimon@{7.day.ago}...nimon\n```\n\n类似的还有\n\n- day\n- week\n- month\n- year\n- hour\n\n\n\n### 查看指定日期之间的差别\n\n```\nhttps://github.com/9981NAN/9981NAN/compare/nimon@{2017-05-19}...nimon\n```\n\n\n\n\n\n## Issue\n\n### 通过提交信息操作Issue\n\n在项目的Issue一览表中，每一个Issue标题的下面部分都分配 “#18” 的编号。我们只要在描述信息中加入 “#18” ，就可以在Issue中显示该提交的相关信息，使关联的提交一目了然。\n\n\n\n### Close Issue\n\n如果一个处于 Open 状态的 Issue 已经处理完毕，只要在该提交中以下列任意一种格式描述提交信息，对应的 Issue 就会被 close 。\n\n- fix #18\n- fixes #18\n- fixed #18\n- close #18\n- closes #18\n- closed #18\n- resolve #18\n- resolves #18\n- resloved #18\n\n这样我们每次提交并push之后，就不必每次都到 Issue 中寻找相应的 Issue 再手动关闭了。这是一项很实用的功能。\n\n\n\n> Issue 和 Pull Request 的编号通用。\n\n\n\n## Pull Request\n\n##### conversation\n\n> 引用评论，选中别人的评论后按 R 键。\n\n> 在评论中应用表情，输入 “ ：” 即可选择。\n\n\n\n### Files Changed\n\n默认情况下，系统会将空格的不同也高亮显示，想要关闭之？ 在URL 的末尾添加 “ ?w=1 ” 就可以不显示空格的差异了。\n\n将鼠标放到被更改行号的左侧，可以看到一个加号，我们可以点击这个加号在代码中插入评论。这样评论是针对哪行代码就一目了然了\n\n\n\n\n\n## Pulse\n\nPulse是体现该仓库软件开发活跃度的功能，近期仓库创建了多个pull request 或 Issue，有多少人参与了这个仓库的开发。用户可以判断目前这个人间是否正在积极开发，在挑选GitHub上开发的软件时，可以作为一个重要的衡量标准。\n\n\n\n# 发送Pull Request\n\n\n\n## 基本步骤\n\n### Fork \n\n\n\n### clone\n\n\n\n### branch\n\n前面两步完成之后，我们需要在特性分支中进行开发\n\n\n\n#### 确认分支\n\n```shell\n$ git br -a\n* master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/master\n```\n\n\n\n#### 创建特性分支\n\n在 `work` 之后加上 `master` 表明在 `master` 分支的基础上创建 `work` 分支。\n\n```shell\n$ git checkout -b work master\nSwitched to a new branch 'work'\n```\n\n\n\n### 添加代码\n\n在 `readme.md` 文件中添加要增加的代码。\n\n\n\n### 提交修改\n\n```shell\n$ git commit -am \"Add pull request\"\n[work f3d798e] Add pull request\n 1 file changed, 1 insertion(+), 2 deletions(-)\n```\n\n\n\n### 创建远程分支\n\n把在本地创建的分支推送到远程仓库，如果远程仓库没有该分支，那么就创建之。\n\n```shell\n$ git push origin work\nCounting objects: 3, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 283 bytes | 0 bytes/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo github.com:junoni/nimon.git\n * [new branch]      work -> work\n```\n\n\n\n### 在GitHub页面上创建Pull Request\n\n\n\n### 不进行Fork直接从分支发送Pull Request\n\n前提是拥有这个仓库编辑的权限\n\n\n\n\n\n\n\n## 仓库的维护\n\nFork 或者 clone 来的仓库，一旦放置不管就会离最新的源代码越来越远。这时候我们需要让本地仓库与源代码保持最新状态。\n\n我们需要将原仓库设置为远程仓库，从该仓库获取`fetch` 数据与本地仓库进行合并 `merge`  。\n\n\n\n### Fork 与 clone\n\n\n\n### 给原仓库设置名称\n\n```shell\n$ git remote add upstream git@github.com:SimpleLifee/nimon.git\n```\n\n这样，我们这个仓库将以upstream作为原仓库的标识符。这个环境下只需要设定一次。\n\n可以下面的命令查看\n\n```shell\n$ git remote -v\norigin\tgit@github.com:junoni/nimon.git (fetch)\norigin\tgit@github.com:junoni/nimon.git (push)\nupstream\tgit@github.com:SimpleLifee/nimon.git (fetch)\nupstream\tgit@github.com:SimpleLifee/nimon.git (push)\n```\n\n\n\n### 获取最新数据\n\n要让仓库维持最新状态，只需要重复这一工作即可。\n\n```shell\n$ git fetch upstream\nremote: Counting objects: 14, done.\nremote: Compressing objects: 100% (7/7), done.\nremote: Total 14 (delta 3), reused 14 (delta 3), pack-reused 0\nUnpacking objects: 100% (14/14), done.\nFrom github.com:SimpleLifee/nimon\n * [new branch]      dev        -> upstream/dev\n * [new branch]      feature-A  -> upstream/feature-A\n * [new branch]      master     -> upstream/master\n```\n\n\n\n\n\n# 接受  Pull Request\n\n\n\n## 采纳 Pull Request 之前的准备\n\n\n\n### 将接受方的本地仓库更新至最新状态\n\n\n\n### 获取发送方的远程仓库\n\n```shell\n$ git remote add PR发送者 git@github.com:junoni/nimon.git\n```\n\n查看添加后的情况\n\n```Shell\n$ git remote -v\nPR发送者\tgit@github.com:junoni/nimon.git (fetch)\nPR发送者\tgit@github.com:junoni/nimon.git (push)\norigin\tgit@github.com:SimpleLifee/nimon.git (fetch)\norigin\tgit@github.com:SimpleLifee/nimon.git (push)\n```\n\n接着进行fetch\n\n```shell\n$ git fetch PR发送者\nremote: Counting objects: 32, done.\nremote: Compressing objects: 100% (18/18), done.\nremote: Total 32 (delta 14), reused 26 (delta 8), pack-reused 0\nUnpacking objects: 100% (32/32), done.\nFrom github.com:junoni/nimon\n * [new branch]      dev        -> PR发送者/dev\n * [new branch]      master     -> PR发送者/master\n * [new branch]      work       -> PR发送者/work\n```\n\n现在我们获取了Pull Request 发送仓库以及分支的数据（PR发送者/work）\n\n\n\n### 创建用于检查的分支\n\n前面我们只获取了远程仓库的数据，这些数据尚未反映在任何一个分支中。因此我们需要创建一个分支，用于模拟采纳 Pull Request 后的状态。由于这是我们第一个 Pull Request ，分支名就叫 `pr1` 。\n\n```shell\n$ git checkout -b pr1\nSwitched to a new branch 'pr1'\n```\n\n\n\n### 合并\n\n下面要将已经 fetch 完毕的 “PR发送者/work ” 的修改内容与 `pr1` 分支进行合并\n\n```shell\n$ git merge PR发送者/work\n```\n\n这时候我们需要检查一下合并的情况。\n\n\n\n### 删除分支\n\n检查结束后`pr1` 分支就没用了，可以直接删除。我们需要先切换到 `pr1` 之外，例如 `master`\n\n```shell\n$ git checkout master\nPrevious HEAD position was f3d798e... Add pull request\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 12 commits.\n  (use \"git push\" to publish your local commits)\n```\n\n这时候，Git 提醒我们当前 `master` 分支已经比远程仓库多出 12 个新提交了，并建议我们使用 `git push` 向远程仓库推送新的提交。 \n\n之后我们进行删除分支。\n\n```Shell\n$ git branch -D pr1\nDeleted branch pr1 (was 685c45a).\n```\n\n\n\n\n\n## 采纳 Pull Request\n\n我们可以打开浏览器找到相应的 Pull Request 页面，点击 merge pull request按钮，随后Pull Request的内容就会自动合并至仓库。\n\n不过我们已经在本地构筑了相同的环境，只要通过 CLI 进行合并操作后再 push 至 Github，就可以完成Pull Request。\n\n\n\n### 合并到主分支\n\n首先我们切换到 `master` 分支上\n\n```Shell\n$ git checkout master\n```\n\n然后合并 `PR发送者/work`\n\n```Shell\n$ git merge PR发送者/work\n```\n\n\n\n### Push 修改内容\n\n先查看本地仓库和远程 GitHub端仓库库代码的差别\n\n```Shell\n$ git diff origin/master\n```\n\n确认没有目的之外的差别后，进行push\n\n```shell\n$ git push\nCounting objects: 10, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (7/7), done.\nWriting objects: 100% (10/10), 1.05 KiB | 0 bytes/s, done.\nTotal 10 (delta 3), reused 0 (delta 0)\nremote: Resolving deltas: 100% (3/3), completed with 1 local object.\nTo github.com:SimpleLifee/nimon.git\n   8caf54d..067a3c8  master -> master\n```\n\n这样，仓库的 `Pull Request`会自动从 `Open` 状态变为 `Close` 状态。\n\n至此，Pull Request 的操作都介绍完了。\n\n\n\n# Hub命令\n\n\n\n### 安装\n\n如果使用Homebrew\n\n```Shell\n$ brew install hub\n```\n\n然后，在shell的环境路径后面添加 `~/bin` 。\n\n```shell\n$ echo 'export PATH=\"~/bin:$PATH\"' >> ~/.bash_profile\n```\n\n重新启动shell，就可以使用hub命令了。\n\n#### 确认运行情况\n\n```Shell\n$ hub --version\ngit version 2.11.0 (Apple Git-81)\nhub version 2.2.9\n```\n\n\n\n#### 设置别名\n\n使用hub命令的最佳实践是将相应的 git 设置成 hub 的别名。hub 命令可以完成 git 命令的所有操作，只需要在 shell 的配置文件中（.bash_profile） 添加下面一句即可。\n\n```\neval \"$(hub alias -s)\"\n```\n\n\n\n#### ~/.config/hub\n\nhub 命令在初次访问 GitHub 的 API 的时候会询问用户名和密码。\n\n```Shell\n$ cat ~/.config/hub\ngithub.com:\n- user: SimpleLifee\n  oauth_token: 5cb6fb57b65693dac153bf2c61dd642a916b268b\n  protocol: https\n```\n\n\n\n\n\n### 命令\n\n\n\n#### hub clone\n\n使用 `hub clone` 命令，可以省去指定 `GitHub` 端仓库的部分\n\n```shell\n$ hub clone nimon\n```\n\n上面这个命令与下面的命令效果相同。\n\n```shell\n$ git clone git@github.com/SimpleLifee/nimon.git\n```\n\n\n\n如果要指定用户，可以输入以下命令。\n\n```Shell\n$ hub clone junoni/nimon\n```\n\n上面这个命令与下面的命令效果相同。\n\n```\n$ git clone git@github.com/junoni/nimon.git\n```\n\n\n\n#### hub remote add\n\n```shell\n$ hub remote add junoni\n```\n\n等同于\n\n```shell\n$ git remote add junoni git://github.com/junoni/nimon.git\n```\n\n\n\n#### hub fetch\n\n类似于 `hub remote add`\n\n\n\n#### hub cherry-pick\n\n`hub cherry-pick` 只需要输入 URL 就可以获取对应的修改并应用到当前分支。\n\n```Shell\n$ hub cherry-pick https://github.com/SimpleLifee/SimpleLifee.github.io/commit/647c558f5b3767c2995dda5ddd5663d0466ed4dd\n```\n\n这个命令可以将下面两个命令的效果一次性执行\n\n```Shell\n$ git remote add -f SimpleLifee git@github.com:SimpleLifee/SimpleLifee.github.io.git\n$ git cherry-pick 647c558f5b3767c2995dda5ddd5663d0466ed4dd\n```\n\n\n\n#### hub fork\n\n`hub fork` 命令的功能与 GitHub 页面的 Fork 按钮相同，比如我们 clone 了其他用户的仓库，现在想 Fork 成自己的仓库，只需要执行\n\n```shell\n$ hub fork\n```\n\n这一命令，就可获得与下面这一系列操作相同的效果\n\n```shell\n(在 GitHub 对仓库做 Fork 处理)\n$ git remote add -f 用户名 git@github.com:当前操作仓库的名字.git\n```\n\n执行完毕后，Fork 出的仓库会被设置成当前本地仓库的远程仓库（以用户名为标识符）\n\n\n\n#### hub pull-request\n\n\n\n\n\n","slug":"00001-Git-2017-05-05-GitHub-学习之路","published":1,"updated":"2017-06-05T06:42:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3o64nev001yp5ukqfs68u39","content":"<p><img src=\"/2017/05/05/00001-Git-2017-05-05-GitHub-学习之路/github.png\" alt=\"\"></p>\n<div align=\"center\"><br><br>自学 Git 的一些总结<br><br></div>\n\n<a id=\"more\"></a>\n<blockquote>\n<p>成大事不在于力量的大小，而在于能坚持多久。              ——约翰生</p>\n</blockquote>\n<h1 id=\"Git配置多个SSH\"><a href=\"#Git配置多个SSH\" class=\"headerlink\" title=\"Git配置多个SSH\"></a>Git配置多个SSH</h1><p>在日常开发中，我们可能会使用多个帐号以及多个  SSH-Key ，可能是 <a href=\"https://git.oschina.net/\" target=\"_blank\" rel=\"external\">码云</a>，也可能是 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a> ，如果你的电脑中只配置了一个 SSH-Key ，那到时候另一个或多个帐号在使用上，就会带来些许不便。（你能忍受每次 push 都要求你输入密码吗？或者每次切换帐号都需要重新配置 SSH-Key 吗？因为每次使用默认配置的方法都会将前一次配置覆盖。），作为程序员，怎么能让这种事情发生呢，我们需要一种一劳永逸的解决办法。经过上网搜索及筛选，我找到一种比较简单方便的方法。</p>\n<h2 id=\"1-生成并添加第一个SSH\"><a href=\"#1-生成并添加第一个SSH\" class=\"headerlink\" title=\"1. 生成并添加第一个SSH\"></a>1. 生成并添加第一个SSH</h2><p>首先你得安装 <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">git</a> 客户端。Windows 平台，安装完后，在桌面右键选择 git bash 打开。Mac 平台安装好，打开 Terminal 或者 iTerm 输入以下命令。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"youremail@xxx.com\"</span></div></pre></td></tr></table></figure>\n<p>在 Git Bash 中执行命令一路回车，会在 ~/.ssh/ 目录下生成 id_rsa 和 id_rsa.pub 两个文件用文本编辑器打开 id_rsa.pub 里的内容，在 Github 中添加 SSH Keys</p>\n<h2 id=\"2-生成并添加第二个SSH\"><a href=\"#2-生成并添加第二个SSH\" class=\"headerlink\" title=\"2. 生成并添加第二个SSH\"></a>2. 生成并添加第二个SSH</h2><p>接着上一步，为了区分开不同的 SSH-Key，我在生成文件的时候用了不同的名称来区分。 输入你要配置的另一个 SSH-Key 的邮箱。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-keygen -t rsa -C \"otheremail@xxx.com\"</div></pre></td></tr></table></figure>\n<p>这次不要一路回车，请输入这个文件的名字，见下面的第三行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-keygen -t rsa -C \"824291045@qq.com\"</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/Users/nimon/.ssh/id_rsa): other</div><div class=\"line\">Enter passphrase (empty for no passphrase):</div><div class=\"line\">Enter same passphrase again:</div><div class=\"line\">Your identification has been saved in other.</div><div class=\"line\">Your public key has been saved in other.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:tlHc9GiN8cLngDw8QmomMlxmc+2odsRciMjIu6ljjzQ 824291045@qq.com</div><div class=\"line\">The key's randomart image is:</div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">|.o .=..o.   o    |</div><div class=\"line\">|.oo+.o.oo+ = B   |</div></pre></td></tr></table></figure>\n<p>如上输入 <code>other</code>  之后会在.ssh目录下生成两个文件 <code>other</code> 和 <code>other.pub</code> ，原理同步骤1。</p>\n<h2 id=\"3-创建config文件\"><a href=\"#3-创建config文件\" class=\"headerlink\" title=\"3.创建config文件\"></a>3.创建config文件</h2><p>因为 SSH-Key 有一个默认的配置，如果我们还是按照默认配置，那么注定是不会成功的。</p>\n<p>我们需要在 ~/.ssh 目录下添加 config 配置文件用于区分多个 SSH-Key 。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com  </div><div class=\"line\">    HostName github.com  </div><div class=\"line\">    PreferredAuthentications publickey  </div><div class=\"line\">    IdentityFile ~/.ssh/id_rsa  </div><div class=\"line\">  </div><div class=\"line\">Host other.github.com  </div><div class=\"line\">    HostName github.com  </div><div class=\"line\">    PreferredAuthentications publickey  </div><div class=\"line\">    IdentityFile ~/.ssh/other</div></pre></td></tr></table></figure>\n<p>之后保存并推出编辑器。</p>\n<ul>\n<li>Host : 代表一个映射的域名地址，可以自己取。</li>\n<li>HostName ： 是实际的域名地址，一般是代码托管平台的域名。</li>\n<li>PreferredAuthentications ： 配置登录时用什么权限认证，可设为<code>publickey,password publickey,keyboard-interactive</code>，在这里使用 publickey 即可。</li>\n<li>IdentityFile ： 就是更改生成的两个 Key 文件的地址，这里只需填写对应的文件名即可。</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>以上完成之后，在命令行中输入 <code>ssh -T git@xxx.com</code> （xxx 就写刚才在配置文件中 Host 后面的名字）与远程进行验证，验证成功就会显示如下信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh -T git@github.com</div><div class=\"line\">Hi SmartJunNi! You've successfully authenticated, but GitHub does not provide shell access.</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">$ ssh -T git@other.github.com</div><div class=\"line\">ssh git@github.com</div><div class=\"line\">Hi junoni! You've successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>\n<h2 id=\"可能出现的问题\"><a href=\"#可能出现的问题\" class=\"headerlink\" title=\"可能出现的问题\"></a>可能出现的问题</h2><p>如果在项目中使用 <code>git push</code> 时提示<code>[remote reject]   (Permission denied)</code> 。如下所示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Counting objects: 3, done.</div><div class=\"line\">Delta compression using up to 8 threads.</div><div class=\"line\">Compressing objects: 100% (2/2), done.</div><div class=\"line\">Writing objects: 100% (3/3), 252 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 3 (delta 1), reused 0 (delta 0)</div><div class=\"line\">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</div><div class=\"line\">To other.github.com:junoni/nimon.git</div><div class=\"line\"> ! [remote rejected] master -&gt; master (permission denied)</div><div class=\"line\">error: failed to push some refs to 'git@other.github.com:junoni/nimon.git'</div></pre></td></tr></table></figure>\n<p>我花了一个半小时从 google 到 stackoverflow 查了个边，就差没有百度一下了，就是没有找到可以解决的办法。这时我发现最后一行的<code>git@other.github.com:junoni/nimon.git</code> 这个地址，我想了想，刚刚配置了 config 这个文件，其中<code>Host</code>   使用的是 <code>other.github.com</code>，我用 <code>git remote -v</code> 查看了当前远程仓库的 origin 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote -v</div><div class=\"line\">origin\tgit@github.com:junoni/nimon.git (fetch)</div><div class=\"line\">origin\tgit@github.com:junoni/nimon.git (push)</div></pre></td></tr></table></figure>\n<p>可以看到，fetch 和 push 的 origin 地址都是 git@github.com ，而不是 git@other.github.com ，我就抱着试试的心态，改成了 git@other.github.com。还有一个步骤，将 <code>other</code> 加入到密钥列表中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-add ~/.ssh/other</div></pre></td></tr></table></figure>\n<p> 再尝试 push 一下，没想到成功了。如迈克尔•乔丹所说：“我可以接受失败，但我不能接受放弃。”</p>\n<p>当然，添加之后我们还可以查看当前密钥列表。也可以删除密钥。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-add -l</div><div class=\"line\"><span class=\"meta\">$</span> ssh-add -d ~/.ssh/other</div></pre></td></tr></table></figure>\n<p>类似debug，查看与远程连接情况。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh -v git@github.com</div></pre></td></tr></table></figure>\n<p>总结：我们设置的远程仓库的地址必须和 config 文件中设置的域名映射地址相同，不然就会出现错误。</p>\n<h1 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h1><h2 id=\"查看全局config信息\"><a href=\"#查看全局config信息\" class=\"headerlink\" title=\"查看全局config信息\"></a>查看全局config信息</h2><p>mac 下在~/.gitconfig 文件中配置 git 的全局信息。使用 <code>git config --list</code> 可以列出全局配置信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git config --list</div></pre></td></tr></table></figure>\n<p><strong>用户信息</strong><br>配置你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name “youname”</div><div class=\"line\">$ git config --global user.email “12345@example.com”</div></pre></td></tr></table></figure>\n<p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>\n<h2 id=\"GIT总结\"><a href=\"#GIT总结\" class=\"headerlink\" title=\"GIT总结\"></a>GIT总结</h2><p><strong>查看配置信息</strong><br>查看已有的配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --list</div><div class=\"line\">$ git config -l</div></pre></td></tr></table></figure>\n<p><strong>获取帮助</strong><br>例如想获取config命令的帮助信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git help config </div><div class=\"line\">$ git config --help</div></pre></td></tr></table></figure>\n<p><strong>初始化新仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。</p>\n<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><strong>跟踪文件：</strong>（将文件加到暂存区域）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add readme.txt</div></pre></td></tr></table></figure>\n<p><strong>跟踪全部文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div></pre></td></tr></table></figure>\n<p><strong>提交更新</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m “first version”</div></pre></td></tr></table></figure>\n<p><strong>上传（推送）到github</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure>\n<p><strong>从现有仓库克隆</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git://github.com/youname/project.git</div><div class=\"line\">$ git clone git@github.com:youname/project.git</div><div class=\"line\">$ git clone https://github.com/youname/project.git</div></pre></td></tr></table></figure>\n<p><strong>检查当前文件状态</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure>\n<p><strong>创建.gitignore文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch .gitignore</div></pre></td></tr></table></figure>\n<p><strong>查看修改之后没有暂存起来的内容</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div></pre></td></tr></table></figure>\n<p><strong>移除文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rm readme.txt</div></pre></td></tr></table></figure>\n<p><strong>重命名文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git mv oldname.txt newname.txt</div></pre></td></tr></table></figure>\n<p><strong>查看提交历史</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div></pre></td></tr></table></figure>\n<p><strong>取消暂存</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD readme.txt</div></pre></td></tr></table></figure>\n<p><strong>添加远程仓库</strong>（远程仓库必须先在github上建好）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add [shortname] [url]</div></pre></td></tr></table></figure>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:youname/yourRepo.git</div></pre></td></tr></table></figure>\n<p><strong>推送数据到仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push [remote-name] [branch-name]</div></pre></td></tr></table></figure>\n<p>如果要把本地的 master 分支推送到origin服务器上（再次说明下，克隆操作会自动使用默认的master 和origin 名字），可以运行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure>\n<p><strong>从远程仓库抓取数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch [remote-name]</div></pre></td></tr></table></figure>\n<p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库<br><strong>远程仓库的删除</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote rm origin</div></pre></td></tr></table></figure>\n<p><strong>远程仓库重命名</strong>(此处命名的是上文添加远程仓库中的shortname)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote rename origin origin2</div></pre></td></tr></table></figure>\n<p><strong>自动补全</strong><br>输入命令后按tab键，就会看到列出所有匹配的可用命令建议：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git co&lt;tab&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"GIT分支\"><a href=\"#GIT分支\" class=\"headerlink\" title=\"GIT分支\"></a>GIT分支</h2><p><strong>创建一个名为“testing”的分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch testing</div></pre></td></tr></table></figure>\n<p>切换到“testing”分支(默认为master分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout testing</div></pre></td></tr></table></figure>\n<p><strong>新建并切换到该分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -b iss53</div></pre></td></tr></table></figure>\n<p>这条命令相当于执行下面这两条命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch iss53</div><div class=\"line\">$ git checkout iss53</div></pre></td></tr></table></figure>\n<p><strong>删除hotfix分支</strong>（如果该分支还未被合并则会提示错误，因为这样会丢失数据）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -d hotfix</div></pre></td></tr></table></figure>\n<p><strong>强制删除hotfix分支</strong>（强制删除，不会提示错误）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -D hotfix</div></pre></td></tr></table></figure>\n<p><strong>合并iss53分支</strong>（先切换到master分支）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge iss53</div></pre></td></tr></table></figure>\n<p><strong>查看当前所有分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure>\n<p><strong>查看各个分支最后一个提交对象的信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -v</div></pre></td></tr></table></figure>\n<p><strong>查看已经与当前分支合并的分支</strong>（已经合并的查出来后可以删掉）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch --merge</div></pre></td></tr></table></figure>\n<p><strong>查看未与当前分支合并的分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch --no-merged</div></pre></td></tr></table></figure>\n<p><strong>同步远程服务器数据到本地</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div></pre></td></tr></table></figure>\n<p><strong>从新添加的远程仓库下载数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add teamone git://git.team1.ourcompany.com</div><div class=\"line\">$ git fetch teamone</div></pre></td></tr></table></figure>\n<p><strong>分化一个新的分支</strong>(使用这个命令会从服务器上下载master最新的版本，所以如果当前本地版本不是最新的，新的分支和本地分支会不同)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -b test1 origin/master</div></pre></td></tr></table></figure>\n<p>假如你用这个新的分支进行git push，并且通过了合并，那么会在远程仓库建立一个新的同名分支<br>删除该分支的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin :test1</div></pre></td></tr></table></figure>\n<p><strong>分支的衍合：</strong>将test1分支衍合到master主分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout test1</div><div class=\"line\">$ git rebase master</div></pre></td></tr></table></figure>\n<p>另一种方法，直接衍合，不用再先切换到test1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rebase master test1</div></pre></td></tr></table></figure>\n<p><strong>快进master分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge client</div></pre></td></tr></table></figure>\n<h1 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h1><ul>\n<li>查看远程库信息，使用<code>git remote -v</code>；</li>\n<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>\n<li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li>\n<li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li>\n<li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li>\n<li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li>\n</ul>\n<p><strong>找到历史提交的commit ID</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log  --graph --pretty=oneline --abbrev-commit</div></pre></td></tr></table></figure>\n<h1 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h1><p> <strong>小结</strong></p>\n<ul>\n<li>命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li>\n<li><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li>\n<li><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；</li>\n<li>命令<code>git tag</code>可以查看所有标签。</li>\n<li><code>git show &lt;tagname&gt;</code>可以查看标签的详情</li>\n</ul>\n<h1 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h1><p><strong>小结</strong></p>\n<ul>\n<li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li>\n<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>\n<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>\n<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</div></pre></td></tr></table></figure>\n<p>touch readme.md</p>\n<h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><p>刚开始，你需要选择一个目录，开始一个新的 repository。使用以下命令可以在当前目录下初始化 Git 。</p>\n<p><strong>git init </strong></p>\n<p>git status  查看仓库的状态</p>\n<p>git add 向暂存区中添加文件</p>\n<p>git commit 保存仓库的历史记录</p>\n<p>记录一行提交信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit -m \"First Commit\"</div></pre></td></tr></table></figure>\n<h2 id=\"记录详细提交信息\"><a href=\"#记录详细提交信息\" class=\"headerlink\" title=\"记录详细提交信息\"></a>记录详细提交信息</h2><p>请不要加-m，直接执行 git commit 命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit </div><div class=\"line\">+git tracks changes of files.</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\"># Please enter the commit message for your changes. Lines starting</div><div class=\"line\"><span class=\"meta\">#</span> with '#' will be ignored, and an empty message aborts the commit.</div><div class=\"line\"><span class=\"meta\">#</span> On branch dev</div><div class=\"line\"><span class=\"meta\">#</span> Your branch is ahead of 'origin/dev' by 3 commits.</div><div class=\"line\"><span class=\"meta\">#</span>   (use \"git push\" to publish your local commits)</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> Changes to be committed:</div><div class=\"line\"><span class=\"meta\">#</span>       modified:   readme.md</div><div class=\"line\"><span class=\"meta\">#</span></div></pre></td></tr></table></figure>\n<p>在编辑器中记录提交信息</p>\n<ul>\n<li>第一行：用一行文件简述提交的更改内容</li>\n<li>第二行：空行</li>\n<li>第三行：记录更改的原因和详细内容</li>\n</ul>\n<p>在以 # 标位注释的 Changes to be committed 可以查看本次提交中包含的文件。其他信息不必修改。</p>\n<h2 id=\"终止提交\"><a href=\"#终止提交\" class=\"headerlink\" title=\"终止提交\"></a>终止提交</h2><p>请将提交信息留空并直接关闭编译器，随后提交就会被中止。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Aborting commit due to empty commit message.</div></pre></td></tr></table></figure>\n<p>##查看提交后的状态</p>\n<p>执行完git commit 命令后再来查看当前状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git status</div><div class=\"line\">On branch dev</div><div class=\"line\">nothing to commit, working tree clean</div></pre></td></tr></table></figure>\n<p>当前工作树处于刚刚提交的最新状态，所以结果显示没有更改。</p>\n<h2 id=\"git-log-查看提交日志\"><a href=\"#git-log-查看提交日志\" class=\"headerlink\" title=\"git log 查看提交日志\"></a>git log 查看提交日志</h2><p>可以查看以往仓库中提交的日志。包括什么人在什么时候进行了提交或合并，以及操作后有怎样的差别。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log</div><div class=\"line\">commit d97ade219a7f50f61790a14aa40f3142a07f49ba</div><div class=\"line\">Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class=\"line\">Date:   Sat May 20 16:47:09 2017 +0800</div><div class=\"line\"></div><div class=\"line\">    First Commit</div></pre></td></tr></table></figure>\n<p>Commit 旁边显示的是这个提交的哈希值。这个值很重要，在后面会讲到。</p>\n<p>Author 栏中显示的是我们给 Git 设置的用户名和邮箱。</p>\n<p>Date 栏显示的是提交的日期和时间。</p>\n<p>最后是提交信息。</p>\n<h2 id=\"只显示提交信息的第一行\"><a href=\"#只显示提交信息的第一行\" class=\"headerlink\" title=\"只显示提交信息的第一行\"></a>只显示提交信息的第一行</h2><p>在 <code>git log</code>  后面加上 <code>--pretty=short</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log --pretty=short</div><div class=\"line\"></div><div class=\"line\">commit d97ade219a7f50f61790a14aa40f3142a07f49ba</div><div class=\"line\">Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class=\"line\"></div><div class=\"line\">    First Commit</div></pre></td></tr></table></figure>\n<h2 id=\"只显示指定目录、文件的日志\"><a href=\"#只显示指定目录、文件的日志\" class=\"headerlink\" title=\"只显示指定目录、文件的日志\"></a>只显示指定目录、文件的日志</h2><p>在 <code>git log</code> 后加上文件名或者目录名即可。</p>\n<h2 id=\"显示改动的文件\"><a href=\"#显示改动的文件\" class=\"headerlink\" title=\"显示改动的文件\"></a>显示改动的文件</h2><p>如果想查看提交所带来的改动，可以加上 <code>-p</code> 参数，文件的前后差别就会显示在提交信息之后。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log -p</div></pre></td></tr></table></figure>\n<p>只查看某个文件提交前和提交后的差别</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log -p README.md</div></pre></td></tr></table></figure>\n<p>如上， 我们不必依次记下全部参数，每当有想查看的日志就积极去查，慢慢就能得心应手了。</p>\n<h2 id=\"简要列出每个commit的内容变化\"><a href=\"#简要列出每个commit的内容变化\" class=\"headerlink\" title=\"简要列出每个commit的内容变化\"></a>简要列出每个commit的内容变化</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log --stat</div></pre></td></tr></table></figure>\n<p>##git diff 查看更改前后的差别</p>\n<p><code>git diff</code> 可以查看工作树、暂存区、最新提交之间的差别。</p>\n<p>注意暂存区是指 <code>git add</code> 之后，但未 <code>git commit</code>  时保存在暂存区的内容。这个时候可以使用 <code>git diff</code> 来查看工作树和暂存区的差别。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff readme.md</div><div class=\"line\">diff --git a/readme.md b/readme.md</div><div class=\"line\">index 7f612d5..c4123d2 100644</div><div class=\"line\">--- a/readme.md</div><div class=\"line\">+++ b/readme.md</div><div class=\"line\">@@ -11,5 +11,5 @@ dev: other</div><div class=\"line\"> something happend.</div><div class=\"line\"> i will be fine.</div><div class=\"line\"> hah</div><div class=\"line\">-</div><div class=\"line\">+hey! Git!</div></pre></td></tr></table></figure>\n<p>注意，这里的 <code>+</code>  标出的是新添加的行，被删除的行则用 <code>-</code> 标出。</p>\n<p>这时候如果使用 <code>git add</code> 将 <code>README.md</code> 加入暂存区后。工作树和正常启动内容并无差别，结果什么都不会显示。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git add README.md</div></pre></td></tr></table></figure>\n<h2 id=\"查看工作树和最新提交的差别\"><a href=\"#查看工作树和最新提交的差别\" class=\"headerlink\" title=\"查看工作树和最新提交的差别\"></a>查看工作树和最新提交的差别</h2><p> 当使用<code>git add</code> 将 <code>README.md</code> 加入暂存区后，要查看工作树与最新提交的差别，请使用以下命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff HEAD</div><div class=\"line\">diff --git a/readme.md b/readme.md</div><div class=\"line\">index 7f612d5..c4123d2 100644</div><div class=\"line\">--- a/readme.md</div><div class=\"line\">+++ b/readme.md</div><div class=\"line\">@@ -11,5 +11,5 @@ dev: other</div><div class=\"line\"> something happend.</div><div class=\"line\"> i will be fine.</div><div class=\"line\"> hah</div><div class=\"line\">-</div><div class=\"line\">+hey! Git!</div></pre></td></tr></table></figure>\n<p>不妨养成这样一个好习惯，在执行 <code>git commit</code> 命令之前先执行 <code>git diff HEAD</code> 查看本次提交与上次提交之间有什么差别，等确认完毕再进行提交。这里的 <code>HEAD</code> 指当前分支中最新的一次提交的指针。</p>\n<h1 id=\"分支的操作\"><a href=\"#分支的操作\" class=\"headerlink\" title=\"分支的操作\"></a>分支的操作</h1><h2 id=\"git-branch-显示分支一览表\"><a href=\"#git-branch-显示分支一览表\" class=\"headerlink\" title=\"git branch 显示分支一览表\"></a>git branch 显示分支一览表</h2><p>这个命令会将本地的分支名列表显示，* 表示当前所在分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git branch</div><div class=\"line\">* master</div></pre></td></tr></table></figure>\n<h2 id=\"git-checkout-b-创建、切换分支\"><a href=\"#git-checkout-b-创建、切换分支\" class=\"headerlink\" title=\"git checkout -b 创建、切换分支\"></a>git checkout -b 创建、切换分支</h2><p>以当前分支为基础创建新的分支，可以使用 <code>git checkout -b</code>命令</p>\n<h2 id=\"切换到-feature-A-分支并进行提交\"><a href=\"#切换到-feature-A-分支并进行提交\" class=\"headerlink\" title=\"切换到 feature-A 分支并进行提交\"></a>切换到 feature-A 分支并进行提交</h2><p>执行下面的命令，创建名为 <code>feature-A</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b feature-A</div><div class=\"line\">Switched to a new branch 'feature-A'</div></pre></td></tr></table></figure>\n<p>实际上，以上语句等同于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git branch feature-A</div><div class=\"line\"><span class=\"meta\">$</span> git checkout feature-A</div></pre></td></tr></table></figure>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout master</div></pre></td></tr></table></figure>\n<p>##切换回上一个分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -</div></pre></td></tr></table></figure>\n<p>使用 <code>-</code> （连字符） 代替分支名。</p>\n<h2 id=\"特性分支\"><a href=\"#特性分支\" class=\"headerlink\" title=\"特性分支\"></a>特性分支</h2><p>顾名思义，特性分支是集中实现单一特性（主题），除此之外不进行任何作业的分支。在日常开发中，往往会创建数个特性分支，同时再保留一个随时可以发布软件的稳定分支。稳定分支一般由 <code>master</code>  分支担当。</p>\n<p>只要保持这样一个开发流程，就能保证master分支可以随时供人查看。其他开发者也可以放心大胆从master分支创建新的特性分支。</p>\n<p>##主干分支</p>\n<p>特性分支的原点，也是合并的终点。主干分支没有开发到一半的代码，可以随时供人查看。</p>\n<p>主干分支可以有多个，使用 Tag 标签创建版本信息。</p>\n<h2 id=\"git-merge-合并分支\"><a href=\"#git-merge-合并分支\" class=\"headerlink\" title=\"git merge 合并分支\"></a>git merge 合并分支</h2><p>先切换到master，然后与 <code>feature-A</code> 合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git merge --no-ff feature-A</div></pre></td></tr></table></figure>\n<h2 id=\"以图表形式查看分支\"><a href=\"#以图表形式查看分支\" class=\"headerlink\" title=\"以图表形式查看分支\"></a>以图表形式查看分支</h2><p>可以直观地用图表形式输出提交的日志。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log --graph</div><div class=\"line\">*   commit 685c45a39c33a4777d14fb29f6f0bfb9b9920c49</div><div class=\"line\">|\\  Merge: 6b15d42 40befaa</div><div class=\"line\">| | Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class=\"line\">| | Date:   Sat May 20 18:04:48 2017 +0800</div><div class=\"line\">| |</div><div class=\"line\">| |     merge</div><div class=\"line\">| |</div><div class=\"line\">| *   commit 40befaab3f0db6fd47e2d553b88428a4ca39e670</div><div class=\"line\">| |\\  Merge: a0b10f9 6b15d42</div><div class=\"line\">| |/  Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class=\"line\">|/|   Date:   Sat May 20 17:51:52 2017 +0800</div><div class=\"line\">| |</div><div class=\"line\">| |       fix</div><div class=\"line\">| |</div></pre></td></tr></table></figure>\n<h1 id=\"更改提交的操作\"><a href=\"#更改提交的操作\" class=\"headerlink\" title=\"更改提交的操作\"></a>更改提交的操作</h1><h2 id=\"git-reset-回溯历史版本\"><a href=\"#git-reset-回溯历史版本\" class=\"headerlink\" title=\"git reset 回溯历史版本\"></a>git reset 回溯历史版本</h2><p><strong>回溯到创建 <code>feature-A</code> 分支前</strong></p>\n<p>让仓库的HEAD、暂存区、当前的工作树回溯到指定状态。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git reset --hard &lt;哈希值&gt;</div></pre></td></tr></table></figure>\n<p> <strong>创建 fix-B 分支</strong></p>\n<p> <strong>推进至feature-A分支合并后的状态</strong></p>\n<p>首先回复到feature-A分支合并后的状态，可以称之为“推进历史”。</p>\n<p><code>git log</code> 只能查看以当前状态为终点的历史日志。</p>\n<p>所以这里要使用<code>git reflog</code> 查看当前仓库的操作历史， 可以看到commit、checkout、reset、merge等Git命令的执行记录。</p>\n<h2 id=\"消除冲突\"><a href=\"#消除冲突\" class=\"headerlink\" title=\"消除冲突\"></a>消除冲突</h2><p>如果系统提示我们文件发生了冲突，那么不解决冲突就无法完成合并，所以需要我们手动来解决冲突。解决完冲突文件后再执行<code>git add</code> 和<code>git commit</code> 。</p>\n<h2 id=\"修改提交信息\"><a href=\"#修改提交信息\" class=\"headerlink\" title=\"修改提交信息\"></a>修改提交信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend</div></pre></td></tr></table></figure>\n<h2 id=\"git-rebase-i-压缩历史\"><a href=\"#git-rebase-i-压缩历史\" class=\"headerlink\" title=\"git rebase -i 压缩历史\"></a>git rebase -i 压缩历史</h2><p>在合并特性分支之前，如果发现已提交的内容中有些拼写错误，不妨提交一个修改，然后<strong>将这个修改包含到前一个提交之中</strong>，压缩成一个历史记录。这是个会经常用到的技巧。</p>\n<h3 id=\"创建-feature-C-分支\"><a href=\"#创建-feature-C-分支\" class=\"headerlink\" title=\"创建 feature-C 分支\"></a>创建 feature-C 分支</h3><p>首先创建 feature-C 分支，然后 add 和 commit命令。</p>\n<p>但是没必要每次这么麻烦。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit -am \"Add feature-C\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>执行上面语句的前提是，当前工作树中没有新增的Untracked  的文件。</p>\n</blockquote>\n<h3 id=\"修正拼写错误\"><a href=\"#修正拼写错误\" class=\"headerlink\" title=\"修正拼写错误\"></a>修正拼写错误</h3><p>修改错误之后，使用<code>git diff</code> 来查看差别。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff</div><div class=\"line\">diff --git a/readme.md b/readme.md</div><div class=\"line\">index 10f9ebb..3bbe2d0 100644</div><div class=\"line\">--- a/readme.md</div><div class=\"line\">+++ b/readme.md</div><div class=\"line\">@@ -1,2 +1,3 @@</div><div class=\"line\"> C</div><div class=\"line\"> C</div><div class=\"line\">+fix C</div></pre></td></tr></table></figure>\n<p>然后进行提交</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit -am \"Fix Typo\"</div><div class=\"line\">[C c3955c1] Fix Typo</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>\n<p>错字漏字等失误称作typo，但是我们不希望在历史记录中看到这类提交，因为健全的历史记录不需要它们。</p>\n<h3 id=\"更改历史\"><a href=\"#更改历史\" class=\"headerlink\" title=\"更改历史\"></a>更改历史</h3><p>我们将修正的内容与之前的一次提交合并，在历史记录中合并为一次完美的提交。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git rebase -i HEAD~2</div></pre></td></tr></table></figure>\n<p>上面的命令，可以选定当前分支中包含HEAD ( 最新提交 ) 在内的两个最新历史记录为对象，并在编辑器中打开。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick 695471a Add C</div><div class=\"line\">pick 2f8a965 fix typo</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\"># Rebase 1db92da..2f8a965 onto 1db92da (2 commands)</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> Commands:</div><div class=\"line\"><span class=\"meta\">#</span> p, pick = use commit</div><div class=\"line\"><span class=\"meta\">#</span> r, reword = use commit, but edit the commit message</div><div class=\"line\"><span class=\"meta\">#</span> e, edit = use commit, but stop for amending</div><div class=\"line\"><span class=\"meta\">#</span> s, squash = use commit, but meld into previous commit</div><div class=\"line\"><span class=\"meta\">#</span> f, fixup = like \"squash\", but discard this commit's log message</div><div class=\"line\"><span class=\"meta\">#</span> x, exec = run command (the rest of the line) using shell</div><div class=\"line\"><span class=\"meta\">#</span> d, drop = remove commit</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> These lines can be re-ordered; they are executed from top to bottom.</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> If you remove a line here THAT COMMIT WILL BE LOST.</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> However, if you remove everything, the rebase will be aborted.</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> Note that empty commits are commented out</div></pre></td></tr></table></figure>\n<p>695471a我们将 <code>2f8a965</code> 的 <code>fix typo</code> 的历史记录压缩到 <code>695471a</code> 的 <code>Add C</code>里。按照下图所示，将<code>2f8a965</code>左侧的 <code>pick</code> 部分删除，改写为 <code>fixup</code> 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick 695471a Add C</div><div class=\"line\">fixup 2f8a965 fix typo</div></pre></td></tr></table></figure>\n<p>保存编译器里的内容，关闭编辑器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[detached HEAD 5f770a9] nnnnnnnn</div><div class=\"line\"> Date: Sat May 20 22:07:28 2017 +0800</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div><div class=\"line\">Successfully rebased and updated refs/heads/C.</div></pre></td></tr></table></figure>\n<p>系统显示 rebase 成功，也就是以下面这两个提交作为对象，将 <code>fix typo</code> 的内容合并到了上一个提交<code>Add C</code> 之中，改写成一个新的提交。</p>\n<ul>\n<li>695471a Add C</li>\n<li>2f8a965 fix typo</li>\n</ul>\n<p>现在查看提交日志时会发现 <code>Add C</code> 的哈希值以及不再是 <code>695471a</code> ，这证明提交已经被更改了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log --graph --oneline</div><div class=\"line\">* 5f770a9 Add C</div><div class=\"line\">* 1db92da haha</div><div class=\"line\">* c1aabf4 Add B</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>这样，<code>fix typo</code>就从历史中被抹去了，也相当于 <code>Add C</code>从来没有出现过拼写错误。这算是一种良性的历史改写。</p>\n<h3 id=\"合并至master分支\"><a href=\"#合并至master分支\" class=\"headerlink\" title=\"合并至master分支\"></a>合并至master分支</h3><p>C 分支的使命告一段落，我们将它与master分支合并。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout master</div><div class=\"line\">Switched to branch 'master'</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">$ git merge --no-ff feature-C</div><div class=\"line\">Merge made by the 'recursive' strategy.</div><div class=\"line\"> a         | 2 ++</div><div class=\"line\"> readme.md | 2 ++</div><div class=\"line\"> 2 files changed, 4 insertions(+)</div><div class=\"line\"> create mode 100644 a</div><div class=\"line\"> create mode 100644 readme.md</div></pre></td></tr></table></figure>\n<p>按照递归策略合并。</p>\n<h1 id=\"推送至远程仓库\"><a href=\"#推送至远程仓库\" class=\"headerlink\" title=\"推送至远程仓库\"></a>推送至远程仓库</h1><blockquote>\n<p>建议在新建远程仓库的时候不要勾选自动生成README文件的选项。</p>\n</blockquote>\n<h2 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h2><p>我们用 <code>git remote add</code> 命令将它设置成本地仓库的远程仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add origin git@github.com:9981NAN/9981NAN.git</div></pre></td></tr></table></figure>\n<p>这样，Git会自动将 <code>git@github.com:9981NAN/9981NAN.git</code> 远程仓库名称设置为 origin （ 标识符 ）</p>\n<h2 id=\"添加多个-URL-地址\"><a href=\"#添加多个-URL-地址\" class=\"headerlink\" title=\"添加多个 URL 地址\"></a>添加多个 URL 地址</h2><p>像上面 <code>git remote add origin &lt;url1&gt;</code> 添加第一个URL之后，如果想要添加多个 URL 地址，那么可以使用<code>git remote set-url --add origin &lt;url2&gt;</code> 添加第二个URL。 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote set-url --add origin git@github.com:9981NAN/9981NAN.git</div></pre></td></tr></table></figure>\n<p>这样一来，以后每次 <code>git push origin master</code>  的时候，就会自动向多个远程仓库中推送了。 </p>\n<blockquote>\n<p>但是使用 git pull 时，只能拉取origin里的一个URL地址（即fetch-url，如上），这个 fetch-url 默认是你添加到origin 的第一个地址。</p>\n<p>如果你想更改，只需要更改 config 文件里，那几个url的顺序即可。 fetch-url 会直接对应排行第一的那个url 链接。</p>\n</blockquote>\n<h2 id=\"推送至master分支\"><a href=\"#推送至master分支\" class=\"headerlink\" title=\"推送至master分支\"></a>推送至master分支</h2><p>如果想把当前分支下本地仓库的内容推送给远程仓库，需要用到 <code>git push</code>，假定我们在master分支下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git push -u origin master</div></pre></td></tr></table></figure>\n<p><code>-u</code>参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的 upstream（上游）。这样一来，下次运行 <code>git pull</code>命令从远程仓库获取内容时，本地仓库这个分支就可以直接从origin 的master 分支获取内容，省去了另外添加参数的麻烦。</p>\n<h2 id=\"推送至master以外的分支\"><a href=\"#推送至master以外的分支\" class=\"headerlink\" title=\"推送至master以外的分支\"></a>推送至master以外的分支</h2><p>创建其他分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b feature-D</div></pre></td></tr></table></figure>\n<p>将它push给远程仓库，并保持分支名不变</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git push -u origin feature-D</div></pre></td></tr></table></figure>\n<h1 id=\"从远程仓库获取\"><a href=\"#从远程仓库获取\" class=\"headerlink\" title=\"从远程仓库获取\"></a>从远程仓库获取</h1><p>假设现在有另一名开发者要来共同开发，在另一个目录下新建本地仓库。</p>\n<h2 id=\"git-clone-获取远程仓库\"><a href=\"#git-clone-获取远程仓库\" class=\"headerlink\" title=\"git clone 获取远程仓库\"></a>git clone 获取远程仓库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git clone git@github.com:9981NAN/9981NAN.git</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意clone的目录不要与之前操作的仓库在同一目录下</p>\n</blockquote>\n<p>执行 <code>git clone</code>命令后我们会默认处于master分支下，同时系统会自动将origin设置成该远程仓库的标识符。</p>\n<p>我们可以使用下面的命令查看本地仓库和远程仓库的分支信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git branch -a</div></pre></td></tr></table></figure>\n<h2 id=\"获取远程的feature-D分支\"><a href=\"#获取远程的feature-D分支\" class=\"headerlink\" title=\"获取远程的feature-D分支\"></a>获取远程的feature-D分支</h2><p>我们试着将feature-D分支获取至本地仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b feature-D origin/feature-D</div></pre></td></tr></table></figure>\n<p><code>-b</code> 参数后面是本地仓库中新建分支的名称，可以与远程仓库不同名，但是建议同名，便于理解。</p>\n<h2 id=\"向本地的feature-D分支提交更改\"><a href=\"#向本地的feature-D分支提交更改\" class=\"headerlink\" title=\"向本地的feature-D分支提交更改\"></a>向本地的feature-D分支提交更改</h2><p>假定我们是另一位开发者，要做一个新的提交。在修改文件内容后进行查看和提交。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">$ git commit -am \"Add feature-D\"</div></pre></td></tr></table></figure>\n<h2 id=\"推送至feature-D分支\"><a href=\"#推送至feature-D分支\" class=\"headerlink\" title=\"推送至feature-D分支\"></a>推送至feature-D分支</h2><p>在<code>feature-D</code>分支下直接使用 <code>git push</code> 即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff</div></pre></td></tr></table></figure>\n<h2 id=\"git-pull-获取最新的远程仓库分支\"><a href=\"#git-pull-获取最新的远程仓库分支\" class=\"headerlink\" title=\"git pull 获取最新的远程仓库分支\"></a>git pull 获取最新的远程仓库分支</h2><p>回到我们刚刚放下操作的目录，这边的本地仓库中只是创建了feature-D分支，并没有在feature-D进行任何提交，而远程仓库已经有了我们刚刚推送的提交。这时候就可以用<code>git pull</code> ，将本地的 feature-D 分支更新到最新状态。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git pull origin feature-D</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果两人同时修改了同一部分的源代码，push时就很容易发生冲突。所以多名开发者在同一个分支中进行作业时，为了减少冲突的情况，建议更频繁地进行push和pull操作。</p>\n</blockquote>\n<h1 id=\"GitHub功能\"><a href=\"#GitHub功能\" class=\"headerlink\" title=\"GitHub功能\"></a>GitHub功能</h1><h2 id=\"通过部分名称搜索文件\"><a href=\"#通过部分名称搜索文件\" class=\"headerlink\" title=\"通过部分名称搜索文件\"></a>通过部分名称搜索文件</h2><p>在仓库页面按下键盘T 键，然后输入要找的文件或者目录。速度非常快。</p>\n<h2 id=\"查看差别\"><a href=\"#查看差别\" class=\"headerlink\" title=\"查看差别\"></a>查看差别</h2><h3 id=\"查看分支间的差别\"><a href=\"#查看分支间的差别\" class=\"headerlink\" title=\"查看分支间的差别\"></a>查看分支间的差别</h3><p>以我的9981NAN项目为例，要比较nimon分支和yong分支的差别，可以直接在浏览器URL中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/9981NAN/9981NAN/compare/nimon...yong</div></pre></td></tr></table></figure>\n<p>这样就可以查看两个分支间的差别了。</p>\n<h3 id=\"查看与几天前的差别\"><a href=\"#查看与几天前的差别\" class=\"headerlink\" title=\"查看与几天前的差别\"></a>查看与几天前的差别</h3><p>输入下面的URL就可以查看nimon分支最近7天内的差别了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/9981NAN/9981NAN/compare/nimon@&#123;7.day.ago&#125;...nimon</div></pre></td></tr></table></figure>\n<p>类似的还有</p>\n<ul>\n<li>day</li>\n<li>week</li>\n<li>month</li>\n<li>year</li>\n<li>hour</li>\n</ul>\n<h3 id=\"查看指定日期之间的差别\"><a href=\"#查看指定日期之间的差别\" class=\"headerlink\" title=\"查看指定日期之间的差别\"></a>查看指定日期之间的差别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/9981NAN/9981NAN/compare/nimon@&#123;2017-05-19&#125;...nimon</div></pre></td></tr></table></figure>\n<h2 id=\"Issue\"><a href=\"#Issue\" class=\"headerlink\" title=\"Issue\"></a>Issue</h2><h3 id=\"通过提交信息操作Issue\"><a href=\"#通过提交信息操作Issue\" class=\"headerlink\" title=\"通过提交信息操作Issue\"></a>通过提交信息操作Issue</h3><p>在项目的Issue一览表中，每一个Issue标题的下面部分都分配 “#18” 的编号。我们只要在描述信息中加入 “#18” ，就可以在Issue中显示该提交的相关信息，使关联的提交一目了然。</p>\n<h3 id=\"Close-Issue\"><a href=\"#Close-Issue\" class=\"headerlink\" title=\"Close Issue\"></a>Close Issue</h3><p>如果一个处于 Open 状态的 Issue 已经处理完毕，只要在该提交中以下列任意一种格式描述提交信息，对应的 Issue 就会被 close 。</p>\n<ul>\n<li>fix #18</li>\n<li>fixes #18</li>\n<li>fixed #18</li>\n<li>close #18</li>\n<li>closes #18</li>\n<li>closed #18</li>\n<li>resolve #18</li>\n<li>resolves #18</li>\n<li>resloved #18</li>\n</ul>\n<p>这样我们每次提交并push之后，就不必每次都到 Issue 中寻找相应的 Issue 再手动关闭了。这是一项很实用的功能。</p>\n<blockquote>\n<p>Issue 和 Pull Request 的编号通用。</p>\n</blockquote>\n<h2 id=\"Pull-Request\"><a href=\"#Pull-Request\" class=\"headerlink\" title=\"Pull Request\"></a>Pull Request</h2><h5 id=\"conversation\"><a href=\"#conversation\" class=\"headerlink\" title=\"conversation\"></a>conversation</h5><blockquote>\n<p>引用评论，选中别人的评论后按 R 键。</p>\n<p>在评论中应用表情，输入 “ ：” 即可选择。</p>\n</blockquote>\n<h3 id=\"Files-Changed\"><a href=\"#Files-Changed\" class=\"headerlink\" title=\"Files Changed\"></a>Files Changed</h3><p>默认情况下，系统会将空格的不同也高亮显示，想要关闭之？ 在URL 的末尾添加 “ ?w=1 ” 就可以不显示空格的差异了。</p>\n<p>将鼠标放到被更改行号的左侧，可以看到一个加号，我们可以点击这个加号在代码中插入评论。这样评论是针对哪行代码就一目了然了</p>\n<h2 id=\"Pulse\"><a href=\"#Pulse\" class=\"headerlink\" title=\"Pulse\"></a>Pulse</h2><p>Pulse是体现该仓库软件开发活跃度的功能，近期仓库创建了多个pull request 或 Issue，有多少人参与了这个仓库的开发。用户可以判断目前这个人间是否正在积极开发，在挑选GitHub上开发的软件时，可以作为一个重要的衡量标准。</p>\n<h1 id=\"发送Pull-Request\"><a href=\"#发送Pull-Request\" class=\"headerlink\" title=\"发送Pull Request\"></a>发送Pull Request</h1><h2 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h2><h3 id=\"Fork\"><a href=\"#Fork\" class=\"headerlink\" title=\"Fork\"></a>Fork</h3><h3 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h3><h3 id=\"branch\"><a href=\"#branch\" class=\"headerlink\" title=\"branch\"></a>branch</h3><p>前面两步完成之后，我们需要在特性分支中进行开发</p>\n<h4 id=\"确认分支\"><a href=\"#确认分支\" class=\"headerlink\" title=\"确认分支\"></a>确认分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git br -a</div><div class=\"line\">* master</div><div class=\"line\">  remotes/origin/HEAD -&gt; origin/master</div><div class=\"line\">  remotes/origin/master</div></pre></td></tr></table></figure>\n<h4 id=\"创建特性分支\"><a href=\"#创建特性分支\" class=\"headerlink\" title=\"创建特性分支\"></a>创建特性分支</h4><p>在 <code>work</code> 之后加上 <code>master</code> 表明在 <code>master</code> 分支的基础上创建 <code>work</code> 分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b work master</div><div class=\"line\">Switched to a new branch 'work'</div></pre></td></tr></table></figure>\n<h3 id=\"添加代码\"><a href=\"#添加代码\" class=\"headerlink\" title=\"添加代码\"></a>添加代码</h3><p>在 <code>readme.md</code> 文件中添加要增加的代码。</p>\n<h3 id=\"提交修改\"><a href=\"#提交修改\" class=\"headerlink\" title=\"提交修改\"></a>提交修改</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit -am \"Add pull request\"</div><div class=\"line\">[work f3d798e] Add pull request</div><div class=\"line\"> 1 file changed, 1 insertion(+), 2 deletions(-)</div></pre></td></tr></table></figure>\n<h3 id=\"创建远程分支\"><a href=\"#创建远程分支\" class=\"headerlink\" title=\"创建远程分支\"></a>创建远程分支</h3><p>把在本地创建的分支推送到远程仓库，如果远程仓库没有该分支，那么就创建之。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git push origin work</div><div class=\"line\">Counting objects: 3, done.</div><div class=\"line\">Delta compression using up to 8 threads.</div><div class=\"line\">Compressing objects: 100% (2/2), done.</div><div class=\"line\">Writing objects: 100% (3/3), 283 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 3 (delta 1), reused 0 (delta 0)</div><div class=\"line\">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</div><div class=\"line\">To github.com:junoni/nimon.git</div><div class=\"line\"> * [new branch]      work -&gt; work</div></pre></td></tr></table></figure>\n<h3 id=\"在GitHub页面上创建Pull-Request\"><a href=\"#在GitHub页面上创建Pull-Request\" class=\"headerlink\" title=\"在GitHub页面上创建Pull Request\"></a>在GitHub页面上创建Pull Request</h3><h3 id=\"不进行Fork直接从分支发送Pull-Request\"><a href=\"#不进行Fork直接从分支发送Pull-Request\" class=\"headerlink\" title=\"不进行Fork直接从分支发送Pull Request\"></a>不进行Fork直接从分支发送Pull Request</h3><p>前提是拥有这个仓库编辑的权限</p>\n<h2 id=\"仓库的维护\"><a href=\"#仓库的维护\" class=\"headerlink\" title=\"仓库的维护\"></a>仓库的维护</h2><p>Fork 或者 clone 来的仓库，一旦放置不管就会离最新的源代码越来越远。这时候我们需要让本地仓库与源代码保持最新状态。</p>\n<p>我们需要将原仓库设置为远程仓库，从该仓库获取<code>fetch</code> 数据与本地仓库进行合并 <code>merge</code>  。</p>\n<h3 id=\"Fork-与-clone\"><a href=\"#Fork-与-clone\" class=\"headerlink\" title=\"Fork 与 clone\"></a>Fork 与 clone</h3><h3 id=\"给原仓库设置名称\"><a href=\"#给原仓库设置名称\" class=\"headerlink\" title=\"给原仓库设置名称\"></a>给原仓库设置名称</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add upstream git@github.com:SimpleLifee/nimon.git</div></pre></td></tr></table></figure>\n<p>这样，我们这个仓库将以upstream作为原仓库的标识符。这个环境下只需要设定一次。</p>\n<p>可以下面的命令查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote -v</div><div class=\"line\">origin\tgit@github.com:junoni/nimon.git (fetch)</div><div class=\"line\">origin\tgit@github.com:junoni/nimon.git (push)</div><div class=\"line\">upstream\tgit@github.com:SimpleLifee/nimon.git (fetch)</div><div class=\"line\">upstream\tgit@github.com:SimpleLifee/nimon.git (push)</div></pre></td></tr></table></figure>\n<h3 id=\"获取最新数据\"><a href=\"#获取最新数据\" class=\"headerlink\" title=\"获取最新数据\"></a>获取最新数据</h3><p>要让仓库维持最新状态，只需要重复这一工作即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git fetch upstream</div><div class=\"line\">remote: Counting objects: 14, done.</div><div class=\"line\">remote: Compressing objects: 100% (7/7), done.</div><div class=\"line\">remote: Total 14 (delta 3), reused 14 (delta 3), pack-reused 0</div><div class=\"line\">Unpacking objects: 100% (14/14), done.</div><div class=\"line\">From github.com:SimpleLifee/nimon</div><div class=\"line\"> * [new branch]      dev        -&gt; upstream/dev</div><div class=\"line\"> * [new branch]      feature-A  -&gt; upstream/feature-A</div><div class=\"line\"> * [new branch]      master     -&gt; upstream/master</div></pre></td></tr></table></figure>\n<h1 id=\"接受-Pull-Request\"><a href=\"#接受-Pull-Request\" class=\"headerlink\" title=\"接受  Pull Request\"></a>接受  Pull Request</h1><h2 id=\"采纳-Pull-Request-之前的准备\"><a href=\"#采纳-Pull-Request-之前的准备\" class=\"headerlink\" title=\"采纳 Pull Request 之前的准备\"></a>采纳 Pull Request 之前的准备</h2><h3 id=\"将接受方的本地仓库更新至最新状态\"><a href=\"#将接受方的本地仓库更新至最新状态\" class=\"headerlink\" title=\"将接受方的本地仓库更新至最新状态\"></a>将接受方的本地仓库更新至最新状态</h3><h3 id=\"获取发送方的远程仓库\"><a href=\"#获取发送方的远程仓库\" class=\"headerlink\" title=\"获取发送方的远程仓库\"></a>获取发送方的远程仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add PR发送者 git@github.com:junoni/nimon.git</div></pre></td></tr></table></figure>\n<p>查看添加后的情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote -v</div><div class=\"line\">PR发送者\tgit@github.com:junoni/nimon.git (fetch)</div><div class=\"line\">PR发送者\tgit@github.com:junoni/nimon.git (push)</div><div class=\"line\">origin\tgit@github.com:SimpleLifee/nimon.git (fetch)</div><div class=\"line\">origin\tgit@github.com:SimpleLifee/nimon.git (push)</div></pre></td></tr></table></figure>\n<p>接着进行fetch</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git fetch PR发送者</div><div class=\"line\">remote: Counting objects: 32, done.</div><div class=\"line\">remote: Compressing objects: 100% (18/18), done.</div><div class=\"line\">remote: Total 32 (delta 14), reused 26 (delta 8), pack-reused 0</div><div class=\"line\">Unpacking objects: 100% (32/32), done.</div><div class=\"line\">From github.com:junoni/nimon</div><div class=\"line\"> * [new branch]      dev        -&gt; PR发送者/dev</div><div class=\"line\"> * [new branch]      master     -&gt; PR发送者/master</div><div class=\"line\"> * [new branch]      work       -&gt; PR发送者/work</div></pre></td></tr></table></figure>\n<p>现在我们获取了Pull Request 发送仓库以及分支的数据（PR发送者/work）</p>\n<h3 id=\"创建用于检查的分支\"><a href=\"#创建用于检查的分支\" class=\"headerlink\" title=\"创建用于检查的分支\"></a>创建用于检查的分支</h3><p>前面我们只获取了远程仓库的数据，这些数据尚未反映在任何一个分支中。因此我们需要创建一个分支，用于模拟采纳 Pull Request 后的状态。由于这是我们第一个 Pull Request ，分支名就叫 <code>pr1</code> 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b pr1</div><div class=\"line\">Switched to a new branch 'pr1'</div></pre></td></tr></table></figure>\n<h3 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h3><p>下面要将已经 fetch 完毕的 “PR发送者/work ” 的修改内容与 <code>pr1</code> 分支进行合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git merge PR发送者/work</div></pre></td></tr></table></figure>\n<p>这时候我们需要检查一下合并的情况。</p>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><p>检查结束后<code>pr1</code> 分支就没用了，可以直接删除。我们需要先切换到 <code>pr1</code> 之外，例如 <code>master</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout master</div><div class=\"line\">Previous HEAD position was f3d798e... Add pull request</div><div class=\"line\">Switched to branch 'master'</div><div class=\"line\">Your branch is ahead of 'origin/master' by 12 commits.</div><div class=\"line\">  (use \"git push\" to publish your local commits)</div></pre></td></tr></table></figure>\n<p>这时候，Git 提醒我们当前 <code>master</code> 分支已经比远程仓库多出 12 个新提交了，并建议我们使用 <code>git push</code> 向远程仓库推送新的提交。 </p>\n<p>之后我们进行删除分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git branch -D pr1</div><div class=\"line\">Deleted branch pr1 (was 685c45a).</div></pre></td></tr></table></figure>\n<h2 id=\"采纳-Pull-Request\"><a href=\"#采纳-Pull-Request\" class=\"headerlink\" title=\"采纳 Pull Request\"></a>采纳 Pull Request</h2><p>我们可以打开浏览器找到相应的 Pull Request 页面，点击 merge pull request按钮，随后Pull Request的内容就会自动合并至仓库。</p>\n<p>不过我们已经在本地构筑了相同的环境，只要通过 CLI 进行合并操作后再 push 至 Github，就可以完成Pull Request。</p>\n<h3 id=\"合并到主分支\"><a href=\"#合并到主分支\" class=\"headerlink\" title=\"合并到主分支\"></a>合并到主分支</h3><p>首先我们切换到 <code>master</code> 分支上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout master</div></pre></td></tr></table></figure>\n<p>然后合并 <code>PR发送者/work</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git merge PR发送者/work</div></pre></td></tr></table></figure>\n<h3 id=\"Push-修改内容\"><a href=\"#Push-修改内容\" class=\"headerlink\" title=\"Push 修改内容\"></a>Push 修改内容</h3><p>先查看本地仓库和远程 GitHub端仓库库代码的差别</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff origin/master</div></pre></td></tr></table></figure>\n<p>确认没有目的之外的差别后，进行push</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git push</div><div class=\"line\">Counting objects: 10, done.</div><div class=\"line\">Delta compression using up to 8 threads.</div><div class=\"line\">Compressing objects: 100% (7/7), done.</div><div class=\"line\">Writing objects: 100% (10/10), 1.05 KiB | 0 bytes/s, done.</div><div class=\"line\">Total 10 (delta 3), reused 0 (delta 0)</div><div class=\"line\">remote: Resolving deltas: 100% (3/3), completed with 1 local object.</div><div class=\"line\">To github.com:SimpleLifee/nimon.git</div><div class=\"line\">   8caf54d..067a3c8  master -&gt; master</div></pre></td></tr></table></figure>\n<p>这样，仓库的 <code>Pull Request</code>会自动从 <code>Open</code> 状态变为 <code>Close</code> 状态。</p>\n<p>至此，Pull Request 的操作都介绍完了。</p>\n<h1 id=\"Hub命令\"><a href=\"#Hub命令\" class=\"headerlink\" title=\"Hub命令\"></a>Hub命令</h1><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>如果使用Homebrew</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> brew install hub</div></pre></td></tr></table></figure>\n<p>然后，在shell的环境路径后面添加 <code>~/bin</code> 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> echo 'export PATH=\"~/bin:$PATH\"' &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>\n<p>重新启动shell，就可以使用hub命令了。</p>\n<h4 id=\"确认运行情况\"><a href=\"#确认运行情况\" class=\"headerlink\" title=\"确认运行情况\"></a>确认运行情况</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub --version</div><div class=\"line\">git version 2.11.0 (Apple Git-81)</div><div class=\"line\">hub version 2.2.9</div></pre></td></tr></table></figure>\n<h4 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h4><p>使用hub命令的最佳实践是将相应的 git 设置成 hub 的别名。hub 命令可以完成 git 命令的所有操作，只需要在 shell 的配置文件中（.bash_profile） 添加下面一句即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eval &quot;$(hub alias -s)&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"config-hub\"><a href=\"#config-hub\" class=\"headerlink\" title=\"~/.config/hub\"></a>~/.config/hub</h4><p>hub 命令在初次访问 GitHub 的 API 的时候会询问用户名和密码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> cat ~/.config/hub</div><div class=\"line\">github.com:</div><div class=\"line\">- user: SimpleLifee</div><div class=\"line\">  oauth_token: 5cb6fb57b65693dac153bf2c61dd642a916b268b</div><div class=\"line\">  protocol: https</div></pre></td></tr></table></figure>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><h4 id=\"hub-clone\"><a href=\"#hub-clone\" class=\"headerlink\" title=\"hub clone\"></a>hub clone</h4><p>使用 <code>hub clone</code> 命令，可以省去指定 <code>GitHub</code> 端仓库的部分</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub clone nimon</div></pre></td></tr></table></figure>\n<p>上面这个命令与下面的命令效果相同。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git clone git@github.com/SimpleLifee/nimon.git</div></pre></td></tr></table></figure>\n<p>如果要指定用户，可以输入以下命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub clone junoni/nimon</div></pre></td></tr></table></figure>\n<p>上面这个命令与下面的命令效果相同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git@github.com/junoni/nimon.git</div></pre></td></tr></table></figure>\n<h4 id=\"hub-remote-add\"><a href=\"#hub-remote-add\" class=\"headerlink\" title=\"hub remote add\"></a>hub remote add</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub remote add junoni</div></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add junoni git://github.com/junoni/nimon.git</div></pre></td></tr></table></figure>\n<h4 id=\"hub-fetch\"><a href=\"#hub-fetch\" class=\"headerlink\" title=\"hub fetch\"></a>hub fetch</h4><p>类似于 <code>hub remote add</code></p>\n<h4 id=\"hub-cherry-pick\"><a href=\"#hub-cherry-pick\" class=\"headerlink\" title=\"hub cherry-pick\"></a>hub cherry-pick</h4><p><code>hub cherry-pick</code> 只需要输入 URL 就可以获取对应的修改并应用到当前分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub cherry-pick https://github.com/SimpleLifee/SimpleLifee.github.io/commit/647c558f5b3767c2995dda5ddd5663d0466ed4dd</div></pre></td></tr></table></figure>\n<p>这个命令可以将下面两个命令的效果一次性执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add -f SimpleLifee git@github.com:SimpleLifee/SimpleLifee.github.io.git</div><div class=\"line\"><span class=\"meta\">$</span> git cherry-pick 647c558f5b3767c2995dda5ddd5663d0466ed4dd</div></pre></td></tr></table></figure>\n<h4 id=\"hub-fork\"><a href=\"#hub-fork\" class=\"headerlink\" title=\"hub fork\"></a>hub fork</h4><p><code>hub fork</code> 命令的功能与 GitHub 页面的 Fork 按钮相同，比如我们 clone 了其他用户的仓库，现在想 Fork 成自己的仓库，只需要执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub fork</div></pre></td></tr></table></figure>\n<p>这一命令，就可获得与下面这一系列操作相同的效果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(在 GitHub 对仓库做 Fork 处理)</div><div class=\"line\"><span class=\"meta\">$</span> git remote add -f 用户名 git@github.com:当前操作仓库的名字.git</div></pre></td></tr></table></figure>\n<p>执行完毕后，Fork 出的仓库会被设置成当前本地仓库的远程仓库（以用户名为标识符）</p>\n<h4 id=\"hub-pull-request\"><a href=\"#hub-pull-request\" class=\"headerlink\" title=\"hub pull-request\"></a>hub pull-request</h4>","site":{"data":{"photo":{"name":{"large_link":"/images/header.png","small_link":"/images/header.png","very_small_link":"/images/photo/1-very-small.jpg","alt":"image 1"}},"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"<p><img src=\"/2017/05/05/00001-Git-2017-05-05-GitHub-学习之路/github.png\" alt=\"\"></p>\n<div align=\"center\"><br><br>自学 Git 的一些总结<br><br></div>","more":"<blockquote>\n<p>成大事不在于力量的大小，而在于能坚持多久。              ——约翰生</p>\n</blockquote>\n<h1 id=\"Git配置多个SSH\"><a href=\"#Git配置多个SSH\" class=\"headerlink\" title=\"Git配置多个SSH\"></a>Git配置多个SSH</h1><p>在日常开发中，我们可能会使用多个帐号以及多个  SSH-Key ，可能是 <a href=\"https://git.oschina.net/\" target=\"_blank\" rel=\"external\">码云</a>，也可能是 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a> ，如果你的电脑中只配置了一个 SSH-Key ，那到时候另一个或多个帐号在使用上，就会带来些许不便。（你能忍受每次 push 都要求你输入密码吗？或者每次切换帐号都需要重新配置 SSH-Key 吗？因为每次使用默认配置的方法都会将前一次配置覆盖。），作为程序员，怎么能让这种事情发生呢，我们需要一种一劳永逸的解决办法。经过上网搜索及筛选，我找到一种比较简单方便的方法。</p>\n<h2 id=\"1-生成并添加第一个SSH\"><a href=\"#1-生成并添加第一个SSH\" class=\"headerlink\" title=\"1. 生成并添加第一个SSH\"></a>1. 生成并添加第一个SSH</h2><p>首先你得安装 <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">git</a> 客户端。Windows 平台，安装完后，在桌面右键选择 git bash 打开。Mac 平台安装好，打开 Terminal 或者 iTerm 输入以下命令。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"youremail@xxx.com\"</span></div></pre></td></tr></table></figure>\n<p>在 Git Bash 中执行命令一路回车，会在 ~/.ssh/ 目录下生成 id_rsa 和 id_rsa.pub 两个文件用文本编辑器打开 id_rsa.pub 里的内容，在 Github 中添加 SSH Keys</p>\n<h2 id=\"2-生成并添加第二个SSH\"><a href=\"#2-生成并添加第二个SSH\" class=\"headerlink\" title=\"2. 生成并添加第二个SSH\"></a>2. 生成并添加第二个SSH</h2><p>接着上一步，为了区分开不同的 SSH-Key，我在生成文件的时候用了不同的名称来区分。 输入你要配置的另一个 SSH-Key 的邮箱。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-keygen -t rsa -C \"otheremail@xxx.com\"</div></pre></td></tr></table></figure>\n<p>这次不要一路回车，请输入这个文件的名字，见下面的第三行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-keygen -t rsa -C \"824291045@qq.com\"</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/Users/nimon/.ssh/id_rsa): other</div><div class=\"line\">Enter passphrase (empty for no passphrase):</div><div class=\"line\">Enter same passphrase again:</div><div class=\"line\">Your identification has been saved in other.</div><div class=\"line\">Your public key has been saved in other.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:tlHc9GiN8cLngDw8QmomMlxmc+2odsRciMjIu6ljjzQ 824291045@qq.com</div><div class=\"line\">The key's randomart image is:</div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">|.o .=..o.   o    |</div><div class=\"line\">|.oo+.o.oo+ = B   |</div></pre></td></tr></table></figure>\n<p>如上输入 <code>other</code>  之后会在.ssh目录下生成两个文件 <code>other</code> 和 <code>other.pub</code> ，原理同步骤1。</p>\n<h2 id=\"3-创建config文件\"><a href=\"#3-创建config文件\" class=\"headerlink\" title=\"3.创建config文件\"></a>3.创建config文件</h2><p>因为 SSH-Key 有一个默认的配置，如果我们还是按照默认配置，那么注定是不会成功的。</p>\n<p>我们需要在 ~/.ssh 目录下添加 config 配置文件用于区分多个 SSH-Key 。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com  </div><div class=\"line\">    HostName github.com  </div><div class=\"line\">    PreferredAuthentications publickey  </div><div class=\"line\">    IdentityFile ~/.ssh/id_rsa  </div><div class=\"line\">  </div><div class=\"line\">Host other.github.com  </div><div class=\"line\">    HostName github.com  </div><div class=\"line\">    PreferredAuthentications publickey  </div><div class=\"line\">    IdentityFile ~/.ssh/other</div></pre></td></tr></table></figure>\n<p>之后保存并推出编辑器。</p>\n<ul>\n<li>Host : 代表一个映射的域名地址，可以自己取。</li>\n<li>HostName ： 是实际的域名地址，一般是代码托管平台的域名。</li>\n<li>PreferredAuthentications ： 配置登录时用什么权限认证，可设为<code>publickey,password publickey,keyboard-interactive</code>，在这里使用 publickey 即可。</li>\n<li>IdentityFile ： 就是更改生成的两个 Key 文件的地址，这里只需填写对应的文件名即可。</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>以上完成之后，在命令行中输入 <code>ssh -T git@xxx.com</code> （xxx 就写刚才在配置文件中 Host 后面的名字）与远程进行验证，验证成功就会显示如下信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh -T git@github.com</div><div class=\"line\">Hi SmartJunNi! You've successfully authenticated, but GitHub does not provide shell access.</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">$ ssh -T git@other.github.com</div><div class=\"line\">ssh git@github.com</div><div class=\"line\">Hi junoni! You've successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>\n<h2 id=\"可能出现的问题\"><a href=\"#可能出现的问题\" class=\"headerlink\" title=\"可能出现的问题\"></a>可能出现的问题</h2><p>如果在项目中使用 <code>git push</code> 时提示<code>[remote reject]   (Permission denied)</code> 。如下所示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Counting objects: 3, done.</div><div class=\"line\">Delta compression using up to 8 threads.</div><div class=\"line\">Compressing objects: 100% (2/2), done.</div><div class=\"line\">Writing objects: 100% (3/3), 252 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 3 (delta 1), reused 0 (delta 0)</div><div class=\"line\">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</div><div class=\"line\">To other.github.com:junoni/nimon.git</div><div class=\"line\"> ! [remote rejected] master -&gt; master (permission denied)</div><div class=\"line\">error: failed to push some refs to 'git@other.github.com:junoni/nimon.git'</div></pre></td></tr></table></figure>\n<p>我花了一个半小时从 google 到 stackoverflow 查了个边，就差没有百度一下了，就是没有找到可以解决的办法。这时我发现最后一行的<code>git@other.github.com:junoni/nimon.git</code> 这个地址，我想了想，刚刚配置了 config 这个文件，其中<code>Host</code>   使用的是 <code>other.github.com</code>，我用 <code>git remote -v</code> 查看了当前远程仓库的 origin 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote -v</div><div class=\"line\">origin\tgit@github.com:junoni/nimon.git (fetch)</div><div class=\"line\">origin\tgit@github.com:junoni/nimon.git (push)</div></pre></td></tr></table></figure>\n<p>可以看到，fetch 和 push 的 origin 地址都是 git@github.com ，而不是 git@other.github.com ，我就抱着试试的心态，改成了 git@other.github.com。还有一个步骤，将 <code>other</code> 加入到密钥列表中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-add ~/.ssh/other</div></pre></td></tr></table></figure>\n<p> 再尝试 push 一下，没想到成功了。如迈克尔•乔丹所说：“我可以接受失败，但我不能接受放弃。”</p>\n<p>当然，添加之后我们还可以查看当前密钥列表。也可以删除密钥。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh-add -l</div><div class=\"line\"><span class=\"meta\">$</span> ssh-add -d ~/.ssh/other</div></pre></td></tr></table></figure>\n<p>类似debug，查看与远程连接情况。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ssh -v git@github.com</div></pre></td></tr></table></figure>\n<p>总结：我们设置的远程仓库的地址必须和 config 文件中设置的域名映射地址相同，不然就会出现错误。</p>\n<h1 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h1><h2 id=\"查看全局config信息\"><a href=\"#查看全局config信息\" class=\"headerlink\" title=\"查看全局config信息\"></a>查看全局config信息</h2><p>mac 下在~/.gitconfig 文件中配置 git 的全局信息。使用 <code>git config --list</code> 可以列出全局配置信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git config --list</div></pre></td></tr></table></figure>\n<p><strong>用户信息</strong><br>配置你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name “youname”</div><div class=\"line\">$ git config --global user.email “12345@example.com”</div></pre></td></tr></table></figure>\n<p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>\n<h2 id=\"GIT总结\"><a href=\"#GIT总结\" class=\"headerlink\" title=\"GIT总结\"></a>GIT总结</h2><p><strong>查看配置信息</strong><br>查看已有的配置信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --list</div><div class=\"line\">$ git config -l</div></pre></td></tr></table></figure>\n<p><strong>获取帮助</strong><br>例如想获取config命令的帮助信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git help config </div><div class=\"line\">$ git config --help</div></pre></td></tr></table></figure>\n<p><strong>初始化新仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。</p>\n<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><strong>跟踪文件：</strong>（将文件加到暂存区域）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add readme.txt</div></pre></td></tr></table></figure>\n<p><strong>跟踪全部文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add .</div></pre></td></tr></table></figure>\n<p><strong>提交更新</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m “first version”</div></pre></td></tr></table></figure>\n<p><strong>上传（推送）到github</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure>\n<p><strong>从现有仓库克隆</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git://github.com/youname/project.git</div><div class=\"line\">$ git clone git@github.com:youname/project.git</div><div class=\"line\">$ git clone https://github.com/youname/project.git</div></pre></td></tr></table></figure>\n<p><strong>检查当前文件状态</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure>\n<p><strong>创建.gitignore文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ touch .gitignore</div></pre></td></tr></table></figure>\n<p><strong>查看修改之后没有暂存起来的内容</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div></pre></td></tr></table></figure>\n<p><strong>移除文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rm readme.txt</div></pre></td></tr></table></figure>\n<p><strong>重命名文件</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git mv oldname.txt newname.txt</div></pre></td></tr></table></figure>\n<p><strong>查看提交历史</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git log</div></pre></td></tr></table></figure>\n<p><strong>取消暂存</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD readme.txt</div></pre></td></tr></table></figure>\n<p><strong>添加远程仓库</strong>（远程仓库必须先在github上建好）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add [shortname] [url]</div></pre></td></tr></table></figure>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:youname/yourRepo.git</div></pre></td></tr></table></figure>\n<p><strong>推送数据到仓库</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push [remote-name] [branch-name]</div></pre></td></tr></table></figure>\n<p>如果要把本地的 master 分支推送到origin服务器上（再次说明下，克隆操作会自动使用默认的master 和origin 名字），可以运行下面的命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure>\n<p><strong>从远程仓库抓取数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch [remote-name]</div></pre></td></tr></table></figure>\n<p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库<br><strong>远程仓库的删除</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote rm origin</div></pre></td></tr></table></figure>\n<p><strong>远程仓库重命名</strong>(此处命名的是上文添加远程仓库中的shortname)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote rename origin origin2</div></pre></td></tr></table></figure>\n<p><strong>自动补全</strong><br>输入命令后按tab键，就会看到列出所有匹配的可用命令建议：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git co&lt;tab&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"GIT分支\"><a href=\"#GIT分支\" class=\"headerlink\" title=\"GIT分支\"></a>GIT分支</h2><p><strong>创建一个名为“testing”的分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch testing</div></pre></td></tr></table></figure>\n<p>切换到“testing”分支(默认为master分支)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout testing</div></pre></td></tr></table></figure>\n<p><strong>新建并切换到该分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -b iss53</div></pre></td></tr></table></figure>\n<p>这条命令相当于执行下面这两条命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch iss53</div><div class=\"line\">$ git checkout iss53</div></pre></td></tr></table></figure>\n<p><strong>删除hotfix分支</strong>（如果该分支还未被合并则会提示错误，因为这样会丢失数据）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -d hotfix</div></pre></td></tr></table></figure>\n<p><strong>强制删除hotfix分支</strong>（强制删除，不会提示错误）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -D hotfix</div></pre></td></tr></table></figure>\n<p><strong>合并iss53分支</strong>（先切换到master分支）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge iss53</div></pre></td></tr></table></figure>\n<p><strong>查看当前所有分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch</div></pre></td></tr></table></figure>\n<p><strong>查看各个分支最后一个提交对象的信息</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch -v</div></pre></td></tr></table></figure>\n<p><strong>查看已经与当前分支合并的分支</strong>（已经合并的查出来后可以删掉）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch --merge</div></pre></td></tr></table></figure>\n<p><strong>查看未与当前分支合并的分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch --no-merged</div></pre></td></tr></table></figure>\n<p><strong>同步远程服务器数据到本地</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div></pre></td></tr></table></figure>\n<p><strong>从新添加的远程仓库下载数据</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add teamone git://git.team1.ourcompany.com</div><div class=\"line\">$ git fetch teamone</div></pre></td></tr></table></figure>\n<p><strong>分化一个新的分支</strong>(使用这个命令会从服务器上下载master最新的版本，所以如果当前本地版本不是最新的，新的分支和本地分支会不同)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout -b test1 origin/master</div></pre></td></tr></table></figure>\n<p>假如你用这个新的分支进行git push，并且通过了合并，那么会在远程仓库建立一个新的同名分支<br>删除该分支的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin :test1</div></pre></td></tr></table></figure>\n<p><strong>分支的衍合：</strong>将test1分支衍合到master主分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout test1</div><div class=\"line\">$ git rebase master</div></pre></td></tr></table></figure>\n<p>另一种方法，直接衍合，不用再先切换到test1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git rebase master test1</div></pre></td></tr></table></figure>\n<p><strong>快进master分支</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge client</div></pre></td></tr></table></figure>\n<h1 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h1><ul>\n<li>查看远程库信息，使用<code>git remote -v</code>；</li>\n<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>\n<li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li>\n<li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li>\n<li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li>\n<li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li>\n</ul>\n<p><strong>找到历史提交的commit ID</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log  --graph --pretty=oneline --abbrev-commit</div></pre></td></tr></table></figure>\n<h1 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h1><p> <strong>小结</strong></p>\n<ul>\n<li>命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li>\n<li><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li>\n<li><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；</li>\n<li>命令<code>git tag</code>可以查看所有标签。</li>\n<li><code>git show &lt;tagname&gt;</code>可以查看标签的详情</li>\n</ul>\n<h1 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h1><p><strong>小结</strong></p>\n<ul>\n<li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li>\n<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>\n<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>\n<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</div></pre></td></tr></table></figure>\n<p>touch readme.md</p>\n<h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><p>刚开始，你需要选择一个目录，开始一个新的 repository。使用以下命令可以在当前目录下初始化 Git 。</p>\n<p><strong>git init </strong></p>\n<p>git status  查看仓库的状态</p>\n<p>git add 向暂存区中添加文件</p>\n<p>git commit 保存仓库的历史记录</p>\n<p>记录一行提交信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit -m \"First Commit\"</div></pre></td></tr></table></figure>\n<h2 id=\"记录详细提交信息\"><a href=\"#记录详细提交信息\" class=\"headerlink\" title=\"记录详细提交信息\"></a>记录详细提交信息</h2><p>请不要加-m，直接执行 git commit 命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit </div><div class=\"line\">+git tracks changes of files.</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\"># Please enter the commit message for your changes. Lines starting</div><div class=\"line\"><span class=\"meta\">#</span> with '#' will be ignored, and an empty message aborts the commit.</div><div class=\"line\"><span class=\"meta\">#</span> On branch dev</div><div class=\"line\"><span class=\"meta\">#</span> Your branch is ahead of 'origin/dev' by 3 commits.</div><div class=\"line\"><span class=\"meta\">#</span>   (use \"git push\" to publish your local commits)</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> Changes to be committed:</div><div class=\"line\"><span class=\"meta\">#</span>       modified:   readme.md</div><div class=\"line\"><span class=\"meta\">#</span></div></pre></td></tr></table></figure>\n<p>在编辑器中记录提交信息</p>\n<ul>\n<li>第一行：用一行文件简述提交的更改内容</li>\n<li>第二行：空行</li>\n<li>第三行：记录更改的原因和详细内容</li>\n</ul>\n<p>在以 # 标位注释的 Changes to be committed 可以查看本次提交中包含的文件。其他信息不必修改。</p>\n<h2 id=\"终止提交\"><a href=\"#终止提交\" class=\"headerlink\" title=\"终止提交\"></a>终止提交</h2><p>请将提交信息留空并直接关闭编译器，随后提交就会被中止。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Aborting commit due to empty commit message.</div></pre></td></tr></table></figure>\n<p>##查看提交后的状态</p>\n<p>执行完git commit 命令后再来查看当前状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git status</div><div class=\"line\">On branch dev</div><div class=\"line\">nothing to commit, working tree clean</div></pre></td></tr></table></figure>\n<p>当前工作树处于刚刚提交的最新状态，所以结果显示没有更改。</p>\n<h2 id=\"git-log-查看提交日志\"><a href=\"#git-log-查看提交日志\" class=\"headerlink\" title=\"git log 查看提交日志\"></a>git log 查看提交日志</h2><p>可以查看以往仓库中提交的日志。包括什么人在什么时候进行了提交或合并，以及操作后有怎样的差别。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log</div><div class=\"line\">commit d97ade219a7f50f61790a14aa40f3142a07f49ba</div><div class=\"line\">Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class=\"line\">Date:   Sat May 20 16:47:09 2017 +0800</div><div class=\"line\"></div><div class=\"line\">    First Commit</div></pre></td></tr></table></figure>\n<p>Commit 旁边显示的是这个提交的哈希值。这个值很重要，在后面会讲到。</p>\n<p>Author 栏中显示的是我们给 Git 设置的用户名和邮箱。</p>\n<p>Date 栏显示的是提交的日期和时间。</p>\n<p>最后是提交信息。</p>\n<h2 id=\"只显示提交信息的第一行\"><a href=\"#只显示提交信息的第一行\" class=\"headerlink\" title=\"只显示提交信息的第一行\"></a>只显示提交信息的第一行</h2><p>在 <code>git log</code>  后面加上 <code>--pretty=short</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log --pretty=short</div><div class=\"line\"></div><div class=\"line\">commit d97ade219a7f50f61790a14aa40f3142a07f49ba</div><div class=\"line\">Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class=\"line\"></div><div class=\"line\">    First Commit</div></pre></td></tr></table></figure>\n<h2 id=\"只显示指定目录、文件的日志\"><a href=\"#只显示指定目录、文件的日志\" class=\"headerlink\" title=\"只显示指定目录、文件的日志\"></a>只显示指定目录、文件的日志</h2><p>在 <code>git log</code> 后加上文件名或者目录名即可。</p>\n<h2 id=\"显示改动的文件\"><a href=\"#显示改动的文件\" class=\"headerlink\" title=\"显示改动的文件\"></a>显示改动的文件</h2><p>如果想查看提交所带来的改动，可以加上 <code>-p</code> 参数，文件的前后差别就会显示在提交信息之后。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log -p</div></pre></td></tr></table></figure>\n<p>只查看某个文件提交前和提交后的差别</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log -p README.md</div></pre></td></tr></table></figure>\n<p>如上， 我们不必依次记下全部参数，每当有想查看的日志就积极去查，慢慢就能得心应手了。</p>\n<h2 id=\"简要列出每个commit的内容变化\"><a href=\"#简要列出每个commit的内容变化\" class=\"headerlink\" title=\"简要列出每个commit的内容变化\"></a>简要列出每个commit的内容变化</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log --stat</div></pre></td></tr></table></figure>\n<p>##git diff 查看更改前后的差别</p>\n<p><code>git diff</code> 可以查看工作树、暂存区、最新提交之间的差别。</p>\n<p>注意暂存区是指 <code>git add</code> 之后，但未 <code>git commit</code>  时保存在暂存区的内容。这个时候可以使用 <code>git diff</code> 来查看工作树和暂存区的差别。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff readme.md</div><div class=\"line\">diff --git a/readme.md b/readme.md</div><div class=\"line\">index 7f612d5..c4123d2 100644</div><div class=\"line\">--- a/readme.md</div><div class=\"line\">+++ b/readme.md</div><div class=\"line\">@@ -11,5 +11,5 @@ dev: other</div><div class=\"line\"> something happend.</div><div class=\"line\"> i will be fine.</div><div class=\"line\"> hah</div><div class=\"line\">-</div><div class=\"line\">+hey! Git!</div></pre></td></tr></table></figure>\n<p>注意，这里的 <code>+</code>  标出的是新添加的行，被删除的行则用 <code>-</code> 标出。</p>\n<p>这时候如果使用 <code>git add</code> 将 <code>README.md</code> 加入暂存区后。工作树和正常启动内容并无差别，结果什么都不会显示。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git add README.md</div></pre></td></tr></table></figure>\n<h2 id=\"查看工作树和最新提交的差别\"><a href=\"#查看工作树和最新提交的差别\" class=\"headerlink\" title=\"查看工作树和最新提交的差别\"></a>查看工作树和最新提交的差别</h2><p> 当使用<code>git add</code> 将 <code>README.md</code> 加入暂存区后，要查看工作树与最新提交的差别，请使用以下命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff HEAD</div><div class=\"line\">diff --git a/readme.md b/readme.md</div><div class=\"line\">index 7f612d5..c4123d2 100644</div><div class=\"line\">--- a/readme.md</div><div class=\"line\">+++ b/readme.md</div><div class=\"line\">@@ -11,5 +11,5 @@ dev: other</div><div class=\"line\"> something happend.</div><div class=\"line\"> i will be fine.</div><div class=\"line\"> hah</div><div class=\"line\">-</div><div class=\"line\">+hey! Git!</div></pre></td></tr></table></figure>\n<p>不妨养成这样一个好习惯，在执行 <code>git commit</code> 命令之前先执行 <code>git diff HEAD</code> 查看本次提交与上次提交之间有什么差别，等确认完毕再进行提交。这里的 <code>HEAD</code> 指当前分支中最新的一次提交的指针。</p>\n<h1 id=\"分支的操作\"><a href=\"#分支的操作\" class=\"headerlink\" title=\"分支的操作\"></a>分支的操作</h1><h2 id=\"git-branch-显示分支一览表\"><a href=\"#git-branch-显示分支一览表\" class=\"headerlink\" title=\"git branch 显示分支一览表\"></a>git branch 显示分支一览表</h2><p>这个命令会将本地的分支名列表显示，* 表示当前所在分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git branch</div><div class=\"line\">* master</div></pre></td></tr></table></figure>\n<h2 id=\"git-checkout-b-创建、切换分支\"><a href=\"#git-checkout-b-创建、切换分支\" class=\"headerlink\" title=\"git checkout -b 创建、切换分支\"></a>git checkout -b 创建、切换分支</h2><p>以当前分支为基础创建新的分支，可以使用 <code>git checkout -b</code>命令</p>\n<h2 id=\"切换到-feature-A-分支并进行提交\"><a href=\"#切换到-feature-A-分支并进行提交\" class=\"headerlink\" title=\"切换到 feature-A 分支并进行提交\"></a>切换到 feature-A 分支并进行提交</h2><p>执行下面的命令，创建名为 <code>feature-A</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b feature-A</div><div class=\"line\">Switched to a new branch 'feature-A'</div></pre></td></tr></table></figure>\n<p>实际上，以上语句等同于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git branch feature-A</div><div class=\"line\"><span class=\"meta\">$</span> git checkout feature-A</div></pre></td></tr></table></figure>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout master</div></pre></td></tr></table></figure>\n<p>##切换回上一个分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -</div></pre></td></tr></table></figure>\n<p>使用 <code>-</code> （连字符） 代替分支名。</p>\n<h2 id=\"特性分支\"><a href=\"#特性分支\" class=\"headerlink\" title=\"特性分支\"></a>特性分支</h2><p>顾名思义，特性分支是集中实现单一特性（主题），除此之外不进行任何作业的分支。在日常开发中，往往会创建数个特性分支，同时再保留一个随时可以发布软件的稳定分支。稳定分支一般由 <code>master</code>  分支担当。</p>\n<p>只要保持这样一个开发流程，就能保证master分支可以随时供人查看。其他开发者也可以放心大胆从master分支创建新的特性分支。</p>\n<p>##主干分支</p>\n<p>特性分支的原点，也是合并的终点。主干分支没有开发到一半的代码，可以随时供人查看。</p>\n<p>主干分支可以有多个，使用 Tag 标签创建版本信息。</p>\n<h2 id=\"git-merge-合并分支\"><a href=\"#git-merge-合并分支\" class=\"headerlink\" title=\"git merge 合并分支\"></a>git merge 合并分支</h2><p>先切换到master，然后与 <code>feature-A</code> 合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git merge --no-ff feature-A</div></pre></td></tr></table></figure>\n<h2 id=\"以图表形式查看分支\"><a href=\"#以图表形式查看分支\" class=\"headerlink\" title=\"以图表形式查看分支\"></a>以图表形式查看分支</h2><p>可以直观地用图表形式输出提交的日志。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log --graph</div><div class=\"line\">*   commit 685c45a39c33a4777d14fb29f6f0bfb9b9920c49</div><div class=\"line\">|\\  Merge: 6b15d42 40befaa</div><div class=\"line\">| | Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class=\"line\">| | Date:   Sat May 20 18:04:48 2017 +0800</div><div class=\"line\">| |</div><div class=\"line\">| |     merge</div><div class=\"line\">| |</div><div class=\"line\">| *   commit 40befaab3f0db6fd47e2d553b88428a4ca39e670</div><div class=\"line\">| |\\  Merge: a0b10f9 6b15d42</div><div class=\"line\">| |/  Author: SimpleLifee &lt;824291045@qq.com&gt;</div><div class=\"line\">|/|   Date:   Sat May 20 17:51:52 2017 +0800</div><div class=\"line\">| |</div><div class=\"line\">| |       fix</div><div class=\"line\">| |</div></pre></td></tr></table></figure>\n<h1 id=\"更改提交的操作\"><a href=\"#更改提交的操作\" class=\"headerlink\" title=\"更改提交的操作\"></a>更改提交的操作</h1><h2 id=\"git-reset-回溯历史版本\"><a href=\"#git-reset-回溯历史版本\" class=\"headerlink\" title=\"git reset 回溯历史版本\"></a>git reset 回溯历史版本</h2><p><strong>回溯到创建 <code>feature-A</code> 分支前</strong></p>\n<p>让仓库的HEAD、暂存区、当前的工作树回溯到指定状态。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git reset --hard &lt;哈希值&gt;</div></pre></td></tr></table></figure>\n<p> <strong>创建 fix-B 分支</strong></p>\n<p> <strong>推进至feature-A分支合并后的状态</strong></p>\n<p>首先回复到feature-A分支合并后的状态，可以称之为“推进历史”。</p>\n<p><code>git log</code> 只能查看以当前状态为终点的历史日志。</p>\n<p>所以这里要使用<code>git reflog</code> 查看当前仓库的操作历史， 可以看到commit、checkout、reset、merge等Git命令的执行记录。</p>\n<h2 id=\"消除冲突\"><a href=\"#消除冲突\" class=\"headerlink\" title=\"消除冲突\"></a>消除冲突</h2><p>如果系统提示我们文件发生了冲突，那么不解决冲突就无法完成合并，所以需要我们手动来解决冲突。解决完冲突文件后再执行<code>git add</code> 和<code>git commit</code> 。</p>\n<h2 id=\"修改提交信息\"><a href=\"#修改提交信息\" class=\"headerlink\" title=\"修改提交信息\"></a>修改提交信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend</div></pre></td></tr></table></figure>\n<h2 id=\"git-rebase-i-压缩历史\"><a href=\"#git-rebase-i-压缩历史\" class=\"headerlink\" title=\"git rebase -i 压缩历史\"></a>git rebase -i 压缩历史</h2><p>在合并特性分支之前，如果发现已提交的内容中有些拼写错误，不妨提交一个修改，然后<strong>将这个修改包含到前一个提交之中</strong>，压缩成一个历史记录。这是个会经常用到的技巧。</p>\n<h3 id=\"创建-feature-C-分支\"><a href=\"#创建-feature-C-分支\" class=\"headerlink\" title=\"创建 feature-C 分支\"></a>创建 feature-C 分支</h3><p>首先创建 feature-C 分支，然后 add 和 commit命令。</p>\n<p>但是没必要每次这么麻烦。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit -am \"Add feature-C\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>执行上面语句的前提是，当前工作树中没有新增的Untracked  的文件。</p>\n</blockquote>\n<h3 id=\"修正拼写错误\"><a href=\"#修正拼写错误\" class=\"headerlink\" title=\"修正拼写错误\"></a>修正拼写错误</h3><p>修改错误之后，使用<code>git diff</code> 来查看差别。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff</div><div class=\"line\">diff --git a/readme.md b/readme.md</div><div class=\"line\">index 10f9ebb..3bbe2d0 100644</div><div class=\"line\">--- a/readme.md</div><div class=\"line\">+++ b/readme.md</div><div class=\"line\">@@ -1,2 +1,3 @@</div><div class=\"line\"> C</div><div class=\"line\"> C</div><div class=\"line\">+fix C</div></pre></td></tr></table></figure>\n<p>然后进行提交</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit -am \"Fix Typo\"</div><div class=\"line\">[C c3955c1] Fix Typo</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>\n<p>错字漏字等失误称作typo，但是我们不希望在历史记录中看到这类提交，因为健全的历史记录不需要它们。</p>\n<h3 id=\"更改历史\"><a href=\"#更改历史\" class=\"headerlink\" title=\"更改历史\"></a>更改历史</h3><p>我们将修正的内容与之前的一次提交合并，在历史记录中合并为一次完美的提交。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git rebase -i HEAD~2</div></pre></td></tr></table></figure>\n<p>上面的命令，可以选定当前分支中包含HEAD ( 最新提交 ) 在内的两个最新历史记录为对象，并在编辑器中打开。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick 695471a Add C</div><div class=\"line\">pick 2f8a965 fix typo</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\"># Rebase 1db92da..2f8a965 onto 1db92da (2 commands)</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> Commands:</div><div class=\"line\"><span class=\"meta\">#</span> p, pick = use commit</div><div class=\"line\"><span class=\"meta\">#</span> r, reword = use commit, but edit the commit message</div><div class=\"line\"><span class=\"meta\">#</span> e, edit = use commit, but stop for amending</div><div class=\"line\"><span class=\"meta\">#</span> s, squash = use commit, but meld into previous commit</div><div class=\"line\"><span class=\"meta\">#</span> f, fixup = like \"squash\", but discard this commit's log message</div><div class=\"line\"><span class=\"meta\">#</span> x, exec = run command (the rest of the line) using shell</div><div class=\"line\"><span class=\"meta\">#</span> d, drop = remove commit</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> These lines can be re-ordered; they are executed from top to bottom.</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> If you remove a line here THAT COMMIT WILL BE LOST.</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> However, if you remove everything, the rebase will be aborted.</div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#</span> Note that empty commits are commented out</div></pre></td></tr></table></figure>\n<p>695471a我们将 <code>2f8a965</code> 的 <code>fix typo</code> 的历史记录压缩到 <code>695471a</code> 的 <code>Add C</code>里。按照下图所示，将<code>2f8a965</code>左侧的 <code>pick</code> 部分删除，改写为 <code>fixup</code> 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pick 695471a Add C</div><div class=\"line\">fixup 2f8a965 fix typo</div></pre></td></tr></table></figure>\n<p>保存编译器里的内容，关闭编辑器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[detached HEAD 5f770a9] nnnnnnnn</div><div class=\"line\"> Date: Sat May 20 22:07:28 2017 +0800</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div><div class=\"line\">Successfully rebased and updated refs/heads/C.</div></pre></td></tr></table></figure>\n<p>系统显示 rebase 成功，也就是以下面这两个提交作为对象，将 <code>fix typo</code> 的内容合并到了上一个提交<code>Add C</code> 之中，改写成一个新的提交。</p>\n<ul>\n<li>695471a Add C</li>\n<li>2f8a965 fix typo</li>\n</ul>\n<p>现在查看提交日志时会发现 <code>Add C</code> 的哈希值以及不再是 <code>695471a</code> ，这证明提交已经被更改了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git log --graph --oneline</div><div class=\"line\">* 5f770a9 Add C</div><div class=\"line\">* 1db92da haha</div><div class=\"line\">* c1aabf4 Add B</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>这样，<code>fix typo</code>就从历史中被抹去了，也相当于 <code>Add C</code>从来没有出现过拼写错误。这算是一种良性的历史改写。</p>\n<h3 id=\"合并至master分支\"><a href=\"#合并至master分支\" class=\"headerlink\" title=\"合并至master分支\"></a>合并至master分支</h3><p>C 分支的使命告一段落，我们将它与master分支合并。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout master</div><div class=\"line\">Switched to branch 'master'</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">$ git merge --no-ff feature-C</div><div class=\"line\">Merge made by the 'recursive' strategy.</div><div class=\"line\"> a         | 2 ++</div><div class=\"line\"> readme.md | 2 ++</div><div class=\"line\"> 2 files changed, 4 insertions(+)</div><div class=\"line\"> create mode 100644 a</div><div class=\"line\"> create mode 100644 readme.md</div></pre></td></tr></table></figure>\n<p>按照递归策略合并。</p>\n<h1 id=\"推送至远程仓库\"><a href=\"#推送至远程仓库\" class=\"headerlink\" title=\"推送至远程仓库\"></a>推送至远程仓库</h1><blockquote>\n<p>建议在新建远程仓库的时候不要勾选自动生成README文件的选项。</p>\n</blockquote>\n<h2 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h2><p>我们用 <code>git remote add</code> 命令将它设置成本地仓库的远程仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add origin git@github.com:9981NAN/9981NAN.git</div></pre></td></tr></table></figure>\n<p>这样，Git会自动将 <code>git@github.com:9981NAN/9981NAN.git</code> 远程仓库名称设置为 origin （ 标识符 ）</p>\n<h2 id=\"添加多个-URL-地址\"><a href=\"#添加多个-URL-地址\" class=\"headerlink\" title=\"添加多个 URL 地址\"></a>添加多个 URL 地址</h2><p>像上面 <code>git remote add origin &lt;url1&gt;</code> 添加第一个URL之后，如果想要添加多个 URL 地址，那么可以使用<code>git remote set-url --add origin &lt;url2&gt;</code> 添加第二个URL。 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote set-url --add origin git@github.com:9981NAN/9981NAN.git</div></pre></td></tr></table></figure>\n<p>这样一来，以后每次 <code>git push origin master</code>  的时候，就会自动向多个远程仓库中推送了。 </p>\n<blockquote>\n<p>但是使用 git pull 时，只能拉取origin里的一个URL地址（即fetch-url，如上），这个 fetch-url 默认是你添加到origin 的第一个地址。</p>\n<p>如果你想更改，只需要更改 config 文件里，那几个url的顺序即可。 fetch-url 会直接对应排行第一的那个url 链接。</p>\n</blockquote>\n<h2 id=\"推送至master分支\"><a href=\"#推送至master分支\" class=\"headerlink\" title=\"推送至master分支\"></a>推送至master分支</h2><p>如果想把当前分支下本地仓库的内容推送给远程仓库，需要用到 <code>git push</code>，假定我们在master分支下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git push -u origin master</div></pre></td></tr></table></figure>\n<p><code>-u</code>参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的 upstream（上游）。这样一来，下次运行 <code>git pull</code>命令从远程仓库获取内容时，本地仓库这个分支就可以直接从origin 的master 分支获取内容，省去了另外添加参数的麻烦。</p>\n<h2 id=\"推送至master以外的分支\"><a href=\"#推送至master以外的分支\" class=\"headerlink\" title=\"推送至master以外的分支\"></a>推送至master以外的分支</h2><p>创建其他分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b feature-D</div></pre></td></tr></table></figure>\n<p>将它push给远程仓库，并保持分支名不变</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git push -u origin feature-D</div></pre></td></tr></table></figure>\n<h1 id=\"从远程仓库获取\"><a href=\"#从远程仓库获取\" class=\"headerlink\" title=\"从远程仓库获取\"></a>从远程仓库获取</h1><p>假设现在有另一名开发者要来共同开发，在另一个目录下新建本地仓库。</p>\n<h2 id=\"git-clone-获取远程仓库\"><a href=\"#git-clone-获取远程仓库\" class=\"headerlink\" title=\"git clone 获取远程仓库\"></a>git clone 获取远程仓库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git clone git@github.com:9981NAN/9981NAN.git</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意clone的目录不要与之前操作的仓库在同一目录下</p>\n</blockquote>\n<p>执行 <code>git clone</code>命令后我们会默认处于master分支下，同时系统会自动将origin设置成该远程仓库的标识符。</p>\n<p>我们可以使用下面的命令查看本地仓库和远程仓库的分支信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git branch -a</div></pre></td></tr></table></figure>\n<h2 id=\"获取远程的feature-D分支\"><a href=\"#获取远程的feature-D分支\" class=\"headerlink\" title=\"获取远程的feature-D分支\"></a>获取远程的feature-D分支</h2><p>我们试着将feature-D分支获取至本地仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b feature-D origin/feature-D</div></pre></td></tr></table></figure>\n<p><code>-b</code> 参数后面是本地仓库中新建分支的名称，可以与远程仓库不同名，但是建议同名，便于理解。</p>\n<h2 id=\"向本地的feature-D分支提交更改\"><a href=\"#向本地的feature-D分支提交更改\" class=\"headerlink\" title=\"向本地的feature-D分支提交更改\"></a>向本地的feature-D分支提交更改</h2><p>假定我们是另一位开发者，要做一个新的提交。在修改文件内容后进行查看和提交。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">$ git commit -am \"Add feature-D\"</div></pre></td></tr></table></figure>\n<h2 id=\"推送至feature-D分支\"><a href=\"#推送至feature-D分支\" class=\"headerlink\" title=\"推送至feature-D分支\"></a>推送至feature-D分支</h2><p>在<code>feature-D</code>分支下直接使用 <code>git push</code> 即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff</div></pre></td></tr></table></figure>\n<h2 id=\"git-pull-获取最新的远程仓库分支\"><a href=\"#git-pull-获取最新的远程仓库分支\" class=\"headerlink\" title=\"git pull 获取最新的远程仓库分支\"></a>git pull 获取最新的远程仓库分支</h2><p>回到我们刚刚放下操作的目录，这边的本地仓库中只是创建了feature-D分支，并没有在feature-D进行任何提交，而远程仓库已经有了我们刚刚推送的提交。这时候就可以用<code>git pull</code> ，将本地的 feature-D 分支更新到最新状态。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git pull origin feature-D</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果两人同时修改了同一部分的源代码，push时就很容易发生冲突。所以多名开发者在同一个分支中进行作业时，为了减少冲突的情况，建议更频繁地进行push和pull操作。</p>\n</blockquote>\n<h1 id=\"GitHub功能\"><a href=\"#GitHub功能\" class=\"headerlink\" title=\"GitHub功能\"></a>GitHub功能</h1><h2 id=\"通过部分名称搜索文件\"><a href=\"#通过部分名称搜索文件\" class=\"headerlink\" title=\"通过部分名称搜索文件\"></a>通过部分名称搜索文件</h2><p>在仓库页面按下键盘T 键，然后输入要找的文件或者目录。速度非常快。</p>\n<h2 id=\"查看差别\"><a href=\"#查看差别\" class=\"headerlink\" title=\"查看差别\"></a>查看差别</h2><h3 id=\"查看分支间的差别\"><a href=\"#查看分支间的差别\" class=\"headerlink\" title=\"查看分支间的差别\"></a>查看分支间的差别</h3><p>以我的9981NAN项目为例，要比较nimon分支和yong分支的差别，可以直接在浏览器URL中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/9981NAN/9981NAN/compare/nimon...yong</div></pre></td></tr></table></figure>\n<p>这样就可以查看两个分支间的差别了。</p>\n<h3 id=\"查看与几天前的差别\"><a href=\"#查看与几天前的差别\" class=\"headerlink\" title=\"查看与几天前的差别\"></a>查看与几天前的差别</h3><p>输入下面的URL就可以查看nimon分支最近7天内的差别了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/9981NAN/9981NAN/compare/nimon@&#123;7.day.ago&#125;...nimon</div></pre></td></tr></table></figure>\n<p>类似的还有</p>\n<ul>\n<li>day</li>\n<li>week</li>\n<li>month</li>\n<li>year</li>\n<li>hour</li>\n</ul>\n<h3 id=\"查看指定日期之间的差别\"><a href=\"#查看指定日期之间的差别\" class=\"headerlink\" title=\"查看指定日期之间的差别\"></a>查看指定日期之间的差别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/9981NAN/9981NAN/compare/nimon@&#123;2017-05-19&#125;...nimon</div></pre></td></tr></table></figure>\n<h2 id=\"Issue\"><a href=\"#Issue\" class=\"headerlink\" title=\"Issue\"></a>Issue</h2><h3 id=\"通过提交信息操作Issue\"><a href=\"#通过提交信息操作Issue\" class=\"headerlink\" title=\"通过提交信息操作Issue\"></a>通过提交信息操作Issue</h3><p>在项目的Issue一览表中，每一个Issue标题的下面部分都分配 “#18” 的编号。我们只要在描述信息中加入 “#18” ，就可以在Issue中显示该提交的相关信息，使关联的提交一目了然。</p>\n<h3 id=\"Close-Issue\"><a href=\"#Close-Issue\" class=\"headerlink\" title=\"Close Issue\"></a>Close Issue</h3><p>如果一个处于 Open 状态的 Issue 已经处理完毕，只要在该提交中以下列任意一种格式描述提交信息，对应的 Issue 就会被 close 。</p>\n<ul>\n<li>fix #18</li>\n<li>fixes #18</li>\n<li>fixed #18</li>\n<li>close #18</li>\n<li>closes #18</li>\n<li>closed #18</li>\n<li>resolve #18</li>\n<li>resolves #18</li>\n<li>resloved #18</li>\n</ul>\n<p>这样我们每次提交并push之后，就不必每次都到 Issue 中寻找相应的 Issue 再手动关闭了。这是一项很实用的功能。</p>\n<blockquote>\n<p>Issue 和 Pull Request 的编号通用。</p>\n</blockquote>\n<h2 id=\"Pull-Request\"><a href=\"#Pull-Request\" class=\"headerlink\" title=\"Pull Request\"></a>Pull Request</h2><h5 id=\"conversation\"><a href=\"#conversation\" class=\"headerlink\" title=\"conversation\"></a>conversation</h5><blockquote>\n<p>引用评论，选中别人的评论后按 R 键。</p>\n<p>在评论中应用表情，输入 “ ：” 即可选择。</p>\n</blockquote>\n<h3 id=\"Files-Changed\"><a href=\"#Files-Changed\" class=\"headerlink\" title=\"Files Changed\"></a>Files Changed</h3><p>默认情况下，系统会将空格的不同也高亮显示，想要关闭之？ 在URL 的末尾添加 “ ?w=1 ” 就可以不显示空格的差异了。</p>\n<p>将鼠标放到被更改行号的左侧，可以看到一个加号，我们可以点击这个加号在代码中插入评论。这样评论是针对哪行代码就一目了然了</p>\n<h2 id=\"Pulse\"><a href=\"#Pulse\" class=\"headerlink\" title=\"Pulse\"></a>Pulse</h2><p>Pulse是体现该仓库软件开发活跃度的功能，近期仓库创建了多个pull request 或 Issue，有多少人参与了这个仓库的开发。用户可以判断目前这个人间是否正在积极开发，在挑选GitHub上开发的软件时，可以作为一个重要的衡量标准。</p>\n<h1 id=\"发送Pull-Request\"><a href=\"#发送Pull-Request\" class=\"headerlink\" title=\"发送Pull Request\"></a>发送Pull Request</h1><h2 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h2><h3 id=\"Fork\"><a href=\"#Fork\" class=\"headerlink\" title=\"Fork\"></a>Fork</h3><h3 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h3><h3 id=\"branch\"><a href=\"#branch\" class=\"headerlink\" title=\"branch\"></a>branch</h3><p>前面两步完成之后，我们需要在特性分支中进行开发</p>\n<h4 id=\"确认分支\"><a href=\"#确认分支\" class=\"headerlink\" title=\"确认分支\"></a>确认分支</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git br -a</div><div class=\"line\">* master</div><div class=\"line\">  remotes/origin/HEAD -&gt; origin/master</div><div class=\"line\">  remotes/origin/master</div></pre></td></tr></table></figure>\n<h4 id=\"创建特性分支\"><a href=\"#创建特性分支\" class=\"headerlink\" title=\"创建特性分支\"></a>创建特性分支</h4><p>在 <code>work</code> 之后加上 <code>master</code> 表明在 <code>master</code> 分支的基础上创建 <code>work</code> 分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b work master</div><div class=\"line\">Switched to a new branch 'work'</div></pre></td></tr></table></figure>\n<h3 id=\"添加代码\"><a href=\"#添加代码\" class=\"headerlink\" title=\"添加代码\"></a>添加代码</h3><p>在 <code>readme.md</code> 文件中添加要增加的代码。</p>\n<h3 id=\"提交修改\"><a href=\"#提交修改\" class=\"headerlink\" title=\"提交修改\"></a>提交修改</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git commit -am \"Add pull request\"</div><div class=\"line\">[work f3d798e] Add pull request</div><div class=\"line\"> 1 file changed, 1 insertion(+), 2 deletions(-)</div></pre></td></tr></table></figure>\n<h3 id=\"创建远程分支\"><a href=\"#创建远程分支\" class=\"headerlink\" title=\"创建远程分支\"></a>创建远程分支</h3><p>把在本地创建的分支推送到远程仓库，如果远程仓库没有该分支，那么就创建之。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git push origin work</div><div class=\"line\">Counting objects: 3, done.</div><div class=\"line\">Delta compression using up to 8 threads.</div><div class=\"line\">Compressing objects: 100% (2/2), done.</div><div class=\"line\">Writing objects: 100% (3/3), 283 bytes | 0 bytes/s, done.</div><div class=\"line\">Total 3 (delta 1), reused 0 (delta 0)</div><div class=\"line\">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</div><div class=\"line\">To github.com:junoni/nimon.git</div><div class=\"line\"> * [new branch]      work -&gt; work</div></pre></td></tr></table></figure>\n<h3 id=\"在GitHub页面上创建Pull-Request\"><a href=\"#在GitHub页面上创建Pull-Request\" class=\"headerlink\" title=\"在GitHub页面上创建Pull Request\"></a>在GitHub页面上创建Pull Request</h3><h3 id=\"不进行Fork直接从分支发送Pull-Request\"><a href=\"#不进行Fork直接从分支发送Pull-Request\" class=\"headerlink\" title=\"不进行Fork直接从分支发送Pull Request\"></a>不进行Fork直接从分支发送Pull Request</h3><p>前提是拥有这个仓库编辑的权限</p>\n<h2 id=\"仓库的维护\"><a href=\"#仓库的维护\" class=\"headerlink\" title=\"仓库的维护\"></a>仓库的维护</h2><p>Fork 或者 clone 来的仓库，一旦放置不管就会离最新的源代码越来越远。这时候我们需要让本地仓库与源代码保持最新状态。</p>\n<p>我们需要将原仓库设置为远程仓库，从该仓库获取<code>fetch</code> 数据与本地仓库进行合并 <code>merge</code>  。</p>\n<h3 id=\"Fork-与-clone\"><a href=\"#Fork-与-clone\" class=\"headerlink\" title=\"Fork 与 clone\"></a>Fork 与 clone</h3><h3 id=\"给原仓库设置名称\"><a href=\"#给原仓库设置名称\" class=\"headerlink\" title=\"给原仓库设置名称\"></a>给原仓库设置名称</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add upstream git@github.com:SimpleLifee/nimon.git</div></pre></td></tr></table></figure>\n<p>这样，我们这个仓库将以upstream作为原仓库的标识符。这个环境下只需要设定一次。</p>\n<p>可以下面的命令查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote -v</div><div class=\"line\">origin\tgit@github.com:junoni/nimon.git (fetch)</div><div class=\"line\">origin\tgit@github.com:junoni/nimon.git (push)</div><div class=\"line\">upstream\tgit@github.com:SimpleLifee/nimon.git (fetch)</div><div class=\"line\">upstream\tgit@github.com:SimpleLifee/nimon.git (push)</div></pre></td></tr></table></figure>\n<h3 id=\"获取最新数据\"><a href=\"#获取最新数据\" class=\"headerlink\" title=\"获取最新数据\"></a>获取最新数据</h3><p>要让仓库维持最新状态，只需要重复这一工作即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git fetch upstream</div><div class=\"line\">remote: Counting objects: 14, done.</div><div class=\"line\">remote: Compressing objects: 100% (7/7), done.</div><div class=\"line\">remote: Total 14 (delta 3), reused 14 (delta 3), pack-reused 0</div><div class=\"line\">Unpacking objects: 100% (14/14), done.</div><div class=\"line\">From github.com:SimpleLifee/nimon</div><div class=\"line\"> * [new branch]      dev        -&gt; upstream/dev</div><div class=\"line\"> * [new branch]      feature-A  -&gt; upstream/feature-A</div><div class=\"line\"> * [new branch]      master     -&gt; upstream/master</div></pre></td></tr></table></figure>\n<h1 id=\"接受-Pull-Request\"><a href=\"#接受-Pull-Request\" class=\"headerlink\" title=\"接受  Pull Request\"></a>接受  Pull Request</h1><h2 id=\"采纳-Pull-Request-之前的准备\"><a href=\"#采纳-Pull-Request-之前的准备\" class=\"headerlink\" title=\"采纳 Pull Request 之前的准备\"></a>采纳 Pull Request 之前的准备</h2><h3 id=\"将接受方的本地仓库更新至最新状态\"><a href=\"#将接受方的本地仓库更新至最新状态\" class=\"headerlink\" title=\"将接受方的本地仓库更新至最新状态\"></a>将接受方的本地仓库更新至最新状态</h3><h3 id=\"获取发送方的远程仓库\"><a href=\"#获取发送方的远程仓库\" class=\"headerlink\" title=\"获取发送方的远程仓库\"></a>获取发送方的远程仓库</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add PR发送者 git@github.com:junoni/nimon.git</div></pre></td></tr></table></figure>\n<p>查看添加后的情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote -v</div><div class=\"line\">PR发送者\tgit@github.com:junoni/nimon.git (fetch)</div><div class=\"line\">PR发送者\tgit@github.com:junoni/nimon.git (push)</div><div class=\"line\">origin\tgit@github.com:SimpleLifee/nimon.git (fetch)</div><div class=\"line\">origin\tgit@github.com:SimpleLifee/nimon.git (push)</div></pre></td></tr></table></figure>\n<p>接着进行fetch</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git fetch PR发送者</div><div class=\"line\">remote: Counting objects: 32, done.</div><div class=\"line\">remote: Compressing objects: 100% (18/18), done.</div><div class=\"line\">remote: Total 32 (delta 14), reused 26 (delta 8), pack-reused 0</div><div class=\"line\">Unpacking objects: 100% (32/32), done.</div><div class=\"line\">From github.com:junoni/nimon</div><div class=\"line\"> * [new branch]      dev        -&gt; PR发送者/dev</div><div class=\"line\"> * [new branch]      master     -&gt; PR发送者/master</div><div class=\"line\"> * [new branch]      work       -&gt; PR发送者/work</div></pre></td></tr></table></figure>\n<p>现在我们获取了Pull Request 发送仓库以及分支的数据（PR发送者/work）</p>\n<h3 id=\"创建用于检查的分支\"><a href=\"#创建用于检查的分支\" class=\"headerlink\" title=\"创建用于检查的分支\"></a>创建用于检查的分支</h3><p>前面我们只获取了远程仓库的数据，这些数据尚未反映在任何一个分支中。因此我们需要创建一个分支，用于模拟采纳 Pull Request 后的状态。由于这是我们第一个 Pull Request ，分支名就叫 <code>pr1</code> 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout -b pr1</div><div class=\"line\">Switched to a new branch 'pr1'</div></pre></td></tr></table></figure>\n<h3 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h3><p>下面要将已经 fetch 完毕的 “PR发送者/work ” 的修改内容与 <code>pr1</code> 分支进行合并</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git merge PR发送者/work</div></pre></td></tr></table></figure>\n<p>这时候我们需要检查一下合并的情况。</p>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><p>检查结束后<code>pr1</code> 分支就没用了，可以直接删除。我们需要先切换到 <code>pr1</code> 之外，例如 <code>master</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout master</div><div class=\"line\">Previous HEAD position was f3d798e... Add pull request</div><div class=\"line\">Switched to branch 'master'</div><div class=\"line\">Your branch is ahead of 'origin/master' by 12 commits.</div><div class=\"line\">  (use \"git push\" to publish your local commits)</div></pre></td></tr></table></figure>\n<p>这时候，Git 提醒我们当前 <code>master</code> 分支已经比远程仓库多出 12 个新提交了，并建议我们使用 <code>git push</code> 向远程仓库推送新的提交。 </p>\n<p>之后我们进行删除分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git branch -D pr1</div><div class=\"line\">Deleted branch pr1 (was 685c45a).</div></pre></td></tr></table></figure>\n<h2 id=\"采纳-Pull-Request\"><a href=\"#采纳-Pull-Request\" class=\"headerlink\" title=\"采纳 Pull Request\"></a>采纳 Pull Request</h2><p>我们可以打开浏览器找到相应的 Pull Request 页面，点击 merge pull request按钮，随后Pull Request的内容就会自动合并至仓库。</p>\n<p>不过我们已经在本地构筑了相同的环境，只要通过 CLI 进行合并操作后再 push 至 Github，就可以完成Pull Request。</p>\n<h3 id=\"合并到主分支\"><a href=\"#合并到主分支\" class=\"headerlink\" title=\"合并到主分支\"></a>合并到主分支</h3><p>首先我们切换到 <code>master</code> 分支上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git checkout master</div></pre></td></tr></table></figure>\n<p>然后合并 <code>PR发送者/work</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git merge PR发送者/work</div></pre></td></tr></table></figure>\n<h3 id=\"Push-修改内容\"><a href=\"#Push-修改内容\" class=\"headerlink\" title=\"Push 修改内容\"></a>Push 修改内容</h3><p>先查看本地仓库和远程 GitHub端仓库库代码的差别</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git diff origin/master</div></pre></td></tr></table></figure>\n<p>确认没有目的之外的差别后，进行push</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git push</div><div class=\"line\">Counting objects: 10, done.</div><div class=\"line\">Delta compression using up to 8 threads.</div><div class=\"line\">Compressing objects: 100% (7/7), done.</div><div class=\"line\">Writing objects: 100% (10/10), 1.05 KiB | 0 bytes/s, done.</div><div class=\"line\">Total 10 (delta 3), reused 0 (delta 0)</div><div class=\"line\">remote: Resolving deltas: 100% (3/3), completed with 1 local object.</div><div class=\"line\">To github.com:SimpleLifee/nimon.git</div><div class=\"line\">   8caf54d..067a3c8  master -&gt; master</div></pre></td></tr></table></figure>\n<p>这样，仓库的 <code>Pull Request</code>会自动从 <code>Open</code> 状态变为 <code>Close</code> 状态。</p>\n<p>至此，Pull Request 的操作都介绍完了。</p>\n<h1 id=\"Hub命令\"><a href=\"#Hub命令\" class=\"headerlink\" title=\"Hub命令\"></a>Hub命令</h1><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>如果使用Homebrew</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> brew install hub</div></pre></td></tr></table></figure>\n<p>然后，在shell的环境路径后面添加 <code>~/bin</code> 。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> echo 'export PATH=\"~/bin:$PATH\"' &gt;&gt; ~/.bash_profile</div></pre></td></tr></table></figure>\n<p>重新启动shell，就可以使用hub命令了。</p>\n<h4 id=\"确认运行情况\"><a href=\"#确认运行情况\" class=\"headerlink\" title=\"确认运行情况\"></a>确认运行情况</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub --version</div><div class=\"line\">git version 2.11.0 (Apple Git-81)</div><div class=\"line\">hub version 2.2.9</div></pre></td></tr></table></figure>\n<h4 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h4><p>使用hub命令的最佳实践是将相应的 git 设置成 hub 的别名。hub 命令可以完成 git 命令的所有操作，只需要在 shell 的配置文件中（.bash_profile） 添加下面一句即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">eval &quot;$(hub alias -s)&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"config-hub\"><a href=\"#config-hub\" class=\"headerlink\" title=\"~/.config/hub\"></a>~/.config/hub</h4><p>hub 命令在初次访问 GitHub 的 API 的时候会询问用户名和密码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> cat ~/.config/hub</div><div class=\"line\">github.com:</div><div class=\"line\">- user: SimpleLifee</div><div class=\"line\">  oauth_token: 5cb6fb57b65693dac153bf2c61dd642a916b268b</div><div class=\"line\">  protocol: https</div></pre></td></tr></table></figure>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h3><h4 id=\"hub-clone\"><a href=\"#hub-clone\" class=\"headerlink\" title=\"hub clone\"></a>hub clone</h4><p>使用 <code>hub clone</code> 命令，可以省去指定 <code>GitHub</code> 端仓库的部分</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub clone nimon</div></pre></td></tr></table></figure>\n<p>上面这个命令与下面的命令效果相同。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git clone git@github.com/SimpleLifee/nimon.git</div></pre></td></tr></table></figure>\n<p>如果要指定用户，可以输入以下命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub clone junoni/nimon</div></pre></td></tr></table></figure>\n<p>上面这个命令与下面的命令效果相同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git clone git@github.com/junoni/nimon.git</div></pre></td></tr></table></figure>\n<h4 id=\"hub-remote-add\"><a href=\"#hub-remote-add\" class=\"headerlink\" title=\"hub remote add\"></a>hub remote add</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub remote add junoni</div></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add junoni git://github.com/junoni/nimon.git</div></pre></td></tr></table></figure>\n<h4 id=\"hub-fetch\"><a href=\"#hub-fetch\" class=\"headerlink\" title=\"hub fetch\"></a>hub fetch</h4><p>类似于 <code>hub remote add</code></p>\n<h4 id=\"hub-cherry-pick\"><a href=\"#hub-cherry-pick\" class=\"headerlink\" title=\"hub cherry-pick\"></a>hub cherry-pick</h4><p><code>hub cherry-pick</code> 只需要输入 URL 就可以获取对应的修改并应用到当前分支。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub cherry-pick https://github.com/SimpleLifee/SimpleLifee.github.io/commit/647c558f5b3767c2995dda5ddd5663d0466ed4dd</div></pre></td></tr></table></figure>\n<p>这个命令可以将下面两个命令的效果一次性执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> git remote add -f SimpleLifee git@github.com:SimpleLifee/SimpleLifee.github.io.git</div><div class=\"line\"><span class=\"meta\">$</span> git cherry-pick 647c558f5b3767c2995dda5ddd5663d0466ed4dd</div></pre></td></tr></table></figure>\n<h4 id=\"hub-fork\"><a href=\"#hub-fork\" class=\"headerlink\" title=\"hub fork\"></a>hub fork</h4><p><code>hub fork</code> 命令的功能与 GitHub 页面的 Fork 按钮相同，比如我们 clone 了其他用户的仓库，现在想 Fork 成自己的仓库，只需要执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> hub fork</div></pre></td></tr></table></figure>\n<p>这一命令，就可获得与下面这一系列操作相同的效果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(在 GitHub 对仓库做 Fork 处理)</div><div class=\"line\"><span class=\"meta\">$</span> git remote add -f 用户名 git@github.com:当前操作仓库的名字.git</div></pre></td></tr></table></figure>\n<p>执行完毕后，Fork 出的仓库会被设置成当前本地仓库的远程仓库（以用户名为标识符）</p>\n<h4 id=\"hub-pull-request\"><a href=\"#hub-pull-request\" class=\"headerlink\" title=\"hub pull-request\"></a>hub pull-request</h4>"}],"PostAsset":[{"_id":"source/_drafts/Gradle/dependency.png","slug":"dependency.png","post":"cj3o64nam0002p5uk2x2c1ksn","modified":0,"renderable":0},{"_id":"source/_drafts/2017-05-08-断言详解/assert.png","slug":"assert.png","post":"cj3o64nai0001p5ukecsxsgn9","modified":0,"renderable":0},{"_id":"source/_drafts/Gradle/发布.png","slug":"发布.png","post":"cj3o64nam0002p5uk2x2c1ksn","modified":0,"renderable":0},{"_id":"source/_posts/2017-06-08-Activity的生命周期和启动模式/Activity的生命周期.png","slug":"Activity的生命周期.png","post":"cj3o64nb8000cp5ukmhr4k63a","modified":0,"renderable":0},{"_id":"source/_drafts/Spring/2017-05-08-Spring使用容器管理beans/bean_life_circle.png","slug":"bean_life_circle.png","post":"cj3o64ndn000xp5uke0mbjlbd","modified":0,"renderable":0},{"_id":"source/_drafts/struts2配置文件/struts.jpg","slug":"struts.jpg","post":"cj3o64nb0000ap5ukveyec3r9","modified":0,"renderable":0},{"_id":"source/_drafts/Gradle/阶段关系.png","slug":"阶段关系.png","post":"cj3o64nam0002p5uk2x2c1ksn","modified":0,"renderable":0},{"_id":"source/_drafts/Spring/2017-05-08-Spring使用容器管理beans/spring_jar.png","slug":"spring_jar.png","post":"cj3o64ndn000xp5uke0mbjlbd","modified":0,"renderable":0},{"_id":"source/_drafts/Maven/2017-05-10-maven/maven.png","slug":"maven.png","post":"cj3o64ndl000tp5ukr1kf33yf","modified":0,"renderable":0},{"_id":"source/_drafts/Spring/2017-05-05-spring 事务管理（三）/anisur.jpg","slug":"anisur.jpg","post":"cj3o64ndk000sp5ukdfhsqfcb","modified":0,"renderable":0},{"_id":"source/_drafts/maven/2017-05-10-maven/maven.png","post":"cj3o64nau0006p5ukrud2onaq","slug":"2017-05-10-maven/maven.png","modified":1,"renderable":1},{"_id":"source/_drafts/maven/2017-05-10-maven.md","post":"cj3o64nau0006p5ukrud2onaq","slug":"2017-05-10-maven.md","modified":1,"renderable":1},{"_id":"source/_drafts/Spring/2017-05-08-Spring使用容器管理beans/beans.png","slug":"beans.png","post":"cj3o64ndn000xp5uke0mbjlbd","modified":0,"renderable":0},{"_id":"source/_drafts/Spring/2017-05-08-Spring使用容器管理beans/modules.png","slug":"modules.png","post":"cj3o64ndn000xp5uke0mbjlbd","modified":0,"renderable":0},{"_id":"source/_posts/00001/Blog/2017-05-05-一些mac端好用端插件分享/muhammad.jpg","slug":"muhammad.jpg","post":"cj3o64net001wp5ukrndhj7in","modified":0,"renderable":0},{"_id":"source/_posts/00001/Blog/2017-05-05-自己动手搭建个人博客到优化/avatar.jpg","slug":"avatar.jpg","post":"cj3o64neu001xp5ukb6rh3zgl","modified":0,"renderable":0},{"_id":"source/_posts/00001/Git/2017-05-05-GitHub 学习之路/github.png","slug":"github.png","post":"cj3o64nev001yp5ukqfs68u39","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cj3o64nb6000bp5uk61amky9o","category_id":"cj3o64nba000ep5uknz03su7g","_id":"cj3o64nca000jp5uk0um74u6h"},{"post_id":"cj3o64ndt0016p5uks0wjyuaa","category_id":"cj3o64nba000ep5uknz03su7g","_id":"cj3o64ndx001cp5ukijino0a2"},{"post_id":"cj3o64neu001xp5ukb6rh3zgl","category_id":"cj3o64nba000ep5uknz03su7g","_id":"cj3o64new0021p5ukidpjpky3"}],"PostTag":[{"post_id":"cj3o64nai0001p5ukecsxsgn9","tag_id":"cj3o64nap0003p5ukh7j90hnk","_id":"cj3o64nax0007p5ukvbownruw"},{"post_id":"cj3o64nau0006p5ukrud2onaq","tag_id":"cj3o64nb00009p5uk684aidd9","_id":"cj3o64nbb000fp5ukmn837u1s"},{"post_id":"cj3o64nay0008p5ukkn6eacmq","tag_id":"cj3o64nb9000dp5ukuqwsacnn","_id":"cj3o64nbo000hp5uk9n9g0hcc"},{"post_id":"cj3o64nb0000ap5ukveyec3r9","tag_id":"cj3o64nbn000gp5uk0vfeudov","_id":"cj3o64ncb000kp5ukb6nb6ayj"},{"post_id":"cj3o64nb6000bp5uk61amky9o","tag_id":"cj3o64nc9000ip5ukzxfopuha","_id":"cj3o64ncb000mp5ukg1zjefqi"},{"post_id":"cj3o64nb8000cp5ukmhr4k63a","tag_id":"cj3o64ncb000lp5uk4dvd76u7","_id":"cj3o64ncd000np5ukivtx0uea"},{"post_id":"cj3o64ndl000tp5ukr1kf33yf","tag_id":"cj3o64nb00009p5uk684aidd9","_id":"cj3o64ndn000wp5ukuz8x23pb"},{"post_id":"cj3o64ndn000xp5uke0mbjlbd","tag_id":"cj3o64ndm000up5uks8m0y5wy","_id":"cj3o64ndr0010p5ukuzt9b02u"},{"post_id":"cj3o64ndk000sp5ukdfhsqfcb","tag_id":"cj3o64ndm000up5uks8m0y5wy","_id":"cj3o64ndr0012p5ukkepkdnzj"},{"post_id":"cj3o64ndr0011p5ukpvw82y1s","tag_id":"cj3o64ndm000up5uks8m0y5wy","_id":"cj3o64ndt0015p5uke3o0xsmn"},{"post_id":"cj3o64ndm000vp5ukfjp1jdkh","tag_id":"cj3o64ndm000up5uks8m0y5wy","_id":"cj3o64ndu0017p5uky0anhqrh"},{"post_id":"cj3o64ndt0016p5uks0wjyuaa","tag_id":"cj3o64nc9000ip5ukzxfopuha","_id":"cj3o64ndv001ap5ukxdhswlbh"},{"post_id":"cj3o64ndo000yp5ukds9zn8i9","tag_id":"cj3o64nds0014p5uk3t7tlwhm","_id":"cj3o64ndx001dp5ukc3s3kvbz"},{"post_id":"cj3o64ndw001bp5ukxdjtsz81","tag_id":"cj3o64nb00009p5uk684aidd9","_id":"cj3o64ndz001gp5uk7bddbd21"},{"post_id":"cj3o64nds0013p5ukgw4pczlf","tag_id":"cj3o64ndv0019p5ukaf1ecp2n","_id":"cj3o64ne0001ip5uks7ly2tvr"},{"post_id":"cj3o64ndx001ep5uknw77oz65","tag_id":"cj3o64nb00009p5uk684aidd9","_id":"cj3o64ne3001lp5ukm9pii4v8"},{"post_id":"cj3o64ndu0018p5ukufizmb0h","tag_id":"cj3o64ndv0019p5ukaf1ecp2n","_id":"cj3o64ne8001np5uka891c1hj"},{"post_id":"cj3o64ndz001hp5ukcde4xjga","tag_id":"cj3o64ne3001kp5ukicw7jqh2","_id":"cj3o64nea001qp5ukfildx958"},{"post_id":"cj3o64ne0001jp5uk4xsp5ejd","tag_id":"cj3o64nea001pp5uk87a26g0s","_id":"cj3o64nee001sp5uk9holrof1"},{"post_id":"cj3o64ne3001mp5ukcxz3nn80","tag_id":"cj3o64neb001rp5ukpl3y0eva","_id":"cj3o64nef001up5ukfsjd7pvi"},{"post_id":"cj3o64ne9001op5uka8n8fsr2","tag_id":"cj3o64neb001rp5ukpl3y0eva","_id":"cj3o64nef001vp5ukgo285hjc"},{"post_id":"cj3o64neu001xp5ukb6rh3zgl","tag_id":"cj3o64nc9000ip5ukzxfopuha","_id":"cj3o64nev001zp5ukdj5pbfvc"},{"post_id":"cj3o64nev001yp5ukqfs68u39","tag_id":"cj3o64new0020p5ukm3sk4p5x","_id":"cj3o64new0022p5uka20ceu0t"}],"Tag":[{"name":"java","_id":"cj3o64nap0003p5ukh7j90hnk"},{"name":"maven","_id":"cj3o64nb00009p5uk684aidd9"},{"name":"Struts2","_id":"cj3o64nb9000dp5ukuqwsacnn"},{"name":"struts2","_id":"cj3o64nbn000gp5uk0vfeudov"},{"name":"技术","_id":"cj3o64nc9000ip5ukzxfopuha"},{"name":"Android","_id":"cj3o64ncb000lp5uk4dvd76u7"},{"name":"Spring","_id":"cj3o64ndm000up5uks8m0y5wy"},{"name":"Spring Annotation","_id":"cj3o64nds0014p5uk3t7tlwhm"},{"name":"Spring 注解","_id":"cj3o64ndv0019p5ukaf1ecp2n"},{"name":"Git","_id":"cj3o64ne3001kp5ukicw7jqh2"},{"name":"java基础","_id":"cj3o64nea001pp5uk87a26g0s"},{"name":"web基础","_id":"cj3o64neb001rp5ukpl3y0eva"},{"name":"git","_id":"cj3o64new0020p5ukm3sk4p5x"}]}}